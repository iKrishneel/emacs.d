;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Provides a MATLAB-like plotting framework.

:mod:`~matplotlib.pylab` combines pyplot with numpy into a single namespace.
This is convenient for interactive work, but for programming it
is recommended that the namespaces be kept separate, e.g.::

    import numpy as np
    import matplotlib.pyplot as plt

    x = np.arange(0, 5, 0.1);
    y = np.sin(x)
    plt.plot(x, y)

\"\"\"" code nil nil [1 382])
            ("warnings" include nil nil [384 404])
            ("sys" include nil nil [384 404])
            ("matplotlib" include nil nil [406 423])
            ("matplotlib" include nil nil [424 474])
            ("matplotlib.cbook" include nil nil [475 551])
            ("matplotlib" include nil nil [552 584])
            ("matplotlib.figure" include nil nil [585 632])
            ("matplotlib.backend_bases" include nil nil [633 686])
            ("matplotlib.image" include nil nil [687 733])
            ("matplotlib.image" include nil nil [734 780])
            ("matplotlib" include nil nil [781 842])
            ("matplotlib.rcsetup" include nil nil [843 907])
            ("matplotlib.artist" include nil nil [908 955])
            ("matplotlib.artist" include nil nil [956 999])
            ("matplotlib.axes" include nil nil [1000 1058])
            ("matplotlib.projections" include nil nil [1059 1103])
            ("matplotlib" include nil nil [1104 1131])
            ("matplotlib.scale" include nil nil [1177 1237])
            ("matplotlib" include nil nil [1239 1264])
            ("matplotlib.cm" include nil nil [1265 1314])
            ("numpy" include nil nil [1316 1334])
            ("matplotlib.colors" include nil nil [1382 1432])
            ("matplotlib.lines" include nil nil [1464 1499])
            ("matplotlib.text" include nil nil [1500 1544])
            ("matplotlib.patches" include nil nil [1545 1609])
            ("matplotlib.widgets" include nil nil [1610 1676])
            ("ticker" include nil nil [1678 2039])
            ("_backend_selection" function (:documentation " If rcParams['backend_fallback'] is true, check to see if the
        current backend is compatible with the current running event
        loop, and if not switches to a compatible one.
    ") nil [2066 3516])
            ("_backend_selection" code nil nil [3517 3537])
            ("matplotlib.backends" include nil nil [3553 3596])
            ("new_figure_manager, draw_if_interactive, _show" code nil nil [3597 3659])
            ("" code nil nil [3683 3699])
            ("findobj" function (:arguments 
              ( ("o" variable nil (reparse-symbol function_parameters) [3712 3713])
                ("match" variable nil (reparse-symbol function_parameters) [3720 3725]))              ) nil [3700 3797])
            ("switch_backend" function
               (:documentation "
    Switch the default backend to newbackend.  This feature is
    **experimental**, and is only expected to work switching to an
    image backend.  Eg, if you have a bunch of PostScript scripts that
    you want to run from an interactive ipython session, you may want
    to switch to the PS backend before running them to avoid having a
    bunch of GUI windows popup.  If you try to interactively switch
    from one GUI backend to another, you will explode.

    Calling this command will close all open windows.
    "
                :arguments 
                  ( ("newbackend" variable nil (reparse-symbol function_parameters) [3817 3827]))                  )
                nil [3798 4630])
            ("show" function
               (:documentation "
    When running in ipython with its pylab mode, display all
    figures and return to the ipython prompt.

    In non-interactive mode, display all figures and block until
    the figures have been closed; in interactive mode it has no
    effect unless figures were created prior to a change from
    non-interactive to interactive mode (not recommended).  In
    that case it displays the figures but does not block.

    A single experimental keyword argument, *block*, may be
    set to True or False to override the blocking behavior
    described above.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [4641 4646])
                    ("kw" variable nil (reparse-symbol function_parameters) [4648 4652]))                  )
                nil [4632 5272])
            ("isinteractive" function (:documentation "
    Return *True* if matplotlib is in interactive mode, *False* otherwise.
    ") nil [5274 5425])
            ("ioff" function nil nil [5426 5505])
            ("ion" function nil nil [5506 5582])
            ("pause" function
               (:documentation "
    Pause for *interval* seconds.

    If there is an active figure it will be updated and displayed,
    and the gui event loop will run during the pause.

    If there is no active figure, or if a non-interactive backend
    is in use, this executes time.sleep(interval).

    This can be used for crude animation. For more complex
    animation, see :mod:`matplotlib.animation`.

    This function is experimental; its behavior may be changed
    or extended in a future release.

    "
                :arguments 
                  ( ("interval" variable nil (reparse-symbol function_parameters) [5593 5601]))                  )
                nil [5583 6527])
            ("" code nil nil [6552 6567])
            ("rc" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [6575 6580])
                ("kwargs" variable nil (reparse-symbol function_parameters) [6582 6590]))              ) nil [6568 6628])
            ("" code nil nil [6651 6674])
            ("rcdefaults" function nil nil [6675 6747])
            ("gci" function (:documentation "
    Get the current :class:`~matplotlib.cm.ScalarMappable` instance
    (image or patch collection), or *None* if no images or patch
    collections have been defined.  The commands
    :func:`~matplotlib.pyplot.imshow` and
    :func:`~matplotlib.pyplot.figimage` create
    :class:`~matplotlib.image.Image` instances, and the commands
    :func:`~matplotlib.pyplot.pcolor` and
    :func:`~matplotlib.pyplot.scatter` create
    :class:`~matplotlib.collections.Collection` instances.
    The current image is an attribute of the current axes, or the
    nearest earlier axes in the current figure that contains an
    image.
    ") nil [6877 7552])
            ("sci" function
               (:documentation "
    Set the current image (target of colormap commands like
    :func:`~matplotlib.pyplot.jet`, :func:`~matplotlib.pyplot.hot` or
    :func:`~matplotlib.pyplot.clim`).  The current image is an
    attribute of the current axes.
    "
                :arguments 
                  ( ("im" variable nil (reparse-symbol function_parameters) [7561 7563]))                  )
                nil [7553 7829])
            ("" code nil nil [7893 7900])
            ("setp" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [7910 7915])
                ("kwargs" variable nil (reparse-symbol function_parameters) [7917 7925]))              ) nil [7901 8002])
            ("figure" function
               (:documentation "
    call signature::

      figure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')


    Create a new figure and return a :class:`matplotlib.figure.Figure`
    instance.  If *num* = *None*, the figure number will be incremented and
    a new figure will be created.  The returned figure objects have a
    *number* attribute holding this number.

    If *num* is an integer, and ``figure(num)`` already exists, make it
    active and return a reference to it.  If ``figure(num)`` does not exist
    it will be created.  Numbering starts at 1, MATLAB style::

      figure(1)

    The same applies if *num* is a string. In this case *num* will be used
    as an explicit figure label::

      figure(\"today\")

    and in windowed backends, the window title will be set to this figure
    label.

    If you are creating many figures, make sure you explicitly call \"close\"
    on the figures you are not using, because this will enable pylab
    to properly clean up the memory.

    Optional keyword arguments:

      =========   =======================================================
      Keyword     Description
      =========   =======================================================
      figsize     width x height in inches; defaults to rc figure.figsize
      dpi         resolution; defaults to rc figure.dpi
      facecolor   the background color; defaults to rc figure.facecolor
      edgecolor   the border color; defaults to rc figure.edgecolor
      =========   =======================================================

    rcParams defines the default values, which can be modified in the
    matplotlibrc file

    *FigureClass* is a :class:`~matplotlib.figure.Figure` or derived
    class that will be passed on to :meth:`new_figure_manager` in the
    backends which allows you to hook custom Figure classes into the
    pylab interface.  Additional kwargs will be passed on to your
    figure init function.
    "
                :arguments 
                  ( ("num" variable nil (reparse-symbol function_parameters) [8034 8037])
                    ("figsize" variable nil (reparse-symbol function_parameters) [8102 8109])
                    ("dpi" variable nil (reparse-symbol function_parameters) [8163 8166])
                    ("facecolor" variable nil (reparse-symbol function_parameters) [8220 8229])
                    ("edgecolor" variable nil (reparse-symbol function_parameters) [8283 8292])
                    ("frameon" variable nil (reparse-symbol function_parameters) [8346 8353])
                    ("FigureClass" variable nil (reparse-symbol function_parameters) [8373 8384])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [8406 8414]))                  )
                nil [8023 12435])
            ("gcf" function nil nil [12436 12650])
            ("fignum_exists" variable nil nil [12651 12696])
            ("get_fignums" function nil nil [12698 12848])
            ("get_figlabels" function nil nil [12849 13081])
            ("get_current_fig_manager" function nil nil [13082 13323])
            ("" code nil nil [13346 13376])
            ("connect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [13389 13390])
                ("func" variable nil (reparse-symbol function_parameters) [13392 13396]))              ) nil [13377 13464])
            ("" code nil nil [13487 13520])
            ("disconnect" function (:arguments 
              ( ("cid" variable nil (reparse-symbol function_parameters) [13536 13539]))              ) nil [13521 13606])
            ("close" function
               (:documentation "
    Close a figure window

    ``close()`` by itself closes the current figure

    ``close(h)`` where *h* is a :class:`Figure` instance, closes that figure

    ``close(num)`` closes figure number *num*

    ``close(name)`` where *name* is a string, closes figure with that label

    ``close('all')`` closes all the figure windows
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [13617 13622]))                  )
                nil [13607 14807])
            ("clf" function (:documentation "
    Clear the current figure
    ") nil [14809 14907])
            ("draw" function (:documentation "
    Redraw the current figure.

    This is used in interactive mode to update a figure that
    has been altered using one or more plot object method calls;
    it is not needed if figure modification is done entirely
    with pyplot functions, if a sequence of modifications ends
    with a pyplot function, or if matplotlib is in non-interactive
    mode and the sequence of modifications ends with :func:`show` or
    :func:`savefig`.

    A more object-oriented alternative, given any
    :class:`~matplotlib.figure.Figure` instance, :attr:`fig`, that
    was created using a :mod:`~matplotlib.pyplot` function, is::

        fig.canvas.draw()


    ") nil [14908 15631])
            ("" code nil nil [15654 15670])
            ("savefig" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [15683 15688])
                ("kwargs" variable nil (reparse-symbol function_parameters) [15690 15698]))              ) nil [15671 15757])
            ("" code nil nil [15780 15795])
            ("ginput" function
               (:documentation "
    Blocking call to interact with the figure.

    This will wait for *n* clicks from the user and return a list of the
    coordinates of each click.

    If *timeout* is negative, does not timeout.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [15807 15812])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [15814 15822]))                  )
                nil [15796 16083])
            ("" code nil nil [16106 16133])
            ("waitforbuttonpress" function
               (:documentation "
    Blocking call to interact with the figure.

    This will wait for *n* key or mouse clicks from the user and
    return a list containing True's for keyboard clicks and False's
    for mouse clicks.

    If *timeout* is negative, does not timeout.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [16157 16162])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [16164 16172]))                  )
                nil [16134 16496])
            ("" code nil nil [16549 16562])
            ("figtext" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [16575 16580])
                ("kwargs" variable nil (reparse-symbol function_parameters) [16582 16590]))              ) nil [16563 16674])
            ("" code nil nil [16697 16714])
            ("suptitle" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [16728 16733])
                ("kwargs" variable nil (reparse-symbol function_parameters) [16735 16743]))              ) nil [16715 16830])
            ("" code nil nil [16850 16925])
            ("" code nil nil [16948 16965])
            ("figimage" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [16979 16984])
                ("kwargs" variable nil (reparse-symbol function_parameters) [16986 16994]))              ) nil [16966 17241])
            ("figlegend" function
               (:documentation "
    Place a legend in the figure.

    *labels*
      a sequence of strings

    *handles*
      a sequence of :class:`~matplotlib.lines.Line2D` or
      :class:`~matplotlib.patches.Patch` instances

    *loc*
      can be a string or an integer specifying the legend
      location

    A :class:`matplotlib.legend.Legend` instance is returned.

    Example::

      figlegend( (line1, line2, line3),
                 ('label1', 'label2', 'label3'),
                 'upper right' )

    .. seealso::

       :func:`~matplotlib.pyplot.legend`

    "
                :arguments 
                  ( ("handles" variable nil (reparse-symbol function_parameters) [17256 17263])
                    ("labels" variable nil (reparse-symbol function_parameters) [17265 17271])
                    ("loc" variable nil (reparse-symbol function_parameters) [17273 17276])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [17278 17286]))                  )
                nil [17242 17942])
            ("hold" function
               (:documentation "
    Set the hold state.  If *b* is None (default), toggle the
    hold state, else set the hold state to boolean value *b*::

      hold()      # toggle hold
      hold(True)  # hold is on
      hold(False) # hold is off

    When *hold* is *True*, subsequent plot commands will be added to
    the current axes.  When *hold* is *False*, the current axes and
    figure will be cleared on the next plot command.
    "
                :arguments 
                  ( ("b" variable nil (reparse-symbol function_parameters) [17984 17985]))                  )
                nil [17975 18685])
            ("ishold" function (:documentation "
    Return the hold status of the current axes
    ") nil [18686 18789])
            ("over" function
               (:documentation "
    over calls::

      func(*args, **kwargs)

    with ``hold(True)`` and then restores the hold state.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [18799 18803])
                    ("args" variable nil (reparse-symbol function_parameters) [18805 18810])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [18812 18820]))                  )
                nil [18790 19014])
            ("axes" function
               (:documentation "
    Add an axes at position rect specified by:

    - ``axes()`` by itself creates a default full ``subplot(111)`` window axis.

    - ``axes(rect, axisbg='w')`` where *rect* = [left, bottom, width,
      height] in normalized (0, 1) units.  *axisbg* is the background
      color for the axis, default white.

    - ``axes(h)`` where *h* is an axes instance makes *h* the current
      axis.  An :class:`~matplotlib.axes.Axes` instance is returned.

    =======   ============   ================================================
    kwarg     Accepts        Desctiption
    =======   ============   ================================================
    axisbg    color          the axes background color
    frameon   [True|False]   display the frame?
    sharex    otherax        current axes shares xaxis attribute with otherax
    sharey    otherax        current axes shares yaxis attribute with otherax
    polar     [True|False]   use a polar axes?
    =======   ============   ================================================

    Examples:

    * :file:`examples/pylab_examples/axes_demo.py` places custom axes.
    * :file:`examples/pylab_examples/shared_axis_demo.py` uses
      *sharex* and *sharey*.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [19038 19043])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [19045 19053]))                  )
                nil [19029 20629])
            ("delaxes" function
               (:documentation "
    ``delaxes(ax)``: remove *ax* from the current figure.  If *ax*
    doesn't exist, an error will be raised.

    ``delaxes()``: delete the current axes
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [20642 20647]))                  )
                nil [20630 20962])
            ("sca" function
               (:documentation "
    Set the current Axes instance to *ax*.  The current Figure
    is updated to the parent of *ax*.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [20971 20973]))                  )
                nil [20963 21386])
            ("gca" function
               (:documentation "
    Return the current axis instance.  This can be used to control
    axis properties either using set or the
    :class:`~matplotlib.axes.Axes` methods, for example, setting the
    xaxis range::

      plot(t,s)
      set(gca(), 'xlim', [0,10])

    or::

      plot(t,s)
      a = gca()
      a.set_xlim([0,10])

    "
                :arguments 
                  ( ("kwargs" variable nil (reparse-symbol function_parameters) [21396 21404]))                  )
                nil [21388 21785])
            ("subplot" function
               (:documentation "
    Create a subplot command, creating axes with::

      subplot(numRows, numCols, plotNum)

    where *plotNum* = 1 is the first plot number and increasing *plotNums*
    fill rows first.  max(*plotNum*) == *numRows* * *numCols*

    You can leave out the commas if *numRows* <= *numCols* <=
    *plotNum* < 10, as in::

      subplot(211)    # 2 rows, 1 column, first (upper) plot

    ``subplot(111)`` is the default axis.

    New subplots that overlap old will delete the old axes.  If you do
    not want this behavior, use
    :meth:`~matplotlib.figure.Figure.add_subplot` or the
    :func:`~matplotlib.pyplot.axes` command.  Eg.::

      from pylab import *
      plot([1,2,3])  # implicitly creates subplot(111)
      subplot(211)   # overlaps, subplot(111) is killed
      plot(rand(12), rand(12))
      subplot(212, axisbg='y') # creates 2nd subplot with yellow background

    Keyword arguments:

      *axisbg*:
        The background color of the subplot, which can be any valid
        color specifier.  See :mod:`matplotlib.colors` for more
        information.

      *polar*:
        A boolean flag indicating whether the subplot plot should be
        a polar projection.  Defaults to *False*.

      *projection*:
        A string giving the name of a custom projection to be used
        for the subplot. This projection must have been previously
        registered. See :mod:`matplotlib.projections`.

    .. seealso::

        :func:`~matplotlib.pyplot.axes`
            For additional information on :func:`axes` and
            :func:`subplot` keyword arguments.

        :file:`examples/pylab_examples/polar_scatter.py`
            For an example

    **Example:**

    .. plot:: mpl_examples/pylab_examples/subplot_demo.py

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [21829 21834])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [21836 21844]))                  )
                nil [21817 23916])
            ("subplots" function
               (:documentation "
    Create a figure with a set of subplots already made.

    This utility wrapper makes it convenient to create common layouts of
    subplots, including the enclosing figure object, in a single call.

    Keyword arguments:

      *nrows* : int
        Number of rows of the subplot grid.  Defaults to 1.

      *ncols* : int
        Number of columns of the subplot grid.  Defaults to 1.

      *sharex* : bool
        If *True*, the X axis will be shared amongst all subplots.  If
        *True* and you have multiple rows, the x tick labels on all but
        the last row of plots will have visible set to *False*

      *sharey* : bool
        If *True*, the Y axis will be shared amongst all subplots. If
        *True* and you have multiple columns, the y tick labels on all but
        the first column of plots will have visible set to *False*

      *squeeze* : bool
        If *True*, extra dimensions are squeezed out from the
        returned axis object:

        - if only one subplot is constructed (nrows=ncols=1), the
          resulting single Axis object is returned as a scalar.

        - for Nx1 or 1xN subplots, the returned object is a 1-d numpy
          object array of Axis objects are returned as numpy 1-d
          arrays.

        - for NxM subplots with N>1 and M>1 are returned as a 2d
          array.

        If *False*, no squeezing at all is done: the returned axis
        object is always a 2-d array contaning Axis instances, even if it
        ends up being 1x1.

      *subplot_kw* : dict
        Dict with keywords passed to the
        :meth:`~matplotlib.figure.Figure.add_subplot` call used to
        create each subplots.

      *fig_kw* : dict
        Dict with keywords passed to the :func:`figure` call.  Note that all
        keywords not recognized above will be automatically included here.

    Returns:

    fig, ax : tuple

      - *fig* is the :class:`matplotlib.figure.Figure` object

      - *ax* can be either a single axis object or an array of axis
        objects if more than one supblot was created.  The dimensions
        of the resulting array can be controlled with the squeeze
        keyword, see above.

    Examples::

        x = np.linspace(0, 2*np.pi, 400)
        y = np.sin(x**2)

        # Just a figure and one subplot
        f, ax = plt.subplots()
        ax.plot(x, y)
        ax.set_title('Simple plot')

        # Two subplots, unpack the output array immediately
        f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)
        ax1.plot(x, y)
        ax1.set_title('Sharing Y axis')
        ax2.scatter(x, y)

        # Four polar axes
        plt.subplots(2, 2, subplot_kw=dict(polar=True))
    "
                :arguments 
                  ( ("nrows" variable nil (reparse-symbol function_parameters) [23931 23936])
                    ("ncols" variable nil (reparse-symbol function_parameters) [23940 23945])
                    ("sharex" variable nil (reparse-symbol function_parameters) [23949 23955])
                    ("sharey" variable nil (reparse-symbol function_parameters) [23963 23969])
                    ("squeeze" variable nil (reparse-symbol function_parameters) [23977 23984])
                    ("subplot_kw" variable nil (reparse-symbol function_parameters) [24007 24017])
                    ("fig_kw" variable nil (reparse-symbol function_parameters) [24024 24032]))                  )
                nil [23918 28500])
            ("gridspec" include nil nil [28502 28531])
            ("subplot2grid" function
               (:documentation "

    It creates a subplot in a grid of *shape*, at location of *loc*,
    spanning *rowspan*, *colspan* cells in each direction.
    The index for loc is 0-based. ::

      subplot2grid(shape, loc, rowspan=1, colspan=1)

    is identical to ::

      gridspec=GridSpec(shape[0], shape[2])
      subplotspec=gridspec.new_subplotspec(loc, rowspan, colspan)
      subplot(subplotspec)


    "
                :arguments 
                  ( ("shape" variable nil (reparse-symbol function_parameters) [28549 28554])
                    ("loc" variable nil (reparse-symbol function_parameters) [28556 28559])
                    ("rowspan" variable nil (reparse-symbol function_parameters) [28561 28568])
                    ("colspan" variable nil (reparse-symbol function_parameters) [28572 28579])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [28583 28591]))                  )
                nil [28532 29511])
            ("twinx" function
               (:documentation "
    Make a second axes overlay *ax* (or the current axes if *ax* is
    *None*) sharing the xaxis.  The ticks for *ax2* will be placed on
    the right, and the *ax2* instance is returned.

    .. seealso::

       :file:`examples/api_examples/two_scales.py`
          For an example
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [29523 29525]))                  )
                nil [29513 29931])
            ("twiny" function
               (:documentation "
    Make a second axes overlay *ax* (or the current axes if *ax* is
    *None*) sharing the yaxis.  The ticks for *ax2* will be placed on
    the top, and the *ax2* instance is returned.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [29943 29945]))                  )
                nil [29933 30254])
            ("subplots_adjust" function
               (:documentation "
    call signature::

      subplots_adjust(left=None, bottom=None, right=None, top=None,
                      wspace=None, hspace=None)

    Tune the subplot layout via the
    :class:`matplotlib.figure.SubplotParams` mechanism.  The parameter
    meanings (and suggested defaults) are::

      left  = 0.125  # the left side of the subplots of the figure
      right = 0.9    # the right side of the subplots of the figure
      bottom = 0.1   # the bottom of the subplots of the figure
      top = 0.9      # the top of the subplots of the figure
      wspace = 0.2   # the amount of width reserved for blank space between subplots
      hspace = 0.2   # the amount of height reserved for white space between subplots

    The actual defaults are controlled by the rc file
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [30277 30282])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [30284 30292]))                  )
                nil [30257 31171])
            ("subplot_tool" function
               (:documentation "
    Launch a subplot tool window for *targetfig* (default gcf).

    A :class:`matplotlib.widgets.SubplotTool` instance is returned.
    "
                :arguments 
                  ( ("targetfig" variable nil (reparse-symbol function_parameters) [31190 31199]))                  )
                nil [31173 32053])
            ("tight_layout" function
               (:documentation "
    Adjust subplot parameters to give specified padding.

    Parameters:

    pad : float
        padding between the figure edge and the edges of subplots, as a fraction of the font-size.
    h_pad, w_pad : float
        padding (height/width) between edges of adjacent subplots.
        Defaults to `pad_inches`.
    "
                :arguments 
                  ( ("pad" variable nil (reparse-symbol function_parameters) [32073 32076])
                    ("h_pad" variable nil (reparse-symbol function_parameters) [32082 32087])
                    ("w_pad" variable nil (reparse-symbol function_parameters) [32094 32099]))                  )
                nil [32056 32538])
            ("box" function
               (:documentation "
    Turn the axes box on or off according to *on*.
    *on* may be a boolean or a string, 'on' or 'off'.

    If *on* is *None*, toggle state.
    "
                :arguments 
                  ( ("on" variable nil (reparse-symbol function_parameters) [32549 32551]))                  )
                nil [32541 32866])
            ("title" function
               (:documentation "
    Set the title of the current axis to *s*.

    Default font override is::

      override = {'fontsize': 'medium',
                  'verticalalignment': 'baseline',
                  'horizontalalignment': 'center'}

    .. seealso::

       :func:`~matplotlib.pyplot.text`
           for information on how override and the optional args work.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [32877 32878])
                    ("args" variable nil (reparse-symbol function_parameters) [32880 32885])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [32887 32895]))                  )
                nil [32867 33348])
            ("axis" function
               (:documentation "
    Set/Get the axis properties:

      >>> axis()

    returns the current axes limits ``[xmin, xmax, ymin, ymax]``.

      >>> axis(v)

    sets the min and max of the x and y axes, with
    ``v = [xmin, xmax, ymin, ymax]``.

      >>> axis('off')

    turns off the axis lines and labels.

      >>> axis('equal')

    changes limits of *x* or *y* axis so that equal increments of *x*
    and *y* have the same length; a circle is circular.

      >>> axis('scaled')

    achieves the same result by changing the dimensions of the plot box instead
    of the axis data limits.

      >>> axis('tight')

    changes *x* and *y* axis limits such that all data is shown. If
    all data is already shown, it will move it to the center of the
    figure without modifying (*xmax* - *xmin*) or (*ymax* -
    *ymin*). Note this is slightly different than in MATLAB.

      >>> axis('image')

    is 'scaled' with the axis limits equal to the data limits.

      >>> axis('auto')

    and

      >>> axis('normal')

    are deprecated. They restore default behavior; axis limits are automatically
    scaled to make the data fit comfortably within the plot box.

    if ``len(*v)==0``, you can pass in *xmin*, *xmax*, *ymin*, *ymax*
    as kwargs selectively to alter just those limits without changing
    the others.

    The xmin, xmax, ymin, ymax tuple is returned

    .. seealso::

        :func:`xlim`, :func:`ylim`
           For setting the x- and y-limits individually.
    "
                :arguments 
                  ( ("v" variable nil (reparse-symbol function_parameters) [33373 33375])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [33377 33385]))                  )
                nil [33364 34964])
            ("xlabel" function
               (:documentation "
    Set the *x* axis label of the current axis to *s*

    Default override is::

      override = {
          'fontsize'            : 'small',
          'verticalalignment'   : 'top',
          'horizontalalignment' : 'center'
          }

    .. seealso::

        :func:`~matplotlib.pyplot.text`
            For information on how override and the optional args work
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [34976 34977])
                    ("args" variable nil (reparse-symbol function_parameters) [34979 34984])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [34986 34994]))                  )
                nil [34965 35468])
            ("ylabel" function
               (:documentation "
    Set the *y* axis label of the current axis to *s*.

    Defaults override is::

        override = {
           'fontsize'            : 'small',
           'verticalalignment'   : 'center',
           'horizontalalignment' : 'right',
           'rotation'='vertical' : }

    .. seealso::

        :func:`~matplotlib.pyplot.text`
            For information on how override and the optional args
            work.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [35480 35481])
                    ("args" variable nil (reparse-symbol function_parameters) [35483 35488])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [35490 35498]))                  )
                nil [35469 36019])
            ("xlim" function
               (:documentation "
    Set/Get the xlimits of the current axes::

      xmin, xmax = xlim()   # return the current xlim
      xlim( (xmin, xmax) )  # set the xlim to xmin, xmax
      xlim( xmin, xmax )    # set the xlim to xmin, xmax

    If you do not specify args, you can pass the xmin and xmax as
    kwargs, eg.::

      xlim(xmax=3) # adjust the max leaving min unchanged
      xlim(xmin=1) # adjust the min leaving max unchanged

    Setting limits turns autoscaling off for the x-axis.

    The new axis limits are returned as a length 2 tuple.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [36033 36038])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [36040 36048]))                  )
                nil [36024 36758])
            ("ylim" function
               (:documentation "
    Set/Get the ylimits of the current axes::

      ymin, ymax = ylim()   # return the current ylim
      ylim( (ymin, ymax) )  # set the ylim to ymin, ymax
      ylim( ymin, ymax )    # set the ylim to ymin, ymax

    If you do not specify args, you can pass the *ymin* and *ymax* as
    kwargs, eg.::

      ylim(ymax=3) # adjust the max leaving min unchanged
      ylim(ymin=1) # adjust the min leaving max unchanged

    Setting limits turns autoscaling off for the y-axis.

    The new axis limits are returned as a length 2 tuple.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [36769 36774])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [36776 36784]))                  )
                nil [36760 37497])
            ("xscale" function
               (:documentation "
    call signature::

      xscale(scale, **kwargs)

    Set the scaling for the x-axis: %(scale)s

    Different keywords may be accepted, depending on the scale:

    %(scale_docs)s
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [37536 37541])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [37543 37551]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [37499 37830])
            ("yscale" function
               (:documentation "
    call signature::

      yscale(scale, **kwargs)

    Set the scaling for the y-axis: %(scale)s

    Different keywords may be accepted, depending on the scale:

    %(scale_docs)s
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [37868 37873])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [37875 37883]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [37831 38162])
            ("xticks" function
               (:documentation "
    Set/Get the xlimits of the current ticklocs and labels::

      # return locs, labels where locs is an array of tick locations and
      # labels is an array of tick labels.
      locs, labels = xticks()

      # set the locations of the xticks
      xticks( arange(6) )

      # set the locations and labels of the xticks
      xticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )

    The keyword args, if any, are :class:`~matplotlib.text.Text`
    properties. For example, to rotate long labels::

      xticks( arange(12), calendar.month_name[1:13], rotation=17 )
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [38174 38179])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [38181 38189]))                  )
                nil [38163 39335])
            ("yticks" function
               (:documentation "
    Set/Get the ylimits of the current ticklocs and labels::

      # return locs, labels where locs is an array of tick locations and
      # labels is an array of tick labels.
      locs, labels = yticks()

      # set the locations of the yticks
      yticks( arange(6) )

      # set the locations and labels of the yticks
      yticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )

    The keyword args, if any, are :class:`~matplotlib.text.Text`
    properties. For example, to rotate long labels::

      yticks( arange(12), calendar.month_name[1:13], rotation=45 )
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [39347 39352])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [39354 39362]))                  )
                nil [39336 40539])
            ("minorticks_on" function (:documentation "
    Display minor ticks on the current plot.

    Displaying minor ticks reduces performance; turn them off using
    minorticks_off() if drawing speed is a problem.
    ") nil [40540 40795])
            ("minorticks_off" function (:documentation "
    Remove minor ticks from the current plot.
    ") nil [40796 40933])
            ("rgrids" function
               (:documentation "
    Set/Get the radial locations of the gridlines and ticklabels on a
    polar plot.

    call signatures::

      lines, labels = rgrids()
      lines, labels = rgrids(radii, labels=None, angle=22.5, **kwargs)

    When called with no arguments, :func:`rgrid` simply returns the
    tuple (*lines*, *labels*), where *lines* is an array of radial
    gridlines (:class:`~matplotlib.lines.Line2D` instances) and
    *labels* is an array of tick labels
    (:class:`~matplotlib.text.Text` instances). When called with
    arguments, the labels will appear at the specified radial
    distances and angles.

    *labels*, if not *None*, is a len(*radii*) list of strings of the
    labels to use at each angle.

    If *labels* is None, the rformatter will be used

    Examples::

      # set the locations of the radial gridlines and labels
      lines, labels = rgrids( (0.25, 0.5, 1.0) )

      # set the locations and labels of the radial gridlines and labels
      lines, labels = rgrids( (0.25, 0.5, 1.0), ('Tom', 'Dick', 'Harry' )

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [40945 40950])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [40952 40960]))                  )
                nil [40934 42439])
            ("thetagrids" function
               (:documentation "
    Set/Get the theta locations of the gridlines and ticklabels.

    If no arguments are passed, return a tuple (*lines*, *labels*)
    where *lines* is an array of radial gridlines
    (:class:`~matplotlib.lines.Line2D` instances) and *labels* is an
    array of tick labels (:class:`~matplotlib.text.Text` instances)::

      lines, labels = thetagrids()

    Otherwise the syntax is::

      lines, labels = thetagrids(angles, labels=None, fmt='%d', frac = 1.1)

    set the angles at which to place the theta grids (these gridlines
    are equal along the theta dimension).

    *angles* is in degrees.

    *labels*, if not *None*, is a len(angles) list of strings of the
    labels to use at each angle.

    If *labels* is *None*, the labels will be ``fmt%angle``.

    *frac* is the fraction of the polar axes radius at which to place
    the label (1 is the edge). Eg. 1.05 is outside the axes and 0.95
    is inside the axes.

    Return value is a list of tuples (*lines*, *labels*):

      - *lines* are :class:`~matplotlib.lines.Line2D` instances

      - *labels* are :class:`~matplotlib.text.Text` instances.

    Note that on input, the *labels* argument is a list of strings,
    and on output it is a list of :class:`~matplotlib.text.Text`
    instances.

    Examples::

      # set the locations of the radial gridlines and labels
      lines, labels = thetagrids( range(45,360,90) )

      # set the locations and labels of the radial gridlines and labels
      lines, labels = thetagrids( range(45,360,90), ('NE', 'NW', 'SW','SE') )
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [42455 42460])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [42462 42470]))                  )
                nil [42440 44489])
            ("plotting" function (:documentation "
    Plotting commands

    =============== =========================================================
    Command         Description
    =============== =========================================================
    axes            Create a new axes
    axis            Set or return the current axis limits
    bar             make a bar chart
    boxplot         make a box and whiskers chart
    cla             clear current axes
    clabel          label a contour plot
    clf             clear a figure window
    close           close a figure window
    colorbar        add a colorbar to the current figure
    cohere          make a plot of coherence
    contour         make a contour plot
    contourf        make a filled contour plot
    csd             make a plot of cross spectral density
    draw            force a redraw of the current figure
    errorbar        make an errorbar graph
    figlegend       add a legend to the figure
    figimage        add an image to the figure, w/o resampling
    figtext         add text in figure coords
    figure          create or change active figure
    fill            make filled polygons
    fill_between    make filled polygons between two sets of y-values
    fill_betweenx   make filled polygons between two sets of x-values
    gca             return the current axes
    gcf             return the current figure
    gci             get the current image, or None
    getp            get a graphics property
    hist            make a histogram
    hold            set the hold state on current axes
    legend          add a legend to the axes
    loglog          a log log plot
    imread          load image file into array
    imsave          save array as an image file
    imshow          plot image data
    matshow         display a matrix in a new figure preserving aspect
    pcolor          make a pseudocolor plot
    plot            make a line plot
    plotfile        plot data from a flat file
    psd             make a plot of power spectral density
    quiver          make a direction field (arrows) plot
    rc              control the default params
    savefig         save the current figure
    scatter         make a scatter plot
    setp            set a graphics property
    semilogx        log x axis
    semilogy        log y axis
    show            in non-interactive mode, display all figures and block
                    until they have been closed; in interactive mode,
                    show generally has no effect.
    specgram        a spectrogram plot
    stem            make a stem plot
    subplot         make a subplot (numrows, numcols, axesnum)
    table           add a table to the axes
    text            add some text at location x,y to the current axes
    title           add a title to the current axes
    xlabel          add an xlabel to the current axes
    ylabel          add a ylabel to the current axes
    =============== =========================================================

    The following commands will set the default colormap accordingly:

    * autumn
    * bone
    * cool
    * copper
    * flag
    * gray
    * hot
    * hsv
    * jet
    * pink
    * prism
    * spring
    * summer
    * winter
    * spectral

    ") nil [44512 47820])
            ("get_plot_commands" function nil nil [47822 48370])
            ("colors" function (:documentation "
    This is a do-nothing function to provide you with help on how
    matplotlib handles colors.

    Commands which take color arguments can use several formats to
    specify the colors.  For the basic builtin colors, you can use a
    single letter

      =====   =======
      Alias   Color
      =====   =======
      'b'     blue
      'g'     green
      'r'     red
      'c'     cyan
      'm'     magenta
      'y'     yellow
      'k'     black
      'w'     white
      =====   =======

    For a greater range of colors, you have two options.  You can
    specify the color using an html hex string, as in::

      color = '#eeefff'

    or you can pass an R,G,B tuple, where each of R,G,B are in the
    range [0,1].

    You can also use any legal html name for a color, for example::

      color = 'red',
      color = 'burlywood'
      color = 'chartreuse'

    The example below creates a subplot with a dark
    slate gray background

       subplot(111, axisbg=(0.1843, 0.3098, 0.3098))

    Here is an example that creates a pale turqoise title::

      title('Is this the best color?', color='#afeeee')

    ") nil [48371 49537])
            ("colormaps" function (:documentation "
    matplotlib provides the following colormaps.

    * autumn
    * bone
    * cool
    * copper
    * flag
    * gray
    * hot
    * hsv
    * jet
    * pink
    * prism
    * spring
    * summer
    * winter
    * spectral

    You can set the colormap for an image, pcolor, scatter, etc,
    either as a keyword argument::

      imshow(X, cmap=cm.hot)

    or post-hoc using the corresponding pylab interface function::

      imshow(X)
      hot()
      jet()

    In interactive mode, this will update the colormap allowing you to
    see which one works best for your data.
    ") nil [49540 50165])
            ("matplotlib.colorbar" include nil nil [50233 50259])
            ("colorbar" function (:arguments 
              ( ("mappable" variable nil (reparse-symbol function_parameters) [50273 50281])
                ("cax" variable nil (reparse-symbol function_parameters) [50288 50291])
                ("ax" variable nil (reparse-symbol function_parameters) [50298 50300])
                ("kw" variable nil (reparse-symbol function_parameters) [50307 50311]))              ) nil [50260 50613])
            ("colorbar" variable nil nil [50613 50664])
            ("clim" function
               (:documentation "
    Set the color limits of the current image

    To apply clim to all axes images do::

      clim(0, 0.5)

    If either *vmin* or *vmax* is None, the image min/max respectively
    will be used for color scaling.

    If you want to set the clim of multiple images,
    use, for example::

      for im in gca().get_images():
          im.set_clim(0, 0.05)

    "
                :arguments 
                  ( ("vmin" variable nil (reparse-symbol function_parameters) [50675 50679])
                    ("vmax" variable nil (reparse-symbol function_parameters) [50686 50690]))                  )
                nil [50666 51242])
            ("set_cmap" function (:arguments 
              ( ("cmap" variable nil (reparse-symbol function_parameters) [51256 51260]))              ) nil [51243 51792])
            ("" code nil nil [51816 51825])
            ("imread" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [51837 51842])
                ("kwargs" variable nil (reparse-symbol function_parameters) [51844 51852]))              ) nil [51826 51891])
            ("" code nil nil [51914 51923])
            ("imsave" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [51935 51940])
                ("kwargs" variable nil (reparse-symbol function_parameters) [51942 51950]))              ) nil [51924 51989])
            ("matshow" function
               (:documentation "
    Display an array as a matrix in a new figure window.

    The origin is set at the upper left hand corner and rows (first
    dimension of the array) are displayed horizontally.  The aspect
    ratio of the figure window is that of the array, unless this would
    make an excessively short or narrow figure.

    Tick labels for the xaxis are placed on top.

    With the exception of *fignum*, keyword arguments are passed to
    :func:`~matplotlib.pyplot.imshow`.  You may set the *origin*
    kwarg to \"lower\" if you want the first row in the array to be
    at the bottom instead of the top.


    *fignum*: [ None | integer | False ]
      By default, :func:`matshow` creates a new figure window with
      automatic numbering.  If *fignum* is given as an integer, the
      created figure will use this figure number.  Because of how
      :func:`matshow` tries to set the figure aspect ratio to be the
      one of the array, if you provide the number of an already
      existing figure, strange things may happen.

      If *fignum* is *False* or 0, a new figure window will **NOT** be created.
    "
                :arguments 
                  ( ("A" variable nil (reparse-symbol function_parameters) [52002 52003])
                    ("fignum" variable nil (reparse-symbol function_parameters) [52005 52011])
                    ("kw" variable nil (reparse-symbol function_parameters) [52018 52022]))                  )
                nil [51990 53515])
            ("polar" function
               (:documentation "
    call signature::

      polar(theta, r, **kwargs)

    Make a polar plot.  Multiple *theta*, *r* arguments are supported,
    with format strings, as in :func:`~matplotlib.pyplot.plot`.

    An optional kwarg *resolution* sets the number of vertices to
    interpolate between each pair of points.  The default is 1,
    which disables interpolation.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [53526 53531])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [53533 53541]))                  )
                nil [53516 54087])
            ("plotfile" function
               (:documentation "
    Plot the data in *fname*

    *cols* is a sequence of column identifiers to plot.  An identifier
    is either an int or a string.  If it is an int, it indicates the
    column number.  If it is a string, it indicates the column header.
    matplotlib will make column headers lower case, replace spaces with
    underscores, and remove all illegal characters; so ``'Adj Close*'``
    will have name ``'adj_close'``.

    - If len(*cols*) == 1, only that column will be plotted on the *y* axis.

    - If len(*cols*) > 1, the first element will be an identifier for
      data for the *x* axis and the remaining elements will be the
      column indexes for multiple subplots if *subplots* is *True*
      (the default), or for lines in a single subplot if *subplots*
      is *False*.

    *plotfuncs*, if not *None*, is a dictionary mapping identifier to
    an :class:`~matplotlib.axes.Axes` plotting function as a string.
    Default is 'plot', other choices are 'semilogy', 'fill', 'bar',
    etc.  You must use the same type of identifier in the *cols*
    vector as you use in the *plotfuncs* dictionary, eg., integer
    column numbers in both or column names in both. If *subplots*
    is *False*, then including any function such as 'semilogy'
    that changes the axis scaling will set the scaling for all
    columns.

    *comments*, *skiprows*, *checkrows*, *delimiter*, and *names*
    are all passed on to :func:`matplotlib.pylab.csv2rec` to
    load the data into a record array.

    If *newfig* is *True*, the plot always will be made in a new figure;
    if *False*, it will be made in the current figure if one exists,
    else in a new figure.

    kwargs are passed on to plotting functions.

    Example usage::

      # plot the 2nd and 4th column against the 1st in two subplots
      plotfile(fname, (0,1,3))

      # plot using column names; specify an alternate plot type for volume
      plotfile(fname, ('date', 'volume', 'adj_close'),
                                    plotfuncs={'volume': 'semilogy'})

    Note: plotfile is intended as a convenience for quickly plotting
    data from flat files; it is not intended as an alternative
    interface to general plotting with pyplot or matplotlib.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [54101 54106])
                    ("cols" variable nil (reparse-symbol function_parameters) [54108 54112])
                    ("plotfuncs" variable nil (reparse-symbol function_parameters) [54119 54128])
                    ("comments" variable nil (reparse-symbol function_parameters) [54148 54156])
                    ("skiprows" variable nil (reparse-symbol function_parameters) [54162 54170])
                    ("checkrows" variable nil (reparse-symbol function_parameters) [54174 54183])
                    ("delimiter" variable nil (reparse-symbol function_parameters) [54187 54196])
                    ("names" variable nil (reparse-symbol function_parameters) [54202 54207])
                    ("subplots" variable nil (reparse-symbol function_parameters) [54227 54235])
                    ("newfig" variable nil (reparse-symbol function_parameters) [54242 54248])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [54268 54276]))                  )
                nil [54088 58402])
            ("autogen_docstring" function
               (:documentation "Autogenerated wrappers will get their docstring from a base function
    with an addendum."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [58426 58430]))                  )
                nil [58404 58733])
            ("" code nil nil [58851 58861])
            ("spy" function (:arguments 
              ( ("Z" variable nil (reparse-symbol function_parameters) [58870 58871])
                ("precision" variable nil (reparse-symbol function_parameters) [58873 58882])
                ("marker" variable nil (reparse-symbol function_parameters) [58886 58892])
                ("markersize" variable nil (reparse-symbol function_parameters) [58899 58909])
                ("aspect" variable nil (reparse-symbol function_parameters) [58916 58922])
                ("hold" variable nil (reparse-symbol function_parameters) [58932 58936])
                ("kwargs" variable nil (reparse-symbol function_parameters) [58943 58951]))              ) nil [58862 59342])
            ("" code nil nil [59518 59530])
            ("acorr" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [59541 59542])
                ("hold" variable nil (reparse-symbol function_parameters) [59544 59548])
                ("kwargs" variable nil (reparse-symbol function_parameters) [59555 59563]))              ) nil [59531 59858])
            ("" code nil nil [59969 59981])
            ("arrow" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [59992 59993])
                ("y" variable nil (reparse-symbol function_parameters) [59995 59996])
                ("dx" variable nil (reparse-symbol function_parameters) [59998 60000])
                ("dy" variable nil (reparse-symbol function_parameters) [60002 60004])
                ("hold" variable nil (reparse-symbol function_parameters) [60006 60010])
                ("kwargs" variable nil (reparse-symbol function_parameters) [60017 60025]))              ) nil [59982 60331])
            ("" code nil nil [60442 60456])
            ("axhline" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [60469 60470])
                ("xmin" variable nil (reparse-symbol function_parameters) [60474 60478])
                ("xmax" variable nil (reparse-symbol function_parameters) [60482 60486])
                ("hold" variable nil (reparse-symbol function_parameters) [60490 60494])
                ("kwargs" variable nil (reparse-symbol function_parameters) [60501 60509]))              ) nil [60457 60818])
            ("" code nil nil [60929 60943])
            ("axhspan" function (:arguments 
              ( ("ymin" variable nil (reparse-symbol function_parameters) [60956 60960])
                ("ymax" variable nil (reparse-symbol function_parameters) [60962 60966])
                ("xmin" variable nil (reparse-symbol function_parameters) [60968 60972])
                ("xmax" variable nil (reparse-symbol function_parameters) [60976 60980])
                ("hold" variable nil (reparse-symbol function_parameters) [60984 60988])
                ("kwargs" variable nil (reparse-symbol function_parameters) [60995 61003]))              ) nil [60944 61321])
            ("" code nil nil [61432 61446])
            ("axvline" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [61459 61460])
                ("ymin" variable nil (reparse-symbol function_parameters) [61464 61468])
                ("ymax" variable nil (reparse-symbol function_parameters) [61472 61476])
                ("hold" variable nil (reparse-symbol function_parameters) [61480 61484])
                ("kwargs" variable nil (reparse-symbol function_parameters) [61491 61499]))              ) nil [61447 61808])
            ("" code nil nil [61919 61933])
            ("axvspan" function (:arguments 
              ( ("xmin" variable nil (reparse-symbol function_parameters) [61946 61950])
                ("xmax" variable nil (reparse-symbol function_parameters) [61952 61956])
                ("ymin" variable nil (reparse-symbol function_parameters) [61958 61962])
                ("ymax" variable nil (reparse-symbol function_parameters) [61966 61970])
                ("hold" variable nil (reparse-symbol function_parameters) [61974 61978])
                ("kwargs" variable nil (reparse-symbol function_parameters) [61985 61993]))              ) nil [61934 62311])
            ("" code nil nil [62422 62432])
            ("bar" function (:arguments 
              ( ("left" variable nil (reparse-symbol function_parameters) [62441 62445])
                ("height" variable nil (reparse-symbol function_parameters) [62447 62453])
                ("width" variable nil (reparse-symbol function_parameters) [62455 62460])
                ("bottom" variable nil (reparse-symbol function_parameters) [62482 62488])
                ("hold" variable nil (reparse-symbol function_parameters) [62495 62499])
                ("kwargs" variable nil (reparse-symbol function_parameters) [62506 62514]))              ) nil [62433 62833])
            ("" code nil nil [62944 62955])
            ("barh" function (:arguments 
              ( ("bottom" variable nil (reparse-symbol function_parameters) [62965 62971])
                ("width" variable nil (reparse-symbol function_parameters) [62973 62978])
                ("height" variable nil (reparse-symbol function_parameters) [62980 62986])
                ("left" variable nil (reparse-symbol function_parameters) [63008 63012])
                ("hold" variable nil (reparse-symbol function_parameters) [63019 63023])
                ("kwargs" variable nil (reparse-symbol function_parameters) [63030 63038]))              ) nil [62956 63358])
            ("" code nil nil [63469 63487])
            ("broken_barh" function (:arguments 
              ( ("xranges" variable nil (reparse-symbol function_parameters) [63504 63511])
                ("yrange" variable nil (reparse-symbol function_parameters) [63513 63519])
                ("hold" variable nil (reparse-symbol function_parameters) [63521 63525])
                ("kwargs" variable nil (reparse-symbol function_parameters) [63532 63540]))              ) nil [63488 63855])
            ("" code nil nil [63966 63980])
            ("boxplot" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [63993 63994])
                ("notch" variable nil (reparse-symbol function_parameters) [63996 64001])
                ("sym" variable nil (reparse-symbol function_parameters) [64005 64008])
                ("vert" variable nil (reparse-symbol function_parameters) [64015 64019])
                ("whis" variable nil (reparse-symbol function_parameters) [64023 64027])
                ("positions" variable nil (reparse-symbol function_parameters) [64033 64042])
                ("widths" variable nil (reparse-symbol function_parameters) [64049 64055])
                ("patch_artist" variable nil (reparse-symbol function_parameters) [64062 64074])
                ("bootstrap" variable nil (reparse-symbol function_parameters) [64082 64091])
                ("hold" variable nil (reparse-symbol function_parameters) [64098 64102]))              ) nil [63981 64462])
            ("" code nil nil [64573 64586])
            ("cohere" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [64598 64599])
                ("y" variable nil (reparse-symbol function_parameters) [64601 64602])
                ("NFFT" variable nil (reparse-symbol function_parameters) [64604 64608])
                ("Fs" variable nil (reparse-symbol function_parameters) [64614 64616])
                ("Fc" variable nil (reparse-symbol function_parameters) [64620 64622])
                ("detrend" variable nil (reparse-symbol function_parameters) [64626 64633])
                ("window" variable nil (reparse-symbol function_parameters) [64653 64659])
                ("noverlap" variable nil (reparse-symbol function_parameters) [64681 64689])
                ("pad_to" variable nil (reparse-symbol function_parameters) [64693 64699])
                ("sides" variable nil (reparse-symbol function_parameters) [64706 64711])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [64723 64736])
                ("hold" variable nil (reparse-symbol function_parameters) [64743 64747])
                ("kwargs" variable nil (reparse-symbol function_parameters) [64754 64762]))              ) nil [64587 65132])
            ("" code nil nil [65243 65256])
            ("clabel" function (:arguments 
              ( ("CS" variable nil (reparse-symbol function_parameters) [65268 65270])
                ("args" variable nil (reparse-symbol function_parameters) [65272 65277])
                ("kwargs" variable nil (reparse-symbol function_parameters) [65279 65287]))              ) nil [65257 65626])
            ("" code nil nil [65737 65751])
            ("contour" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [65764 65769])
                ("kwargs" variable nil (reparse-symbol function_parameters) [65771 65779]))              ) nil [65752 66150])
            ("" code nil nil [66261 66276])
            ("contourf" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [66290 66295])
                ("kwargs" variable nil (reparse-symbol function_parameters) [66297 66305]))              ) nil [66277 66677])
            ("" code nil nil [66788 66798])
            ("csd" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [66807 66808])
                ("y" variable nil (reparse-symbol function_parameters) [66810 66811])
                ("NFFT" variable nil (reparse-symbol function_parameters) [66813 66817])
                ("Fs" variable nil (reparse-symbol function_parameters) [66823 66825])
                ("Fc" variable nil (reparse-symbol function_parameters) [66829 66831])
                ("detrend" variable nil (reparse-symbol function_parameters) [66835 66842])
                ("window" variable nil (reparse-symbol function_parameters) [66862 66868])
                ("noverlap" variable nil (reparse-symbol function_parameters) [66890 66898])
                ("pad_to" variable nil (reparse-symbol function_parameters) [66902 66908])
                ("sides" variable nil (reparse-symbol function_parameters) [66915 66920])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [66932 66945])
                ("hold" variable nil (reparse-symbol function_parameters) [66952 66956])
                ("kwargs" variable nil (reparse-symbol function_parameters) [66963 66971]))              ) nil [66799 67338])
            ("" code nil nil [67449 67464])
            ("errorbar" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [67478 67479])
                ("y" variable nil (reparse-symbol function_parameters) [67481 67482])
                ("yerr" variable nil (reparse-symbol function_parameters) [67484 67488])
                ("xerr" variable nil (reparse-symbol function_parameters) [67495 67499])
                ("fmt" variable nil (reparse-symbol function_parameters) [67506 67509])
                ("ecolor" variable nil (reparse-symbol function_parameters) [67515 67521])
                ("elinewidth" variable nil (reparse-symbol function_parameters) [67528 67538])
                ("capsize" variable nil (reparse-symbol function_parameters) [67545 67552])
                ("barsabove" variable nil (reparse-symbol function_parameters) [67556 67565])
                ("lolims" variable nil (reparse-symbol function_parameters) [67573 67579])
                ("uplims" variable nil (reparse-symbol function_parameters) [67587 67593])
                ("xlolims" variable nil (reparse-symbol function_parameters) [67601 67608])
                ("xuplims" variable nil (reparse-symbol function_parameters) [67616 67623])
                ("hold" variable nil (reparse-symbol function_parameters) [67631 67635])
                ("kwargs" variable nil (reparse-symbol function_parameters) [67642 67650]))              ) nil [67465 68042])
            ("" code nil nil [68153 68164])
            ("fill" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [68174 68179])
                ("kwargs" variable nil (reparse-symbol function_parameters) [68181 68189]))              ) nil [68165 68522])
            ("" code nil nil [68633 68652])
            ("fill_between" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [68670 68671])
                ("y1" variable nil (reparse-symbol function_parameters) [68673 68675])
                ("y2" variable nil (reparse-symbol function_parameters) [68677 68679])
                ("where" variable nil (reparse-symbol function_parameters) [68683 68688])
                ("interpolate" variable nil (reparse-symbol function_parameters) [68695 68706])
                ("hold" variable nil (reparse-symbol function_parameters) [68714 68718])
                ("kwargs" variable nil (reparse-symbol function_parameters) [68725 68733]))              ) nil [68653 69063])
            ("" code nil nil [69174 69194])
            ("fill_betweenx" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [69213 69214])
                ("x1" variable nil (reparse-symbol function_parameters) [69216 69218])
                ("x2" variable nil (reparse-symbol function_parameters) [69220 69222])
                ("where" variable nil (reparse-symbol function_parameters) [69226 69231])
                ("hold" variable nil (reparse-symbol function_parameters) [69238 69242])
                ("kwargs" variable nil (reparse-symbol function_parameters) [69249 69257]))              ) nil [69195 69575])
            ("" code nil nil [69686 69699])
            ("hexbin" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [69711 69712])
                ("y" variable nil (reparse-symbol function_parameters) [69714 69715])
                ("C" variable nil (reparse-symbol function_parameters) [69717 69718])
                ("gridsize" variable nil (reparse-symbol function_parameters) [69725 69733])
                ("bins" variable nil (reparse-symbol function_parameters) [69739 69743])
                ("xscale" variable nil (reparse-symbol function_parameters) [69750 69756])
                ("yscale" variable nil (reparse-symbol function_parameters) [69767 69773])
                ("extent" variable nil (reparse-symbol function_parameters) [69784 69790])
                ("cmap" variable nil (reparse-symbol function_parameters) [69797 69801])
                ("norm" variable nil (reparse-symbol function_parameters) [69808 69812])
                ("vmin" variable nil (reparse-symbol function_parameters) [69819 69823])
                ("vmax" variable nil (reparse-symbol function_parameters) [69830 69834])
                ("alpha" variable nil (reparse-symbol function_parameters) [69841 69846])
                ("linewidths" variable nil (reparse-symbol function_parameters) [69853 69863])
                ("edgecolors" variable nil (reparse-symbol function_parameters) [69870 69880])
                ("reduce_C_function" variable nil (reparse-symbol function_parameters) [69889 69906])
                ("mincnt" variable nil (reparse-symbol function_parameters) [69916 69922])
                ("marginals" variable nil (reparse-symbol function_parameters) [69929 69938])
                ("hold" variable nil (reparse-symbol function_parameters) [69946 69950])
                ("kwargs" variable nil (reparse-symbol function_parameters) [69957 69965]))              ) nil [69700 70412])
            ("" code nil nil [70523 70534])
            ("hist" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [70544 70545])
                ("bins" variable nil (reparse-symbol function_parameters) [70547 70551])
                ("range" variable nil (reparse-symbol function_parameters) [70556 70561])
                ("normed" variable nil (reparse-symbol function_parameters) [70568 70574])
                ("weights" variable nil (reparse-symbol function_parameters) [70582 70589])
                ("cumulative" variable nil (reparse-symbol function_parameters) [70596 70606])
                ("bottom" variable nil (reparse-symbol function_parameters) [70614 70620])
                ("histtype" variable nil (reparse-symbol function_parameters) [70627 70635])
                ("align" variable nil (reparse-symbol function_parameters) [70643 70648])
                ("orientation" variable nil (reparse-symbol function_parameters) [70656 70667])
                ("rwidth" variable nil (reparse-symbol function_parameters) [70680 70686])
                ("log" variable nil (reparse-symbol function_parameters) [70693 70696])
                ("color" variable nil (reparse-symbol function_parameters) [70704 70709])
                ("label" variable nil (reparse-symbol function_parameters) [70716 70721])
                ("hold" variable nil (reparse-symbol function_parameters) [70728 70732])
                ("kwargs" variable nil (reparse-symbol function_parameters) [70739 70747]))              ) nil [70535 71148])
            ("" code nil nil [71259 71272])
            ("hlines" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [71284 71285])
                ("xmin" variable nil (reparse-symbol function_parameters) [71287 71291])
                ("xmax" variable nil (reparse-symbol function_parameters) [71293 71297])
                ("colors" variable nil (reparse-symbol function_parameters) [71299 71305])
                ("linestyles" variable nil (reparse-symbol function_parameters) [71311 71321])
                ("label" variable nil (reparse-symbol function_parameters) [71331 71336])
                ("hold" variable nil (reparse-symbol function_parameters) [71341 71345])
                ("kwargs" variable nil (reparse-symbol function_parameters) [71352 71360]))              ) nil [71273 71695])
            ("" code nil nil [71806 71819])
            ("imshow" function (:arguments 
              ( ("X" variable nil (reparse-symbol function_parameters) [71831 71832])
                ("cmap" variable nil (reparse-symbol function_parameters) [71834 71838])
                ("norm" variable nil (reparse-symbol function_parameters) [71845 71849])
                ("aspect" variable nil (reparse-symbol function_parameters) [71856 71862])
                ("interpolation" variable nil (reparse-symbol function_parameters) [71869 71882])
                ("alpha" variable nil (reparse-symbol function_parameters) [71889 71894])
                ("vmin" variable nil (reparse-symbol function_parameters) [71901 71905])
                ("vmax" variable nil (reparse-symbol function_parameters) [71912 71916])
                ("origin" variable nil (reparse-symbol function_parameters) [71923 71929])
                ("extent" variable nil (reparse-symbol function_parameters) [71936 71942])
                ("shape" variable nil (reparse-symbol function_parameters) [71949 71954])
                ("filternorm" variable nil (reparse-symbol function_parameters) [71961 71971])
                ("filterrad" variable nil (reparse-symbol function_parameters) [71975 71984])
                ("imlim" variable nil (reparse-symbol function_parameters) [71990 71995])
                ("resample" variable nil (reparse-symbol function_parameters) [72002 72010])
                ("url" variable nil (reparse-symbol function_parameters) [72017 72020])
                ("hold" variable nil (reparse-symbol function_parameters) [72027 72031])
                ("kwargs" variable nil (reparse-symbol function_parameters) [72038 72046]))              ) nil [71820 72476])
            ("" code nil nil [72587 72600])
            ("loglog" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [72612 72617])
                ("kwargs" variable nil (reparse-symbol function_parameters) [72619 72627]))              ) nil [72601 72962])
            ("" code nil nil [73073 73086])
            ("pcolor" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [73098 73103])
                ("kwargs" variable nil (reparse-symbol function_parameters) [73105 73113]))              ) nil [73087 73460])
            ("" code nil nil [73571 73588])
            ("pcolormesh" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [73604 73609])
                ("kwargs" variable nil (reparse-symbol function_parameters) [73611 73619]))              ) nil [73589 73970])
            ("" code nil nil [74081 74091])
            ("pie" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [74100 74101])
                ("explode" variable nil (reparse-symbol function_parameters) [74103 74110])
                ("labels" variable nil (reparse-symbol function_parameters) [74117 74123])
                ("colors" variable nil (reparse-symbol function_parameters) [74130 74136])
                ("autopct" variable nil (reparse-symbol function_parameters) [74143 74150])
                ("pctdistance" variable nil (reparse-symbol function_parameters) [74157 74168])
                ("shadow" variable nil (reparse-symbol function_parameters) [74190 74196])
                ("labeldistance" variable nil (reparse-symbol function_parameters) [74204 74217])
                ("hold" variable nil (reparse-symbol function_parameters) [74238 74242]))              ) nil [74092 74600])
            ("" code nil nil [74711 74722])
            ("plot" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [74732 74737])
                ("kwargs" variable nil (reparse-symbol function_parameters) [74739 74747]))              ) nil [74723 75080])
            ("" code nil nil [75191 75207])
            ("plot_date" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [75222 75223])
                ("y" variable nil (reparse-symbol function_parameters) [75225 75226])
                ("fmt" variable nil (reparse-symbol function_parameters) [75228 75231])
                ("tz" variable nil (reparse-symbol function_parameters) [75238 75240])
                ("xdate" variable nil (reparse-symbol function_parameters) [75247 75252])
                ("ydate" variable nil (reparse-symbol function_parameters) [75259 75264])
                ("hold" variable nil (reparse-symbol function_parameters) [75272 75276])
                ("kwargs" variable nil (reparse-symbol function_parameters) [75283 75291]))              ) nil [75208 75616])
            ("" code nil nil [75727 75737])
            ("psd" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [75746 75747])
                ("NFFT" variable nil (reparse-symbol function_parameters) [75749 75753])
                ("Fs" variable nil (reparse-symbol function_parameters) [75759 75761])
                ("Fc" variable nil (reparse-symbol function_parameters) [75765 75767])
                ("detrend" variable nil (reparse-symbol function_parameters) [75771 75778])
                ("window" variable nil (reparse-symbol function_parameters) [75798 75804])
                ("noverlap" variable nil (reparse-symbol function_parameters) [75826 75834])
                ("pad_to" variable nil (reparse-symbol function_parameters) [75838 75844])
                ("sides" variable nil (reparse-symbol function_parameters) [75851 75856])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [75868 75881])
                ("hold" variable nil (reparse-symbol function_parameters) [75888 75892])
                ("kwargs" variable nil (reparse-symbol function_parameters) [75899 75907]))              ) nil [75738 76271])
            ("" code nil nil [76382 76395])
            ("quiver" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [76407 76412])
                ("kw" variable nil (reparse-symbol function_parameters) [76414 76418]))              ) nil [76396 76757])
            ("" code nil nil [76868 76884])
            ("quiverkey" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [76899 76904])
                ("kw" variable nil (reparse-symbol function_parameters) [76906 76910]))              ) nil [76885 77240])
            ("" code nil nil [77351 77365])
            ("scatter" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [77378 77379])
                ("y" variable nil (reparse-symbol function_parameters) [77381 77382])
                ("s" variable nil (reparse-symbol function_parameters) [77384 77385])
                ("c" variable nil (reparse-symbol function_parameters) [77390 77391])
                ("marker" variable nil (reparse-symbol function_parameters) [77397 77403])
                ("cmap" variable nil (reparse-symbol function_parameters) [77409 77413])
                ("norm" variable nil (reparse-symbol function_parameters) [77420 77424])
                ("vmin" variable nil (reparse-symbol function_parameters) [77431 77435])
                ("vmax" variable nil (reparse-symbol function_parameters) [77442 77446])
                ("alpha" variable nil (reparse-symbol function_parameters) [77453 77458])
                ("linewidths" variable nil (reparse-symbol function_parameters) [77465 77475])
                ("faceted" variable nil (reparse-symbol function_parameters) [77482 77489])
                ("verts" variable nil (reparse-symbol function_parameters) [77496 77501])
                ("hold" variable nil (reparse-symbol function_parameters) [77508 77512])
                ("kwargs" variable nil (reparse-symbol function_parameters) [77519 77527]))              ) nil [77366 77912])
            ("" code nil nil [78023 78038])
            ("semilogx" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [78052 78057])
                ("kwargs" variable nil (reparse-symbol function_parameters) [78059 78067]))              ) nil [78039 78404])
            ("" code nil nil [78515 78530])
            ("semilogy" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [78544 78549])
                ("kwargs" variable nil (reparse-symbol function_parameters) [78551 78559]))              ) nil [78531 78896])
            ("" code nil nil [79007 79022])
            ("specgram" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [79036 79037])
                ("NFFT" variable nil (reparse-symbol function_parameters) [79039 79043])
                ("Fs" variable nil (reparse-symbol function_parameters) [79049 79051])
                ("Fc" variable nil (reparse-symbol function_parameters) [79055 79057])
                ("detrend" variable nil (reparse-symbol function_parameters) [79061 79068])
                ("window" variable nil (reparse-symbol function_parameters) [79088 79094])
                ("noverlap" variable nil (reparse-symbol function_parameters) [79116 79124])
                ("cmap" variable nil (reparse-symbol function_parameters) [79130 79134])
                ("xextent" variable nil (reparse-symbol function_parameters) [79141 79148])
                ("pad_to" variable nil (reparse-symbol function_parameters) [79155 79161])
                ("sides" variable nil (reparse-symbol function_parameters) [79168 79173])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [79185 79198])
                ("hold" variable nil (reparse-symbol function_parameters) [79205 79209])
                ("kwargs" variable nil (reparse-symbol function_parameters) [79216 79224]))              ) nil [79023 79624])
            ("" code nil nil [79735 79746])
            ("stem" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [79756 79757])
                ("y" variable nil (reparse-symbol function_parameters) [79759 79760])
                ("linefmt" variable nil (reparse-symbol function_parameters) [79762 79769])
                ("markerfmt" variable nil (reparse-symbol function_parameters) [79776 79785])
                ("basefmt" variable nil (reparse-symbol function_parameters) [79792 79799])
                ("hold" variable nil (reparse-symbol function_parameters) [79806 79810]))              ) nil [79747 80131])
            ("" code nil nil [80242 80253])
            ("step" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [80263 80264])
                ("y" variable nil (reparse-symbol function_parameters) [80266 80267])
                ("args" variable nil (reparse-symbol function_parameters) [80269 80274])
                ("kwargs" variable nil (reparse-symbol function_parameters) [80276 80284]))              ) nil [80254 80623])
            ("" code nil nil [80734 80751])
            ("tricontour" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [80767 80772])
                ("kwargs" variable nil (reparse-symbol function_parameters) [80774 80782]))              ) nil [80752 81156])
            ("" code nil nil [81267 81285])
            ("tricontourf" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [81302 81307])
                ("kwargs" variable nil (reparse-symbol function_parameters) [81309 81317]))              ) nil [81286 81692])
            ("" code nil nil [81803 81819])
            ("tripcolor" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [81834 81839])
                ("kwargs" variable nil (reparse-symbol function_parameters) [81841 81849]))              ) nil [81820 82199])
            ("" code nil nil [82310 82324])
            ("triplot" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [82337 82342])
                ("kwargs" variable nil (reparse-symbol function_parameters) [82344 82352]))              ) nil [82325 82688])
            ("" code nil nil [82799 82812])
            ("vlines" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [82824 82825])
                ("ymin" variable nil (reparse-symbol function_parameters) [82827 82831])
                ("ymax" variable nil (reparse-symbol function_parameters) [82833 82837])
                ("colors" variable nil (reparse-symbol function_parameters) [82839 82845])
                ("linestyles" variable nil (reparse-symbol function_parameters) [82851 82861])
                ("label" variable nil (reparse-symbol function_parameters) [82871 82876])
                ("hold" variable nil (reparse-symbol function_parameters) [82881 82885])
                ("kwargs" variable nil (reparse-symbol function_parameters) [82892 82900]))              ) nil [82813 83235])
            ("" code nil nil [83346 83358])
            ("xcorr" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [83369 83370])
                ("y" variable nil (reparse-symbol function_parameters) [83372 83373])
                ("normed" variable nil (reparse-symbol function_parameters) [83375 83381])
                ("detrend" variable nil (reparse-symbol function_parameters) [83388 83395])
                ("usevlines" variable nil (reparse-symbol function_parameters) [83415 83424])
                ("maxlags" variable nil (reparse-symbol function_parameters) [83431 83438])
                ("hold" variable nil (reparse-symbol function_parameters) [83443 83447])
                ("kwargs" variable nil (reparse-symbol function_parameters) [83454 83462]))              ) nil [83359 83797])
            ("" code nil nil [83908 83920])
            ("barbs" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [83931 83936])
                ("kw" variable nil (reparse-symbol function_parameters) [83938 83942]))              ) nil [83921 84268])
            ("" code nil nil [84383 84393])
            ("cla" function nil nil [84394 84469])
            ("" code nil nil [84584 84595])
            ("grid" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [84605 84606])
                ("which" variable nil (reparse-symbol function_parameters) [84613 84618])
                ("axis" variable nil (reparse-symbol function_parameters) [84628 84632])
                ("kwargs" variable nil (reparse-symbol function_parameters) [84641 84649]))              ) nil [84596 84741])
            ("" code nil nil [84856 84869])
            ("legend" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [84881 84886])
                ("kwargs" variable nil (reparse-symbol function_parameters) [84888 84896]))              ) nil [84870 84981])
            ("" code nil nil [85096 85108])
            ("table" function (:arguments 
              ( ("kwargs" variable nil (reparse-symbol function_parameters) [85119 85127]))              ) nil [85109 85204])
            ("" code nil nil [85319 85330])
            ("text" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [85340 85341])
                ("y" variable nil (reparse-symbol function_parameters) [85343 85344])
                ("s" variable nil (reparse-symbol function_parameters) [85346 85347])
                ("fontdict" variable nil (reparse-symbol function_parameters) [85349 85357])
                ("withdash" variable nil (reparse-symbol function_parameters) [85364 85372])
                ("kwargs" variable nil (reparse-symbol function_parameters) [85380 85388]))              ) nil [85331 85493])
            ("" code nil nil [85608 85623])
            ("annotate" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [85637 85642])
                ("kwargs" variable nil (reparse-symbol function_parameters) [85644 85652]))              ) nil [85624 85739])
            ("" code nil nil [85854 85877])
            ("ticklabel_format" function (:arguments 
              ( ("kwargs" variable nil (reparse-symbol function_parameters) [85899 85907]))              ) nil [85878 85995])
            ("" code nil nil [86110 86131])
            ("locator_params" function (:arguments 
              ( ("axis" variable nil (reparse-symbol function_parameters) [86151 86155])
                ("tight" variable nil (reparse-symbol function_parameters) [86164 86169])
                ("kwargs" variable nil (reparse-symbol function_parameters) [86176 86184]))              ) nil [86132 86283])
            ("" code nil nil [86398 86416])
            ("tick_params" function (:arguments 
              ( ("axis" variable nil (reparse-symbol function_parameters) [86433 86437])
                ("kwargs" variable nil (reparse-symbol function_parameters) [86446 86454]))              ) nil [86417 86543])
            ("" code nil nil [86658 86672])
            ("margins" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [86685 86690])
                ("kw" variable nil (reparse-symbol function_parameters) [86692 86696]))              ) nil [86673 86778])
            ("" code nil nil [86893 86909])
            ("autoscale" function (:arguments 
              ( ("enable" variable nil (reparse-symbol function_parameters) [86924 86930])
                ("axis" variable nil (reparse-symbol function_parameters) [86937 86941])
                ("tight" variable nil (reparse-symbol function_parameters) [86950 86955]))              ) nil [86910 87052])
            ("autumn" function nil nil [87145 87421])
            ("bone" function nil nil [87515 87783])
            ("cool" function nil nil [87877 88145])
            ("copper" function nil nil [88239 88515])
            ("flag" function nil nil [88609 88877])
            ("gray" function nil nil [88971 89239])
            ("hot" function nil nil [89333 89597])
            ("hsv" function nil nil [89691 89955])
            ("jet" function nil nil [90049 90313])
            ("pink" function nil nil [90407 90675])
            ("prism" function nil nil [90769 91041])
            ("spring" function nil nil [91135 91411])
            ("summer" function nil nil [91505 91781])
            ("winter" function nil nil [91875 92151])
            ("spectral" function nil nil [92245 92529]))          
      :file "pyplot.py"
      :pointmax 92531
      :fsize 92530
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A collection of utility functions and classes.  Many (but not all)
from the Python Cookbook -- hence the name cbook
\"\"\"" code nil nil [1 124])
            ("__future__" include nil nil [125 158])
            ("types" include nil nil [159 231])
            ("threading" include nil nil [159 231])
            ("locale" include nil nil [159 231])
            ("traceback" include nil nil [159 231])
            ("StringIO" include nil nil [159 231])
            ("sys" include nil nil [159 231])
            ("errno" include nil nil [159 231])
            ("os" include nil nil [159 231])
            ("re" include nil nil [159 231])
            ("datetime" include nil nil [232 253])
            ("time" include nil nil [232 253])
            ("warnings" include nil nil [254 269])
            ("numpy" include nil nil [270 288])
            ("numpy.ma" include nil nil [289 310])
            ("weakref" include nil nil [311 353])
            ("cPickle" include nil nil [354 368])
            ("os.path" include nil nil [369 383])
            ("random" include nil nil [384 397])
            ("new" include nil nil [398 408])
            ("matplotlib" include nil nil [410 427])
            ("major, minor1, minor2, s, tmp" code nil nil [429 477])
            ("unicode_safe" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [928 929]))              ) nil [911 1349])
            ("converter" type
               (:documentation "
    Base class for handling string -> python type with support for
    missing values
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1535 1557])
                            ("self" variable nil (reparse-symbol indented_block_body) [1566 1594]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1487 1491])
                            ("missing" variable nil (reparse-symbol function_parameters) [1493 1500])
                            ("missingval" variable nil (reparse-symbol function_parameters) [1509 1519]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1474 1595])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1612 1616])
                            ("s" variable nil (reparse-symbol function_parameters) [1618 1619]))                          )
                        (reparse-symbol indented_block_body) [1599 1690])
                    ("is_missing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1710 1714])
                            ("s" variable nil (reparse-symbol function_parameters) [1716 1717]))                          )
                        (reparse-symbol indented_block_body) [1695 1768]))                  
                :type "class")
                nil [1351 1768])
            ("tostr" type
               (:superclasses ("converter")
                :members 
                  ( ("'convert to string or None'" code nil (reparse-symbol indented_block_body) [1797 1824])
                    ("__init__" function
                       (:suite 
                          ( ("converter" code nil (reparse-symbol indented_block_body) [1888 1952]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1842 1846])
                            ("missing" variable nil (reparse-symbol function_parameters) [1848 1855])
                            ("missingval" variable nil (reparse-symbol function_parameters) [1864 1874]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1829 1953]))                  
                :type "class")
                nil [1769 1953])
            ("todatetime" type
               (:superclasses ("converter")
                :members 
                  ( ("'convert to a datetime or None'" code nil (reparse-symbol indented_block_body) [1987 2018])
                    ("__init__" function
                       (:suite 
                          ( ("'use a :func:`time.strptime` format string for conversion'" code nil (reparse-symbol indented_block_body) [2100 2158])
                            ("converter" code nil (reparse-symbol indented_block_body) [2167 2212])
                            ("self" variable nil (reparse-symbol indented_block_body) [2221 2235]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2036 2040])
                            ("fmt" variable nil (reparse-symbol function_parameters) [2042 2045])
                            ("missing" variable nil (reparse-symbol function_parameters) [2058 2065])
                            ("missingval" variable nil (reparse-symbol function_parameters) [2074 2084]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2023 2236])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2254 2258])
                            ("s" variable nil (reparse-symbol function_parameters) [2260 2261]))                          )
                        (reparse-symbol indented_block_body) [2241 2402]))                  
                :type "class")
                nil [1954 2402])
            ("todate" type
               (:superclasses ("converter")
                :members 
                  ( ("'convert to a date or None'" code nil (reparse-symbol indented_block_body) [2434 2461])
                    ("__init__" function
                       (:suite 
                          ( ("'use a :func:`time.strptime` format string for conversion'" code nil (reparse-symbol indented_block_body) [2543 2601])
                            ("converter" code nil (reparse-symbol indented_block_body) [2610 2655])
                            ("self" variable nil (reparse-symbol indented_block_body) [2664 2678]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2479 2483])
                            ("fmt" variable nil (reparse-symbol function_parameters) [2485 2488])
                            ("missing" variable nil (reparse-symbol function_parameters) [2501 2508])
                            ("missingval" variable nil (reparse-symbol function_parameters) [2517 2527]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2466 2679])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2696 2700])
                            ("s" variable nil (reparse-symbol function_parameters) [2702 2703]))                          )
                        (reparse-symbol indented_block_body) [2683 2840]))                  
                :type "class")
                nil [2405 2840])
            ("tofloat" type
               (:superclasses ("converter")
                :members 
                  ( ("'convert to a float or None'" code nil (reparse-symbol indented_block_body) [2871 2899])
                    ("__init__" function
                       (:suite 
                          ( ("converter" code nil (reparse-symbol indented_block_body) [2965 2998])
                            ("self" variable nil (reparse-symbol indented_block_body) [3007 3035]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2917 2921])
                            ("missing" variable nil (reparse-symbol function_parameters) [2923 2930])
                            ("missingval" variable nil (reparse-symbol function_parameters) [2939 2949]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2904 3036])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3053 3057])
                            ("s" variable nil (reparse-symbol function_parameters) [3059 3060]))                          )
                        (reparse-symbol indented_block_body) [3040 3141]))                  
                :type "class")
                nil [2841 3141])
            ("toint" type
               (:superclasses ("converter")
                :members 
                  ( ("'convert to an int or None'" code nil (reparse-symbol indented_block_body) [3171 3198])
                    ("__init__" function
                       (:suite 
                          ( ("converter" code nil (reparse-symbol indented_block_body) [3264 3297]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3216 3220])
                            ("missing" variable nil (reparse-symbol function_parameters) [3222 3229])
                            ("missingval" variable nil (reparse-symbol function_parameters) [3238 3248]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3203 3298])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3316 3320])
                            ("s" variable nil (reparse-symbol function_parameters) [3322 3323]))                          )
                        (reparse-symbol indented_block_body) [3303 3402]))                  
                :type "class")
                nil [3143 3402])
            ("CallbackRegistry" type
               (:documentation "
    Handle registering and disconnecting for a set of signals and
    callbacks::

       def oneat(x):
           print 'eat', x

       def ondrink(x):
           print 'drink', x

       callbacks = CallbackRegistry()

       ideat = callbacks.connect('eat', oneat)
       iddrink = callbacks.connect('drink', ondrink)

       #tmp = callbacks.connect('drunk', ondrink) # this will raise a ValueError

       callbacks.process('drink', 123)    # will call oneat
       callbacks.process('eat', 456)      # will call ondrink
       callbacks.process('be merry', 456) # nothing will be called
       callbacks.disconnect(ideat)        # disconnect oneat
       callbacks.process('eat', 456)      # nothing will be called

    In practice, one should always disconnect all callbacks when they
    are no longer needed to avoid dangling references (and thus memory
    leaks).  However, real code in matplotlib rarely does so, and due
    to its design, it is rather difficult to place this kind of code.
    To get around this, and prevent this class of memory leaks, we
    instead store weak references to bound methods only, so when the
    destination object needs to die, the CallbackRegistry won't keep
    it alive.  The Python stdlib weakref module can not create weak
    references to bound methods directly, so we need to create a proxy
    object to handle weak references to bound methods (or regular free
    functions).  This technique was shared by Peter Parente on his
    `\"Mindtrove\" blog
    <http://mindtrove.info/articles/python-weak-references/>`_.
    "
                :members 
                  ( ("BoundMethodProxy" type
                       (:superclasses ("object")
                        :members 
                          ( ("'''
        Our own proxy object which enables weak references to bound and unbound
        methods and arbitrary callables. Pulls information about the function,
        class, and instance out of a bound method. Stores a weak reference to the
        instance to support garbage collection.

        @organization: IBM Corporation
        @copyright: Copyright (c) 2005, 2006 IBM Corporation
        @license: The BSD License

        Minor bugfixes by Michael Droettboom
        '''" code nil (reparse-symbol indented_block_body) [5059 5544])
                            ("__init__" function
                               (:suite 
                                  ( ("try" code nil (reparse-symbol indented_block_body) [5589 5947]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [5566 5570])
                                    ("cb" variable nil (reparse-symbol function_parameters) [5572 5574]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [5553 5947])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [5969 5973])
                                    ("args" variable nil (reparse-symbol function_parameters) [5975 5980])
                                    ("kwargs" variable nil (reparse-symbol function_parameters) [5982 5990]))                                  )
                                (reparse-symbol indented_block_body) [5956 6749])
                            ("__eq__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [6769 6773])
                                    ("other" variable nil (reparse-symbol function_parameters) [6775 6780]))                                  )
                                (reparse-symbol indented_block_body) [6758 7204])
                            ("__ne__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [7224 7228])
                                    ("other" variable nil (reparse-symbol function_parameters) [7230 7235]))                                  )
                                (reparse-symbol indented_block_body) [7213 7343]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [5019 7343])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [7383 7561])
                            ("self" variable nil (reparse-symbol indented_block_body) [7569 7592])
                            ("self" variable nil (reparse-symbol indented_block_body) [7601 7614])
                            ("self" variable nil (reparse-symbol indented_block_body) [7623 7663]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7361 7365])
                            ("args" variable nil (reparse-symbol function_parameters) [7367 7372]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7348 7664])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7681 7685])
                            ("s" variable nil (reparse-symbol function_parameters) [7687 7688])
                            ("func" variable nil (reparse-symbol function_parameters) [7690 7694]))                          
                        :documentation "
        register *func* to be called when a signal *s* is generated
        func will be called
        ")
                        (reparse-symbol indented_block_body) [7669 8127])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8147 8151])
                            ("cid" variable nil (reparse-symbol function_parameters) [8153 8156]))                          
                        :documentation "
        disconnect the callback registered with callback id *cid*
        ")
                        (reparse-symbol indented_block_body) [8132 8607])
                    ("process" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8624 8628])
                            ("s" variable nil (reparse-symbol function_parameters) [8630 8631])
                            ("args" variable nil (reparse-symbol function_parameters) [8633 8638])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8640 8648]))                          
                        :documentation "
        process signal *s*.  All of the functions registered to receive
        callbacks on *s* will be called with *\\*args* and *\\*\\*kwargs*
        ")
                        (reparse-symbol indented_block_body) [8612 9131]))                  
                :type "class")
                nil [3403 9131])
            ("Scheduler" type
               (:documentation "
    Base class for timeout and idle scheduling
    "
                :superclasses ("threading.Thread")
                :members 
                  ( ("idlelock" variable nil (reparse-symbol indented_block_body) [9235 9262])
                    ("id" variable nil (reparse-symbol indented_block_body) [9267 9273])
                    ("__init__" function
                       (:suite 
                          ( ("threading" code nil (reparse-symbol indented_block_body) [9307 9338])
                            ("self" variable nil (reparse-symbol indented_block_body) [9347 9369])
                            ("self" variable nil (reparse-symbol indented_block_body) [9378 9399])
                            ("Scheduler" variable nil (reparse-symbol indented_block_body) [9408 9425])
                            ("self" variable nil (reparse-symbol indented_block_body) [9434 9469]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9292 9296]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9279 9470])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9484 9488]))                          )
                        (reparse-symbol indented_block_body) [9475 9603]))                  
                :type "class")
                nil [9133 9603])
            ("Timeout" type
               (:documentation "
    Schedule recurring events with a wait time in seconds
    "
                :superclasses ("Scheduler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Scheduler" code nil (reparse-symbol indented_block_body) [9748 9772])
                            ("self" variable nil (reparse-symbol indented_block_body) [9781 9797])
                            ("self" variable nil (reparse-symbol indented_block_body) [9806 9822]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9721 9725])
                            ("wait" variable nil (reparse-symbol function_parameters) [9727 9731])
                            ("func" variable nil (reparse-symbol function_parameters) [9733 9737]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9708 9823])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9836 9840]))                          )
                        (reparse-symbol indented_block_body) [9828 10073]))                  
                :type "class")
                nil [9604 10073])
            ("Idle" type
               (:documentation "
    Schedule callbacks when scheduler is idle
    "
                :superclasses ("Scheduler")
                :members 
                  ( ("waittime" variable nil (reparse-symbol indented_block_body) [10336 10351])
                    ("__init__" function
                       (:suite 
                          ( ("Scheduler" code nil (reparse-symbol indented_block_body) [10390 10414])
                            ("self" variable nil (reparse-symbol indented_block_body) [10423 10439]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10369 10373])
                            ("func" variable nil (reparse-symbol function_parameters) [10375 10379]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10356 10440])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10453 10457]))                          )
                        (reparse-symbol indented_block_body) [10445 10694]))                  
                :type "class")
                nil [10074 10694])
            ("silent_list" type
               (:documentation "
    override repr when returning a list of matplotlib artists to
    prevent long, meaningless output.  This is meant to be used for a
    homogeneous list of a give type
    "
                :superclasses ("list")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10955 10971])
                            ("if" code nil (reparse-symbol indented_block_body) [10980 11017]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10924 10928])
                            ("type" variable nil (reparse-symbol function_parameters) [10930 10934])
                            ("seq" variable nil (reparse-symbol function_parameters) [10936 10939]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10911 11017])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11035 11039]))                          )
                        (reparse-symbol indented_block_body) [11022 11110])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11127 11131]))                          )
                        (reparse-symbol indented_block_body) [11115 11202]))                  
                :type "class")
                nil [10695 11202])
            ("strip_math" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [11218 11219]))              ) nil [11203 59568]))          
      :file "cbook.py"
      :pointmax 59568
      :fsize 59567
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax '((INDENT_BLOCK 54137 . 54204) (DEDENT 54106 . 54106) (NAME 54106 . 54117) (LBRACK 54120 . 54121) (NEWLINE 52336 . 52337) (COLON 52335 . 52336) (RPAREN 52334 . 52335) (DEDENT 52285 . 52285) (DEF 52285 . 52288) (LPAREN 52310 . 52311) (NEWLINE 49581 . 49582) (COLON 49580 . 49581) (RPAREN 49579 . 49580) (MULT 49574 . 49575) (DEDENT 49549 . 49549) (DEF 49549 . 49552) (LPAREN 49573 . 49574) (NEWLINE 49196 . 49197) (COLON 49195 . 49196) (RPAREN 49194 . 49195) (DEDENT 49169 . 49169) (DEF 49169 . 49172) (LPAREN 49189 . 49190) (NEWLINE 48741 . 48742) (COLON 48740 . 48741) (RPAREN 48739 . 48740) (DEDENT 48699 . 48699) (DEF 48699 . 48702) (LPAREN 48730 . 48731) (NEWLINE 45472 . 45473) (COLON 45471 . 45472) (RPAREN 45470 . 45471) (DEDENT 45450 . 45450) (CLASS 45450 . 45455) (LPAREN 45463 . 45464) (NEWLINE 43187 . 43188) (COLON 43186 . 43187) (RPAREN 43185 . 43186) (DEDENT 43118 . 43118) (DEF 43118 . 43121) (LPAREN 43134 . 43135) (NEWLINE 41470 . 41471) (COLON 41469 . 41470) (RPAREN 41468 . 41469) (DEDENT 41443 . 41443) (DEF 41443 . 41446) (LPAREN 41466 . 41467) (NEWLINE 41286 . 41287) (COLON 41285 . 41286) (RPAREN 41284 . 41285) (DEDENT 41256 . 41256) (DEF 41256 . 41259) (LPAREN 41275 . 41276) (NEWLINE 41027 . 41028) (COLON 41026 . 41027) (RPAREN 41025 . 41026) (MULT 41020 . 41021) (DEF 41008 . 41011) (LPAREN 41019 . 41020) (NEWLINE 39775 . 39776) (COLON 39750 . 39751) (RPAREN 39749 . 39750) (DEDENT 39728 . 39728) (DEF 39728 . 39731) (LPAREN 39745 . 39746) (NEWLINE 39540 . 39541) (COLON 39539 . 39540) (RPAREN 39538 . 39539) (DEDENT 39513 . 39513) (DEF 39513 . 39516) (LPAREN 39530 . 39531) (NEWLINE 39393 . 39394) (COLON 39392 . 39393) (RPAREN 39391 . 39392) (DEDENT 39373 . 39373) (DEF 39373 . 39376) (LPAREN 39389 . 39390) (NEWLINE 38970 . 38971) (COLON 38969 . 38970) (RPAREN 38968 . 38969) (DEDENT 38936 . 38936) (DEF 38936 . 38939) (LPAREN 38947 . 38948) (NEWLINE 38874 . 38875) (COLON 38873 . 38874) (RPAREN 38872 . 38873) (DEDENT 38858 . 38858) (DEF 38858 . 38861) (LPAREN 38868 . 38869) (NEWLINE 36483 . 36484) (COLON 36482 . 36483) (RPAREN 36481 . 36482) (DEDENT 36463 . 36463) (CLASS 36463 . 36468) (LPAREN 36474 . 36475) (NEWLINE 35923 . 35924) (COLON 35922 . 35923) (RPAREN 35921 . 35922) (DEDENT 35903 . 35903) (CLASS 35903 . 35908) (LPAREN 35916 . 35917) (NEWLINE 35548 . 35549) (COLON 35547 . 35548) (RPAREN 35546 . 35547) (DEDENT 35532 . 35532) (DEF 35532 . 35535) (LPAREN 35544 . 35545) (NEWLINE 35322 . 35323) (COLON 35321 . 35322) (RPAREN 35320 . 35321) (DEDENT 35305 . 35305) (DEF 35305 . 35308) (LPAREN 35316 . 35317) (NEWLINE 35081 . 35082) (COLON 35080 . 35081) (RPAREN 35079 . 35080) (DEDENT 35064 . 35064) (DEF 35064 . 35067) (LPAREN 35075 . 35076) (NEWLINE 34779 . 34780) (COLON 34778 . 34779) (RPAREN 34777 . 34778) (DEDENT 34761 . 34761) (DEF 34761 . 34764) (LPAREN 34773 . 34774) (NEWLINE 34634 . 34635) (COLON 34633 . 34634) (RPAREN 34632 . 34633) (DEDENT 34603 . 34603) (DEF 34603 . 34606) (LPAREN 34623 . 34624) (NEWLINE 34423 . 34424) (COLON 34422 . 34423) (RPAREN 34421 . 34422) (DEDENT 34400 . 34400) (DEF 34400 . 34403) (LPAREN 34410 . 34411) (NEWLINE 33956 . 33957) (COLON 33955 . 33956) (RPAREN 33954 . 33955) (DEDENT 33923 . 33923) (DEF 33923 . 33926) (LPAREN 33949 . 33950) (NEWLINE 32839 . 32840) (COLON 32838 . 32839) (RPAREN 32837 . 32838) (DEDENT 32776 . 32776) (DEF 32776 . 32779) (LPAREN 32789 . 32790) (NEWLINE 31458 . 31459) (COLON 31457 . 31458) (RPAREN 31456 . 31457) (LPAREN 31454 . 31455) (NEWLINE 31443 . 31444) (RBRACE 31442 . 31443) (LBRACE 31441 . 31442) (NEWLINE 31362 . 31363) (RPAREN 31361 . 31362) (DEDENT 31306 . 31306) (NAME 31306 . 31324) (LPAREN 31337 . 31338) (NEWLINE 30586 . 30587) (COLON 30585 . 30586) (RPAREN 30584 . 30585) (DEDENT 30557 . 30557) (DEF 30557 . 30560) (LPAREN 30565 . 30566) (NEWLINE 30185 . 30186) (COLON 30184 . 30185) (RPAREN 30183 . 30184) (DEDENT 30159 . 30159) (DEF 30159 . 30162) (LPAREN 30176 . 30177) (NEWLINE 28995 . 28996) (COLON 28994 . 28995) (RPAREN 28993 . 28994) (LPAREN 28985 . 28986) (NEWLINE 28968 . 28969) (RPAREN 28967 . 28968) (DEDENT 28924 . 28924) (NAME 28924 . 28945) (LPAREN 28966 . 28967) (NEWLINE 27796 . 27797) (COLON 27795 . 27796) (RPAREN 27794 . 27795) (DEDENT 27766 . 27766) (DEF 27766 . 27769) (LPAREN 27776 . 27777) (NEWLINE 26542 . 26543) (COLON 26541 . 26542) (RPAREN 26540 . 26541) (DEDENT 26517 . 26517) (DEF 26517 . 26520) (LPAREN 26528 . 26529) (NEWLINE 25707 . 25708) (COLON 25706 . 25707) (RPAREN 25705 . 25706) (DEDENT 25688 . 25688) (CLASS 25688 . 25693) (LPAREN 25700 . 25701) (NEWLINE 23933 . 23934) (COLON 23932 . 23933) (RPAREN 23931 . 23932) (DEF 23887 . 23890) (LPAREN 23898 . 23899) (NEWLINE 22173 . 22174) (COLON 22172 . 22173) (RPAREN 22171 . 22172) (DEDENT 22130 . 22130) (DEF 22130 . 22133) (LPAREN 22149 . 22150) (NEWLINE 14509 . 14510) (COLON 14508 . 14509) (RPAREN 14507 . 14508) (DEDENT 14468 . 14468) (DEF 14468 . 14471) (LPAREN 14488 . 14489) (NEWLINE 14414 . 14415) (COLON 14413 . 14414) (RPAREN 14412 . 14413) (DEDENT 14385 . 14385) (DEF 14385 . 14388) (LPAREN 14408 . 14409) (NEWLINE 13494 . 13495) (COLON 13493 . 13494) (RPAREN 13492 . 13493) (DEDENT 13437 . 13437) (DEF 13437 . 13440) (LPAREN 13454 . 13455) (NEWLINE 13326 . 13327) (COLON 13325 . 13326) (RPAREN 13324 . 13325) (DEDENT 13306 . 13306) (DEF 13306 . 13309) (LPAREN 13320 . 13321) (NEWLINE 13181 . 13182) (COLON 13180 . 13181) (RPAREN 13179 . 13180) (DEDENT 13162 . 13162) (DEF 13162 . 13165) (LPAREN 13175 . 13176) (NEWLINE 13029 . 13030) (COLON 13028 . 13029) (RPAREN 13027 . 13028) (DEDENT 12998 . 12998) (DEF 12998 . 13001) (LPAREN 13023 . 13024) (NEWLINE 12760 . 12761) (COLON 12759 . 12760) (RPAREN 12758 . 12759) (DEDENT 12728 . 12728) (DEF 12728 . 12731) (LPAREN 12754 . 12755) (NEWLINE 12362 . 12363) (COLON 12361 . 12362) (RPAREN 12360 . 12361) (DEDENT 12338 . 12338) (DEF 12338 . 12341) (LPAREN 12356 . 12357) (NEWLINE 12210 . 12211) (COLON 12209 . 12210) (RPAREN 12208 . 12209) (DEDENT 12192 . 12192) (DEF 12192 . 12195) (LPAREN 12204 . 12205) (NEWLINE 12095 . 12096) (COLON 12094 . 12095) (RPAREN 12093 . 12094) (DEDENT 12081 . 12081) (DEF 12081 . 12084) (LPAREN 12091 . 12092)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The figure module provides the top-level
:class:`~matplotlib.artist.Artist`, the :class:`Figure`, which
contains all the plot elements.  The following classes are defined

:class:`SubplotParams`
    control the default spacing of the subplots

:class:`Figure`
    top level container for all plot elements


\"\"\"" code nil nil [1 316])
            ("numpy" include nil nil [317 335])
            ("artist" include nil nil [337 350])
            ("artist" include nil nil [351 397])
            ("axes" include nil nil [398 455])
            ("cbook" include nil nil [456 524])
            ("_image" include nil nil [525 538])
            ("colorbar" include nil nil [539 562])
            ("image" include nil nil [563 592])
            ("matplotlib" include nil nil [593 624])
            ("patches" include nil nil [625 654])
            ("text" include nil nil [655 696])
            ("legend" include nil nil [698 723])
            ("transforms" include nil nil [724 795])
            ("projections" include nil nil [796 888])
            ("matplotlib.blocking_input" include nil nil [889 968])
            ("matplotlib.cbook" include nil nil [970 1002])
            ("matplotlib" include nil nil [1003 1035])
            ("operator" include nil nil [1037 1068])
            ("os.path" include nil nil [1069 1083])
            ("docstring" code nil nil [1085 1152])
            ("AxesStack" type
               (:documentation "
    Specialization of the Stack to handle all
    tracking of Axes in a Figure.  This requires storing
    key, (ind, axes) pairs. The key is based on the args and kwargs
    used in generating the Axes. ind is a serial number for tracking
    the order in which axes were added.
    "
                :superclasses ("Stack")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Stack" code nil (reparse-symbol indented_block_body) [1506 1526])
                            ("self" variable nil (reparse-symbol indented_block_body) [1535 1548]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1491 1495]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1478 1549])
                    ("as_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1566 1570]))                          
                        :documentation "
        Return a list of the Axes instances that have been added to the figure
        ")
                        (reparse-symbol indented_block_body) [1554 1787])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1800 1804])
                            ("key" variable nil (reparse-symbol function_parameters) [1806 1809]))                          
                        :documentation "
        Return the Axes instance that was added with *key*.
        If it is not present, return None.
        ")
                        (reparse-symbol indented_block_body) [1792 2056])
                    ("_entry_from_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2082 2086])
                            ("e" variable nil (reparse-symbol function_parameters) [2088 2089]))                          )
                        (reparse-symbol indented_block_body) [2061 2199])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2215 2219])
                            ("a" variable nil (reparse-symbol function_parameters) [2221 2222]))                          )
                        (reparse-symbol indented_block_body) [2204 2278])
                    ("bubble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2294 2298])
                            ("a" variable nil (reparse-symbol function_parameters) [2300 2301]))                          )
                        (reparse-symbol indented_block_body) [2283 2364])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2377 2381])
                            ("key" variable nil (reparse-symbol function_parameters) [2383 2386])
                            ("a" variable nil (reparse-symbol function_parameters) [2388 2389]))                          
                        :documentation "
        Add Axes *a*, with key *key*, to the stack, and return the stack.

        If *a* is already on the stack, don't add it again, but
        return *None*.
        ")
                        (reparse-symbol indented_block_body) [2369 3363])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3381 3385]))                          )
                        (reparse-symbol indented_block_body) [3368 3522])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3544 3548])
                            ("a" variable nil (reparse-symbol function_parameters) [3550 3551]))                          )
                        (reparse-symbol indented_block_body) [3527 3589]))                  
                :type "class")
                nil [1154 3589])
            ("SubplotParams" type
               (:documentation "
    A class to hold the parameters for a subplot
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        All dimensions are fraction of the figure width or height.
        All values default to their rc params

        The following attributes are available

        *left*  : 0.125
            The left side of the subplots of the figure

        *right* : 0.9
            The right side of the subplots of the figure

        *bottom* : 0.1
            The bottom of the subplots of the figure

        *top* : 0.9
            The top of the subplots of the figure

        *wspace* : 0.2
            The amount of width reserved for blank space between subplots

        *hspace* : 0.2
            The amount of height reserved for white space between subplots
        \"\"\"" code nil (reparse-symbol indented_block_body) [3797 4479])
                            ("self" variable nil (reparse-symbol indented_block_body) [4489 4509])
                            ("self" code nil (reparse-symbol indented_block_body) [4518 4571]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3693 3697])
                            ("left" variable nil (reparse-symbol function_parameters) [3699 3703])
                            ("bottom" variable nil (reparse-symbol function_parameters) [3710 3716])
                            ("right" variable nil (reparse-symbol function_parameters) [3723 3728])
                            ("top" variable nil (reparse-symbol function_parameters) [3735 3738])
                            ("wspace" variable nil (reparse-symbol function_parameters) [3762 3768])
                            ("hspace" variable nil (reparse-symbol function_parameters) [3775 3781]))                          
                        :documentation "
        All dimensions are fraction of the figure width or height.
        All values default to their rc params

        The following attributes are available

        *left*  : 0.125
            The left side of the subplots of the figure

        *right* : 0.9
            The right side of the subplots of the figure

        *bottom* : 0.1
            The bottom of the subplots of the figure

        *top* : 0.9
            The top of the subplots of the figure

        *wspace* : 0.2
            The amount of width reserved for blank space between subplots

        *hspace* : 0.2
            The amount of height reserved for white space between subplots
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3680 4572])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4588 4592])
                            ("left" variable nil (reparse-symbol function_parameters) [4593 4597])
                            ("bottom" variable nil (reparse-symbol function_parameters) [4604 4610])
                            ("right" variable nil (reparse-symbol function_parameters) [4617 4622])
                            ("top" variable nil (reparse-symbol function_parameters) [4629 4632])
                            ("wspace" variable nil (reparse-symbol function_parameters) [4654 4660])
                            ("hspace" variable nil (reparse-symbol function_parameters) [4667 4673]))                          
                        :documentation "
        Update the current values.  If any kwarg is None, default to
        the current value, if set, otherwise to rc

        ")
                        (reparse-symbol indented_block_body) [4577 5879])
                    ("_update_this" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5903 5907])
                            ("s" variable nil (reparse-symbol function_parameters) [5909 5910])
                            ("val" variable nil (reparse-symbol function_parameters) [5912 5915]))                          )
                        (reparse-symbol indented_block_body) [5886 6122]))                  
                :type "class")
                nil [3590 6122])
            ("Figure" type
               (:documentation "
    The Figure instance supports callbacks through a *callbacks*
    attribute which is a :class:`matplotlib.cbook.CallbackRegistry`
    instance.  The events you can connect to are 'dpi_changed', and
    the callback will be called with ``func(fig)`` where fig is the
    :class:`Figure` instance.

    *patch*
       The figure patch is drawn by a
       :class:`matplotlib.patches.Rectangle` instance

    *suppressComposite*
       For multiple figure images, the figure will make composite
       images depending on the renderer option_image_nocomposite
       function.  If suppressComposite is True|False, this will
       override the renderer
    "
                :superclasses ("Artist")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6832 6836]))                          )
                        (reparse-symbol indented_block_body) [6820 6894])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *figsize*
            w,h tuple in inches

        *dpi*
            Dots per inch

        *facecolor*
            The figure patch facecolor; defaults to rc ``figure.facecolor``

        *edgecolor*
            The figure patch edge color; defaults to rc ``figure.edgecolor``

        *linewidth*
            The figure patch edge linewidth; the default linewidth of the frame

        *frameon*
            If *False*, suppress drawing the figure frame

        *subplotpars*
            A :class:`SubplotParams` instance, defaults to rc
        \"\"\"" code nil (reparse-symbol indented_block_body) [7422 7986])
                            ("Artist" code nil (reparse-symbol indented_block_body) [7995 8016])
                            ("self" variable nil (reparse-symbol indented_block_body) [8026 8067])
                            ("if" code nil (reparse-symbol indented_block_body) [8077 8138])
                            ("if" code nil (reparse-symbol indented_block_body) [8146 8203])
                            ("if" code nil (reparse-symbol indented_block_body) [8211 8274])
                            ("if" code nil (reparse-symbol indented_block_body) [8282 8345])
                            ("self" variable nil (reparse-symbol indented_block_body) [8354 8387])
                            ("self" variable nil (reparse-symbol indented_block_body) [8396 8410])
                            ("self" variable nil (reparse-symbol indented_block_body) [8419 8470])
                            ("self" variable nil (reparse-symbol indented_block_body) [8479 8546])
                            ("self" variable nil (reparse-symbol indented_block_body) [8556 8578])
                            ("self" variable nil (reparse-symbol indented_block_body) [8588 8633])
                            ("self" variable nil (reparse-symbol indented_block_body) [8688 8872])
                            ("self" code nil (reparse-symbol indented_block_body) [8881 8915])
                            ("self" code nil (reparse-symbol indented_block_body) [8924 8948])
                            ("self" variable nil (reparse-symbol indented_block_body) [8958 8992])
                            ("self" variable nil (reparse-symbol indented_block_body) [9001 9019])
                            ("if" code nil (reparse-symbol indented_block_body) [9029 9095])
                            ("self" variable nil (reparse-symbol indented_block_body) [9104 9134])
                            ("self" variable nil (reparse-symbol indented_block_body) [9144 9171])
                            ("self" code nil (reparse-symbol indented_block_body) [9222 9232])
                            ("self" variable nil (reparse-symbol indented_block_body) [9241 9268]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6912 6916])
                            ("figsize" variable nil (reparse-symbol function_parameters) [6935 6942])
                            ("dpi" variable nil (reparse-symbol function_parameters) [7003 7006])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [7067 7076])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [7137 7146])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [7207 7216])
                            ("frameon" variable nil (reparse-symbol function_parameters) [7280 7287])
                            ("subplotpars" variable nil (reparse-symbol function_parameters) [7358 7369]))                          
                        :documentation "
        *figsize*
            w,h tuple in inches

        *dpi*
            Dots per inch

        *facecolor*
            The figure patch facecolor; defaults to rc ``figure.facecolor``

        *edgecolor*
            The figure patch edge color; defaults to rc ``figure.edgecolor``

        *linewidth*
            The figure patch edge linewidth; the default linewidth of the frame

        *frameon*
            If *False*, suppress drawing the figure frame

        *subplotpars*
            A :class:`SubplotParams` instance, defaults to rc
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6899 9269])
                    ("_get_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9288 9292]))                          )
                        (reparse-symbol indented_block_body) [9274 9334])
                    ("axes" variable nil (reparse-symbol indented_block_body) [9339 9411])
                    ("_get_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9430 9434]))                          )
                        (reparse-symbol indented_block_body) [9417 9462])
                    ("_set_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9479 9483])
                            ("dpi" variable nil (reparse-symbol function_parameters) [9485 9488]))                          )
                        (reparse-symbol indented_block_body) [9466 9620])
                    ("dpi" variable nil (reparse-symbol indented_block_body) [9624 9658])
                    ("autofmt_xdate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9682 9686])
                            ("bottom" variable nil (reparse-symbol function_parameters) [9688 9694])
                            ("rotation" variable nil (reparse-symbol function_parameters) [9700 9708])
                            ("ha" variable nil (reparse-symbol function_parameters) [9713 9715]))                          
                        :documentation "
        Date ticklabels often overlap, so it is useful to rotate them
        and right align them.  Also, a common use case is a number of
        subplots with shared xaxes where the x-axis is date data.  The
        ticklabels are often long, and it helps to rotate them on the
        bottom subplot and turn them off on other subplots, as well as
        turn off xlabels.

        *bottom*
            The bottom of the subplots for :meth:`subplots_adjust`

        *rotation*
            The rotation of the xtick labels

        *ha*
            The horizontal alignment of the xticklabels
        ")
                        (reparse-symbol indented_block_body) [9664 11126])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11148 11152]))                          )
                        (reparse-symbol indented_block_body) [11131 11525])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11543 11547])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [11549 11559]))                          
                        :documentation "
        Test whether the mouse event occurred on the figure.

        Returns True,{}
        ")
                        (reparse-symbol indented_block_body) [11530 11895])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11922 11926])
                            ("args" variable nil (reparse-symbol function_parameters) [11928 11933])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11935 11943]))                          )
                        (reparse-symbol indented_block_body) [11900 12043])
                    ("suptitle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12061 12065])
                            ("t" variable nil (reparse-symbol function_parameters) [12067 12068])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12070 12078]))                          
                        :documentation "
        Add a centered title to the figure.

        kwargs are :class:`matplotlib.text.Text` properties.  Using figure
        coordinates, the defaults are:

          *x* : 0.5
            The x location of the text in figure coords

          *y* : 0.98
            The y location of the text in figure coords

          *horizontalalignment* : 'center'
            The horizontal alignment of the text

          *verticalalignment* : 'top'
            The vertical alignment of the text

        A :class:`matplotlib.text.Text` instance is returned.

        Example::

          fig.suptitle('this is the figure title', fontsize=12)
        ")
                        (reparse-symbol indented_block_body) [12048 13121])
                    ("set_canvas" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13141 13145])
                            ("canvas" variable nil (reparse-symbol function_parameters) [13147 13153]))                          
                        :documentation "
        Set the canvas the contains the figure

        ACCEPTS: a FigureCanvas instance
        ")
                        (reparse-symbol indented_block_body) [13126 13298])
                    ("hold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13312 13316])
                            ("b" variable nil (reparse-symbol function_parameters) [13318 13319]))                          
                        :documentation "
        Set the hold state.  If hold is None (default), toggle the
        hold state.  Else set the hold state to boolean value b.

        Eg::

            hold()      # toggle hold
            hold(True)  # hold is on
            hold(False) # hold is off
        ")
                        (reparse-symbol indented_block_body) [13303 13690])
                    ("figimage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13708 13712])
                            ("X" variable nil (reparse-symbol function_parameters) [13714 13715])
                            ("xo" variable nil (reparse-symbol function_parameters) [13734 13736])
                            ("yo" variable nil (reparse-symbol function_parameters) [13757 13759])
                            ("alpha" variable nil (reparse-symbol function_parameters) [13780 13785])
                            ("norm" variable nil (reparse-symbol function_parameters) [13809 13813])
                            ("cmap" variable nil (reparse-symbol function_parameters) [13837 13841])
                            ("vmin" variable nil (reparse-symbol function_parameters) [13865 13869])
                            ("vmax" variable nil (reparse-symbol function_parameters) [13893 13897])
                            ("origin" variable nil (reparse-symbol function_parameters) [13921 13927])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [13951 13959]))                          
                        :documentation "
        call signatures::

          figimage(X, **kwargs)

        adds a non-resampled array *X* to the figure.

        ::

          figimage(X, xo, yo)

        with pixel offsets *xo*, *yo*,

        *X* must be a float array:

        * If *X* is MxN, assume luminance (grayscale)
        * If *X* is MxNx3, assume RGB
        * If *X* is MxNx4, assume RGBA

        Optional keyword arguments:

          =========   ==========================================================
          Keyword     Description
          =========   ==========================================================
          xo or yo    An integer, the *x* and *y* image offset in pixels
          cmap        a :class:`matplotlib.colors.Colormap` instance, eg cm.jet.
                      If *None*, default to the rc ``image.cmap`` value
          norm        a :class:`matplotlib.colors.Normalize` instance. The
                      default is normalization().  This scales luminance -> 0-1
          vmin|vmax   are used to scale a luminance image to 0-1.  If either is
                      *None*, the min and max of the luminance values will be
                      used.  Note if you pass a norm instance, the settings for
                      *vmin* and *vmax* will be ignored.
          alpha       the alpha blending value, default is *None*
          origin      [ 'upper' | 'lower' ] Indicates where the [0,0] index of
                      the array is in the upper left or lower left corner of
                      the axes. Defaults to the rc image.origin value
          =========   ==========================================================

        figimage complements the axes image
        (:meth:`~matplotlib.axes.Axes.imshow`) which will be resampled
        to fit the current axes.  If you want a resampled image to
        fill the entire figure, you can define an
        :class:`~matplotlib.axes.Axes` with size [0,1,0,1].

        An :class:`matplotlib.image.FigureImage` instance is returned.

        .. plot:: mpl_examples/pylab_examples/figimage_demo.py


        Additional kwargs are Artist kwargs passed on to
        :class:`~matplotlib.image.FigureImage`
        ")
                        (reparse-symbol indented_block_body) [13695 16440])
                    ("set_size_inches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16465 16469])
                            ("args" variable nil (reparse-symbol function_parameters) [16471 16476])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16478 16486]))                          
                        :documentation "
        set_size_inches(w,h, forward=False)

        Set the figure size in inches

        Usage::

             fig.set_size_inches(w,h)  # OR
             fig.set_size_inches((w,h) )

        optional kwarg *forward=True* will cause the canvas size to be
        automatically updated; eg you can resize the figure window
        from the shell

        ACCEPTS: a w,h tuple with w,h in inches
        ")
                        (reparse-symbol indented_block_body) [16445 17376])
                    ("get_size_inches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17401 17405]))                          )
                        (reparse-symbol indented_block_body) [17381 17443])
                    ("get_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17466 17470]))                          )
                        (reparse-symbol indented_block_body) [17448 17568])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17591 17595]))                          )
                        (reparse-symbol indented_block_body) [17573 17693])
                    ("get_figwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17715 17719]))                          )
                        (reparse-symbol indented_block_body) [17698 17801])
                    ("get_figheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17824 17828]))                          )
                        (reparse-symbol indented_block_body) [17806 17912])
                    ("get_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17929 17933]))                          )
                        (reparse-symbol indented_block_body) [17917 17996])
                    ("get_frameon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18017 18021]))                          )
                        (reparse-symbol indented_block_body) [18001 18097])
                    ("set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18120 18124])
                            ("color" variable nil (reparse-symbol function_parameters) [18126 18131]))                          
                        :documentation "
        Set the edge color of the Figure rectangle

        ACCEPTS: any matplotlib color - see help(colors)
        ")
                        (reparse-symbol indented_block_body) [18102 18307])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18330 18334])
                            ("color" variable nil (reparse-symbol function_parameters) [18336 18341]))                          
                        :documentation "
        Set the face color of the Figure rectangle

        ACCEPTS: any matplotlib color - see help(colors)
        ")
                        (reparse-symbol indented_block_body) [18312 18517])
                    ("set_dpi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18534 18538])
                            ("val" variable nil (reparse-symbol function_parameters) [18540 18543]))                          
                        :documentation "
        Set the dots-per-inch of the figure

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [18522 18661])
                    ("set_figwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18683 18687])
                            ("val" variable nil (reparse-symbol function_parameters) [18689 18692]))                          
                        :documentation "
        Set the width of the figure in inches

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [18666 18823])
                    ("set_figheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18846 18850])
                            ("val" variable nil (reparse-symbol function_parameters) [18852 18855]))                          
                        :documentation "
        Set the height of the figure in inches

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [18828 18987])
                    ("set_frameon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19008 19012])
                            ("b" variable nil (reparse-symbol function_parameters) [19014 19015]))                          
                        :documentation "
        Set whether the figure frame (background) is displayed or invisible

        ACCEPTS: boolean
        ")
                        (reparse-symbol indented_block_body) [18992 19169])
                    ("delaxes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19186 19190])
                            ("a" variable nil (reparse-symbol function_parameters) [19192 19193]))                          )
                        (reparse-symbol indented_block_body) [19174 19341])
                    ("_make_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19360 19364])
                            ("args" variable nil (reparse-symbol function_parameters) [19366 19371])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19373 19381]))                          )
                        (reparse-symbol indented_block_body) [19346 19989])
                    ("add_axes" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20037 20041])
                            ("args" variable nil (reparse-symbol function_parameters) [20043 20048])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20050 20058]))                          
                        :documentation "
        Add an axes at position *rect* [*left*, *bottom*, *width*,
        *height*] where all quantities are in fractions of figure
        width and height.  kwargs are legal
        :class:`~matplotlib.axes.Axes` kwargs plus *projection* which
        sets the projection type of the axes.  (For backward
        compatibility, ``polar=True`` may also be provided, which is
        equivalent to ``projection='polar'``).  Valid values for
        *projection* are: %(projection_names)s.  Some of these
        projections support  additional kwargs, which may be provided
        to :meth:`add_axes`. Typical usage::

            rect = l,b,w,h
            fig.add_axes(rect)
            fig.add_axes(rect, frameon=False, axisbg='g')
            fig.add_axes(rect, polar=True)
            fig.add_axes(rect, projection='polar')
            fig.add_axes(ax)

        If the figure already has an axes with the same parameters,
        then it will simply make that axes current and return it.  If
        you do not want this behavior, e.g. you want to force the
        creation of a new Axes, you must use a unique set of args and
        kwargs.  The axes :attr:`~matplotlib.axes.Axes.label`
        attribute has been exposed for this purpose.  Eg., if you want
        two axes that are otherwise identical to be added to the
        figure, make sure you give them unique labels::

            fig.add_axes(rect, label='axes1')
            fig.add_axes(rect, label='axes2')

        In rare circumstances, add_axes may be called with a single
        argument, an Axes instance already created in the present
        figure but not in the figure's list of axes.  For example,
        if an axes has been removed with :meth:`delaxes`, it can
        be restored with::

            fig.add_axes(ax)

        In all cases, the :class:`~matplotlib.axes.Axes` instance
        will be returned.

        In addition to *projection*, the following kwargs are supported:

        %(Axes)s
        ")
                        (reparse-symbol indented_block_body) [19994 23002])
                    ("add_subplot" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23053 23057])
                            ("args" variable nil (reparse-symbol function_parameters) [23059 23064])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23066 23074]))                          
                        :documentation "
        Add a subplot.  Examples::

            fig.add_subplot(111)
            fig.add_subplot(1,1,1)            # equivalent but more general
            fig.add_subplot(212, axisbg='r')  # add subplot with red background
            fig.add_subplot(111, polar=True)  # add a polar subplot
            fig.add_subplot(sub)              # add Subplot instance sub

        *kwargs* are legal :class:`~matplotlib.axes.Axes` kwargs plus
        *projection*, which chooses a projection type for the axes.
        (For backward compatibility, *polar=True* may also be
        provided, which is equivalent to *projection='polar'*). Valid
        values for *projection* are: %(projection_names)s.  Some of
        these projections
        support additional *kwargs*, which may be provided to
        :meth:`add_axes`.

        The :class:`~matplotlib.axes.Axes` instance will be returned.

        If the figure already has a subplot with key (*args*,
        *kwargs*) then it will simply make that subplot current and
        return it.

        The following kwargs are supported:

        %(Axes)s
        ")
                        (reparse-symbol indented_block_body) [23007 25892])
                    ("clf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25905 25909])
                            ("keep_observers" variable nil (reparse-symbol function_parameters) [25911 25925]))                          
                        :documentation "
        Clear the figure.

        Set *keep_observers* to True if, for example,
        a gui widget is tracking the axes in the figure.
        ")
                        (reparse-symbol indented_block_body) [25897 26700])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26715 26719]))                          
                        :documentation "
        Clear the figure -- synonym for :meth:`clf`.
        ")
                        (reparse-symbol indented_block_body) [26705 26818])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26857 26861])
                            ("renderer" variable nil (reparse-symbol function_parameters) [26863 26871]))                          
                        :documentation "
        Render the figure using :class:`matplotlib.backend_bases.RendererBase`
        instance *renderer*.
        ")
                        (reparse-symbol indented_block_body) [26823 29524])
                    ("draw_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29545 29549])
                            ("a" variable nil (reparse-symbol function_parameters) [29551 29552]))                          
                        :documentation "
        draw :class:`matplotlib.artist.Artist` instance *a* only --
        this is available only after the figure is drawn
        ")
                        (reparse-symbol indented_block_body) [29529 29789])
                    ("get_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29807 29811]))                          )
                        (reparse-symbol indented_block_body) [29794 29839])
                    ("legend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29855 29859])
                            ("handles" variable nil (reparse-symbol function_parameters) [29861 29868])
                            ("labels" variable nil (reparse-symbol function_parameters) [29870 29876])
                            ("args" variable nil (reparse-symbol function_parameters) [29878 29883])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29885 29893]))                          
                        :documentation "
        Place a legend in the figure.  Labels are a sequence of
        strings, handles is a sequence of
        :class:`~matplotlib.lines.Line2D` or
        :class:`~matplotlib.patches.Patch` instances, and loc can be a
        string or an integer specifying the legend location

        USAGE::

          legend( (line1, line2, line3),
                  ('label1', 'label2', 'label3'),
                  'upper right')

        The *loc* location codes are::

          'best' : 0,          (currently not supported for figure legends)
          'upper right'  : 1,
          'upper left'   : 2,
          'lower left'   : 3,
          'lower right'  : 4,
          'right'        : 5,
          'center left'  : 6,
          'center right' : 7,
          'lower center' : 8,
          'upper center' : 9,
          'center'       : 10,

        *loc* can also be an (x,y) tuple in figure coords, which
        specifies the lower left of the legend box.  figure coords are
        (0,0) is the left, bottom of the figure and 1,1 is the right,
        top.

        Keyword arguments:

          *prop*: [ *None* | FontProperties | dict ]
            A :class:`matplotlib.font_manager.FontProperties`
            instance. If *prop* is a dictionary, a new instance will be
            created with *prop*. If *None*, use rc settings.

          *numpoints*: integer
            The number of points in the legend line, default is 4

          *scatterpoints*: integer
            The number of points in the legend line, default is 4

          *scatteroffsets*: list of floats
            a list of yoffsets for scatter symbols in legend

          *markerscale*: [ *None* | scalar ]
            The relative size of legend markers vs. original. If *None*, use rc
            settings.

          *fancybox*: [ *None* | *False* | *True* ]
            if *True*, draw a frame with a round fancybox.  If *None*, use rc

          *shadow*: [ *None* | *False* | *True* ]
            If *True*, draw a shadow behind legend. If *None*, use rc settings.

          *ncol* : integer
            number of columns. default is 1

          *mode* : [ \"expand\" | *None* ]
            if mode is \"expand\", the legend will be horizontally expanded
            to fill the axes area (or *bbox_to_anchor*)

          *title* : string
            the legend title

        Padding and spacing between various elements use following keywords
        parameters. The dimensions of these values are given as a fraction
        of the fontsize. Values from rcParams will be used if None.

        ================   ==================================================================
        Keyword            Description
        ================   ==================================================================
        borderpad          the fractional whitespace inside the legend border
        labelspacing       the vertical space between the legend entries
        handlelength       the length of the legend handles
        handletextpad      the pad between the legend handle and text
        borderaxespad      the pad between the axes and legend border
        columnspacing      the spacing between columns
        ================   ==================================================================

        .. Note:: Not all kinds of artist are supported by the legend.
                  See LINK (FIXME) for details.

        **Example:**

        .. plot:: mpl_examples/pylab_examples/figlegend_demo.py
        ")
                        (reparse-symbol indented_block_body) [29844 33537])
                    ("text" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33581 33585])
                            ("x" variable nil (reparse-symbol function_parameters) [33587 33588])
                            ("y" variable nil (reparse-symbol function_parameters) [33590 33591])
                            ("s" variable nil (reparse-symbol function_parameters) [33593 33594])
                            ("args" variable nil (reparse-symbol function_parameters) [33596 33601])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33603 33611]))                          
                        :documentation "
        Call signature::

          figtext(x, y, s, fontdict=None, **kwargs)

        Add text to figure at location *x*, *y* (relative 0-1
        coords). See :func:`~matplotlib.pyplot.text` for the meaning
        of the other arguments.

        kwargs control the :class:`~matplotlib.text.Text` properties:

        %(Text)s
        ")
                        (reparse-symbol indented_block_body) [33542 34199])
                    ("_set_artist_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34226 34230])
                            ("a" variable nil (reparse-symbol function_parameters) [34232 34233]))                          )
                        (reparse-symbol indented_block_body) [34204 34330])
                    ("gca" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34373 34377])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34379 34387]))                          
                        :documentation "
        Return the current axes, creating one if necessary

        The following kwargs are supported
        %(Axes)s
        ")
                        (reparse-symbol indented_block_body) [34335 35224])
                    ("sca" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35237 35241])
                            ("a" variable nil (reparse-symbol function_parameters) [35243 35244]))                          )
                        (reparse-symbol indented_block_body) [35229 35398])
                    ("_gci" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35412 35416]))                          
                        :documentation "
        helper for :func:`~matplotlib.pyplot.gci`;
        do not use elsewhere.
        ")
                        (reparse-symbol indented_block_body) [35403 35667])
                    ("add_axobserver" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35691 35695])
                            ("func" variable nil (reparse-symbol function_parameters) [35697 35701]))                          )
                        (reparse-symbol indented_block_body) [35672 35815])
                    ("savefig" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35833 35837])
                            ("args" variable nil (reparse-symbol function_parameters) [35839 35844])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35846 35854]))                          
                        :documentation "
        call signature::

          savefig(fname, dpi=None, facecolor='w', edgecolor='w',
                  orientation='portrait', papertype=None, format=None,
                  transparent=False, bbox_inches=None, pad_inches=0.1):

        Save the current figure.

        The output formats available depend on the backend being used.

        Arguments:

          *fname*:
            A string containing a path to a filename, or a Python
            file-like object, or possibly some backend-dependent object
            such as :class:`~matplotlib.backends.backend_pdf.PdfPages`.

            If *format* is *None* and *fname* is a string, the output
            format is deduced from the extension of the filename. If
            the filename has no extension, the value of the rc parameter
            ``savefig.extension`` is used. If that value is 'auto',
            the backend determines the extension.

            If *fname* is not a string, remember to specify *format* to
            ensure that the correct backend is used.

        Keyword arguments:

          *dpi*: [ *None* | ``scalar > 0`` ]
            The resolution in dots per inch.  If *None* it will default to
            the value ``savefig.dpi`` in the matplotlibrc file.

          *facecolor*, *edgecolor*:
            the colors of the figure rectangle

          *orientation*: [ 'landscape' | 'portrait' ]
            not supported on all backends; currently only on postscript output

          *papertype*:
            One of 'letter', 'legal', 'executive', 'ledger', 'a0' through
            'a10', 'b0' through 'b10'. Only supported for postscript
            output.

          *format*:
            One of the file extensions supported by the active
            backend.  Most backends support png, pdf, ps, eps and svg.

          *transparent*:
            If *True*, the axes patches will all be transparent; the
            figure patch will also be transparent unless facecolor
            and/or edgecolor are specified via kwargs.
            This is useful, for example, for displaying
            a plot on top of a colored background on a web page.  The
            transparency of these patches will be restored to their
            original values upon exit of this function.

          *bbox_inches*:
            Bbox in inches. Only the given portion of the figure is
            saved. If 'tight', try to figure out the tight bbox of
            the figure.

          *pad_inches*:
            Amount of padding around the figure when bbox_inches is
            'tight'.

          *bbox_extra_artists*:
            A list of extra artists that will be considered when the
            tight bbox is calculated.

        ")
                        (reparse-symbol indented_block_body) [35821 39822])
                    ("colorbar" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39870 39874])
                            ("mappable" variable nil (reparse-symbol function_parameters) [39876 39884])
                            ("cax" variable nil (reparse-symbol function_parameters) [39886 39889])
                            ("ax" variable nil (reparse-symbol function_parameters) [39896 39898])
                            ("kw" variable nil (reparse-symbol function_parameters) [39905 39909]))                          
                        :documentation "
        Create a colorbar for a ScalarMappable instance, *mappable*.

        Documentation for the pylab thin wrapper:
        %(colorbar_doc)s
        ")
                        (reparse-symbol indented_block_body) [39827 40816])
                    ("subplots_adjust" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40841 40845])
                            ("args" variable nil (reparse-symbol function_parameters) [40847 40852])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [40854 40862]))                          
                        :documentation "
        Call signature::

          fig.subplots_adjust(left=None, bottom=None, right=None, top=None,
                              wspace=None, hspace=None)

        Update the :class:`SubplotParams` with *kwargs* (defaulting to rc when
        *None*) and update the subplot locations

        ")
                        (reparse-symbol indented_block_body) [40821 41901])
                    ("ginput" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41917 41921])
                            ("n" variable nil (reparse-symbol function_parameters) [41923 41924])
                            ("timeout" variable nil (reparse-symbol function_parameters) [41928 41935])
                            ("show_clicks" variable nil (reparse-symbol function_parameters) [41940 41951])
                            ("mouse_add" variable nil (reparse-symbol function_parameters) [41958 41967])
                            ("mouse_pop" variable nil (reparse-symbol function_parameters) [41971 41980])
                            ("mouse_stop" variable nil (reparse-symbol function_parameters) [41984 41994]))                          
                        :documentation "
        Call signature::

          ginput(self, n=1, timeout=30, show_clicks=True,
                 mouse_add=1, mouse_pop=3, mouse_stop=2)

        Blocking call to interact with the figure.

        This will wait for *n* clicks from the user and return a list of the
        coordinates of each click.

        If *timeout* is zero or negative, does not timeout.

        If *n* is zero or negative, accumulate clicks until a middle click
        (or potentially both mouse buttons at once) terminates the input.

        Right clicking cancels last input.

        The buttons used for the various actions (adding points, removing
        points, terminating the inputs) can be overriden via the
        arguments *mouse_add*, *mouse_pop* and *mouse_stop*, that give
        the associated mouse button: 1 for left, 2 for middle, 3 for
        right.

        The keyboard can also be used to select points in case your mouse
        does not have one or more of the buttons.  The delete and backspace
        keys act like right clicking (i.e., remove last point), the enter key
        terminates input and any other key (not already used by the window
        manager) selects a point.
        ")
                        (reparse-symbol indented_block_body) [41906 43572])
                    ("waitforbuttonpress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43600 43604])
                            ("timeout" variable nil (reparse-symbol function_parameters) [43606 43613]))                          
                        :documentation "
        Call signature::

          waitforbuttonpress(self, timeout=-1)

        Blocking call to interact with the figure.

        This will return True is a key was pressed, False if a mouse
        button was pressed and None if *timeout* was reached without
        either being pressed.

        If *timeout* is negative, does not timeout.
        ")
                        (reparse-symbol indented_block_body) [43577 44091])
                    ("get_default_bbox_extra_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44132 44136]))                          )
                        (reparse-symbol indented_block_body) [44097 44386])
                    ("get_tightbbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44410 44414])
                            ("renderer" variable nil (reparse-symbol function_parameters) [44416 44424]))                          
                        :documentation "
        Return a (tight) bounding box of the figure in inches.

        It only accounts axes title, axis labels, and axis
        ticklabels. Needs improvement.
        ")
                        (reparse-symbol indented_block_body) [44392 44963])
                    ("tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44986 44990])
                            ("renderer" variable nil (reparse-symbol function_parameters) [44992 45000])
                            ("pad" variable nil (reparse-symbol function_parameters) [45007 45010])
                            ("h_pad" variable nil (reparse-symbol function_parameters) [45016 45021])
                            ("w_pad" variable nil (reparse-symbol function_parameters) [45028 45033]))                          
                        :documentation "
        Adjust subplot parameters to give specified padding.

        Parameters:

          *pad* : float
            padding between the figure edge and the edges of subplots,
            as a fraction of the font-size.
          *h_pad*, *w_pad* : float
            padding (height/width) between edges of adjacent subplots.
            Defaults to `pad_inches`.
        ")
                        (reparse-symbol indented_block_body) [44969 48109]))                  
                :type "class")
                nil [6123 48109])
            ("figaspect" function
               (:documentation "
    Create a figure with specified aspect ratio.  If *arg* is a number,
    use that aspect ratio.  If *arg* is an array, figaspect will
    determine the width and height for a figure that would fit array
    preserving aspect ratio.  The figure width, height in inches are
    returned.  Be sure to create an axes with equal with and height,
    eg

    Example usage::

      # make a figure twice as tall as it is wide
      w, h = figaspect(2.)
      fig = Figure(figsize=(w,h))
      ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
      ax.imshow(A, **kwargs)


      # make a figure with the proper aspect for an array
      A = rand(5,3)
      w, h = figaspect(A)
      fig = Figure(figsize=(w,h))
      ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
      ax.imshow(A, **kwargs)

    Thanks to Fernando Perez for this function
    "
                :arguments 
                  ( ("arg" variable nil (reparse-symbol function_parameters) [48126 48129]))                  )
                nil [48112 50185])
            ("docstring" code nil nil [50186 50239]))          
      :file "figure.py"
      :pointmax 50240
      :fsize 50239
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Abstract base classes define the primitives that renderers and
graphics contexts must implement to serve as a matplotlib backend

:class:`RendererBase`
    An abstract base class to handle drawing/rendering operations.

:class:`FigureCanvasBase`
    The abstraction layer that separates the
    :class:`matplotlib.figure.Figure` from the backend specific
    details like a user interface drawing area

:class:`GraphicsContextBase`
    An abstract base class that provides color, line styles, etc...

:class:`Event`
    The base class for all of the matplotlib event
    handling.  Derived classes suh as :class:`KeyEvent` and
    :class:`MouseEvent` store the meta data like keys and buttons
    pressed, x and y locations in pixel and
    :class:`~matplotlib.axes.Axes` coordinates.

:class:`ShowBase`
    The base class for the Show class of each interactive backend;
    the 'show' callable is then set to Show.__call__, inherited from
    ShowBase.

\"\"\"" code nil nil [2 964])
            ("__future__" include nil nil [966 997])
            ("time" include nil nil [998 1023])
            ("warnings" include nil nil [998 1023])
            ("os" include nil nil [998 1023])
            ("numpy" include nil nil [1025 1043])
            ("matplotlib.cbook" include nil nil [1044 1076])
            ("matplotlib.colors" include nil nil [1077 1111])
            ("matplotlib.transforms" include nil nil [1112 1154])
            ("matplotlib.widgets" include nil nil [1155 1191])
            ("matplotlib" include nil nil [1224 1255])
            ("matplotlib" include nil nil [1256 1293])
            ("matplotlib._pylab_helpers" include nil nil [1294 1335])
            ("matplotlib.transforms" include nil nil [1337 1402])
            ("cStringIO" include nil nil [1403 1419])
            ("matplotlib.tight_bbox" include nil nil [1421 1463])
            ("matplotlib.textpath" include nil nil [1464 1502])
            ("matplotlib.path" include nil nil [1503 1535])
            ("try" code nil nil [1537 1629])
            ("_backend_d" variable nil nil [1630 1645])
            ("register_backend" function (:arguments 
              ( ("format" variable nil (reparse-symbol function_parameters) [1668 1674])
                ("backend_class" variable nil (reparse-symbol function_parameters) [1676 1689]))              ) nil [1647 1731])
            ("ShowBase" type
               (:documentation "
    Simple base class to generate a show() callable in backends.

    Subclass must override mainloop() method.
    "
                :superclasses ("object")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1902 1906])
                            ("block" variable nil (reparse-symbol function_parameters) [1908 1913]))                          
                        :documentation "
        Show all figures.  If *block* is not None, then
        it is a boolean that overrides all other factors
        determining whether show blocks by calling mainloop().
        The other factors are:
        it does not block if run inside \"ipython --pylab\";
        it does not block in interactive mode.
        ")
                        (reparse-symbol indented_block_body) [1889 3210])
                    ("mainloop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3228 3232]))                          )
                        (reparse-symbol indented_block_body) [3215 3248]))                  
                :type "class")
                nil [1733 3248])
            ("RendererBase" type
               (:documentation "An abstract base class to handle drawing/rendering operations.

    The following methods *must* be implemented in the backend:

    * :meth:`draw_path`
    * :meth:`draw_image`
    * :meth:`draw_text`
    * :meth:`get_text_width_height_descent`

    The following methods *should* be implemented in the backend for
    optimization reasons:

    * :meth:`draw_markers`
    * :meth:`draw_path_collection`
    * :meth:`draw_quad_mesh`
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3752 3775])
                            ("self" variable nil (reparse-symbol indented_block_body) [3785 3824]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3737 3741]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3724 3825])
                    ("open_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3845 3849])
                            ("s" variable nil (reparse-symbol function_parameters) [3851 3852])
                            ("gid" variable nil (reparse-symbol function_parameters) [3854 3857]))                          
                        :documentation "
        Open a grouping element with label *s*. If *gid* is given, use
        *gid* as the id of the group. Is only currently used by
        :mod:`~matplotlib.backends.backend_svg`.
        ")
                        (reparse-symbol indented_block_body) [3830 4086])
                    ("close_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4107 4111])
                            ("s" variable nil (reparse-symbol function_parameters) [4113 4114]))                          
                        :documentation "
        Close a grouping element with label *s*
        Is only currently used by :mod:`~matplotlib.backends.backend_svg`
        ")
                        (reparse-symbol indented_block_body) [4091 4276])
                    ("draw_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4295 4299])
                            ("gc" variable nil (reparse-symbol function_parameters) [4301 4303])
                            ("path" variable nil (reparse-symbol function_parameters) [4305 4309])
                            ("transform" variable nil (reparse-symbol function_parameters) [4311 4320])
                            ("rgbFace" variable nil (reparse-symbol function_parameters) [4322 4329]))                          
                        :documentation "
        Draws a :class:`~matplotlib.path.Path` instance using the
        given affine transform.
        ")
                        (reparse-symbol indented_block_body) [4281 4493])
                    ("draw_markers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4515 4519])
                            ("gc" variable nil (reparse-symbol function_parameters) [4521 4523])
                            ("marker_path" variable nil (reparse-symbol function_parameters) [4525 4536])
                            ("marker_trans" variable nil (reparse-symbol function_parameters) [4538 4550])
                            ("path" variable nil (reparse-symbol function_parameters) [4552 4556])
                            ("trans" variable nil (reparse-symbol function_parameters) [4558 4563])
                            ("rgbFace" variable nil (reparse-symbol function_parameters) [4565 4572]))                          
                        :documentation "
        Draws a marker at each of the vertices in path.  This includes
        all vertices, including control points on curves.  To avoid
        that behavior, those vertices should be removed before calling
        this function.

        *gc*
            the :class:`GraphicsContextBase` instance

        *marker_trans*
            is an affine transform applied to the marker.

        *trans*
             is an affine transform applied to the path.

        This provides a fallback implementation of draw_markers that
        makes multiple calls to :meth:`draw_path`.  Some backends may
        want to override this method in order to draw the marker only
        once and reuse it multiple times.
        ")
                        (reparse-symbol indented_block_body) [4498 5626])
                    ("draw_path_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5656 5660])
                            ("gc" variable nil (reparse-symbol function_parameters) [5662 5664])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [5666 5682])
                            ("paths" variable nil (reparse-symbol function_parameters) [5684 5689])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [5691 5705])
                            ("offsets" variable nil (reparse-symbol function_parameters) [5736 5743])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [5745 5756])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [5758 5768])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [5770 5780])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [5811 5821])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [5823 5833])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [5835 5847])
                            ("urls" variable nil (reparse-symbol function_parameters) [5849 5853]))                          
                        :documentation "
        Draws a collection of paths selecting drawing properties from
        the lists *facecolors*, *edgecolors*, *linewidths*,
        *linestyles* and *antialiaseds*. *offsets* is a list of
        offsets to apply to each of the paths.  The offsets in
        *offsets* are first transformed by *offsetTrans* before being
        applied.

        This provides a fallback implementation of
        :meth:`draw_path_collection` that makes multiple calls to
        :meth:`draw_path`.  Some backends may want to override this in
        order to render each set of path data only once, and then
        reference that path multiple times with the different offsets,
        colors, styles etc.  The generator methods
        :meth:`_iter_collection_raw_paths` and
        :meth:`_iter_collection` are provided to help with (and
        standardize) the implementation across backends.  It is highly
        recommended to use those generators, so that changes to the
        behavior of :meth:`draw_path_collection` can be made globally.
        ")
                        (reparse-symbol indented_block_body) [5631 7489])
                    ("draw_quad_mesh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7513 7517])
                            ("gc" variable nil (reparse-symbol function_parameters) [7519 7521])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [7523 7539])
                            ("meshWidth" variable nil (reparse-symbol function_parameters) [7541 7550])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [7552 7562])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [7587 7598])
                            ("offsets" variable nil (reparse-symbol function_parameters) [7600 7607])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [7609 7620])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [7622 7632])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [7657 7668])
                            ("showedges" variable nil (reparse-symbol function_parameters) [7670 7679]))                          
                        :documentation "
        This provides a fallback implementation of
        :meth:`draw_quad_mesh` that generates paths and then calls
        :meth:`draw_path_collection`.
        ")
                        (reparse-symbol indented_block_body) [7494 8471])
                    ("draw_gouraud_triangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8502 8506])
                            ("gc" variable nil (reparse-symbol function_parameters) [8508 8510])
                            ("points" variable nil (reparse-symbol function_parameters) [8512 8518])
                            ("colors" variable nil (reparse-symbol function_parameters) [8520 8526])
                            ("transform" variable nil (reparse-symbol function_parameters) [8528 8537]))                          
                        :documentation "
        Draw a Gouraud-shaded triangle.

        *points* is a 3x2 array of (x, y) points for the triangle.

        *colors* is a 3x4 array of RGBA colors for each point of the
        triangle.

        *transform* is an affine transform to apply to the points.
        ")
                        (reparse-symbol indented_block_body) [8476 8862])
                    ("draw_gouraud_triangles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8894 8898])
                            ("gc" variable nil (reparse-symbol function_parameters) [8900 8902])
                            ("triangles_array" variable nil (reparse-symbol function_parameters) [8904 8919])
                            ("colors_array" variable nil (reparse-symbol function_parameters) [8921 8933])
                            ("transform" variable nil (reparse-symbol function_parameters) [8966 8975]))                          
                        :documentation "
        Draws a series of Gouraud triangles.

        *points* is a Nx3x2 array of (x, y) points for the trianglex.

        *colors* is a Nx3x4 array of RGBA colors for each point of the
        triangles.

        *transform* is an affine transform to apply to the points.
        ")
                        (reparse-symbol indented_block_body) [8867 9440])
                    ("_iter_collection_raw_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9476 9480])
                            ("master_transform" variable nil (reparse-symbol function_parameters) [9482 9498])
                            ("paths" variable nil (reparse-symbol function_parameters) [9500 9505])
                            ("all_transforms" variable nil (reparse-symbol function_parameters) [9542 9556]))                          
                        :documentation "
        This is a helper method (along with :meth:`_iter_collection`) to make
        it easier to write a space-efficent :meth:`draw_path_collection`
        implementation in a backend.

        This method yields all of the base path/transform
        combinations, given a master transform, a list of paths and
        list of transforms.

        The arguments should be exactly what is passed in to
        :meth:`draw_path_collection`.

        The backend should take each yielded path and transform and
        create an object that can be referenced (reused) later.
        ")
                        (reparse-symbol indented_block_body) [9445 10583])
                    ("_iter_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10609 10613])
                            ("gc" variable nil (reparse-symbol function_parameters) [10615 10617])
                            ("path_ids" variable nil (reparse-symbol function_parameters) [10619 10627])
                            ("offsets" variable nil (reparse-symbol function_parameters) [10629 10636])
                            ("offsetTrans" variable nil (reparse-symbol function_parameters) [10638 10649])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [10651 10661])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [10688 10698])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [10700 10710])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [10712 10722])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [10724 10736])
                            ("urls" variable nil (reparse-symbol function_parameters) [10763 10767]))                          
                        :documentation "
        This is a helper method (along with
        :meth:`_iter_collection_raw_paths`) to make it easier to write
        a space-efficent :meth:`draw_path_collection` implementation in a
        backend.

        This method yields all of the path, offset and graphics
        context combinations to draw the path collection.  The caller
        should already have looped over the results of
        :meth:`_iter_collection_raw_paths` to draw this collection.

        The arguments should be the same as that passed into
        :meth:`draw_path_collection`, with the exception of
        *path_ids*, which is a list of arbitrary objects that the
        backend will use to reference one of the paths created in the
        :meth:`_iter_collection_raw_paths` stage.

        Each yielded result is of the form::

           xo, yo, path_id, gc, rgbFace

        where *xo*, *yo* is an offset; *path_id* is one of the elements of
        *path_ids*; *gc* is a graphics context and *rgbFace* is a color to
        use for filling the path.
        ")
                        (reparse-symbol indented_block_body) [10588 13606])
                    ("get_image_magnification" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13639 13643]))                          
                        :documentation "
        Get the factor by which to magnify images passed to :meth:`draw_image`.
        Allows a backend to have images at a different resolution to other
        artists.
        ")
                        (reparse-symbol indented_block_body) [13611 13861])
                    ("draw_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13881 13885])
                            ("gc" variable nil (reparse-symbol function_parameters) [13887 13889])
                            ("x" variable nil (reparse-symbol function_parameters) [13891 13892])
                            ("y" variable nil (reparse-symbol function_parameters) [13894 13895])
                            ("im" variable nil (reparse-symbol function_parameters) [13897 13899]))                          
                        :documentation "
        Draw the image instance into the current axes;

        *gc*
            a GraphicsContext containing clipping information

        *x*
            is the distance in pixels from the left hand side of the canvas.

        *y*
            the distance from the origin.  That is, if origin is
            upper, y is the distance from top.  If origin is lower, y
            is the distance from bottom

        *im*
            the :class:`matplotlib._image.Image` instance
        ")
                        (reparse-symbol indented_block_body) [13866 14441])
                    ("option_image_nocomposite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14475 14479]))                          
                        :documentation "
        override this method for renderers that do not necessarily
        want to rescale and composite raster images. (like SVG)
        ")
                        (reparse-symbol indented_block_body) [14446 14658])
                    ("option_scale_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14686 14690]))                          
                        :documentation "
        override this method for renderers that support arbitrary
        scaling of image (most of the vector backend).
        ")
                        (reparse-symbol indented_block_body) [14663 14859])
                    ("draw_tex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14877 14881])
                            ("gc" variable nil (reparse-symbol function_parameters) [14883 14885])
                            ("x" variable nil (reparse-symbol function_parameters) [14887 14888])
                            ("y" variable nil (reparse-symbol function_parameters) [14890 14891])
                            ("s" variable nil (reparse-symbol function_parameters) [14893 14894])
                            ("prop" variable nil (reparse-symbol function_parameters) [14896 14900])
                            ("angle" variable nil (reparse-symbol function_parameters) [14902 14907])
                            ("ismath" variable nil (reparse-symbol function_parameters) [14909 14915]))                          
                        :documentation "
        ")
                        (reparse-symbol indented_block_body) [14864 15021])
                    ("draw_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15040 15044])
                            ("gc" variable nil (reparse-symbol function_parameters) [15046 15048])
                            ("x" variable nil (reparse-symbol function_parameters) [15050 15051])
                            ("y" variable nil (reparse-symbol function_parameters) [15053 15054])
                            ("s" variable nil (reparse-symbol function_parameters) [15056 15057])
                            ("prop" variable nil (reparse-symbol function_parameters) [15059 15063])
                            ("angle" variable nil (reparse-symbol function_parameters) [15065 15070])
                            ("ismath" variable nil (reparse-symbol function_parameters) [15072 15078]))                          
                        :documentation "
        Draw the text instance

        *gc*
            the :class:`GraphicsContextBase` instance

        *x*
            the x location of the text in display coords

        *y*
            the y location of the text in display coords

        *s*
             a :class:`matplotlib.text.Text` instance

        *prop*
          a :class:`matplotlib.font_manager.FontProperties` instance

        *angle*
            the rotation angle in degrees

        **backend implementers note**

        When you are trying to determine if you have gotten your bounding box
        right (which is what enables the text layout/alignment to work
        properly), it helps to change the line in text.py::

            if 0: bbox_artist(self, renderer)

        to if 1, and then the actual bounding box will be blotted along with
        your text.
        ")
                        (reparse-symbol indented_block_body) [15026 16021])
                    ("_get_text_path_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16055 16059])
                            ("x" variable nil (reparse-symbol function_parameters) [16061 16062])
                            ("y" variable nil (reparse-symbol function_parameters) [16064 16065])
                            ("s" variable nil (reparse-symbol function_parameters) [16067 16068])
                            ("prop" variable nil (reparse-symbol function_parameters) [16070 16074])
                            ("angle" variable nil (reparse-symbol function_parameters) [16076 16081])
                            ("ismath" variable nil (reparse-symbol function_parameters) [16083 16089]))                          
                        :documentation "
        return the text path and transform

        *prop*
          font property

        *s*
          text to be converted

        *usetex*
          If True, use matplotlib usetex mode.

        *ismath*
          If True, use mathtext parser. If \"TeX\", use *usetex* mode.
        ")
                        (reparse-symbol indented_block_body) [16026 17307])
                    ("_draw_text_as_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17336 17340])
                            ("gc" variable nil (reparse-symbol function_parameters) [17342 17344])
                            ("x" variable nil (reparse-symbol function_parameters) [17346 17347])
                            ("y" variable nil (reparse-symbol function_parameters) [17349 17350])
                            ("s" variable nil (reparse-symbol function_parameters) [17352 17353])
                            ("prop" variable nil (reparse-symbol function_parameters) [17355 17359])
                            ("angle" variable nil (reparse-symbol function_parameters) [17361 17366])
                            ("ismath" variable nil (reparse-symbol function_parameters) [17368 17374]))                          
                        :documentation "
        draw the text by converting them to paths using textpath module.

        *prop*
          font property

        *s*
          text to be converted

        *usetex*
          If True, use matplotlib usetex mode.

        *ismath*
          If True, use mathtext parser. If \"TeX\", use *usetex* mode.
        ")
                        (reparse-symbol indented_block_body) [17313 17920])
                    ("get_text_width_height_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17960 17964])
                            ("s" variable nil (reparse-symbol function_parameters) [17966 17967])
                            ("prop" variable nil (reparse-symbol function_parameters) [17969 17973])
                            ("ismath" variable nil (reparse-symbol function_parameters) [17975 17981]))                          
                        :documentation "
        get the width and height, and the offset from the bottom to the
        baseline (descent), in display coords of the string s with
        :class:`~matplotlib.font_manager.FontProperties` prop
        ")
                        (reparse-symbol indented_block_body) [17926 19309])
                    ("flipy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19325 19329]))                          
                        :documentation "
        Return true if y small numbers are top for renderer Is used
        for drawing text (:mod:`matplotlib.text`) and images
        (:mod:`matplotlib.image`) only
        ")
                        (reparse-symbol indented_block_body) [19315 19544])
                    ("get_canvas_width_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19577 19581]))                          )
                        (reparse-symbol indented_block_body) [19549 19667])
                    ("get_texmanager" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19691 19695]))                          
                        :documentation "
        return the :class:`matplotlib.texmanager.TexManager` instance
        ")
                        (reparse-symbol indented_block_body) [19672 19962])
                    ("new_gc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19979 19983]))                          
                        :documentation "
        Return an instance of a :class:`GraphicsContextBase`
        ")
                        (reparse-symbol indented_block_body) [19968 20108])
                    ("points_to_pixels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20134 20138])
                            ("points" variable nil (reparse-symbol function_parameters) [20140 20146]))                          
                        :documentation "
        Convert points to display units

        *points*
            a float or a numpy array of float

        return points converted to pixels

        You need to override this function (unless your backend
        doesn't have a dpi, eg, postscript or svg).  Some imaging
        systems assume some value for pixels per inch::

            points to pixels = points * pixels_per_inch/72.0 * dpi/72.0
        ")
                        (reparse-symbol indented_block_body) [20113 20602])
                    ("strip_math" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20622 20626])
                            ("s" variable nil (reparse-symbol function_parameters) [20628 20629]))                          )
                        (reparse-symbol indented_block_body) [20607 20667])
                    ("start_rasterizing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20694 20698]))                          
                        :documentation "
        Used in MixedModeRenderer. Switch to the raster renderer.
        ")
                        (reparse-symbol indented_block_body) [20672 20804])
                    ("stop_rasterizing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20830 20834]))                          
                        :documentation "
        Used in MixedModeRenderer. Switch back to the vector renderer
        and draw the contents of the raster renderer as an image on
        the vector renderer.
        ")
                        (reparse-symbol indented_block_body) [20809 21041])
                    ("start_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21063 21067]))                          
                        :documentation "
        Used in AggRenderer. Switch to a temporary renderer for image
        filtering effects.
        ")
                        (reparse-symbol indented_block_body) [21046 21204])
                    ("stop_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21225 21229])
                            ("filter_func" variable nil (reparse-symbol function_parameters) [21231 21242]))                          
                        :documentation "
        Used in AggRenderer. Switch back to the original renderer.
        The contents of the temporary renderer is processed with the
        *filter_func* and is drawn on the original renderer as an
        image.
        ")
                        (reparse-symbol indented_block_body) [21209 21499]))                  
                :type "class")
                nil [3251 21499])
            ("GraphicsContextBase" type
               (:documentation "
    An abstract base class that provides color, line styles, etc...
    "
                :members 
                  ( ("dashd" variable nil (reparse-symbol indented_block_body) [21682 21862])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [21896 21913])
                            ("self" variable nil (reparse-symbol indented_block_body) [21922 21948])
                            ("self" variable nil (reparse-symbol indented_block_body) [21997 22018])
                            ("self" variable nil (reparse-symbol indented_block_body) [22073 22096])
                            ("self" variable nil (reparse-symbol indented_block_body) [22105 22126])
                            ("self" variable nil (reparse-symbol indented_block_body) [22135 22156])
                            ("self" variable nil (reparse-symbol indented_block_body) [22165 22190])
                            ("self" variable nil (reparse-symbol indented_block_body) [22199 22224])
                            ("self" variable nil (reparse-symbol indented_block_body) [22233 22258])
                            ("self" variable nil (reparse-symbol indented_block_body) [22267 22286])
                            ("self" variable nil (reparse-symbol indented_block_body) [22295 22322])
                            ("self" variable nil (reparse-symbol indented_block_body) [22331 22349])
                            ("self" variable nil (reparse-symbol indented_block_body) [22358 22374])
                            ("self" variable nil (reparse-symbol indented_block_body) [22383 22400]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21881 21885]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21868 22401])
                    ("copy_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22426 22430])
                            ("gc" variable nil (reparse-symbol function_parameters) [22432 22434]))                          )
                        (reparse-symbol indented_block_body) [22406 22941])
                    ("restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22958 22962]))                          
                        :documentation "
        Restore the graphics context from the stack - needed only
        for backends that save graphics contexts on a stack
        ")
                        (reparse-symbol indented_block_body) [22946 23128])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23147 23151]))                          
                        :documentation "
        Return the alpha value used for blending - not supported on
        all backends
        ")
                        (reparse-symbol indented_block_body) [23133 23294])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23319 23323]))                          )
                        (reparse-symbol indented_block_body) [23299 23434])
                    ("get_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23456 23460]))                          
                        :documentation "
        Return the capstyle as a string in ('butt', 'round', 'projecting')
        ")
                        (reparse-symbol indented_block_body) [23439 23592])
                    ("get_clip_rectangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23620 23624]))                          
                        :documentation "
        Return the clip rectangle as a :class:`~matplotlib.transforms.Bbox` instance
        ")
                        (reparse-symbol indented_block_body) [23597 23766])
                    ("get_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23789 23793]))                          
                        :documentation "
        Return the clip path in the form (path, transform), where path
        is a :class:`~matplotlib.path.Path` instance, and transform is
        an affine transform to apply to the path before clipping.
        ")
                        (reparse-symbol indented_block_body) [23771 24161])
                    ("get_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24181 24185]))                          
                        :documentation "
        Return the dash information as an offset dashlist tuple.

        The dash list is a even size list that gives the ink on, ink
        off in pixels.

        See p107 of to PostScript `BLUEBOOK
        <http://www-cdf.fnal.gov/offline/PostScript/BLUEBOOK.PDF>`_
        for more info.

        Default value is None
        ")
                        (reparse-symbol indented_block_body) [24166 24565])
                    ("get_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24588 24592]))                          
                        :documentation "
        Return the line join style as one of ('miter', 'round', 'bevel')
        ")
                        (reparse-symbol indented_block_body) [24570 24723])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24746 24750])
                            ("style" variable nil (reparse-symbol function_parameters) [24752 24757]))                          
                        :documentation "
        Return the linestyle: one of ('solid', 'dashed', 'dashdot',
        'dotted').
        ")
                        (reparse-symbol indented_block_body) [24728 24902])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24925 24929]))                          
                        :documentation "
        Return the line width in points as a scalar
        ")
                        (reparse-symbol indented_block_body) [24907 25039])
                    ("get_rgb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25056 25060]))                          
                        :documentation "
        returns a tuple of three or four floats from 0-1.
        ")
                        (reparse-symbol indented_block_body) [25044 25170])
                    ("get_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25187 25191]))                          
                        :documentation "
        returns a url if one is set, None otherwise
        ")
                        (reparse-symbol indented_block_body) [25175 25295])
                    ("get_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25313 25317]))                          
                        :documentation "
        returns the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center
        ")
                        (reparse-symbol indented_block_body) [25300 25644])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25663 25667])
                            ("alpha" variable nil (reparse-symbol function_parameters) [25669 25674]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on
        all backends
        ")
                        (reparse-symbol indented_block_body) [25649 25940])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25965 25969])
                            ("b" variable nil (reparse-symbol function_parameters) [25971 25972]))                          
                        :documentation "
        True if object should be drawn with antialiased rendering
        ")
                        (reparse-symbol indented_block_body) [25945 26217])
                    ("set_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26239 26243])
                            ("cs" variable nil (reparse-symbol function_parameters) [26245 26247]))                          
                        :documentation "
        Set the capstyle as a string in ('butt', 'round', 'projecting')
        ")
                        (reparse-symbol indented_block_body) [26222 26513])
                    ("set_clip_rectangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26541 26545])
                            ("rectangle" variable nil (reparse-symbol function_parameters) [26547 26556]))                          
                        :documentation "
        Set the clip rectangle with sequence (left, bottom, width, height)
        ")
                        (reparse-symbol indented_block_body) [26518 26693])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26716 26720])
                            ("path" variable nil (reparse-symbol function_parameters) [26722 26726]))                          
                        :documentation "
        Set the clip path and transformation.  Path should be a
        :class:`~matplotlib.transforms.TransformedPath` instance.
        ")
                        (reparse-symbol indented_block_body) [26698 26989])
                    ("set_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27009 27013])
                            ("dash_offset" variable nil (reparse-symbol function_parameters) [27015 27026])
                            ("dash_list" variable nil (reparse-symbol function_parameters) [27028 27037]))                          
                        :documentation "
        Set the dash style for the gc.

        *dash_offset*
            is the offset (usually 0).

        *dash_list*
            specifies the on-off sequence as points.  ``(None, None)`` specifies a solid line

        ")
                        (reparse-symbol indented_block_body) [26994 27327])
                    ("set_foreground" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27351 27355])
                            ("fg" variable nil (reparse-symbol function_parameters) [27357 27359])
                            ("isRGB" variable nil (reparse-symbol function_parameters) [27361 27366]))                          
                        :documentation "
        Set the foreground color.  fg can be a MATLAB format string, a
        html hex color string, an rgb or rgba unit tuple, or a float between 0
        and 1.  In the latter case, grayscale is used.

        If you know fg is rgb or rgba, set ``isRGB=True`` for
        efficiency.
        ")
                        (reparse-symbol indented_block_body) [27332 27904])
                    ("set_graylevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28085 28089])
                            ("frac" variable nil (reparse-symbol function_parameters) [28091 28095]))                          
                        :documentation "
        Set the foreground color to be a gray level with *frac*
        ")
                        (reparse-symbol indented_block_body) [28067 28225])
                    ("set_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28248 28252])
                            ("js" variable nil (reparse-symbol function_parameters) [28254 28256]))                          
                        :documentation "
        Set the join style to be one of ('miter', 'round', 'bevel')
        ")
                        (reparse-symbol indented_block_body) [28230 28516])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28539 28543])
                            ("w" variable nil (reparse-symbol function_parameters) [28545 28546]))                          
                        :documentation "
        Set the linewidth in points
        ")
                        (reparse-symbol indented_block_body) [28521 28637])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28660 28664])
                            ("style" variable nil (reparse-symbol function_parameters) [28666 28671]))                          
                        :documentation "
        Set the linestyle to be one of ('solid', 'dashed', 'dashdot',
        'dotted'). One may specify customized dash styles by providing
        a tuple of (offset, dash pairs). For example, the predefiend
        linestyles have following values.:

         'dashed'  : (0, (6.0, 6.0)),
         'dashdot' : (0, (3.0, 5.0, 1.0, 5.0)),
         'dotted'  : (0, (1.0, 3.0)),
        ")
                        (reparse-symbol indented_block_body) [28642 29396])
                    ("set_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29413 29417])
                            ("url" variable nil (reparse-symbol function_parameters) [29419 29422]))                          
                        :documentation "
        Sets the url for links in compatible backends
        ")
                        (reparse-symbol indented_block_body) [29401 29527])
                    ("set_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29545 29549])
                            ("snap" variable nil (reparse-symbol function_parameters) [29551 29555]))                          
                        :documentation "
        Sets the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center
        ")
                        (reparse-symbol indented_block_body) [29532 29879])
                    ("set_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29898 29902])
                            ("hatch" variable nil (reparse-symbol function_parameters) [29904 29909]))                          
                        :documentation "
        Sets the hatch style for filling
        ")
                        (reparse-symbol indented_block_body) [29884 30005])
                    ("get_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30024 30028]))                          
                        :documentation "
        Gets the current hatch style
        ")
                        (reparse-symbol indented_block_body) [30010 30119])
                    ("get_hatch_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30143 30147])
                            ("density" variable nil (reparse-symbol function_parameters) [30149 30156]))                          
                        :documentation "
        Returns a Path for the current hatch.
        ")
                        (reparse-symbol indented_block_body) [30124 30337]))                  
                :type "class")
                nil [21501 30337])
            ("TimerBase" type
               (:superclasses ("object")
                :members 
                  ( ("'''
    A base class for providing timer events, useful for things animations.
    Backends need to implement a few specific methods in order to use their
    own timing mechanisms so that the timer events are integrated into their
    event loops.

    Mandatory functions that must be implemented:

        * `_timer_start`: Contains backend-specific code for starting
          the timer

        * `_timer_stop`: Contains backend-specific code for stopping
          the timer

    Optional overrides:

        * `_timer_set_single_shot`: Code for setting the timer to
          single shot operating mode, if supported by the timer
          object. If not, the `Timer` class itself will store the flag
          and the `_on_timer` method should be overridden to support
          such behavior.

        * `_timer_set_interval`: Code for setting the interval on the
          timer, if there is a method for doing so on the timer
          object.

        * `_on_timer`: This is the internal function that any timer
          object should call, which will handle the task of running
          all callbacks that have been set.

    Attributes:

        * `interval`: The time between timer events in
          milliseconds. Default is 1000 ms.

        * `single_shot`: Boolean flag indicating whether this timer
          should operate as single shot (run once and then
          stop). Defaults to `False`.

        * `callbacks`: Stores list of (func, args) tuples that will be
          called upon timer events. This list can be manipulated
          directly, or the functions `add_callback` and
          `remove_callback` can be used.
    '''" code nil (reparse-symbol indented_block_body) [30368 32028])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [32172 32298])
                            ("if" code nil (reparse-symbol indented_block_body) [32307 32414])
                            ("self" variable nil (reparse-symbol indented_block_body) [32423 32443])
                            ("self" variable nil (reparse-symbol indented_block_body) [32523 32541]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32046 32050])
                            ("interval" variable nil (reparse-symbol function_parameters) [32052 32060])
                            ("callbacks" variable nil (reparse-symbol function_parameters) [32067 32076]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32033 32542])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32559 32563]))                          )
                        (reparse-symbol indented_block_body) [32547 32653])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32668 32672])
                            ("interval" variable nil (reparse-symbol function_parameters) [32674 32682]))                          )
                        (reparse-symbol indented_block_body) [32658 32942])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32956 32960]))                          )
                        (reparse-symbol indented_block_body) [32947 33038])
                    ("_timer_start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33060 33064]))                          )
                        (reparse-symbol indented_block_body) [33043 33080])
                    ("_timer_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33101 33105]))                          )
                        (reparse-symbol indented_block_body) [33085 33121])
                    ("_get_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33144 33148]))                          )
                        (reparse-symbol indented_block_body) [33126 33181])
                    ("_set_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33204 33208])
                            ("interval" variable nil (reparse-symbol function_parameters) [33210 33218]))                          )
                        (reparse-symbol indented_block_body) [33186 33458])
                    ("interval" variable nil (reparse-symbol indented_block_body) [33463 33512])
                    ("_get_single_shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33539 33543]))                          )
                        (reparse-symbol indented_block_body) [33518 33574])
                    ("_set_single_shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33600 33604])
                            ("ss" variable nil (reparse-symbol function_parameters) [33606 33608]))                          )
                        (reparse-symbol indented_block_body) [33579 33680])
                    ("single_shot" variable nil (reparse-symbol indented_block_body) [33685 33743])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33766 33770])
                            ("func" variable nil (reparse-symbol function_parameters) [33772 33776])
                            ("args" variable nil (reparse-symbol function_parameters) [33778 33783])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33785 33793]))                          )
                        (reparse-symbol indented_block_body) [33749 34008])
                    ("remove_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34033 34037])
                            ("func" variable nil (reparse-symbol function_parameters) [34039 34043])
                            ("args" variable nil (reparse-symbol function_parameters) [34045 34050])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34052 34060]))                          )
                        (reparse-symbol indented_block_body) [34013 34524])
                    ("_timer_set_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34553 34557]))                          )
                        (reparse-symbol indented_block_body) [34529 34632])
                    ("_timer_set_single_shot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34664 34668]))                          )
                        (reparse-symbol indented_block_body) [34637 34746])
                    ("_on_timer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34765 34769]))                          )
                        (reparse-symbol indented_block_body) [34751 35244]))                  
                :type "class")
                nil [30339 35244])
            ("Event" type
               (:documentation "
    A matplotlib event.  Attach additional attributes as defined in
    :meth:`FigureCanvasBase.mpl_connect`.  The following attributes
    are defined and shown with their default values

    *name*
        the event name

    *canvas*
        the FigureCanvas instance generating the event

    *guiEvent*
        the GUI event that triggered the matplotlib event


    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [35703 35719])
                            ("self" variable nil (reparse-symbol indented_block_body) [35728 35748])
                            ("self" variable nil (reparse-symbol indented_block_body) [35757 35781]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35660 35664])
                            ("name" variable nil (reparse-symbol function_parameters) [35666 35670])
                            ("canvas" variable nil (reparse-symbol function_parameters) [35672 35678])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [35679 35687]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35647 35782]))                  
                :type "class")
                nil [35246 35782])
            ("IdleEvent" type
               (:documentation "
    An event triggered by the GUI backend when it is idle -- useful
    for passive animation
    "
                :superclasses ("Event")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [35921 35925]))                  
                :type "class")
                nil [35783 35926])
            ("DrawEvent" type
               (:documentation "
    An event triggered by a draw operation on the canvas

    In addition to the :class:`Event` attributes, the following event attributes are defined:

    *renderer*
        the :class:`RendererBase` instance for the draw event

    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [36254 36288])
                            ("self" variable nil (reparse-symbol indented_block_body) [36297 36321]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36215 36219])
                            ("name" variable nil (reparse-symbol function_parameters) [36221 36225])
                            ("canvas" variable nil (reparse-symbol function_parameters) [36227 36233])
                            ("renderer" variable nil (reparse-symbol function_parameters) [36235 36243]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36202 36322]))                  
                :type "class")
                nil [35927 36322])
            ("ResizeEvent" type
               (:documentation "
    An event triggered by a canvas resize

    In addition to the :class:`Event` attributes, the following event attributes are defined:

    *width*
        width of the canvas in pixels

    *height*
        height of the canvas in pixels

    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [36653 36687])
                            ("self, self" code nil (reparse-symbol indented_block_body) [36696 36747]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36624 36628])
                            ("name" variable nil (reparse-symbol function_parameters) [36630 36634])
                            ("canvas" variable nil (reparse-symbol function_parameters) [36636 36642]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36611 36748]))                  
                :type "class")
                nil [36323 36748])
            ("CloseEvent" type
               (:documentation "
    An event triggered by a figure being closed

    In addition to the :class:`Event` attributes, the following event attributes are defined:
    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [36994 37038]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36950 36954])
                            ("name" variable nil (reparse-symbol function_parameters) [36956 36960])
                            ("canvas" variable nil (reparse-symbol function_parameters) [36962 36968])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [36970 36978]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36937 37039]))                  
                :type "class")
                nil [36749 37039])
            ("LocationEvent" type
               (:documentation "
    An event that has a screen location

    The following additional attributes are defined and shown with
    their default values.

    In addition to the :class:`Event` attributes, the following
    event attributes are defined:

    *x*
        x position - pixels from left of canvas

    *y*
        y position - pixels from bottom of canvas

    *inaxes*
        the :class:`~matplotlib.axes.Axes` instance if mouse is over axes

    *xdata*
        x coord of mouse in data coords

    *ydata*
        y coord of mouse in data coords

    "
                :superclasses ("Event")
                :members 
                  ( ("x" variable nil (reparse-symbol indented_block_body) [37632 37645])
                    ("y" variable nil (reparse-symbol indented_block_body) [37698 37711])
                    ("inaxes" variable nil (reparse-symbol indented_block_body) [37765 37778])
                    ("xdata" variable nil (reparse-symbol indented_block_body) [37831 37844])
                    ("ydata" variable nil (reparse-symbol indented_block_body) [37889 37902])
                    ("lastevent" variable nil (reparse-symbol indented_block_body) [38004 38020])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *x*, *y* in figure coords, 0,0 = bottom, left
        \"\"\"" code nil (reparse-symbol indented_block_body) [38088 38157])
                            ("Event" code nil (reparse-symbol indented_block_body) [38166 38218])
                            ("self" variable nil (reparse-symbol indented_block_body) [38227 38237])
                            ("self" variable nil (reparse-symbol indented_block_body) [38246 38256])
                            ("if" code nil (reparse-symbol indented_block_body) [38268 38447])
                            ("if" code nil (reparse-symbol indented_block_body) [38501 38691])
                            ("if" code nil (reparse-symbol indented_block_body) [38700 39128])
                            ("try" code nil (reparse-symbol indented_block_body) [39137 39393])
                            ("self" code nil (reparse-symbol indented_block_body) [39402 39428]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38039 38043])
                            ("name" variable nil (reparse-symbol function_parameters) [38045 38049])
                            ("canvas" variable nil (reparse-symbol function_parameters) [38051 38057])
                            ("x" variable nil (reparse-symbol function_parameters) [38059 38060])
                            ("y" variable nil (reparse-symbol function_parameters) [38062 38063])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [38064 38072]))                          
                        :documentation "
        *x*, *y* in figure coords, 0,0 = bottom, left
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38026 39429])
                    ("_update_enter_leave" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39458 39462]))                          )
                        (reparse-symbol indented_block_body) [39434 40518]))                  
                :type "class")
                nil [37040 40518])
            ("MouseEvent" type
               (:documentation "
    A mouse event ('button_press_event', 'button_release_event', 'scroll_event',
    'motion_notify_event').

    In addition to the :class:`Event` and :class:`LocationEvent`
    attributes, the following attributes are defined:

    *button*
        button pressed None, 1, 2, 3, 'up', 'down' (up and down are used for scroll events)

    *key*
        the key pressed: None, chr(range(255), 'shift', 'win', or 'control'

    *step*
        number of scroll steps (positive for 'up', negative for 'down')


    Example usage::

        def on_press(event):
            print 'you pressed', event.button, event.xdata, event.ydata

        cid = fig.canvas.mpl_connect('button_press_event', on_press)

    "
                :superclasses ("LocationEvent")
                :members 
                  ( ("x" variable nil (reparse-symbol indented_block_body) [41277 41290])
                    ("y" variable nil (reparse-symbol indented_block_body) [41343 41356])
                    ("button" variable nil (reparse-symbol indented_block_body) [41410 41423])
                    ("inaxes" variable nil (reparse-symbol indented_block_body) [41465 41478])
                    ("xdata" variable nil (reparse-symbol indented_block_body) [41531 41544])
                    ("ydata" variable nil (reparse-symbol indented_block_body) [41589 41602])
                    ("step" variable nil (reparse-symbol indented_block_body) [41647 41660])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        x, y in figure coords, 0,0 = bottom, left
        button pressed None, 1, 2, 3, 'up', 'down'
        \"\"\"" code nil (reparse-symbol indented_block_body) [41816 41932])
                            ("LocationEvent" code nil (reparse-symbol indented_block_body) [41941 42008])
                            ("self" variable nil (reparse-symbol indented_block_body) [42017 42037])
                            ("self" variable nil (reparse-symbol indented_block_body) [42046 42060])
                            ("self" variable nil (reparse-symbol indented_block_body) [42069 42085]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41718 41722])
                            ("name" variable nil (reparse-symbol function_parameters) [41724 41728])
                            ("canvas" variable nil (reparse-symbol function_parameters) [41730 41736])
                            ("x" variable nil (reparse-symbol function_parameters) [41738 41739])
                            ("y" variable nil (reparse-symbol function_parameters) [41741 41742])
                            ("button" variable nil (reparse-symbol function_parameters) [41744 41750])
                            ("key" variable nil (reparse-symbol function_parameters) [41757 41760])
                            ("step" variable nil (reparse-symbol function_parameters) [41784 41788])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [41792 41800]))                          
                        :documentation "
        x, y in figure coords, 0,0 = bottom, left
        button pressed None, 1, 2, 3, 'up', 'down'
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41705 42086]))                  
                :type "class")
                nil [40523 42086])
            ("PickEvent" type
               (:documentation "
    a pick event, fired when the user picks a location on the canvas
    sufficiently close to an artist.

    Attrs: all the :class:`Event` attributes plus

    *mouseevent*
        the :class:`MouseEvent` that generated the pick

    *artist*
        the :class:`~matplotlib.artist.Artist` picked

    other
        extra class dependent attrs -- eg a
        :class:`~matplotlib.lines.Line2D` pick may define different
        extra attributes than a
        :class:`~matplotlib.collections.PatchCollection` pick event


    Example usage::

        line, = ax.plot(rand(100), 'o', picker=5)  # 5 points tolerance

        def on_pick(event):
            thisline = event.artist
            xdata, ydata = thisline.get_data()
            ind = event.ind
            print 'on pick line:', zip(xdata[ind], ydata[ind])

        cid = fig.canvas.mpl_connect('pick_event', on_pick)

    "
                :superclasses ("Event")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Event" code nil (reparse-symbol indented_block_body) [43100 43144])
                            ("self" variable nil (reparse-symbol indented_block_body) [43153 43181])
                            ("self" variable nil (reparse-symbol indented_block_body) [43190 43210])
                            ("self" code nil (reparse-symbol indented_block_body) [43219 43247]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43026 43030])
                            ("name" variable nil (reparse-symbol function_parameters) [43032 43036])
                            ("canvas" variable nil (reparse-symbol function_parameters) [43038 43044])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [43046 43056])
                            ("artist" variable nil (reparse-symbol function_parameters) [43058 43064])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [43066 43074])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43081 43089]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43013 43248]))                  
                :type "class")
                nil [42087 43248])
            ("KeyEvent" type
               (:documentation "
    A key event (key press, key release).

    Attach additional attributes as defined in
    :meth:`FigureCanvasBase.mpl_connect`.

    In addition to the :class:`Event` and :class:`LocationEvent`
    attributes, the following attributes are defined:

    *key*
        the key pressed: None, chr(range(255), shift, win, or control

    This interface may change slightly when better support for
    modifier keys is included.


    Example usage::

        def on_key(event):
            print 'you pressed', event.key, event.xdata, event.ydata

        cid = fig.canvas.mpl_connect('key_press_event', on_key)

    "
                :superclasses ("LocationEvent")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("LocationEvent" code nil (reparse-symbol indented_block_body) [43986 44053])
                            ("self" variable nil (reparse-symbol indented_block_body) [44062 44076]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43927 43931])
                            ("name" variable nil (reparse-symbol function_parameters) [43933 43937])
                            ("canvas" variable nil (reparse-symbol function_parameters) [43939 43945])
                            ("key" variable nil (reparse-symbol function_parameters) [43947 43950])
                            ("x" variable nil (reparse-symbol function_parameters) [43952 43953])
                            ("y" variable nil (reparse-symbol function_parameters) [43957 43958])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [43962 43970]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43914 44077]))                  
                :type "class")
                nil [43250 44077])
            ("FigureCanvasBase" type
               (:documentation "
    The canvas the figure renders into.

    Public attributes

        *figure*
            A :class:`matplotlib.figure.Figure` instance

      "
                :superclasses ("object")
                :members 
                  ( ("events" variable nil (reparse-symbol indented_block_body) [44273 44694])
                    ("__init__" function
                       (:suite 
                          ( ("figure" code nil (reparse-symbol indented_block_body) [44737 44760])
                            ("self" variable nil (reparse-symbol indented_block_body) [44769 44789])
                            ("self" variable nil (reparse-symbol indented_block_body) [44873 44914])
                            ("self" variable nil (reparse-symbol indented_block_body) [44923 44959])
                            ("self" variable nil (reparse-symbol indented_block_body) [44968 44991])
                            ("self" variable nil (reparse-symbol indented_block_body) [45022 45045])
                            ("self, self" code nil (reparse-symbol indented_block_body) [45073 45110])
                            ("self" variable nil (reparse-symbol indented_block_body) [45119 45189])
                            ("self" variable nil (reparse-symbol indented_block_body) [45198 45262])
                            ("self" variable nil (reparse-symbol indented_block_body) [45271 45296])
                            ("if" code nil (reparse-symbol indented_block_body) [45342 45468]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44714 44718])
                            ("figure" variable nil (reparse-symbol function_parameters) [44720 44726]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44701 45468])
                    ("onRemove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45660 45664])
                            ("ev" variable nil (reparse-symbol function_parameters) [45666 45668]))                          
                        :documentation "
        Mouse event processor which removes the top artist
        under the cursor.  Connect this to the 'mouse_press_event'
        using::

            canvas.mpl_connect('mouse_press_event',canvas.onRemove)
        ")
                        (reparse-symbol indented_block_body) [45647 46713])
                    ("onHilite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46731 46735])
                            ("ev" variable nil (reparse-symbol function_parameters) [46737 46739]))                          
                        :documentation "
        Mouse event processor which highlights the artists
        under the cursor.  Connect this to the 'motion_notify_event'
        using::

            canvas.mpl_connect('motion_notify_event',canvas.onHilite)
        ")
                        (reparse-symbol indented_block_body) [46718 48469])
                    ("pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48483 48487])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [48489 48499]))                          )
                        (reparse-symbol indented_block_body) [48474 48584])
                    ("blit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48598 48602])
                            ("bbox" variable nil (reparse-symbol function_parameters) [48604 48608]))                          
                        :documentation "
        blit the canvas in bbox (default entire canvas)
        ")
                        (reparse-symbol indented_block_body) [48589 48709])
                    ("resize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48725 48729])
                            ("w" variable nil (reparse-symbol function_parameters) [48731 48732])
                            ("h" variable nil (reparse-symbol function_parameters) [48734 48735]))                          
                        :documentation "
        set the canvas size in pixels
        ")
                        (reparse-symbol indented_block_body) [48714 48813])
                    ("draw_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48833 48837])
                            ("renderer" variable nil (reparse-symbol function_parameters) [48839 48847]))                          
                        :documentation "
        This method will be call all functions connected to the
        'draw_event' with a :class:`DrawEvent`
        ")
                        (reparse-symbol indented_block_body) [48818 49097])
                    ("resize_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49119 49123]))                          
                        :documentation "
        This method will be call all functions connected to the
        'resize_event' with a :class:`ResizeEvent`
        ")
                        (reparse-symbol indented_block_body) [49102 49371])
                    ("close_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49392 49396])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [49398 49406]))                          
                        :documentation "
        This method will be called by all functions connected to the
        'close_event' with a :class:`CloseEvent`
        ")
                        (reparse-symbol indented_block_body) [49376 49742])
                    ("key_press_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49970 49974])
                            ("key" variable nil (reparse-symbol function_parameters) [49976 49979])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [49981 49989]))                          
                        :documentation "
        This method will be call all functions connected to the
        'key_press_event' with a :class:`KeyEvent`
        ")
                        (reparse-symbol indented_block_body) [49950 50315])
                    ("key_release_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50342 50346])
                            ("key" variable nil (reparse-symbol function_parameters) [50348 50351])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [50353 50361]))                          
                        :documentation "
        This method will be call all functions connected to the
        'key_release_event' with a :class:`KeyEvent`
        ")
                        (reparse-symbol indented_block_body) [50320 50692])
                    ("pick_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50712 50716])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [50718 50728])
                            ("artist" variable nil (reparse-symbol function_parameters) [50730 50736])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50738 50746]))                          
                        :documentation "
        This method will be called by artists who are picked and will
        fire off :class:`PickEvent` callbacks registered listeners
        ")
                        (reparse-symbol indented_block_body) [50697 51041])
                    ("scroll_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51063 51067])
                            ("x" variable nil (reparse-symbol function_parameters) [51069 51070])
                            ("y" variable nil (reparse-symbol function_parameters) [51072 51073])
                            ("step" variable nil (reparse-symbol function_parameters) [51075 51079])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [51081 51089]))                          
                        :documentation "
        Backend derived classes should call this function on any
        scroll wheel event.  x,y are the canvas coords: 0,0 is lower,
        left.  button and key are as defined in MouseEvent.

        This method will be call all functions connected to the
        'scroll_event' with a :class:`MouseEvent` instance.
        ")
                        (reparse-symbol indented_block_body) [51046 51750])
                    ("button_press_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51779 51783])
                            ("x" variable nil (reparse-symbol function_parameters) [51785 51786])
                            ("y" variable nil (reparse-symbol function_parameters) [51788 51789])
                            ("button" variable nil (reparse-symbol function_parameters) [51791 51797])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [51799 51807]))                          
                        :documentation "
        Backend derived classes should call this function on any mouse
        button press.  x,y are the canvas coords: 0,0 is lower, left.
        button and key are as defined in :class:`MouseEvent`.

        This method will be call all functions connected to the
        'button_press_event' with a :class:`MouseEvent` instance.

        ")
                        (reparse-symbol indented_block_body) [51756 52368])
                    ("button_release_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52398 52402])
                            ("x" variable nil (reparse-symbol function_parameters) [52404 52405])
                            ("y" variable nil (reparse-symbol function_parameters) [52407 52408])
                            ("button" variable nil (reparse-symbol function_parameters) [52410 52416])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [52418 52426]))                          
                        :documentation "
        Backend derived classes should call this function on any mouse
        button release.

        *x*
            the canvas coordinates where 0=left

        *y*
            the canvas coordinates where 0=bottom

        *guiEvent*
            the native UI event that generated the mpl event


        This method will be call all functions connected to the
        'button_release_event' with a :class:`MouseEvent` instance.

        ")
                        (reparse-symbol indented_block_body) [52373 53077])
                    ("motion_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53106 53110])
                            ("x" variable nil (reparse-symbol function_parameters) [53112 53113])
                            ("y" variable nil (reparse-symbol function_parameters) [53115 53116])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [53118 53126]))                          
                        :documentation "
        Backend derived classes should call this function on any
        motion-notify-event.

        *x*
            the canvas coordinates where 0=left

        *y*
            the canvas coordinates where 0=bottom

        *guiEvent*
            the native UI event that generated the mpl event


        This method will be call all functions connected to the
        'motion_notify_event' with a :class:`MouseEvent` instance.

        ")
                        (reparse-symbol indented_block_body) [53082 53819])
                    ("leave_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53847 53851])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [53853 53861]))                          
                        :documentation "
        Backend derived classes should call this function when leaving
        canvas

        *guiEvent*
            the native UI event that generated the mpl event

        ")
                        (reparse-symbol indented_block_body) [53824 54178])
                    ("enter_notify_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54206 54210])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [54212 54220]))                          
                        :documentation "
        Backend derived classes should call this function when entering
        canvas

        *guiEvent*
            the native UI event that generated the mpl event

        ")
                        (reparse-symbol indented_block_body) [54183 54541])
                    ("idle_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54561 54565])
                            ("guiEvent" variable nil (reparse-symbol function_parameters) [54567 54575]))                          )
                        (reparse-symbol indented_block_body) [54546 54735])
                    ("grab_mouse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54755 54759])
                            ("ax" variable nil (reparse-symbol function_parameters) [54761 54763]))                          
                        :documentation "
        Set the child axes which are currently grabbing the mouse events.
        Usually called by the widgets themselves.
        It is an error to call this if the mouse is already grabbed by
        another axes.
        ")
                        (reparse-symbol indented_block_body) [54740 55166])
                    ("release_mouse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55189 55193])
                            ("ax" variable nil (reparse-symbol function_parameters) [55195 55197]))                          
                        :documentation "
        Release the mouse grab held by the axes, ax.
        Usually called by the widgets.
        It is ok to call this even if you ax doesn't have the mouse grab currently.
        ")
                        (reparse-symbol indented_block_body) [55171 55475])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55489 55493])
                            ("args" variable nil (reparse-symbol function_parameters) [55495 55500])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [55502 55510]))                          
                        :documentation "
        Render the :class:`~matplotlib.figure.Figure`
        ")
                        (reparse-symbol indented_block_body) [55480 55604])
                    ("draw_idle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55623 55627])
                            ("args" variable nil (reparse-symbol function_parameters) [55629 55634])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [55636 55644]))                          
                        :documentation "
        :meth:`draw` only if idle; defaults to draw but backends can overrride
        ")
                        (reparse-symbol indented_block_body) [55609 55785])
                    ("draw_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55806 55810])
                            ("event" variable nil (reparse-symbol function_parameters) [55812 55817]))                          
                        :documentation "
        Draw a cursor in the event.axes if inaxes is not None.  Use
        native GUI drawing for efficiency if possible
        ")
                        (reparse-symbol indented_block_body) [55790 55979])
                    ("get_width_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56005 56009]))                          
                        :documentation "
        return the figure width and height in points or pixels
        (depending on the backend), truncated to integers
        ")
                        (reparse-symbol indented_block_body) [55984 56230])
                    ("filetypes" variable nil (reparse-symbol indented_block_body) [56235 56607])
                    ("print_emf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56874 56878])
                            ("args" variable nil (reparse-symbol function_parameters) [56880 56885])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56887 56895]))                          )
                        (reparse-symbol indented_block_body) [56860 57067])
                    ("print_eps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57086 57090])
                            ("args" variable nil (reparse-symbol function_parameters) [57092 57097])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [57099 57107]))                          )
                        (reparse-symbol indented_block_body) [57072 57274])
                    ("print_pdf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57293 57297])
                            ("args" variable nil (reparse-symbol function_parameters) [57299 57304])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [57306 57314]))                          )
                        (reparse-symbol indented_block_body) [57279 57486])
                    ("print_png" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57505 57509])
                            ("args" variable nil (reparse-symbol function_parameters) [57511 57516])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [57518 57526]))                          )
                        (reparse-symbol indented_block_body) [57491 57698])
                    ("print_ps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57716 57720])
                            ("args" variable nil (reparse-symbol function_parameters) [57722 57727])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [57729 57737]))                          )
                        (reparse-symbol indented_block_body) [57703 57903])
                    ("print_raw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57922 57926])
                            ("args" variable nil (reparse-symbol function_parameters) [57928 57933])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [57935 57943]))                          )
                        (reparse-symbol indented_block_body) [57908 58115])
                    ("print_bmp" variable nil (reparse-symbol indented_block_body) [58119 58152])
                    ("print_svg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58172 58176])
                            ("args" variable nil (reparse-symbol function_parameters) [58178 58183])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [58185 58193]))                          )
                        (reparse-symbol indented_block_body) [58158 58365])
                    ("print_svgz" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58385 58389])
                            ("args" variable nil (reparse-symbol function_parameters) [58391 58396])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [58398 58406]))                          )
                        (reparse-symbol indented_block_body) [58370 58579])
                    ("if" code nil (reparse-symbol indented_block_body) [58584 60407])
                    ("get_supported_filetypes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60440 60444]))                          )
                        (reparse-symbol indented_block_body) [60412 60477])
                    ("get_supported_filetypes_grouped" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60518 60522]))                          )
                        (reparse-symbol indented_block_body) [60482 60712])
                    ("_get_print_method" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60740 60744])
                            ("format" variable nil (reparse-symbol function_parameters) [60746 60752]))                          )
                        (reparse-symbol indented_block_body) [60718 61553])
                    ("print_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61576 61580])
                            ("filename" variable nil (reparse-symbol function_parameters) [61582 61590])
                            ("dpi" variable nil (reparse-symbol function_parameters) [61592 61595])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [61602 61611])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [61617 61626])
                            ("orientation" variable nil (reparse-symbol function_parameters) [61653 61664])
                            ("format" variable nil (reparse-symbol function_parameters) [61677 61683])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [61690 61698]))                          
                        :documentation "
        Render the figure to hardcopy. Set the figure patch face and edge
        colors.  This is useful because some of the GUIs have a gray figure
        face color background and you'll probably want to override this on
        hardcopy.

        Arguments are:

        *filename*
            can also be a file object on image backends

        *orientation*
            only currently applies to PostScript printing.

        *dpi*
            the dots per inch to save the figure in; if None, use savefig.dpi

        *facecolor*
            the facecolor of the figure

        *edgecolor*
            the edgecolor of the figure

        *orientation*
            landscape' | 'portrait' (not supported on all backends)

        *format*
            when set, forcibly set the file format to save to


        *bbox_inches*
            Bbox in inches. Only the given portion of the figure is
            saved. If 'tight', try to figure out the tight bbox of
            the figure.

        *pad_inches*
            Amount of padding around the figure when bbox_inches is
            'tight'.

        *bbox_extra_artists*
            A list of extra artists that will be considered when the
            tight bbox is calculated.

        ")
                        (reparse-symbol indented_block_body) [61559 66755])
                    ("get_default_filetype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66788 66792]))                          )
                        (reparse-symbol indented_block_body) [66763 66829])
                    ("set_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66855 66859])
                            ("title" variable nil (reparse-symbol function_parameters) [66861 66866]))                          
                        :documentation "
        Set the title text of the window containing the figure.  Note that
        this has no effect if there is no window (eg, a PS backend).
        ")
                        (reparse-symbol indented_block_body) [66834 67123])
                    ("switch_backends" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67148 67152])
                            ("FigureCanvasClass" variable nil (reparse-symbol function_parameters) [67154 67171]))                          
                        :documentation "
        instantiate an instance of FigureCanvasClass

        This is used for backend switching, eg, to instantiate a
        FigureCanvasPS from a FigureCanvasGTK.  Note, deep copying is
        not done, so any changes to one of the instances (eg, setting
        figure size or line props), will be reflected in the other
        ")
                        (reparse-symbol indented_block_body) [67128 67600])
                    ("mpl_connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67621 67625])
                            ("s" variable nil (reparse-symbol function_parameters) [67627 67628])
                            ("func" variable nil (reparse-symbol function_parameters) [67630 67634]))                          
                        :documentation "
        Connect event with string *s* to *func*.  The signature of *func* is::

          def func(event)

        where event is a :class:`matplotlib.backend_bases.Event`.  The
        following events are recognized

        - 'button_press_event'
        - 'button_release_event'
        - 'draw_event'
        - 'key_press_event'
        - 'key_release_event'
        - 'motion_notify_event'
        - 'pick_event'
        - 'resize_event'
        - 'scroll_event'
        - 'figure_enter_event',
        - 'figure_leave_event',
        - 'axes_enter_event',
        - 'axes_leave_event'
        - 'close_event'

        For the location events (button and key press/release), if the
        mouse is over the axes, the variable ``event.inaxes`` will be
        set to the :class:`~matplotlib.axes.Axes` the event occurs is
        over, and additionally, the variables ``event.xdata`` and
        ``event.ydata`` will be defined.  This is the mouse location
        in data coords.  See
        :class:`~matplotlib.backend_bases.KeyEvent` and
        :class:`~matplotlib.backend_bases.MouseEvent` for more info.

        Return value is a connection id that can be used with
        :meth:`~matplotlib.backend_bases.Event.mpl_disconnect`.

        Example usage::

            def on_press(event):
                print 'you pressed', event.button, event.xdata, event.ydata

            cid = canvas.mpl_connect('button_press_event', on_press)

        ")
                        (reparse-symbol indented_block_body) [67605 69159])
                    ("mpl_disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69183 69187])
                            ("cid" variable nil (reparse-symbol function_parameters) [69189 69192]))                          
                        :documentation "
        disconnect callback id cid

        Example usage::

            cid = canvas.mpl_connect('button_press_event', on_press)
            #...later
            canvas.mpl_disconnect(cid)
        ")
                        (reparse-symbol indented_block_body) [69164 69456])
                    ("new_timer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69475 69479])
                            ("args" variable nil (reparse-symbol function_parameters) [69481 69486])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [69488 69496]))                          
                        :documentation "
        Creates a new backend-specific subclass of :class:`backend_bases.Timer`.
        This is useful for getting periodic events through the backend's native
        event loop. Implemented only for backends with GUIs.

        optional arguments:

        *interval*
          Timer interval in milliseconds
        *callbacks*
          Sequence of (func, args, kwargs) where func(*args, **kwargs) will
          be executed by the timer every *interval*.
        ")
                        (reparse-symbol indented_block_body) [69461 70026])
                    ("flush_events" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70048 70052]))                          
                        :documentation "
        Flush the GUI events for the figure. Implemented only for
        backends with GUIs.
        ")
                        (reparse-symbol indented_block_body) [70031 70207])
                    ("start_event_loop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70233 70237])
                            ("timeout" variable nil (reparse-symbol function_parameters) [70238 70245]))                          
                        :documentation "
        Start an event loop.  This is used to start a blocking event
        loop so that interactive functions, such as ginput and
        waitforbuttonpress, can wait for events.  This should not be
        confused with the main GUI event loop, which is always running
        and has nothing to do with this.

        This is implemented only for backends with GUIs.
        ")
                        (reparse-symbol indented_block_body) [70212 70677])
                    ("stop_event_loop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70702 70706]))                          
                        :documentation "
        Stop an event loop.  This is used to stop a blocking event
        loop so that interactive functions, such as ginput and
        waitforbuttonpress, can wait for events.

        This is implemented only for backends with GUIs.
        ")
                        (reparse-symbol indented_block_body) [70682 71004])
                    ("start_event_loop_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71038 71042])
                            ("timeout" variable nil (reparse-symbol function_parameters) [71043 71050]))                          
                        :documentation "
        Start an event loop.  This is used to start a blocking event
        loop so that interactive functions, such as ginput and
        waitforbuttonpress, can wait for events.  This should not be
        confused with the main GUI event loop, which is always running
        and has nothing to do with this.

        This function provides default event loop functionality based
        on time.sleep that is meant to be used until event loop
        functions for each of the GUI backends can be written.  As
        such, it throws a deprecated warning.

        Call signature::

            start_event_loop_default(self,timeout=0)

        This call blocks until a callback function triggers
        stop_event_loop() or *timeout* is reached.  If *timeout* is
        <=0, never timeout.
        ")
                        (reparse-symbol indented_block_body) [71009 72299])
                    ("stop_event_loop_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72332 72336]))                          
                        :documentation "
        Stop an event loop.  This is used to stop a blocking event
        loop so that interactive functions, such as ginput and
        waitforbuttonpress, can wait for events.

        Call signature::

          stop_event_loop_default(self)
        ")
                        (reparse-symbol indented_block_body) [72304 72639]))                  
                :type "class")
                nil [44080 72639])
            ("FigureManagerBase" type
               (:documentation "
    Helper class for pyplot mode, wraps everything up into a neat bundle

    Public attibutes:

    *canvas*
        A :class:`FigureCanvasBase` instance

    *num*
        The figure nuamber
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [72921 72941])
                            ("canvas" variable nil (reparse-symbol indented_block_body) [72950 72971])
                            ("self" variable nil (reparse-symbol indented_block_body) [73009 73023])
                            ("self" code nil (reparse-symbol indented_block_body) [73033 73091]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72893 72897])
                            ("canvas" variable nil (reparse-symbol function_parameters) [72899 72905])
                            ("num" variable nil (reparse-symbol function_parameters) [72907 72910]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [72880 73092])
                    ("destroy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73109 73113]))                          )
                        (reparse-symbol indented_block_body) [73097 73129])
                    ("full_screen_toggle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73158 73162]))                          )
                        (reparse-symbol indented_block_body) [73134 73178])
                    ("resize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73194 73198])
                            ("w" variable nil (reparse-symbol function_parameters) [73200 73201])
                            ("h" variable nil (reparse-symbol function_parameters) [73203 73204]))                          )
                        (reparse-symbol indented_block_body) [73183 73272])
                    ("key_press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73291 73295])
                            ("event" variable nil (reparse-symbol function_parameters) [73297 73302]))                          )
                        (reparse-symbol indented_block_body) [73277 77024])
                    ("show_popup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77045 77049])
                            ("msg" variable nil (reparse-symbol function_parameters) [77051 77054]))                          
                        :documentation "
        Display message in a popup -- GUI only
        ")
                        (reparse-symbol indented_block_body) [77030 77141])
                    ("set_window_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77167 77171])
                            ("title" variable nil (reparse-symbol function_parameters) [77173 77178]))                          
                        :documentation "
        Set the title text of the window containing the figure.  Note that
        this has no effect if there is no window (eg, a PS backend).
        ")
                        (reparse-symbol indented_block_body) [77146 77362]))                  
                :type "class")
                nil [72642 77362])
            ("Cursors" type
               (:members 
                  ( ("HAND, POINTER, SELECT_REGION, MOVE" code nil (reparse-symbol indented_block_body) [77404 77449]))                  
                :type "class")
                nil [77373 77450])
            ("cursors" variable nil nil [77450 77469])
            ("NavigationToolbar2" type
               (:documentation "
    Base class for the navigation cursor, version 2

    backends must implement a canvas that handles connections for
    'button_press_event' and 'button_release_event'.  See
    :meth:`FigureCanvasBase.mpl_connect` for more information


    They must also define

      :meth:`save_figure`
         save the current figure

      :meth:`set_cursor`
         if you want the pointer icon to change

      :meth:`_init_toolbar`
         create your toolbar widget

      :meth:`draw_rubberband` (optional)
         draw the zoom to rect \"rubberband\" rectangle

      :meth:`press`  (optional)
         whenever a mouse button is pressed, you'll be notified with
         the event

      :meth:`release` (optional)
         whenever a mouse button is released, you'll be notified with
         the event

      :meth:`dynamic_update` (optional)
         dynamically update the window while navigating

      :meth:`set_message` (optional)
         display message

      :meth:`set_history_buttons` (optional)
         you can change the history back / forward buttons to
         indicate disabled / enabled state.

    That's it, we'll do the rest!
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [78717 78737])
                            ("canvas" variable nil (reparse-symbol indented_block_body) [78746 78767])
                            ("self" variable nil (reparse-symbol indented_block_body) [78834 78861])
                            ("self" variable nil (reparse-symbol indented_block_body) [78870 78901])
                            ("self" variable nil (reparse-symbol indented_block_body) [78940 78960])
                            ("self" variable nil (reparse-symbol indented_block_body) [79025 79045])
                            ("self" variable nil (reparse-symbol indented_block_body) [79054 79076])
                            ("self" variable nil (reparse-symbol indented_block_body) [79085 79104])
                            ("self" variable nil (reparse-symbol indented_block_body) [79113 79136])
                            ("self" code nil (reparse-symbol indented_block_body) [79145 79165])
                            ("self" variable nil (reparse-symbol indented_block_body) [79174 79250])
                            ("self" variable nil (reparse-symbol indented_block_body) [79260 79279])
                            ("self" variable nil (reparse-symbol indented_block_body) [79288 79310])
                            ("self" variable nil (reparse-symbol indented_block_body) [79320 79347])
                            ("self" variable nil (reparse-symbol indented_block_body) [79401 79415])
                            ("self" code nil (reparse-symbol indented_block_body) [79460 79486]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78694 78698])
                            ("canvas" variable nil (reparse-symbol function_parameters) [78700 78706]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [78681 79487])
                    ("set_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79508 79512])
                            ("s" variable nil (reparse-symbol function_parameters) [79514 79515]))                          )
                        (reparse-symbol indented_block_body) [79492 79587])
                    ("back" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79601 79605])
                            ("args" variable nil (reparse-symbol function_parameters) [79607 79612]))                          )
                        (reparse-symbol indented_block_body) [79592 79778])
                    ("dynamic_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79802 79806]))                          )
                        (reparse-symbol indented_block_body) [79783 79822])
                    ("draw_rubberband" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79847 79851])
                            ("event" variable nil (reparse-symbol function_parameters) [79853 79858])
                            ("x0" variable nil (reparse-symbol function_parameters) [79860 79862])
                            ("y0" variable nil (reparse-symbol function_parameters) [79864 79866])
                            ("x1" variable nil (reparse-symbol function_parameters) [79868 79870])
                            ("y1" variable nil (reparse-symbol function_parameters) [79872 79874]))                          )
                        (reparse-symbol indented_block_body) [79827 79952])
                    ("forward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79969 79973])
                            ("args" variable nil (reparse-symbol function_parameters) [79975 79980]))                          )
                        (reparse-symbol indented_block_body) [79957 80155])
                    ("home" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80169 80173])
                            ("args" variable nil (reparse-symbol function_parameters) [80175 80180]))                          )
                        (reparse-symbol indented_block_body) [80160 80340])
                    ("_init_toolbar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80363 80367]))                          
                        :documentation "
        This is where you actually build the GUI widgets (called by
        __init__).  The icons ``home.xpm``, ``back.xpm``, ``forward.xpm``,
        ``hand.xpm``, ``zoom_to_rect.xpm`` and ``filesave.xpm`` are standard
        across backends (there are ppm versions in CVS also).

        You just need to set the callbacks

        home         : self.home
        back         : self.back
        forward      : self.forward
        hand         : self.pan
        zoom_to_rect : self.zoom
        filesave     : self.save_figure

        You only need to define the last one - the others are in the base
        class implementation.

        ")
                        (reparse-symbol indented_block_body) [80345 81068])
                    ("mouse_move" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81088 81092])
                            ("event" variable nil (reparse-symbol function_parameters) [81094 81099]))                          )
                        (reparse-symbol indented_block_body) [81073 82197])
                    ("pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82210 82214])
                            ("args" variable nil (reparse-symbol function_parameters) [82215 82220]))                          )
                        (reparse-symbol indented_block_body) [82202 83300])
                    ("press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83315 83319])
                            ("event" variable nil (reparse-symbol function_parameters) [83321 83326]))                          )
                        (reparse-symbol indented_block_body) [83305 83406])
                    ("press_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83425 83429])
                            ("event" variable nil (reparse-symbol function_parameters) [83431 83436]))                          )
                        (reparse-symbol indented_block_body) [83411 84388])
                    ("press_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84408 84412])
                            ("event" variable nil (reparse-symbol function_parameters) [84414 84419]))                          )
                        (reparse-symbol indented_block_body) [84393 85619])
                    ("_switch_on_zoom_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85649 85653])
                            ("event" variable nil (reparse-symbol function_parameters) [85655 85660]))                          )
                        (reparse-symbol indented_block_body) [85624 85730])
                    ("_switch_off_zoom_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85761 85765])
                            ("event" variable nil (reparse-symbol function_parameters) [85767 85772]))                          )
                        (reparse-symbol indented_block_body) [85735 85837])
                    ("push_current" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85859 85863]))                          )
                        (reparse-symbol indented_block_body) [85842 86425])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86442 86446])
                            ("event" variable nil (reparse-symbol function_parameters) [86448 86453]))                          )
                        (reparse-symbol indented_block_body) [86430 86533])
                    ("release_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86554 86558])
                            ("event" variable nil (reparse-symbol function_parameters) [86560 86565]))                          )
                        (reparse-symbol indented_block_body) [86538 87059])
                    ("drag_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87077 87081])
                            ("event" variable nil (reparse-symbol function_parameters) [87083 87088]))                          )
                        (reparse-symbol indented_block_body) [87064 87420])
                    ("drag_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87439 87443])
                            ("event" variable nil (reparse-symbol function_parameters) [87445 87450]))                          )
                        (reparse-symbol indented_block_body) [87425 88150])
                    ("release_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88174 88178])
                            ("event" variable nil (reparse-symbol function_parameters) [88180 88185]))                          )
                        (reparse-symbol indented_block_body) [88157 91939])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91953 91957]))                          )
                        (reparse-symbol indented_block_body) [91944 92572])
                    ("_update_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92596 92600]))                          )
                        (reparse-symbol indented_block_body) [92579 93206])
                    ("save_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93228 93232])
                            ("args" variable nil (reparse-symbol function_parameters) [93234 93239]))                          )
                        (reparse-symbol indented_block_body) [93212 93310])
                    ("set_cursor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93330 93334])
                            ("cursor" variable nil (reparse-symbol function_parameters) [93336 93342]))                          
                        :documentation "
        Set the current cursor to one of the :class:`Cursors`
        enums values
        ")
                        (reparse-symbol indented_block_body) [93315 93465])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93481 93485]))                          )
                        (reparse-symbol indented_block_body) [93470 93614])
                    ("zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93628 93632])
                            ("args" variable nil (reparse-symbol function_parameters) [93634 93639]))                          )
                        (reparse-symbol indented_block_body) [93619 94555])
                    ("set_history_buttons" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94585 94589]))                          )
                        (reparse-symbol indented_block_body) [94561 94653]))                  
                :type "class")
                nil [77473 94653]))          
      :file "backend_bases.py"
      :pointmax 94653
      :fsize 94652
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The image module supports basic image loading, rescaling and display
operations.

\"\"\"" code nil nil [1 90])
            ("__future__" include nil nil [91 122])
            ("warnings" include nil nil [123 142])
            ("os" include nil nil [123 142])
            ("numpy" include nil nil [144 162])
            ("numpy" include nil nil [163 183])
            ("matplotlib" include nil nil [185 216])
            ("matplotlib.artist" include nil nil [217 252])
            ("matplotlib.artist" include nil nil [253 302])
            ("matplotlib.colors" include nil nil [303 338])
            ("matplotlib.cm" include nil nil [339 365])
            ("matplotlib.cbook" include nil nil [366 398])
            ("matplotlib._image" include nil nil [470 504])
            ("matplotlib._png" include nil nil [505 535])
            ("matplotlib._image" include nil nil [629 660])
            ("matplotlib.transforms" include nil nil [662 710])
            ("matplotlib.transforms" include nil nil [711 754])
            ("_AxesImageBase" type
               (:superclasses ("martist.Artist" "cm.ScalarMappable")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [818 828])
                    ("_interpd" variable nil (reparse-symbol indented_block_body) [885 1611])
                    ("_interpdr" variable nil (reparse-symbol indented_block_body) [1643 1697])
                    ("interpnames" variable nil (reparse-symbol indented_block_body) [1703 1732])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1750 1754]))                          )
                        (reparse-symbol indented_block_body) [1738 1828])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        \"\"\"" code nil (reparse-symbol indented_block_body) [2135 2589])
                            ("martist" code nil (reparse-symbol indented_block_body) [2598 2627])
                            ("cm" code nil (reparse-symbol indented_block_body) [2636 2680])
                            ("if" code nil (reparse-symbol indented_block_body) [2690 2743])
                            ("self" variable nil (reparse-symbol indented_block_body) [2751 2771])
                            ("self" code nil (reparse-symbol indented_block_body) [2780 2811])
                            ("self" code nil (reparse-symbol indented_block_body) [2820 2849])
                            ("self" variable nil (reparse-symbol indented_block_body) [2858 2885])
                            ("self" code nil (reparse-symbol indented_block_body) [2895 2932])
                            ("self" code nil (reparse-symbol indented_block_body) [2941 2968])
                            ("self" variable nil (reparse-symbol indented_block_body) [2977 2991])
                            ("self" variable nil (reparse-symbol indented_block_body) [3001 3021])
                            ("self" variable nil (reparse-symbol indented_block_body) [3288 3322])
                            ("self" code nil (reparse-symbol indented_block_body) [3332 3351]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1846 1850])
                            ("ax" variable nil (reparse-symbol function_parameters) [1852 1854])
                            ("cmap" variable nil (reparse-symbol function_parameters) [1873 1877])
                            ("norm" variable nil (reparse-symbol function_parameters) [1903 1907])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [1933 1946])
                            ("origin" variable nil (reparse-symbol function_parameters) [1970 1976])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [2000 2010])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [2031 2040])
                            ("resample" variable nil (reparse-symbol function_parameters) [2063 2071])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2098 2106]))                          
                        :documentation "
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1833 3352])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3370 3374]))                          
                        :documentation "Get the numrows, numcols of the input image")
                        (reparse-symbol indented_block_body) [3357 3566])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3585 3589])
                            ("alpha" variable nil (reparse-symbol function_parameters) [3591 3596]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on
        all backends

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [3571 3808])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3825 3829]))                          
                        :documentation "
        Call this whenever the mappable is changed so observers can
        update state
        ")
                        (reparse-symbol indented_block_body) [3813 4045])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4065 4069])
                            ("magnification" variable nil (reparse-symbol function_parameters) [4071 4084]))                          )
                        (reparse-symbol indented_block_body) [4050 4163])
                    ("_get_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4193 4197])
                            ("A" variable nil (reparse-symbol function_parameters) [4199 4200])
                            ("image_extents" variable nil (reparse-symbol function_parameters) [4202 4215])
                            ("viewlim" variable nil (reparse-symbol function_parameters) [4217 4224]))                          
                        :documentation "
        convert numpy array A with given extents ([x1, x2, y1, y2] in
        data coordinate) into the Image, given the viewlim (should be a
        bbox instance).  Image will be clipped if the extents is
        significantly larger than the viewlim.
        ")
                        (reparse-symbol indented_block_body) [4168 7116])
                    ("_get_rotate_and_skew_transform" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("x1" variable nil (reparse-symbol function_parameters) [7174 7176])
                            ("y1" variable nil (reparse-symbol function_parameters) [7178 7180])
                            ("x2" variable nil (reparse-symbol function_parameters) [7182 7184])
                            ("y2" variable nil (reparse-symbol function_parameters) [7186 7188])
                            ("x3" variable nil (reparse-symbol function_parameters) [7190 7192])
                            ("y3" variable nil (reparse-symbol function_parameters) [7194 7196]))                          
                        :documentation "
        Retuen a transform that does
         (x1, y1) -> (x1, y1)
         (x2, y2) -> (x2, y2)
         (x2, y1) -> (x3, y3)

        It was intended to derive a skew transform that preserve the
        lower-left corner (x1, y1) and top-right corner(x2,y2), but
        change the the lower-right-corner(x2, y1) to a new position
        (x3, y3).
        ")
                        (reparse-symbol indented_block_body) [7121 8104])
                    ("_draw_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8135 8139])
                            ("renderer" variable nil (reparse-symbol function_parameters) [8141 8149])
                            ("gc" variable nil (reparse-symbol function_parameters) [8151 8153]))                          
                        :documentation "
        draw unsampled image. The renderer should support a draw_image method
        with scale parameter.
        ")
                        (reparse-symbol indented_block_body) [8109 11194])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11226 11230])
                            ("renderer" variable nil (reparse-symbol function_parameters) [11232 11240]))                          
                        :documentation "
        return True if the image is better to be drawn unsampled.
        The derived class needs to override it.
        ")
                        (reparse-symbol indented_block_body) [11199 11402])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11441 11445])
                            ("renderer" variable nil (reparse-symbol function_parameters) [11447 11455])
                            ("args" variable nil (reparse-symbol function_parameters) [11457 11462])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11464 11472]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11407 12413])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12431 12435])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [12437 12447]))                          
                        :documentation "
        Test whether the mouse event occured within the image.
        ")
                        (reparse-symbol indented_block_body) [12418 13302])
                    ("write_png" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13321 13325])
                            ("fname" variable nil (reparse-symbol function_parameters) [13327 13332])
                            ("noscale" variable nil (reparse-symbol function_parameters) [13334 13341]))                          
                        :documentation "Write the image to png file with fname")
                        (reparse-symbol indented_block_body) [13307 13767])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13785 13789])
                            ("A" variable nil (reparse-symbol function_parameters) [13791 13792]))                          
                        :documentation "
        Set the image array

        ACCEPTS: numpy/PIL Image A
        ")
                        (reparse-symbol indented_block_body) [13772 14532])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14551 14555])
                            ("A" variable nil (reparse-symbol function_parameters) [14557 14558]))                          
                        :documentation "
        Retained for backwards compatibility - use set_data instead

        ACCEPTS: numpy array A or PIL Image")
                        (reparse-symbol indented_block_body) [14537 14866])
                    ("get_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14893 14897]))                          
                        :documentation "
        Return the interpolation method the image uses when resizing.

        One of 'nearest', 'bilinear', 'bicubic', 'spline16', 'spline36', 'hanning',
        'hamming', 'hermite', 'kaiser', 'quadric', 'catrom', 'gaussian',
        'bessel', 'mitchell', 'sinc', 'lanczos', or 'none'.

        ")
                        (reparse-symbol indented_block_body) [14871 15248])
                    ("set_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15275 15279])
                            ("s" variable nil (reparse-symbol function_parameters) [15281 15282]))                          
                        :documentation "
        Set the interpolation method the image uses when resizing.

        if None, use a value from rc setting. If 'none', the image is
        shown as is without interpolating. 'none' is only supported in
        agg, ps and pdf backends and will fall back to 'nearest' mode
        for other backends.

        ACCEPTS: ['nearest' | 'bilinear' | 'bicubic' | 'spline16' |
          'spline36' | 'hanning' | 'hamming' | 'hermite' | 'kaiser' |
          'quadric' | 'catrom' | 'gaussian' | 'bessel' | 'mitchell' |
          'sinc' | 'lanczos' | 'none' |]

        ")
                        (reparse-symbol indented_block_body) [15253 16075])
                    ("set_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16097 16101])
                            ("v" variable nil (reparse-symbol function_parameters) [16103 16104]))                          
                        :documentation "
        Set whether or not image resampling is used

        ACCEPTS: True|False
        ")
                        (reparse-symbol indented_block_body) [16080 16292])
                    ("get_resample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16314 16318]))                          
                        :documentation "Return the image resample boolean")
                        (reparse-symbol indented_block_body) [16297 16399])
                    ("set_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16423 16427])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [16429 16439]))                          
                        :documentation "
        Set whether the resize filter norms the weights -- see
        help for imshow

        ACCEPTS: 0 or 1
        ")
                        (reparse-symbol indented_block_body) [16404 16681])
                    ("get_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16705 16709]))                          
                        :documentation "Return the filternorm setting")
                        (reparse-symbol indented_block_body) [16686 16788])
                    ("set_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16811 16815])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [16817 16826]))                          
                        :documentation "
        Set the resize filter radius only applicable to some
        interpolation schemes -- see help for imshow

        ACCEPTS: positive float
        ")
                        (reparse-symbol indented_block_body) [16793 17077])
                    ("get_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17100 17104]))                          
                        :documentation "return the filterrad setting")
                        (reparse-symbol indented_block_body) [17082 17181]))                  
                :type "class")
                nil [757 17181])
            ("AxesImage" type
               (:superclasses ("_AxesImageBase")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17233 17237]))                          )
                        (reparse-symbol indented_block_body) [17221 17311])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        \"\"\"" code nil (reparse-symbol indented_block_body) [17649 18103])
                            ("self" variable nil (reparse-symbol indented_block_body) [18113 18134])
                            ("_AxesImageBase" code nil (reparse-symbol indented_block_body) [18144 18611]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17329 17333])
                            ("ax" variable nil (reparse-symbol function_parameters) [17335 17337])
                            ("cmap" variable nil (reparse-symbol function_parameters) [17356 17360])
                            ("norm" variable nil (reparse-symbol function_parameters) [17386 17390])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [17416 17429])
                            ("origin" variable nil (reparse-symbol function_parameters) [17453 17459])
                            ("extent" variable nil (reparse-symbol function_parameters) [17483 17489])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [17513 17523])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [17544 17553])
                            ("resample" variable nil (reparse-symbol function_parameters) [17576 17584])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17611 17619]))                          
                        :documentation "
        interpolation and cmap default to their rc settings

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        extent is data axes (left, right, bottom, top) for making image plots
        registered with data plots.  Default is to label the pixel
        centers with the zero-based row and column indices.

        Additional kwargs are matplotlib.artist properties

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17316 18612])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18633 18637])
                            ("magnification" variable nil (reparse-symbol function_parameters) [18639 18652]))                          )
                        (reparse-symbol indented_block_body) [18618 20677])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20710 20714])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20716 20724]))                          
                        :documentation "
        return True if the image is better to be drawn unsampled.
        ")
                        (reparse-symbol indented_block_body) [20683 21140])
                    ("set_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21160 21164])
                            ("extent" variable nil (reparse-symbol function_parameters) [21166 21172]))                          
                        :documentation "
        extent is data axes (left, right, bottom, top) for making image plots

        This updates ax.dataLim, and, if autoscaling, sets viewLim
        to tightly fit the image, regardless of dataLim.  Autoscaling
        state is not changed, so following this with ax.autoscale_view
        will redo the autoscaling in accord with dataLim.

        ")
                        (reparse-symbol indented_block_body) [21145 21887])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21907 21911]))                          
                        :documentation "Get the image extent: left, right, bottom, top")
                        (reparse-symbol indented_block_body) [21892 22334]))                  
                :type "class")
                nil [17184 22334])
            ("NonUniformImage" type
               (:superclasses ("AxesImage")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        kwargs are identical to those for AxesImage, except
        that 'interpolation' defaults to 'nearest', and 'bilinear'
        is the only alternative.
        \"\"\"" code nil (reparse-symbol indented_block_body) [22417 22592])
                            ("interp" variable nil (reparse-symbol indented_block_body) [22601 22648])
                            ("AxesImage" code nil (reparse-symbol indented_block_body) [22657 22722])
                            ("self" code nil (reparse-symbol indented_block_body) [22731 22761]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22388 22392])
                            ("ax" variable nil (reparse-symbol function_parameters) [22394 22396])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [22398 22406]))                          
                        :documentation "
        kwargs are identical to those for AxesImage, except
        that 'interpolation' defaults to 'nearest', and 'bilinear'
        is the only alternative.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22375 22762])
                    ("_check_unsampled_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22794 22798])
                            ("renderer" variable nil (reparse-symbol function_parameters) [22800 22808]))                          
                        :documentation "
        return False. Do not use unsampled image.
        ")
                        (reparse-symbol indented_block_body) [22767 22906])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22926 22930])
                            ("magnification" variable nil (reparse-symbol function_parameters) [22932 22945]))                          )
                        (reparse-symbol indented_block_body) [22911 23727])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23745 23749])
                            ("x" variable nil (reparse-symbol function_parameters) [23751 23752])
                            ("y" variable nil (reparse-symbol function_parameters) [23754 23755])
                            ("A" variable nil (reparse-symbol function_parameters) [23757 23758]))                          
                        :documentation "
        Set the grid for the pixel centers, and the pixel values.

          *x* and *y* are 1-D ndarrays of lengths N and M, respectively,
             specifying pixel centers

          *A* is an (M,N) ndarray or masked array of values to be
            colormapped, or a (M,N,3) RGB array, or a (M,N,4) RGBA
            array.
        ")
                        (reparse-symbol indented_block_body) [23732 25768])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25787 25791])
                            ("args" variable nil (reparse-symbol function_parameters) [25793 25798]))                          )
                        (reparse-symbol indented_block_body) [25773 25859])
                    ("set_interpolation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25886 25890])
                            ("s" variable nil (reparse-symbol function_parameters) [25892 25893]))                          )
                        (reparse-symbol indented_block_body) [25864 26104])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26124 26128]))                          )
                        (reparse-symbol indented_block_body) [26109 26281])
                    ("set_filternorm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26305 26309])
                            ("s" variable nil (reparse-symbol function_parameters) [26311 26312]))                          )
                        (reparse-symbol indented_block_body) [26286 26328])
                    ("set_filterrad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26351 26355])
                            ("s" variable nil (reparse-symbol function_parameters) [26357 26358]))                          )
                        (reparse-symbol indented_block_body) [26333 26374])
                    ("set_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26392 26396])
                            ("norm" variable nil (reparse-symbol function_parameters) [26398 26402]))                          )
                        (reparse-symbol indented_block_body) [26379 26558])
                    ("set_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26576 26580])
                            ("cmap" variable nil (reparse-symbol function_parameters) [26582 26586]))                          )
                        (reparse-symbol indented_block_body) [26563 26742]))                  
                :type "class")
                nil [22337 26742])
            ("PcolorImage" type
               (:documentation "
    Make a pcolor-style plot with an irregular rectangular grid.

    This uses a variation of the original irregular image code,
    and it is used by pcolorfast for the corresponding grid type.
    "
                :superclasses ("martist.Artist" "cm.ScalarMappable")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cmap defaults to its rc setting

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        Additional kwargs are matplotlib.artist properties

        \"\"\"" code nil (reparse-symbol indented_block_body) [27224 27452])
                            ("martist" code nil (reparse-symbol indented_block_body) [27461 27490])
                            ("cm" code nil (reparse-symbol indented_block_body) [27499 27543])
                            ("self" variable nil (reparse-symbol indented_block_body) [27552 27566])
                            ("self" variable nil (reparse-symbol indented_block_body) [27575 27597])
                            ("self" code nil (reparse-symbol indented_block_body) [27790 27809])
                            ("self" code nil (reparse-symbol indented_block_body) [27818 27840]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27026 27030])
                            ("ax" variable nil (reparse-symbol function_parameters) [27032 27034])
                            ("x" variable nil (reparse-symbol function_parameters) [27053 27054])
                            ("y" variable nil (reparse-symbol function_parameters) [27078 27079])
                            ("A" variable nil (reparse-symbol function_parameters) [27103 27104])
                            ("cmap" variable nil (reparse-symbol function_parameters) [27128 27132])
                            ("norm" variable nil (reparse-symbol function_parameters) [27158 27162])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27188 27196]))                          
                        :documentation "
        cmap defaults to its rc setting

        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        Additional kwargs are matplotlib.artist properties

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27013 27841])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27861 27865])
                            ("magnification" variable nil (reparse-symbol function_parameters) [27867 27880]))                          )
                        (reparse-symbol indented_block_body) [27846 28911])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28928 28932]))                          )
                        (reparse-symbol indented_block_body) [28916 29006])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29045 29049])
                            ("renderer" variable nil (reparse-symbol function_parameters) [29051 29059])
                            ("args" variable nil (reparse-symbol function_parameters) [29061 29066])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29068 29076]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [29011 29567])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29586 29590])
                            ("x" variable nil (reparse-symbol function_parameters) [29592 29593])
                            ("y" variable nil (reparse-symbol function_parameters) [29595 29596])
                            ("A" variable nil (reparse-symbol function_parameters) [29598 29599]))                          )
                        (reparse-symbol indented_block_body) [29573 30698])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30717 30721])
                            ("args" variable nil (reparse-symbol function_parameters) [30723 30728]))                          )
                        (reparse-symbol indented_block_body) [30703 30789])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30808 30812])
                            ("alpha" variable nil (reparse-symbol function_parameters) [30814 30819]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on
        all backends

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [30794 31043]))                  
                :type "class")
                nil [26743 31043])
            ("FigureImage" type
               (:superclasses ("martist.Artist" "cm.ScalarMappable")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [31102 31112])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        kwargs are an optional list of Artist keyword args
        \"\"\"" code nil (reparse-symbol indented_block_body) [31346 31532])
                            ("martist" code nil (reparse-symbol indented_block_body) [31541 31570])
                            ("cm" code nil (reparse-symbol indented_block_body) [31579 31623])
                            ("if" code nil (reparse-symbol indented_block_body) [31632 31685])
                            ("self" variable nil (reparse-symbol indented_block_body) [31693 31713])
                            ("self" variable nil (reparse-symbol indented_block_body) [31722 31739])
                            ("self" variable nil (reparse-symbol indented_block_body) [31748 31765])
                            ("self" variable nil (reparse-symbol indented_block_body) [31774 31791])
                            ("self" code nil (reparse-symbol indented_block_body) [31800 31819])
                            ("self" variable nil (reparse-symbol indented_block_body) [31828 31852]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31130 31134])
                            ("fig" variable nil (reparse-symbol function_parameters) [31136 31139])
                            ("cmap" variable nil (reparse-symbol function_parameters) [31158 31162])
                            ("norm" variable nil (reparse-symbol function_parameters) [31188 31192])
                            ("offsetx" variable nil (reparse-symbol function_parameters) [31218 31225])
                            ("offsety" variable nil (reparse-symbol function_parameters) [31248 31255])
                            ("origin" variable nil (reparse-symbol function_parameters) [31278 31284])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31308 31316]))                          
                        :documentation "
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        kwargs are an optional list of Artist keyword args
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31117 31853])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31871 31875])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [31877 31887]))                          
                        :documentation "Test whether the mouse event occured within the image.")
                        (reparse-symbol indented_block_body) [31858 32388])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32406 32410]))                          
                        :documentation "Get the numrows, numcols of the input image")
                        (reparse-symbol indented_block_body) [32393 32602])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32622 32626]))                          
                        :documentation "Get the image extent: left, right, bottom, top")
                        (reparse-symbol indented_block_body) [32607 32835])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32853 32857])
                            ("A" variable nil (reparse-symbol function_parameters) [32859 32860]))                          
                        :documentation "Set the image array.")
                        (reparse-symbol indented_block_body) [32840 32970])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32989 32993])
                            ("A" variable nil (reparse-symbol function_parameters) [32995 32996]))                          
                        :documentation "Deprecated; use set_data for consistency with other image types.")
                        (reparse-symbol indented_block_body) [32975 33103])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33123 33127])
                            ("magnification" variable nil (reparse-symbol function_parameters) [33129 33142]))                          )
                        (reparse-symbol indented_block_body) [33108 34106])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34145 34149])
                            ("renderer" variable nil (reparse-symbol function_parameters) [34151 34159])
                            ("args" variable nil (reparse-symbol function_parameters) [34161 34166])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34168 34176]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [34111 34599])
                    ("write_png" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34618 34622])
                            ("fname" variable nil (reparse-symbol function_parameters) [34624 34629]))                          
                        :documentation "Write the image to png file with fname")
                        (reparse-symbol indented_block_body) [34604 34812]))                  
                :type "class")
                nil [31044 34812])
            ("BboxImage" type
               (:documentation "The Image class whose size is determined by the given bbox."
                :superclasses ("_AxesImageBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        kwargs are an optional list of Artist keyword args

        \"\"\"" code nil (reparse-symbol indented_block_body) [35226 35413])
                            ("_AxesImageBase" code nil (reparse-symbol indented_block_body) [35422 35894])
                            ("self" variable nil (reparse-symbol indented_block_body) [35904 35920]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34934 34938])
                            ("bbox" variable nil (reparse-symbol function_parameters) [34940 34944])
                            ("cmap" variable nil (reparse-symbol function_parameters) [34963 34967])
                            ("norm" variable nil (reparse-symbol function_parameters) [34993 34997])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [35023 35036])
                            ("origin" variable nil (reparse-symbol function_parameters) [35060 35066])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [35090 35100])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [35121 35130])
                            ("resample" variable nil (reparse-symbol function_parameters) [35153 35161])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35188 35196]))                          
                        :documentation "
        cmap is a colors.Colormap instance
        norm is a colors.Normalize instance to map luminance to 0-1

        kwargs are an optional list of Artist keyword args

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34921 35921])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35948 35952])
                            ("renderer" variable nil (reparse-symbol function_parameters) [35954 35962]))                          )
                        (reparse-symbol indented_block_body) [35926 36270])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36289 36293])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [36295 36305]))                          
                        :documentation "Test whether the mouse event occured within the image.")
                        (reparse-symbol indented_block_body) [36276 36684])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36702 36706]))                          
                        :documentation "Get the numrows, numcols of the input image")
                        (reparse-symbol indented_block_body) [36689 36898])
                    ("make_image" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36918 36922])
                            ("renderer" variable nil (reparse-symbol function_parameters) [36924 36932])
                            ("magnification" variable nil (reparse-symbol function_parameters) [36934 36947]))                          )
                        (reparse-symbol indented_block_body) [36903 38789])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38828 38832])
                            ("renderer" variable nil (reparse-symbol function_parameters) [38834 38842])
                            ("args" variable nil (reparse-symbol function_parameters) [38844 38849])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [38851 38859]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [38794 39355]))                  
                :type "class")
                nil [34814 39355])
            ("imread" function
               (:documentation "
    Return image file in *fname* as :class:`numpy.array`.  *fname* may
    be a string path or a Python file-like object.

    If *format* is provided, will try to read file of that type,
    otherwise the format is deduced from the filename.  If nothing can
    be deduced, PNG is tried.

    Return value is a :class:`numpy.array`.  For grayscale images, the
    return array is MxN.  For RGB images, the return value is MxNx3.
    For RGBA images the return value is MxNx4.

    matplotlib can only read PNGs natively, but if `PIL
    <http://www.pythonware.com/products/pil/>`_ is installed, it will
    use it to load the image and return an array (if possible) which
    can be used with :func:`~matplotlib.pyplot.imshow`.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [39368 39373])
                    ("format" variable nil (reparse-symbol function_parameters) [39375 39381]))                  )
                nil [39357 41147])
            ("imsave" function
               (:documentation "
    Saves a 2D :class:`numpy.array` as an image with one pixel per element.
    The output formats available depend on the backend being used.

    Arguments:
      *fname*:
        A string containing a path to a filename, or a Python file-like object.
        If *format* is *None* and *fname* is a string, the output
        format is deduced from the extension of the filename.
      *arr*:
        A 2D array.
    Keyword arguments:
      *vmin*/*vmax*: [ None | scalar ]
        *vmin* and *vmax* set the color scaling for the image by fixing the
        values that map to the colormap color limits. If either *vmin* or *vmax*
        is None, that limit is determined from the *arr* min/max value.
      *cmap*:
        cmap is a colors.Colormap instance, eg cm.jet.
        If None, default to the rc image.cmap value.
      *format*:
        One of the file extensions supported by the active
        backend.  Most backends support png, pdf, ps, eps and svg.
      *origin*
        [ 'upper' | 'lower' ] Indicates where the [0,0] index of
        the array is in the upper left or lower left corner of
        the axes. Defaults to the rc image.origin value.
      *dpi*
        The DPI to store in the metadata of the file.  This does not affect the
        resolution of the output image.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [41160 41165])
                    ("arr" variable nil (reparse-symbol function_parameters) [41167 41170])
                    ("vmin" variable nil (reparse-symbol function_parameters) [41172 41176])
                    ("vmax" variable nil (reparse-symbol function_parameters) [41183 41187])
                    ("cmap" variable nil (reparse-symbol function_parameters) [41194 41198])
                    ("format" variable nil (reparse-symbol function_parameters) [41205 41211])
                    ("origin" variable nil (reparse-symbol function_parameters) [41229 41235])
                    ("dpi" variable nil (reparse-symbol function_parameters) [41242 41245]))                  )
                nil [41149 42959])
            ("pil_to_array" function
               (:documentation "
    load a PIL image and return it as a numpy array of uint8.  For
    grayscale images, the return array is MxN.  For RGB images, the
    return value is MxNx3.  For RGBA images the return value is MxNx4
    "
                :arguments 
                  ( ("pilImage" variable nil (reparse-symbol function_parameters) [42979 42987]))                  )
                nil [42961 44154])
            ("thumbnail" function
               (:documentation "
    make a thumbnail of image in *infile* with output filename
    *thumbfile*.

      *infile* the image file -- must be PNG or PIL readable if you
         have `PIL <http://www.pythonware.com/products/pil/>`_ installed

      *thumbfile*
        the thumbnail filename

      *scale*
        the scale factor for the thumbnail

      *interpolation*
        the interpolation scheme used in the resampling


      *preview*
        if True, the default backend (presumably a user interface
        backend) will be used which will cause a figure to be raised
        if :func:`~matplotlib.pyplot.show` is called.  If it is False,
        a pure image backend will be used depending on the extension,
        'png'->FigureCanvasAgg, 'pdf'->FigureCanvasPDF,
        'svg'->FigureCanvasSVG


    See examples/misc/image_thumbnail.py.

    .. htmlonly::

        :ref:`misc-image_thumbnail`

    Return value is the figure instance containing the thumbnail

    "
                :arguments 
                  ( ("infile" variable nil (reparse-symbol function_parameters) [44170 44176])
                    ("thumbfile" variable nil (reparse-symbol function_parameters) [44178 44187])
                    ("scale" variable nil (reparse-symbol function_parameters) [44189 44194])
                    ("interpolation" variable nil (reparse-symbol function_parameters) [44200 44213])
                    ("preview" variable nil (reparse-symbol function_parameters) [44240 44247]))                  )
                nil [44156 46615]))          
      :file "image.py"
      :pointmax 46615
      :fsize 46614
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The rcsetup module contains the default values and the validation code for
customization using matplotlib's rc settings.

Each rc setting is assigned a default value and a function used to validate any
attempted changes to that setting. The default values and validation functions
are defined in the rcsetup module, and are used to construct the rcParams global
object which stores the settings and is referenced throughout matplotlib.

These default values should be consistent with the default matplotlibrc file
that actually reflects the values given here. Any additions or deletions to the
parameter set listed here should also be visited to the
:file:`matplotlibrc.template` in matplotlib's root source directory.
\"\"\"" code nil nil [1 727])
            ("os" include nil nil [729 738])
            ("warnings" include nil nil [739 754])
            ("matplotlib.fontconfig_pattern" include nil nil [755 821])
            ("matplotlib.colors" include nil nil [822 865])
            ("interactive_bk" variable nil nil [1098 1238])
            ("non_interactive_bk" variable nil nil [1241 1346])
            ("all_backends" code nil nil [1347 1397])
            ("ValidateInStrings" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("'valid is a list of legal strings'" code nil (reparse-symbol indented_block_body) [1487 1521])
                            ("self" variable nil (reparse-symbol indented_block_body) [1530 1544])
                            ("self" variable nil (reparse-symbol indented_block_body) [1553 1581])
                            ("func" function (:arguments 
                              ( ("s" variable nil (reparse-symbol function_parameters) [1599 1600]))                              ) (reparse-symbol indented_block_body) [1590 1674])
                            ("self" variable nil (reparse-symbol indented_block_body) [1682 1729]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1442 1446])
                            ("key" variable nil (reparse-symbol function_parameters) [1448 1451])
                            ("valid" variable nil (reparse-symbol function_parameters) [1453 1458])
                            ("ignorecase" variable nil (reparse-symbol function_parameters) [1460 1470]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1429 1730])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1748 1752])
                            ("s" variable nil (reparse-symbol function_parameters) [1754 1755]))                          )
                        (reparse-symbol indented_block_body) [1735 1989]))                  
                :type "class")
                nil [1400 1989])
            ("validate_path_exists" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [2015 2016]))              ) nil [1990 2183])
            ("validate_bool" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [2202 2203]))              ) nil [2184 2512])
            ("validate_bool_maybe_none" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [2542 2543]))              ) nil [2513 2882])
            ("validate_float" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [2902 2903]))              ) nil [2883 3052])
            ("validate_int" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [3070 3071]))              ) nil [3053 3214])
            ("validate_fonttype" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [3237 3238]))              ) nil [3215 3813])
            ("_validate_standard_backends" variable nil nil [3894 3983])
            ("validate_backend" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4005 4006]))              ) nil [3984 4100])
            ("validate_qt4" variable nil nil [4101 4169])
            ("validate_toolbar" variable nil nil [4171 4276])
            ("validate_autolayout" function (:arguments 
              ( ("v" variable nil (reparse-symbol function_parameters) [4302 4303]))              ) nil [4278 4386])
            ("validate_maskedarray" function (:arguments 
              ( ("v" variable nil (reparse-symbol function_parameters) [4412 4413]))              ) nil [4387 4730])
            ("validate_nseq_float" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4793 4803]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4775 4779])
                            ("n" variable nil (reparse-symbol function_parameters) [4781 4782]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4762 4804])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4821 4825])
                            ("s" variable nil (reparse-symbol function_parameters) [4827 4828]))                          )
                        (reparse-symbol indented_block_body) [4808 5445]))                  
                :type "class")
                nil [4731 5445])
            ("validate_nseq_int" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5506 5516]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5488 5492])
                            ("n" variable nil (reparse-symbol function_parameters) [5494 5495]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5475 5517])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5534 5538])
                            ("s" variable nil (reparse-symbol function_parameters) [5540 5541]))                          )
                        (reparse-symbol indented_block_body) [5521 6150]))                  
                :type "class")
                nil [5446 6150])
            ("validate_color" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [6171 6172]))              ) nil [6152 7067])
            ("validate_colorlist" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [7091 7092]))              ) nil [7068 7313])
            ("validate_stringlist" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [7338 7339]))              ) nil [7314 7522])
            ("validate_orientation" variable nil nil [7523 7615])
            ("validate_aspect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [7637 7638]))              ) nil [7617 7806])
            ("validate_fontsize" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [7829 7830]))              ) nil [7807 8123])
            ("validate_font_properties" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [8153 8154]))              ) nil [8124 8202])
            ("validate_fontset" variable nil nil [8203 8288])
            ("validate_mathtext_default" variable nil nil [8290 8417])
            ("validate_verbose" variable nil nil [8419 8526])
            ("validate_cairo_format" variable nil nil [8528 8687])
            ("validate_ps_papersize" variable nil nil [8689 8953])
            ("validate_ps_distiller" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [8981 8982]))              ) nil [8955 9295])
            ("validate_joinstyle" variable nil nil [9296 9392])
            ("validate_capstyle" variable nil nil [9394 9492])
            ("validate_negative_linestyle" variable nil nil [9494 9600])
            ("validate_negative_linestyle_legacy" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [9641 9642]))              ) nil [9602 9933])
            ("validate_tkpythoninspect" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [9963 9964]))              ) nil [9934 10092])
            ("validate_legend_loc" variable nil nil [10093 10337])
            ("deprecate_svg_embed_char_paths" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [10374 10379]))              ) nil [10339 10466])
            ("validate_svg_fonttype" variable nil nil [10467 10549])
            ("ValidateInterval" type
               (:documentation "
    Value must be in interval
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10697 10713])
                            ("self" variable nil (reparse-symbol indented_block_body) [10722 10738])
                            ("self" variable nil (reparse-symbol indented_block_body) [10747 10768])
                            ("self" variable nil (reparse-symbol indented_block_body) [10777 10798]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10638 10642])
                            ("vmin" variable nil (reparse-symbol function_parameters) [10644 10648])
                            ("vmax" variable nil (reparse-symbol function_parameters) [10650 10654])
                            ("closedmin" variable nil (reparse-symbol function_parameters) [10656 10665])
                            ("closedmax" variable nil (reparse-symbol function_parameters) [10672 10681]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10625 10799])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10817 10821])
                            ("s" variable nil (reparse-symbol function_parameters) [10823 10824]))                          )
                        (reparse-symbol indented_block_body) [10804 11434]))                  
                :type "class")
                nil [10551 11434])
            ("defaultParams" variable nil nil [11474 25481])
            ("if" code nil nil [25483 25708]))          
      :file "rcsetup.py"
      :pointmax 25708
      :fsize 25707
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [1 32])
            ("warnings" include nil nil [33 52])
            ("re" include nil nil [33 52])
            ("matplotlib" include nil nil [53 70])
            ("matplotlib.cbook" include nil nil [71 103])
            ("matplotlib" include nil nil [104 146])
            ("transforms" include nil nil [147 227])
            ("path" include nil nil [228 249])
            ("allow_rasterization" function
               (:documentation "
    Decorator for Artist.draw method. Provides routines
    that run before and after the draw call. The before and after functions
    are useful for changing artist-dependant renderer attributes or making
    other setup function calls, such as starting and flushing a mixed-mode
    renderer.
    "
                :arguments 
                  ( ("draw" variable nil (reparse-symbol function_parameters) [1163 1167]))                  )
                nil [1139 2418])
            ("Artist" type
               (:documentation "
    Abstract base class for someone who renders into a
    :class:`FigureCanvas`.
    "
                :superclasses ("object")
                :members 
                  ( ("aname" variable nil (reparse-symbol indented_block_body) [2545 2561])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [2566 2576])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2609 2627])
                            ("self" variable nil (reparse-symbol indented_block_body) [2637 2659])
                            ("self" variable nil (reparse-symbol indented_block_body) [2668 2694])
                            ("self" variable nil (reparse-symbol indented_block_body) [2703 2723])
                            ("self" variable nil (reparse-symbol indented_block_body) [2732 2754])
                            ("self" variable nil (reparse-symbol indented_block_body) [2763 2781])
                            ("self" variable nil (reparse-symbol indented_block_body) [2790 2809])
                            ("self" variable nil (reparse-symbol indented_block_body) [2818 2839])
                            ("self" variable nil (reparse-symbol indented_block_body) [2848 2867])
                            ("self" variable nil (reparse-symbol indented_block_body) [2876 2893])
                            ("self" variable nil (reparse-symbol indented_block_body) [2902 2918])
                            ("self" variable nil (reparse-symbol indented_block_body) [2927 2946])
                            ("self" variable nil (reparse-symbol indented_block_body) [2955 2976])
                            ("self" variable nil (reparse-symbol indented_block_body) [2985 3008])
                            ("self" variable nil (reparse-symbol indented_block_body) [3017 3040])
                            ("self" variable nil (reparse-symbol indented_block_body) [3050 3071])
                            ("self" variable nil (reparse-symbol indented_block_body) [3112 3125])
                            ("self" variable nil (reparse-symbol indented_block_body) [3152 3176])
                            ("try" code nil (reparse-symbol indented_block_body) [3213 3365])
                            ("self" variable nil (reparse-symbol indented_block_body) [3373 3399])
                            ("self" variable nil (reparse-symbol indented_block_body) [3408 3424])
                            ("self" variable nil (reparse-symbol indented_block_body) [3433 3449])
                            ("self" variable nil (reparse-symbol indented_block_body) [3458 3478])
                            ("self" variable nil (reparse-symbol indented_block_body) [3534 3554])
                            ("self" variable nil (reparse-symbol indented_block_body) [3610 3627]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2594 2598]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2581 3628])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3644 3648]))                          
                        :documentation "
        Remove the artist from the figure if possible.  The effect
        will not be visible until the figure is redrawn, e.g., with
        :meth:`matplotlib.axes.Axes.draw_idle`.  Call
        :meth:`matplotlib.axes.Axes.relim` to update the axes limits
        if desired.

        Note: :meth:`~matplotlib.axes.Axes.relim` will not see
        collections even if the collection was added to axes with
        *autolim* = True.

        Note: there is no support for removing the artist's legend entry.
        ")
                        (reparse-symbol indented_block_body) [3633 4633])
                    ("have_units" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4991 4995]))                          )
                        (reparse-symbol indented_block_body) [4976 5215])
                    ("convert_xunits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5239 5243])
                            ("x" variable nil (reparse-symbol function_parameters) [5245 5246]))                          
                        :documentation "For artists in an axes, if the xaxis has units support,
        convert *x* using xaxis unit type
        ")
                        (reparse-symbol indented_block_body) [5220 5583])
                    ("convert_yunits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5607 5611])
                            ("y" variable nil (reparse-symbol function_parameters) [5613 5614]))                          
                        :documentation "For artists in an axes, if the yaxis has units support,
        convert *y* using yaxis unit type
        ")
                        (reparse-symbol indented_block_body) [5588 5872])
                    ("set_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5890 5894])
                            ("axes" variable nil (reparse-symbol function_parameters) [5896 5900]))                          
                        :documentation "
        Set the :class:`~matplotlib.axes.Axes` instance in which the
        artist resides, if any.

        ACCEPTS: an :class:`~matplotlib.axes.Axes` instance
        ")
                        (reparse-symbol indented_block_body) [5877 6114])
                    ("get_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6132 6136]))                          
                        :documentation "
        Return the :class:`~matplotlib.axes.Axes` instance the artist
        resides in, or *None*
        ")
                        (reparse-symbol indented_block_body) [6119 6288])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6310 6314])
                            ("func" variable nil (reparse-symbol function_parameters) [6316 6320]))                          
                        :documentation "
        Adds a callback function that will be called whenever one of
        the :class:`Artist`'s properties changes.

        Returns an *id* that is useful for removing the callback with
        :meth:`remove_callback` later.
        ")
                        (reparse-symbol indented_block_body) [6293 6682])
                    ("remove_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6707 6711])
                            ("oid" variable nil (reparse-symbol function_parameters) [6713 6716]))                          
                        :documentation "
        Remove a callback based on its *id*.

        .. seealso::

            :meth:`add_callback`
               For adding callbacks

        ")
                        (reparse-symbol indented_block_body) [6687 6953])
                    ("pchanged" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6971 6975]))                          
                        :documentation "
        Fire an event when property changed, calling all of the
        registered callbacks.
        ")
                        (reparse-symbol indented_block_body) [6958 7173])
                    ("is_transform_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7199 7203]))                          
                        :documentation "
        Returns *True* if :class:`Artist` has a transform explicitly
        set.
        ")
                        (reparse-symbol indented_block_body) [7178 7346])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7369 7373])
                            ("t" variable nil (reparse-symbol function_parameters) [7375 7376]))                          
                        :documentation "
        Set the :class:`~matplotlib.transforms.Transform` instance
        used by this artist.

        ACCEPTS: :class:`~matplotlib.transforms.Transform` instance
        ")
                        (reparse-symbol indented_block_body) [7351 7654])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7677 7681]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform`
        instance used by this artist.
        ")
                        (reparse-symbol indented_block_body) [7659 7924])
                    ("hitlist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7941 7945])
                            ("event" variable nil (reparse-symbol function_parameters) [7947 7952]))                          
                        :documentation "
        List the children of the artist which contain the mouse event *event*.
        ")
                        (reparse-symbol indented_block_body) [7929 8418])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8440 8444]))                          
                        :documentation "
        Return a list of the child :class:`Artist`s this
        :class:`Artist` contains.
        ")
                        (reparse-symbol indented_block_body) [8423 8580])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8598 8602])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [8604 8614]))                          
                        :documentation "Test whether the artist contains the mouse event.

        Returns the truth value and a dictionary of artist specific details of
        selection, such as which points are contained in the pick radius.  See
        individual artists for details.
        ")
                        (reparse-symbol indented_block_body) [8585 9151])
                    ("set_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9173 9177])
                            ("picker" variable nil (reparse-symbol function_parameters) [9178 9184]))                          
                        :documentation "
        Replace the contains test used by this artist. The new picker
        should be a callable function which determines whether the
        artist is hit by the mouse event::

            hit, props = picker(artist, mouseevent)

        If the mouse event is over the artist, return *hit* = *True*
        and *props* is a dictionary of properties you want returned
        with the contains test.

        ACCEPTS: a callable function
        ")
                        (reparse-symbol indented_block_body) [9156 9684])
                    ("get_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9706 9710]))                          
                        :documentation "
        Return the _contains test used by the artist, or *None* for default.
        ")
                        (reparse-symbol indented_block_body) [9689 9844])
                    ("pickable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9862 9866]))                          )
                        (reparse-symbol indented_block_body) [9849 10062])
                    ("pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10076 10080])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [10082 10092]))                          
                        :documentation "
        call signature::

          pick(mouseevent)

        each child artist will fire a pick event if *mouseevent* is over
        the artist and the artist has picker set
        ")
                        (reparse-symbol indented_block_body) [10067 11154])
                    ("set_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11174 11178])
                            ("picker" variable nil (reparse-symbol function_parameters) [11180 11186]))                          
                        :documentation "
        Set the epsilon for picking used by this artist

        *picker* can be one of the following:

          * *None*: picking is disabled for this artist (default)

          * A boolean: if *True* then picking will be enabled and the
            artist will fire a pick event if the mouse event is over
            the artist

          * A float: if picker is a number it is interpreted as an
            epsilon tolerance in points and the artist will fire
            off an event if it's data is within epsilon of the mouse
            event.  For some artists like lines and patch collections,
            the artist may provide additional data to the pick event
            that is generated, e.g. the indices of the data within
            epsilon of the pick event

          * A function: if picker is callable, it is a user supplied
            function which determines whether the artist is hit by the
            mouse event::

              hit, props = picker(artist, mouseevent)

            to determine the hit test.  if the mouse event is over the
            artist, return *hit=True* and props is a dictionary of
            properties you want added to the PickEvent attributes.

        ACCEPTS: [None|float|boolean|callable]
        ")
                        (reparse-symbol indented_block_body) [11159 12499])
                    ("get_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12519 12523]))                          )
                        (reparse-symbol indented_block_body) [12504 12609])
                    ("is_figure_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12632 12636]))                          
                        :documentation "
        Returns True if the artist is assigned to a
        :class:`~matplotlib.figure.Figure`.
        ")
                        (reparse-symbol indented_block_body) [12614 12798])
                    ("get_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12815 12819]))                          
                        :documentation "
        Returns the url
        ")
                        (reparse-symbol indented_block_body) [12803 12895])
                    ("set_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12912 12916])
                            ("url" variable nil (reparse-symbol function_parameters) [12918 12921]))                          
                        :documentation "
        Sets the url for the artist

        ACCEPTS: a url string
        ")
                        (reparse-symbol indented_block_body) [12900 13039])
                    ("get_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13057 13061]))                          
                        :documentation "
        Returns the group id
        ")
                        (reparse-symbol indented_block_body) [13045 13142])
                    ("set_gid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13159 13163])
                            ("gid" variable nil (reparse-symbol function_parameters) [13165 13168]))                          
                        :documentation "
        Sets the (group) id for the artist

        ACCEPTS: an id string
        ")
                        (reparse-symbol indented_block_body) [13147 13293])
                    ("get_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13311 13315]))                          
                        :documentation "
        Returns the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center

        Only supported by the Agg and MacOSX backends.
        ")
                        (reparse-symbol indented_block_body) [13298 13775])
                    ("set_snap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13793 13797])
                            ("snap" variable nil (reparse-symbol function_parameters) [13799 13803]))                          
                        :documentation "
        Sets the snap setting which may be:

          * True: snap vertices to the nearest pixel center

          * False: leave vertices as-is

          * None: (auto) If the path contains only rectilinear line
            segments, round to the nearest pixel center

        Only supported by the Agg and MacOSX backends.
        ")
                        (reparse-symbol indented_block_body) [13780 14183])
                    ("get_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14203 14207]))                          
                        :documentation "
        Return the :class:`~matplotlib.figure.Figure` instance the
        artist belongs to.
        ")
                        (reparse-symbol indented_block_body) [14188 14355])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14375 14379])
                            ("fig" variable nil (reparse-symbol function_parameters) [14381 14384]))                          
                        :documentation "
        Set the :class:`~matplotlib.figure.Figure` instance the artist
        belongs to.

        ACCEPTS: a :class:`matplotlib.figure.Figure` instance
        ")
                        (reparse-symbol indented_block_body) [14360 14615])
                    ("set_clip_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14637 14641])
                            ("clipbox" variable nil (reparse-symbol function_parameters) [14643 14650]))                          
                        :documentation "
        Set the artist's clip :class:`~matplotlib.transforms.Bbox`.

        ACCEPTS: a :class:`matplotlib.transforms.Bbox` instance
        ")
                        (reparse-symbol indented_block_body) [14620 14865])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14888 14892])
                            ("path" variable nil (reparse-symbol function_parameters) [14894 14898])
                            ("transform" variable nil (reparse-symbol function_parameters) [14900 14909]))                          
                        :documentation "
        Set the artist's clip path, which may be:

          * a :class:`~matplotlib.patches.Patch` (or subclass) instance

          * a :class:`~matplotlib.path.Path` instance, in which case
             an optional :class:`~matplotlib.transforms.Transform`
             instance may be provided, which will be applied to the
             path before using it for clipping.

          * *None*, to remove the clipping path

        For efficiency, if the path happens to be an axis-aligned
        rectangle, this method will set the clipping box to the
        corresponding rectangle and set the clipping path to *None*.

        ACCEPTS: [ (:class:`~matplotlib.path.Path`,
        :class:`~matplotlib.transforms.Transform`) |
        :class:`~matplotlib.patches.Patch` | None ]
        ")
                        (reparse-symbol indented_block_body) [14870 16786])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16805 16809]))                          
                        :documentation "
        Return the alpha value used for blending - not supported on all
        backends
        ")
                        (reparse-symbol indented_block_body) [16791 16952])
                    ("get_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16973 16977]))                          )
                        (reparse-symbol indented_block_body) [16957 17049])
                    ("get_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17071 17075]))                          )
                        (reparse-symbol indented_block_body) [17054 17153])
                    ("get_clip_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17174 17178]))                          )
                        (reparse-symbol indented_block_body) [17158 17255])
                    ("get_clip_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17277 17281]))                          )
                        (reparse-symbol indented_block_body) [17260 17344])
                    ("get_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17367 17371]))                          )
                        (reparse-symbol indented_block_body) [17349 17438])
                    ("get_transformed_clip_path_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17484 17488]))                          )
                        (reparse-symbol indented_block_body) [17443 17802])
                    ("set_clip_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17823 17827])
                            ("b" variable nil (reparse-symbol function_parameters) [17829 17830]))                          
                        :documentation "
        Set whether artist uses clipping.

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [17807 17981])
                    ("_set_gc_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18003 18007])
                            ("gc" variable nil (reparse-symbol function_parameters) [18009 18011]))                          )
                        (reparse-symbol indented_block_body) [17986 18309])
                    ("get_rasterized" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18333 18337]))                          )
                        (reparse-symbol indented_block_body) [18314 18428])
                    ("set_rasterized" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18452 18456])
                            ("rasterized" variable nil (reparse-symbol function_parameters) [18458 18468]))                          
                        :documentation "
        Force rasterized (bitmap) drawing in vector backend output.

        Defaults to None, which implies the backend's default behavior

        ACCEPTS: [True | False | None]
        ")
                        (reparse-symbol indented_block_body) [18433 18865])
                    ("get_agg_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18889 18893]))                          )
                        (reparse-symbol indented_block_body) [18870 18987])
                    ("set_agg_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19011 19015])
                            ("filter_func" variable nil (reparse-symbol function_parameters) [19017 19028]))                          
                        :documentation "
        set agg_filter fuction.

        ")
                        (reparse-symbol indented_block_body) [18992 19127])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19141 19145])
                            ("renderer" variable nil (reparse-symbol function_parameters) [19147 19155])
                            ("args" variable nil (reparse-symbol function_parameters) [19157 19162])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19164 19172]))                          )
                        (reparse-symbol indented_block_body) [19132 19258])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19277 19281])
                            ("alpha" variable nil (reparse-symbol function_parameters) [19283 19288]))                          
                        :documentation "
        Set the alpha value used for blending - not supported on
        all backends.

        ACCEPTS: float (0.0 transparent through 1.0 opaque)
        ")
                        (reparse-symbol indented_block_body) [19263 19515])
                    ("set_lod" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19532 19536])
                            ("on" variable nil (reparse-symbol function_parameters) [19538 19540]))                          
                        :documentation "
        Set Level of Detail on or off.  If on, the artists may examine
        things like the pixel width of the axes and draw a subset of
        their contents accordingly

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [19520 19822])
                    ("set_visible" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19843 19847])
                            ("b" variable nil (reparse-symbol function_parameters) [19849 19850]))                          
                        :documentation "
        Set the artist's visiblity.

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [19827 19996])
                    ("set_animated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20019 20023])
                            ("b" variable nil (reparse-symbol function_parameters) [20025 20026]))                          
                        :documentation "
        Set the artist's animation state.

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [20002 20179])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20195 20199])
                            ("props" variable nil (reparse-symbol function_parameters) [20201 20206]))                          
                        :documentation "
        Update the properties of this :class:`Artist` from the
        dictionary *prop*.
        ")
                        (reparse-symbol indented_block_body) [20184 20716])
                    ("get_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20736 20740]))                          
                        :documentation "
        Get the label used for this artist in the legend.
        ")
                        (reparse-symbol indented_block_body) [20722 20852])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20871 20875])
                            ("s" variable nil (reparse-symbol function_parameters) [20877 20878]))                          
                        :documentation "
        Set the label to *s* for auto legend.

        ACCEPTS: any string
        ")
                        (reparse-symbol indented_block_body) [20857 21028])
                    ("get_zorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21050 21054]))                          
                        :documentation "
        Return the :class:`Artist`'s zorder.
        ")
                        (reparse-symbol indented_block_body) [21035 21153])
                    ("set_zorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21173 21177])
                            ("level" variable nil (reparse-symbol function_parameters) [21179 21184]))                          
                        :documentation "
        Set the zorder for the artist.  Artists with lower zorder
        values are drawn first.

        ACCEPTS: any number
        ")
                        (reparse-symbol indented_block_body) [21158 21390])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21411 21415])
                            ("other" variable nil (reparse-symbol function_parameters) [21417 21422]))                          )
                        (reparse-symbol indented_block_body) [21395 21846])
                    ("properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21867 21871]))                          
                        :documentation "
        return a dictionary mapping property name -> value for all Artist props
        ")
                        (reparse-symbol indented_block_body) [21852 22028])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22041 22045])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [22047 22055]))                          
                        :documentation "
        A tkstyle set command, pass *kwargs* to set properties
        ")
                        (reparse-symbol indented_block_body) [22033 22354])
                    ("findobj" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22371 22375])
                            ("match" variable nil (reparse-symbol function_parameters) [22377 22382])
                            ("include_self" variable nil (reparse-symbol function_parameters) [22389 22401]))                          
                        :documentation "
        pyplot signature:
          findobj(o=gcf(), match=None, include_self=True)

        Recursively find all :class:matplotlib.artist.Artist instances
        contained in self.

        *match* can be

          - None: return all objects contained in artist.

          - function with signature ``boolean = match(artist)``
            used to filter matches

          - class instance: eg Line2D.  Only return artists of class type.

        If *include_self* is True (default), include self in the list to be
        checked for a match.

        .. plot:: mpl_examples/pylab_examples/findobj_demo.py
        ")
                        (reparse-symbol indented_block_body) [22359 23857]))                  
                :type "class")
                nil [2420 23857])
            ("ArtistInspector" type
               (:documentation "
    A helper class to inspect an :class:`~matplotlib.artist.Artist`
    and return information about it's settable properties and their
    current values.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the artist inspector with an
        :class:`~matplotlib.artist.Artist` or sequence of
        :class:`Artists`.  If a sequence is used, we assume it is a
        homogeneous sequence (all :class:`Artists` are of the same
        type) and it is your responsibility to make sure this is so.
        \"\"\"" code nil (reparse-symbol indented_block_body) [24093 24418])
                            ("if" code nil (reparse-symbol indented_block_body) [24427 24469])
                            ("self" variable nil (reparse-symbol indented_block_body) [24478 24492])
                            ("if" code nil (reparse-symbol indented_block_body) [24501 24553])
                            ("self" variable nil (reparse-symbol indented_block_body) [24561 24571])
                            ("self" variable nil (reparse-symbol indented_block_body) [24581 24613]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24075 24079])
                            ("o" variable nil (reparse-symbol function_parameters) [24081 24082]))                          
                        :documentation "
        Initialize the artist inspector with an
        :class:`~matplotlib.artist.Artist` or sequence of
        :class:`Artists`.  If a sequence is used, we assume it is a
        homogeneous sequence (all :class:`Artists` are of the same
        type) and it is your responsibility to make sure this is so.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24062 24614])
                    ("get_aliases" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24635 24639]))                          
                        :documentation "
        Get a dict mapping *fullname* -> *alias* for each *alias* in
        the :class:`~matplotlib.artist.ArtistInspector`.

        Eg., for lines::

          {'markerfacecolor': 'mfc',
           'linewidth'      : 'lw',
          }

        ")
                        (reparse-symbol indented_block_body) [24619 25379])
                    ("_get_valid_values_regex" variable nil (reparse-symbol indented_block_body) [25384 25467])
                    ("get_valid_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25493 25497])
                            ("attr" variable nil (reparse-symbol function_parameters) [25499 25503]))                          
                        :documentation "
        Get the legal arguments for the setter associated with *attr*.

        This is done by querying the docstring of the function *set_attr*
        for a line that begins with ACCEPTS:

        Eg., for a line linestyle, return
        \"[ ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'steps'`` | ``'None'`` ]\"
        ")
                        (reparse-symbol indented_block_body) [25472 26347])
                    ("_get_setters_and_targets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26381 26385]))                          
                        :documentation "
        Get the attribute strings and a full path to where the setter
        is defined for all setters in an object.
        ")
                        (reparse-symbol indented_block_body) [26352 27117])
                    ("get_setters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27138 27142]))                          
                        :documentation "
        Get the attribute strings with setters for object.  Eg., for a line,
        return ``['markerfacecolor', 'linewidth', ....]``.
        ")
                        (reparse-symbol indented_block_body) [27122 27380])
                    ("is_alias" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27398 27402])
                            ("o" variable nil (reparse-symbol function_parameters) [27404 27405]))                          
                        :documentation "
        Return *True* if method object *o* is an alias for another
        function.
        ")
                        (reparse-symbol indented_block_body) [27385 27619])
                    ("aliased_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27641 27645])
                            ("s" variable nil (reparse-symbol function_parameters) [27647 27648]))                          
                        :documentation "
        return 'PROPNAME or alias' if *s* has an alias, else return
        PROPNAME.

        E.g. for the line markerfacecolor property, which has an
        alias, return 'markerfacecolor or mfc' and for the transform
        property, which does not, return 'transform'
        ")
                        (reparse-symbol indented_block_body) [27624 28092])
                    ("aliased_name_rest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28120 28124])
                            ("s" variable nil (reparse-symbol function_parameters) [28126 28127])
                            ("target" variable nil (reparse-symbol function_parameters) [28129 28135]))                          
                        :documentation "
        return 'PROPNAME or alias' if *s* has an alias, else return
        PROPNAME formatted for ReST

        E.g. for the line markerfacecolor property, which has an
        alias, return 'markerfacecolor or mfc' and for the transform
        property, which does not, return 'transform'
        ")
                        (reparse-symbol indented_block_body) [28098 28658])
                    ("pprint_setters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28684 28688])
                            ("prop" variable nil (reparse-symbol function_parameters) [28690 28694])
                            ("leadingspace" variable nil (reparse-symbol function_parameters) [28701 28713]))                          
                        :documentation "
        If *prop* is *None*, return a list of strings of all settable properies
        and their valid values.

        If *prop* is not *None*, it is a valid property name and that
        property will be returned as a string of property : valid
        values.
        ")
                        (reparse-symbol indented_block_body) [28665 29531])
                    ("pprint_setters_rest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29560 29564])
                            ("prop" variable nil (reparse-symbol function_parameters) [29566 29570])
                            ("leadingspace" variable nil (reparse-symbol function_parameters) [29577 29589]))                          
                        :documentation "
        If *prop* is *None*, return a list of strings of all settable properies
        and their valid values.  Format the output for ReST

        If *prop* is not *None*, it is a valid property name and that
        property will be returned as a string of property : valid
        values.
        ")
                        (reparse-symbol indented_block_body) [29536 31227])
                    ("properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31248 31252]))                          
                        :documentation "
        return a dictionary mapping property name -> value
        ")
                        (reparse-symbol indented_block_body) [31233 31790])
                    ("pprint_getters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31814 31818]))                          
                        :documentation "
        Return the getters and actual values as list of strings.
        ")
                        (reparse-symbol indented_block_body) [31795 32423])
                    ("findobj" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32442 32446])
                            ("match" variable nil (reparse-symbol function_parameters) [32448 32453]))                          
                        :documentation "
        Recursively find all :class:`matplotlib.artist.Artist`
        instances contained in *self*.

        If *match* is not None, it can be

          - function with signature ``boolean = match(artist)``

          - class instance: eg :class:`~matplotlib.lines.Line2D`

        used to filter matches.
        ")
                        (reparse-symbol indented_block_body) [32430 33475]))                  
                :type "class")
                nil [23863 33475])
            ("getp" function
               (:documentation "
    Return the value of object's property.  *property* is an optional string
    for the property you want to return

    Example usage::

        getp(obj)  # get all the object properties
        getp(obj, 'linestyle')  # get the linestyle property

    *obj* is a :class:`Artist` instance, eg
    :class:`~matplotllib.lines.Line2D` or an instance of a
    :class:`~matplotlib.axes.Axes` or :class:`matplotlib.text.Text`.
    If the *property* is 'somename', this function returns

      obj.get_somename()

    :func:`getp` can be used to query all the gettable properties with
    ``getp(obj)``. Many properties have aliases for shorter typing, e.g.
    'lw' is an alias for 'linewidth'.  In the output, aliases and full
    property names will be listed as:

      property or alias = value

    e.g.:

      linewidth or lw = 2
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [33490 33493])
                    ("property" variable nil (reparse-symbol function_parameters) [33495 33503]))                  )
                nil [33481 34566])
            ("get" variable nil nil [34575 34585])
            ("setp" function
               (:documentation "
    matplotlib supports the use of :func:`setp` (\"set property\") and
    :func:`getp` to set and get object properties, as well as to do
    introspection on the object.  For example, to set the linestyle of a
    line to be dashed, you can do::

      >>> line, = plot([1,2,3])
      >>> setp(line, linestyle='--')

    If you want to know the valid types of arguments, you can provide the
    name of the property you want to set without a value::

      >>> setp(line, 'linestyle')
          linestyle: [ '-' | '--' | '-.' | ':' | 'steps' | 'None' ]

    If you want to see all the properties that can be set, and their
    possible values, you can do::

      >>> setp(line)
          ... long output listing omitted

    :func:`setp` operates on a single instance or a list of instances.
    If you are in query mode introspecting the possible values, only
    the first instance in the sequence is used.  When actually setting
    values, all the instances will be set.  E.g., suppose you have a
    list of two lines, the following will make both lines thicker and
    red::

      >>> x = arange(0,1.0,0.01)
      >>> y1 = sin(2*pi*x)
      >>> y2 = sin(4*pi*x)
      >>> lines = plot(x, y1, x, y2)
      >>> setp(lines, linewidth=2, color='r')

    :func:`setp` works with the MATLAB style string/value pairs or
    with python kwargs.  For example, the following are equivalent::

      >>> setp(lines, 'linewidth', 2, 'color', r')  # MATLAB style

      >>> setp(lines, linewidth=2, color='r')       # python style
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [34596 34599])
                    ("args" variable nil (reparse-symbol function_parameters) [34601 34606])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [34608 34616]))                  )
                nil [34587 36976])
            ("kwdoc" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [36987 36988]))              ) nil [36977 37232])
            ("docstring" code nil nil [37233 37279]))          
      :file "artist.py"
      :pointmax 37280
      :fsize 37279
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [1 44])
            ("new" include nil nil [45 86])
            ("datetime" include nil nil [45 86])
            ("warnings" include nil nil [45 86])
            ("sys" include nil nil [45 86])
            ("math" include nil nil [45 86])
            ("operator" include nil nil [87 118])
            ("itertools" include nil nil [119 135])
            ("numpy" include nil nil [137 155])
            ("numpy" include nil nil [156 176])
            ("matplotlib" include nil nil [178 195])
            ("rcParams" variable nil nil [196 226])
            ("matplotlib.artist" include nil nil [228 263])
            ("matplotlib.artist" include nil nil [264 313])
            ("matplotlib.axis" include nil nil [314 345])
            ("matplotlib.cbook" include nil nil [346 378])
            ("matplotlib.collections" include nil nil [379 417])
            ("matplotlib.colors" include nil nil [418 453])
            ("matplotlib.contour" include nil nil [454 491])
            ("matplotlib.dates" include nil nil [492 525])
            ("matplotlib" include nil nil [526 558])
            ("matplotlib.font_manager" include nil nil [559 605])
            ("matplotlib.image" include nil nil [606 639])
            ("matplotlib.legend" include nil nil [640 675])
            ("matplotlib.lines" include nil nil [676 709])
            ("matplotlib.markers" include nil nil [710 747])
            ("matplotlib.mlab" include nil nil [748 778])
            ("matplotlib.path" include nil nil [779 810])
            ("matplotlib.patches" include nil nil [811 848])
            ("matplotlib.spines" include nil nil [849 884])
            ("matplotlib.quiver" include nil nil [885 920])
            ("matplotlib.scale" include nil nil [921 954])
            ("matplotlib.table" include nil nil [955 988])
            ("matplotlib.text" include nil nil [989 1020])
            ("matplotlib.ticker" include nil nil [1021 1056])
            ("matplotlib.transforms" include nil nil [1057 1100])
            ("matplotlib.tri" include nil nil [1101 1130])
            ("matplotlib.container" include nil nil [1132 1211])
            ("iterable" variable nil nil [1213 1238])
            ("is_string_like" variable nil nil [1239 1276])
            ("is_sequence_of_strings" variable nil nil [1277 1330])
            ("_string_to_bool" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [1352 1353]))              ) nil [1332 1550])
            ("_process_plot_format" function
               (:documentation "
    Process a MATLAB style color/line style format string.  Return a
    (*linestyle*, *color*) tuple as a result of the processing.  Default
    values are ('-', 'b').  Example format strings include:

    * 'ko': black circles
    * '.b': blue dots
    * 'r--': red dashed lines

    .. seealso::

        :func:`~matplotlib.Line2D.lineStyles` and
        :func:`~matplotlib.pyplot.colors`
            for all possible styles and color format string.
    "
                :arguments 
                  ( ("fmt" variable nil (reparse-symbol function_parameters) [1576 1579]))                  )
                nil [1551 4127])
            ("set_default_color_cycle" function
               (:documentation "
    Change the default cycle of colors that will be used by the plot
    command.  This must be called before creating the
    :class:`Axes` to which it will apply; it will
    apply to all future axes.

    *clist* is a sequence of mpl color specifiers.

    See also: :meth:`~matplotlib.axes.Axes.set_color_cycle`.

    .. Note:: Deprecated 2010/01/03.
              Set rcParams['axes.color_cycle'] directly.

    "
                :arguments 
                  ( ("clist" variable nil (reparse-symbol function_parameters) [4156 4161]))                  )
                nil [4128 4769])
            ("_process_plot_var_args" type
               (:documentation "

    Process variable length arguments to the plot command, so that
    plot commands like the following are supported::

      plot(t, s)
      plot(t1, s1, t2, s2)
      plot(t1, s1, 'ko', t2, s2)
      plot(t1, s1, 'ko', t2, s2, 'r--', t3, e3)

    an arbitrary number of *x*, *y*, *fmt* are allowed
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5174 5190])
                            ("self" variable nil (reparse-symbol indented_block_body) [5199 5221])
                            ("self" code nil (reparse-symbol indented_block_body) [5230 5252]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5137 5141])
                            ("axes" variable nil (reparse-symbol function_parameters) [5143 5147])
                            ("command" variable nil (reparse-symbol function_parameters) [5149 5156]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5124 5253])
                    ("set_color_cycle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5278 5282])
                            ("clist" variable nil (reparse-symbol function_parameters) [5284 5289]))                          )
                        (reparse-symbol indented_block_body) [5258 5422])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5440 5444])
                            ("args" variable nil (reparse-symbol function_parameters) [5446 5451])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5453 5461]))                          )
                        (reparse-symbol indented_block_body) [5427 6134])
                    ("set_lineprops" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6157 6161])
                            ("line" variable nil (reparse-symbol function_parameters) [6163 6167])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6169 6177]))                          )
                        (reparse-symbol indented_block_body) [6139 6511])
                    ("set_patchprops" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6535 6539])
                            ("fill_poly" variable nil (reparse-symbol function_parameters) [6541 6550])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6552 6560]))                          )
                        (reparse-symbol indented_block_body) [6516 6906])
                    ("_xy_from_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6927 6931])
                            ("x" variable nil (reparse-symbol function_parameters) [6933 6934])
                            ("y" variable nil (reparse-symbol function_parameters) [6936 6937]))                          )
                        (reparse-symbol indented_block_body) [6911 8518])
                    ("_makeline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8537 8541])
                            ("x" variable nil (reparse-symbol function_parameters) [8543 8544])
                            ("y" variable nil (reparse-symbol function_parameters) [8546 8547])
                            ("kw" variable nil (reparse-symbol function_parameters) [8549 8551])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8553 8559]))                          )
                        (reparse-symbol indented_block_body) [8523 9010])
                    ("_makefill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9029 9033])
                            ("x" variable nil (reparse-symbol function_parameters) [9035 9036])
                            ("y" variable nil (reparse-symbol function_parameters) [9038 9039])
                            ("kw" variable nil (reparse-symbol function_parameters) [9041 9043])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9045 9051]))                          )
                        (reparse-symbol indented_block_body) [9015 9492])
                    ("_plot_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9513 9517])
                            ("tup" variable nil (reparse-symbol function_parameters) [9519 9522])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [9524 9530]))                          )
                        (reparse-symbol indented_block_body) [9498 10612])
                    ("_grab_next_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10637 10641])
                            ("args" variable nil (reparse-symbol function_parameters) [10643 10648])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10650 10658]))                          )
                        (reparse-symbol indented_block_body) [10617 11168]))                  
                :type "class")
                nil [4771 11168])
            ("Axes" type
               (:documentation "
    The :class:`Axes` contains most of the figure elements:
    :class:`~matplotlib.axis.Axis`, :class:`~matplotlib.axis.Tick`,
    :class:`~matplotlib.lines.Line2D`, :class:`~matplotlib.text.Text`,
    :class:`~matplotlib.patches.Polygon`, etc., and sets the
    coordinate system.

    The :class:`Axes` instance supports callbacks through a callbacks
    attribute which is a :class:`~matplotlib.cbook.CallbackRegistry`
    instance.  The events you can connect to are 'xlim_changed' and
    'ylim_changed' and the callback will be called with func(*ax*)
    where *ax* is the :class:`Axes` instance.
    "
                :superclasses ("martist.Artist")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [11822 11842])
                    ("_shared_x_axes" variable nil (reparse-symbol indented_block_body) [11848 11880])
                    ("_shared_y_axes" variable nil (reparse-symbol indented_block_body) [11885 11917])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11935 11939]))                          )
                        (reparse-symbol indented_block_body) [11923 12008])
                    ("__init__" function
                       (:suite 
                          ( ("martist" code nil (reparse-symbol indented_block_body) [15103 15132])
                            ("if" code nil (reparse-symbol indented_block_body) [15141 15293])
                            ("self" variable nil (reparse-symbol indented_block_body) [15301 15349])
                            ("self" code nil (reparse-symbol indented_block_body) [15358 15377])
                            ("self" code nil (reparse-symbol indented_block_body) [15386 15409])
                            ("self" variable nil (reparse-symbol indented_block_body) [15418 15442])
                            ("self" code nil (reparse-symbol indented_block_body) [15451 15471])
                            ("self" variable nil (reparse-symbol indented_block_body) [15480 15501])
                            ("self" variable nil (reparse-symbol indented_block_body) [15510 15531])
                            ("if" code nil (reparse-symbol indented_block_body) [15540 15858])
                            ("if" code nil (reparse-symbol indented_block_body) [15866 16184])
                            ("self" code nil (reparse-symbol indented_block_body) [16192 16213])
                            ("self" code nil (reparse-symbol indented_block_body) [16222 16242])
                            ("self" code nil (reparse-symbol indented_block_body) [16252 16307])
                            ("self" variable nil (reparse-symbol indented_block_body) [16317 16354])
                            ("self" code nil (reparse-symbol indented_block_body) [16422 16439])
                            ("if" code nil (reparse-symbol indented_block_body) [16449 16504])
                            ("self" variable nil (reparse-symbol indented_block_body) [16512 16533])
                            ("self" variable nil (reparse-symbol indented_block_body) [16542 16565])
                            ("self" variable nil (reparse-symbol indented_block_body) [16574 16618])
                            ("self" code nil (reparse-symbol indented_block_body) [16628 16663])
                            ("self" variable nil (reparse-symbol indented_block_body) [16673 16707])
                            ("self" variable nil (reparse-symbol indented_block_body) [16716 16736])
                            ("self" code nil (reparse-symbol indented_block_body) [16780 16790])
                            ("self" variable nil (reparse-symbol indented_block_body) [16870 16891])
                            ("self" variable nil (reparse-symbol indented_block_body) [16900 16921])
                            ("self" code nil (reparse-symbol indented_block_body) [16932 16962])
                            ("self" variable nil (reparse-symbol indented_block_body) [17009 17036])
                            ("self" code nil (reparse-symbol indented_block_body) [17045 17068])
                            ("self" code nil (reparse-symbol indented_block_body) [17077 17105])
                            ("if" code nil (reparse-symbol indented_block_body) [17116 17163])
                            ("if" code nil (reparse-symbol indented_block_body) [17171 17218])
                            ("if" code nil (reparse-symbol indented_block_body) [17227 17272])
                            ("if" code nil (reparse-symbol indented_block_body) [17281 17446])
                            ("if" code nil (reparse-symbol indented_block_body) [17455 17620]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12025 12029])
                            ("fig" variable nil (reparse-symbol function_parameters) [12031 12034])
                            ("rect" variable nil (reparse-symbol function_parameters) [12036 12040])
                            ("axisbg" variable nil (reparse-symbol function_parameters) [12059 12065])
                            ("frameon" variable nil (reparse-symbol function_parameters) [12123 12130])
                            ("sharex" variable nil (reparse-symbol function_parameters) [12156 12162])
                            ("sharey" variable nil (reparse-symbol function_parameters) [12219 12225])
                            ("label" variable nil (reparse-symbol function_parameters) [12282 12287])
                            ("xscale" variable nil (reparse-symbol function_parameters) [12309 12315])
                            ("yscale" variable nil (reparse-symbol function_parameters) [12339 12345])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12369 12377]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12012 17620])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17647 17651])
                            ("args" variable nil (reparse-symbol function_parameters) [17653 17658])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17660 17668]))                          
                        :documentation "
        get the axes bounding box in display space; *args* and
        *kwargs* are empty
        ")
                        (reparse-symbol indented_block_body) [17625 17810])
                    ("_init_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17830 17834]))                          )
                        (reparse-symbol indented_block_body) [17815 18243])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18263 18267])
                            ("fig" variable nil (reparse-symbol function_parameters) [18269 18272]))                          
                        :documentation "
        Set the class:`~matplotlib.axes.Axes` figure

        accepts a class:`~matplotlib.figure.Figure` instance
        ")
                        (reparse-symbol indented_block_body) [18248 18830])
                    ("_set_lim_and_transforms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18863 18867]))                          
                        :documentation "
        set the *dataLim* and *viewLim*
        :class:`~matplotlib.transforms.Bbox` attributes and the
        *transScale*, *transData*, *transLimits* and *transAxes*
        transformations.

        .. note::

            This method is primarily used by rectilinear projections
            of the :class:`~matplotlib.axes.Axes` class, and is meant
            to be overridden by new kinds of projection axes that need
            different transformations and limits. (See
            :class:`~matplotlib.projections.polar.PolarAxes` for an
            example.

        ")
                        (reparse-symbol indented_block_body) [18835 20557])
                    ("get_xaxis_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20586 20590])
                            ("which" variable nil (reparse-symbol function_parameters) [20591 20596]))                          
                        :documentation "
        Get the transformation used for drawing x-axis labels, ticks
        and gridlines.  The x-direction is in data coordinates and the
        y-direction is in axis coordinates.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ")
                        (reparse-symbol indented_block_body) [20562 21522])
                    ("get_xaxis_text1_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21557 21561])
                            ("pad_points" variable nil (reparse-symbol function_parameters) [21563 21573]))                          
                        :documentation "
        Get the transformation used for drawing x-axis labels, which
        will add the given amount of padding (in points) between the
        axes and the label.  The x-direction is in data coordinates
        and the y-direction is in axis coordinates.  Returns a
        3-tuple of the form::

          (transform, valign, halign)

        where *valign* and *halign* are requested alignments for the
        text.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ")
                        (reparse-symbol indented_block_body) [21527 22533])
                    ("get_xaxis_text2_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22568 22572])
                            ("pad_points" variable nil (reparse-symbol function_parameters) [22574 22584]))                          
                        :documentation "
        Get the transformation used for drawing the secondary x-axis
        labels, which will add the given amount of padding (in points)
        between the axes and the label.  The x-direction is in data
        coordinates and the y-direction is in axis coordinates.
        Returns a 3-tuple of the form::

          (transform, valign, halign)

        where *valign* and *halign* are requested alignments for the
        text.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ")
                        (reparse-symbol indented_block_body) [22538 23555])
                    ("get_yaxis_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23584 23588])
                            ("which" variable nil (reparse-symbol function_parameters) [23589 23594]))                          
                        :documentation "
        Get the transformation used for drawing y-axis labels, ticks
        and gridlines.  The x-direction is in axis coordinates and the
        y-direction is in data coordinates.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ")
                        (reparse-symbol indented_block_body) [23560 24520])
                    ("get_yaxis_text1_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24555 24559])
                            ("pad_points" variable nil (reparse-symbol function_parameters) [24561 24571]))                          
                        :documentation "
        Get the transformation used for drawing y-axis labels, which
        will add the given amount of padding (in points) between the
        axes and the label.  The x-direction is in axis coordinates
        and the y-direction is in data coordinates.  Returns a 3-tuple
        of the form::

          (transform, valign, halign)

        where *valign* and *halign* are requested alignments for the
        text.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ")
                        (reparse-symbol indented_block_body) [24525 25534])
                    ("get_yaxis_text2_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25569 25573])
                            ("pad_points" variable nil (reparse-symbol function_parameters) [25575 25585]))                          
                        :documentation "
        Get the transformation used for drawing the secondary y-axis
        labels, which will add the given amount of padding (in points)
        between the axes and the label.  The x-direction is in axis
        coordinates and the y-direction is in data coordinates.
        Returns a 3-tuple of the form::

          (transform, valign, halign)

        where *valign* and *halign* are requested alignments for the
        text.

        .. note::

            This transformation is primarily used by the
            :class:`~matplotlib.axis.Axis` class, and is meant to be
            overridden by new kinds of projections that may need to
            place axis elements in different locations.

        ")
                        (reparse-symbol indented_block_body) [25539 26555])
                    ("_update_transScale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26583 26587]))                          )
                        (reparse-symbol indented_block_body) [26560 26955])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26977 26981])
                            ("original" variable nil (reparse-symbol function_parameters) [26983 26991]))                          )
                        (reparse-symbol indented_block_body) [26960 27189])
                    ("set_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27212 27216])
                            ("pos" variable nil (reparse-symbol function_parameters) [27218 27221])
                            ("which" variable nil (reparse-symbol function_parameters) [27223 27228]))                          
                        :documentation "
        Set the axes position with::

          pos = [left, bottom, width, height]

        in relative 0,1 coords, or *pos* can be a
        :class:`~matplotlib.transforms.Bbox`

        There are two position variables: one which is ultimately
        used, but which may be modified by :meth:`apply_aspect`, and a
        second which is the starting point for :meth:`apply_aspect`.


        Optional keyword arguments:
          *which*

            ==========   ====================
            value        description
            ==========   ====================
            'active'     to change the first
            'original'   to change the second
            'both'       to change both
            ==========   ====================

        ")
                        (reparse-symbol indented_block_body) [27195 28282])
                    ("reset_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28306 28310]))                          
                        :documentation "Make the original position the active position")
                        (reparse-symbol indented_block_body) [28287 28468])
                    ("set_axes_locator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28494 28498])
                            ("locator" variable nil (reparse-symbol function_parameters) [28500 28507]))                          
                        :documentation "
        set axes_locator

        ACCEPT : a callable object which takes an axes instance and renderer and
                 returns a bbox.
        ")
                        (reparse-symbol indented_block_body) [28473 28711])
                    ("get_axes_locator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28737 28741]))                          
                        :documentation "
        return axes_locator
        ")
                        (reparse-symbol indented_block_body) [28716 28830])
                    ("_set_artist_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28857 28861])
                            ("a" variable nil (reparse-symbol function_parameters) [28863 28864]))                          
                        :documentation "set the boilerplate props for artists added to axes")
                        (reparse-symbol indented_block_body) [28835 29074])
                    ("_gen_axes_patch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29099 29103]))                          
                        :documentation "
        Returns the patch used to draw the background of the axes.  It
        is also used as the clipping path for any data elements on the
        axes.

        In the standard axes, this is a rectangle, but in other
        projections it may not be.

        .. note::

            Intended to be overridden by new projection types.

        ")
                        (reparse-symbol indented_block_body) [29079 29526])
                    ("_gen_axes_spines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29552 29556])
                            ("locations" variable nil (reparse-symbol function_parameters) [29558 29567])
                            ("offset" variable nil (reparse-symbol function_parameters) [29574 29580])
                            ("units" variable nil (reparse-symbol function_parameters) [29586 29591]))                          
                        :documentation "
        Returns a dict whose keys are spine names and values are
        Line2D or Patch instances. Each element is used to draw a
        spine of the axes.

        In the standard axes, this is a single line segment, but in
        other projections it may not be.

        .. note::

            Intended to be overridden by new projection types.

        ")
                        (reparse-symbol indented_block_body) [29531 30254])
                    ("cla" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30267 30271]))                          
                        :documentation "Clear the current axes")
                        (reparse-symbol indented_block_body) [30259 33457])
                    ("get_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33476 33480]))                          )
                        (reparse-symbol indented_block_body) [33462 33562])
                    ("frame" variable nil (reparse-symbol indented_block_body) [33566 33593])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33609 33613]))                          
                        :documentation "clear the axes")
                        (reparse-symbol indented_block_body) [33599 33664])
                    ("set_color_cycle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33689 33693])
                            ("clist" variable nil (reparse-symbol function_parameters) [33695 33700]))                          
                        :documentation "
        Set the color cycle for any future plot commands on this Axes.

        *clist* is a list of mpl color specifiers.
        ")
                        (reparse-symbol indented_block_body) [33669 33955])
                    ("ishold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33972 33976]))                          
                        :documentation "return the HOLD status of the axes")
                        (reparse-symbol indented_block_body) [33961 34054])
                    ("hold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34068 34072])
                            ("b" variable nil (reparse-symbol function_parameters) [34074 34075]))                          
                        :documentation "
        Call signature::

          hold(b=None)

        Set the hold state.  If *hold* is *None* (default), toggle the
        *hold* state.  Else set the *hold* state to boolean value *b*.

        Examples::

          # toggle hold
          hold()

          # turn hold on
          hold(True)

          # turn hold off
          hold(False)


        When hold is *True*, subsequent plot commands will be added to
        the current axes.  When hold is *False*, the current axes and
        figure will be cleared on the next plot command

        ")
                        (reparse-symbol indented_block_body) [34059 34760])
                    ("get_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34780 34784]))                          )
                        (reparse-symbol indented_block_body) [34765 34815])
                    ("set_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34835 34839])
                            ("aspect" variable nil (reparse-symbol function_parameters) [34841 34847])
                            ("adjustable" variable nil (reparse-symbol function_parameters) [34849 34859])
                            ("anchor" variable nil (reparse-symbol function_parameters) [34866 34872]))                          
                        :documentation "
        *aspect*

          ========   ================================================
          value      description
          ========   ================================================
          'auto'     automatic; fill position rectangle with data
          'normal'   same as 'auto'; deprecated
          'equal'    same scaling from data to plot units for x and y
           num       a circle will be stretched such that the height
                     is num times the width. aspect=1 is the same as
                     aspect='equal'.
          ========   ================================================

        *adjustable*

          ============   =====================================
          value          description
          ============   =====================================
          'box'          change physical size of axes
          'datalim'      change xlim or ylim
          'box-forced'   same as 'box', but axes can be shared
          ============   =====================================

        'box' does not allow axes sharing, as this can cause
        unintended side effect. For cases when sharing axes is
        fine, use 'box-forced'.

        *anchor*

          =====   =====================
          value   description
          =====   =====================
          'C'     centered
          'SW'    lower left corner
          'S'     middle of bottom edge
          'SE'    lower right corner
          etc.
          =====   =====================

        ")
                        (reparse-symbol indented_block_body) [34820 36793])
                    ("get_adjustable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36817 36821]))                          )
                        (reparse-symbol indented_block_body) [36798 36856])
                    ("set_adjustable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36880 36884])
                            ("adjustable" variable nil (reparse-symbol function_parameters) [36886 36896]))                          
                        :documentation "
        ACCEPTS: [ 'box' | 'datalim' | 'box-forced']
        ")
                        (reparse-symbol indented_block_body) [36861 37385])
                    ("get_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37405 37409]))                          )
                        (reparse-symbol indented_block_body) [37390 37440])
                    ("set_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37460 37464])
                            ("anchor" variable nil (reparse-symbol function_parameters) [37466 37472]))                          
                        :documentation "
        *anchor*

          =====  ============
          value  description
          =====  ============
          'C'    Center
          'SW'   bottom left
          'S'    bottom
          'SE'   bottom right
          'E'    right
          'NE'   top right
          'N'    top
          'NW'   top left
          'W'    left
          =====  ============

        ")
                        (reparse-symbol indented_block_body) [37445 38116])
                    ("get_data_ratio" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38140 38144]))                          
                        :documentation "
        Returns the aspect ratio of the raw data.

        This method is intended to be overridden by new projection
        types.
        ")
                        (reparse-symbol indented_block_body) [38121 38507])
                    ("get_data_ratio_log" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38536 38540]))                          
                        :documentation "
        Returns the aspect ratio of the raw data in log scale.
        Will be used when both axis scales are in log.
        ")
                        (reparse-symbol indented_block_body) [38513 38936])
                    ("apply_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38959 38963])
                            ("position" variable nil (reparse-symbol function_parameters) [38965 38973]))                          
                        :documentation "
        Use :meth:`_aspect` and :meth:`_adjustable` to modify the
        axes box or the view limits.
        ")
                        (reparse-symbol indented_block_body) [38942 44256])
                    ("axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44377 44381])
                            ("v" variable nil (reparse-symbol function_parameters) [44383 44385])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44387 44395]))                          
                        :documentation "
        Convenience method for manipulating the x and y view limits
        and the aspect ratio of the plot. For details, see
        :func:`~matplotlib.pyplot.axis`.

        *kwargs* are passed on to :meth:`set_xlim` and
        :meth:`set_ylim`
        ")
                        (reparse-symbol indented_block_body) [44368 47188])
                    ("get_child_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47215 47219]))                          
                        :documentation "
        Return a list of artists the axes contains.

        .. deprecated:: 0.98
        ")
                        (reparse-symbol indented_block_body) [47193 47389])
                    ("get_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47408 47412]))                          
                        :documentation "Return the axes Rectangle frame")
                        (reparse-symbol indented_block_body) [47394 47553])
                    ("get_legend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47573 47577]))                          
                        :documentation "Return the legend.Legend instance, or None if no legend is defined")
                        (reparse-symbol indented_block_body) [47558 47689])
                    ("get_images" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47709 47713]))                          
                        :documentation "return a list of Axes images contained by the Axes")
                        (reparse-symbol indented_block_body) [47694 47840])
                    ("get_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47859 47863]))                          
                        :documentation "Return a list of lines contained by the Axes")
                        (reparse-symbol indented_block_body) [47845 47980])
                    ("get_xaxis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47999 48003]))                          
                        :documentation "Return the XAxis instance")
                        (reparse-symbol indented_block_body) [47985 48072])
                    ("get_xgridlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48096 48100]))                          
                        :documentation "Get the x grid lines as a list of Line2D instances")
                        (reparse-symbol indented_block_body) [48077 48249])
                    ("get_xticklines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48274 48278]))                          
                        :documentation "Get the xtick lines as a list of Line2D instances")
                        (reparse-symbol indented_block_body) [48255 48424])
                    ("get_yaxis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48444 48448]))                          
                        :documentation "Return the YAxis instance")
                        (reparse-symbol indented_block_body) [48430 48517])
                    ("get_ygridlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48541 48545]))                          
                        :documentation "Get the y grid lines as a list of Line2D instances")
                        (reparse-symbol indented_block_body) [48522 48694])
                    ("get_yticklines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48718 48722]))                          
                        :documentation "Get the ytick lines as a list of Line2D instances")
                        (reparse-symbol indented_block_body) [48699 48870])
                    ("_sci" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48922 48926])
                            ("im" variable nil (reparse-symbol function_parameters) [48928 48930]))                          
                        :documentation "
        helper for :func:`~matplotlib.pyplot.sci`;
        do not use elsewhere.
        ")
                        (reparse-symbol indented_block_body) [48913 49457])
                    ("_gci" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49471 49475]))                          
                        :documentation "
        Helper for :func:`~matplotlib.pyplot.gci`;
        do not use elsewhere.
        ")
                        (reparse-symbol indented_block_body) [49462 49618])
                    ("has_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49636 49640]))                          
                        :documentation "
        Return *True* if any artists have been added to axes.

        This should not be used to determine whether the *dataLim*
        need to be updated, and may not actually be useful for
        anything.
        ")
                        (reparse-symbol indented_block_body) [49623 50025])
                    ("add_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50045 50049])
                            ("a" variable nil (reparse-symbol function_parameters) [50051 50052]))                          
                        :documentation "
        Add any :class:`~matplotlib.artist.Artist` to the axes.

        Returns the artist.
        ")
                        (reparse-symbol indented_block_body) [50030 50375])
                    ("add_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50399 50403])
                            ("collection" variable nil (reparse-symbol function_parameters) [50405 50415])
                            ("autolim" variable nil (reparse-symbol function_parameters) [50417 50424]))                          
                        :documentation "
        Add a :class:`~matplotlib.collections.Collection` instance
        to the axes.

        Returns the collection.
        ")
                        (reparse-symbol indented_block_body) [50380 51151])
                    ("add_line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51169 51173])
                            ("line" variable nil (reparse-symbol function_parameters) [51175 51179]))                          
                        :documentation "
        Add a :class:`~matplotlib.lines.Line2D` to the list of plot
        lines

        Returns the line.
        ")
                        (reparse-symbol indented_block_body) [51156 51676])
                    ("_update_line_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51705 51709])
                            ("line" variable nil (reparse-symbol function_parameters) [51711 51715]))                          )
                        (reparse-symbol indented_block_body) [51681 52044])
                    ("add_patch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52063 52067])
                            ("p" variable nil (reparse-symbol function_parameters) [52069 52070]))                          
                        :documentation "
        Add a :class:`~matplotlib.patches.Patch` *p* to the list of
        axes patches; the clipbox will be set to the Axes clipping
        box.  If the transform is not set, it will be set to
        :attr:`transData`.

        Returns the patch.
        ")
                        (reparse-symbol indented_block_body) [52049 52606])
                    ("_update_patch_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52636 52640])
                            ("patch" variable nil (reparse-symbol function_parameters) [52642 52647]))                          
                        :documentation "update the data limits for patch *p*")
                        (reparse-symbol indented_block_body) [52611 53657])
                    ("add_table" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53677 53681])
                            ("tab" variable nil (reparse-symbol function_parameters) [53683 53686]))                          
                        :documentation "
        Add a :class:`~matplotlib.tables.Table` instance to the
        list of axes tables

        Returns the table.
        ")
                        (reparse-symbol indented_block_body) [53663 54019])
                    ("add_container" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54042 54046])
                            ("container" variable nil (reparse-symbol function_parameters) [54048 54057]))                          
                        :documentation "
        Add a :class:`~matplotlib.container.Container` instance
        to the axes.

        Returns the collection.
        ")
                        (reparse-symbol indented_block_body) [54024 54479])
                    ("relim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54495 54499]))                          
                        :documentation "
        Recompute the data limits based on current artists.

        At present, :class:`~matplotlib.collections.Collection`
        instances are not supported.
        ")
                        (reparse-symbol indented_block_body) [54485 55021])
                    ("update_datalim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55045 55049])
                            ("xys" variable nil (reparse-symbol function_parameters) [55051 55054])
                            ("updatex" variable nil (reparse-symbol function_parameters) [55056 55063])
                            ("updatey" variable nil (reparse-symbol function_parameters) [55070 55077]))                          
                        :documentation "Update the data lim bbox with seq of xy tups or equiv. 2-D array")
                        (reparse-symbol indented_block_body) [55026 55726])
                    ("update_datalim_numerix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55758 55762])
                            ("x" variable nil (reparse-symbol function_parameters) [55764 55765])
                            ("y" variable nil (reparse-symbol function_parameters) [55767 55768]))                          
                        :documentation "Update the data lim bbox with seq of xy tups")
                        (reparse-symbol indented_block_body) [55731 56237])
                    ("update_datalim_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56268 56272])
                            ("bounds" variable nil (reparse-symbol function_parameters) [56274 56280]))                          
                        :documentation "
        Update the datalim to include the given
        :class:`~matplotlib.transforms.Bbox` *bounds*
        ")
                        (reparse-symbol indented_block_body) [56242 56482])
                    ("_process_unit_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56510 56514])
                            ("xdata" variable nil (reparse-symbol function_parameters) [56516 56521])
                            ("ydata" variable nil (reparse-symbol function_parameters) [56528 56533])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56540 56546]))                          
                        :documentation "Look for unit *kwargs* and update the axis instances as necessary")
                        (reparse-symbol indented_block_body) [56487 58313])
                    ("in_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58330 58334])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [58336 58346]))                          
                        :documentation "
        Return *True* if the given *mouseevent* (in display coords)
        is in the Axes
        ")
                        (reparse-symbol indented_block_body) [58318 58514])
                    ("get_autoscale_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58540 58544]))                          
                        :documentation "
        Get whether autoscaling is applied for both axes on plot commands
        ")
                        (reparse-symbol indented_block_body) [58519 58702])
                    ("get_autoscalex_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58729 58733]))                          
                        :documentation "
        Get whether autoscaling for the x-axis is applied on plot commands
        ")
                        (reparse-symbol indented_block_body) [58707 58869])
                    ("get_autoscaley_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58896 58900]))                          
                        :documentation "
        Get whether autoscaling for the y-axis is applied on plot commands
        ")
                        (reparse-symbol indented_block_body) [58874 59036])
                    ("set_autoscale_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59062 59066])
                            ("b" variable nil (reparse-symbol function_parameters) [59068 59069]))                          
                        :documentation "
        Set whether autoscaling is applied on plot commands

        accepts: [ *True* | *False* ]
        ")
                        (reparse-symbol indented_block_body) [59041 59257])
                    ("set_autoscalex_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59284 59288])
                            ("b" variable nil (reparse-symbol function_parameters) [59290 59291]))                          
                        :documentation "
        Set whether autoscaling for the x-axis is applied on plot commands

        accepts: [ *True* | *False* ]
        ")
                        (reparse-symbol indented_block_body) [59262 59463])
                    ("set_autoscaley_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59490 59494])
                            ("b" variable nil (reparse-symbol function_parameters) [59496 59497]))                          
                        :documentation "
        Set whether autoscaling for the y-axis is applied on plot commands

        accepts: [ *True* | *False* ]
        ")
                        (reparse-symbol indented_block_body) [59468 59669])
                    ("set_xmargin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59690 59694])
                            ("m" variable nil (reparse-symbol function_parameters) [59696 59697]))                          
                        :documentation "
        Set padding of X data limits prior to autoscaling.

        *m* times the data interval will be added to each
        end of that interval before it is used in autoscaling.

        accepts: float in range 0 to 1
        ")
                        (reparse-symbol indented_block_body) [59674 60061])
                    ("set_ymargin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60082 60086])
                            ("m" variable nil (reparse-symbol function_parameters) [60088 60089]))                          
                        :documentation "
        Set padding of Y data limits prior to autoscaling.

        *m* times the data interval will be added to each
        end of that interval before it is used in autoscaling.

        accepts: float in range 0 to 1
        ")
                        (reparse-symbol indented_block_body) [60066 60453])
                    ("margins" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60471 60475])
                            ("args" variable nil (reparse-symbol function_parameters) [60477 60482])
                            ("kw" variable nil (reparse-symbol function_parameters) [60484 60488]))                          
                        :documentation "
        Convenience method to set or retrieve autoscaling margins.

        signatures::

            margins()

        returns xmargin, ymargin

        ::

            margins(margin)

            margins(xmargin, ymargin)

            margins(x=xmargin, y=ymargin)

            margins(..., tight=False)

        All three forms above set the xmargin and ymargin parameters.
        All keyword parameters are optional.  A single argument
        specifies both xmargin and ymargin.  The *tight* parameter
        is passed to :meth:`autoscale_view`, which is executed after
        a margin is changed; the default here is *True*, on the
        assumption that when margins are specified, no additional
        padding to match tick marks is usually desired.  Setting
        *tight* to *None* will preserve the previous setting.

        Specifying any margin changes only the autoscaling; for example,
        if *xmargin* is not None, then *xmargin* times the X data
        interval will be added to each end of that interval before
        it is used in autoscaling.

        ")
                        (reparse-symbol indented_block_body) [60459 62232])
                    ("set_rasterization_zorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62267 62271])
                            ("z" variable nil (reparse-symbol function_parameters) [62273 62274]))                          
                        :documentation "
        Set zorder value below which artists will be rasterized
        ")
                        (reparse-symbol indented_block_body) [62238 62404])
                    ("get_rasterization_zorder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62438 62442]))                          
                        :documentation "
        Get zorder value below which artists will be rasterized
        ")
                        (reparse-symbol indented_block_body) [62409 62575])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62594 62598])
                            ("enable" variable nil (reparse-symbol function_parameters) [62600 62606])
                            ("axis" variable nil (reparse-symbol function_parameters) [62613 62617])
                            ("tight" variable nil (reparse-symbol function_parameters) [62626 62631]))                          
                        :documentation "
        Convenience method for simple axis view autoscaling.
        It turns autoscaling on or off, and then,
        if autoscaling for either axis is on, it performs
        the autoscaling on the specified axis or axes.

        *enable*: [True | False | None]
            True (default) turns autoscaling on, False turns it off.
            None leaves the autoscaling state unchanged.

        *axis*: ['x' | 'y' | 'both']
            which axis to operate on; default is 'both'

        *tight*: [True | False | None]
            If True, set view limits to data limits;
            if False, let the locator and margins expand the view limits;
            if None, use tight scaling if the only artist is an image,
            otherwise treat *tight* as False.
            The *tight* setting is retained for future autoscaling
            until it is explicitly changed.


        Returns None.
        ")
                        (reparse-symbol indented_block_body) [62580 64049])
                    ("autoscale_view" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64074 64078])
                            ("tight" variable nil (reparse-symbol function_parameters) [64080 64085])
                            ("scalex" variable nil (reparse-symbol function_parameters) [64092 64098])
                            ("scaley" variable nil (reparse-symbol function_parameters) [64105 64111]))                          
                        :documentation "
        Autoscale the view limits using the data limits. You can
        selectively autoscale only a single axis, eg, the xaxis by
        setting *scaley* to *False*.  The autoscaling preserves any
        axis direction reversal that has already been done.

        The data limits are not updated automatically when artist
        data are changed after the artist has been added to an
        Axes instance.  In that case, use
        :meth:`matplotlib.axes.Axes.relim`
        prior to calling autoscale_view.
        ")
                        (reparse-symbol indented_block_body) [64055 66697])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66754 66758])
                            ("renderer" variable nil (reparse-symbol function_parameters) [66760 66768])
                            ("inframe" variable nil (reparse-symbol function_parameters) [66775 66782]))                          
                        :documentation "Draw everything (plot lines, axes, labels)")
                        (reparse-symbol indented_block_body) [66720 70862])
                    ("draw_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70883 70887])
                            ("a" variable nil (reparse-symbol function_parameters) [70889 70890]))                          
                        :documentation "
        This method can only be used after an initial draw which
        caches the renderer.  It is used to efficiently update Axes
        data (axis ticks, labels, etc are not updated)
        ")
                        (reparse-symbol indented_block_body) [70867 71190])
                    ("redraw_in_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71215 71219]))                          
                        :documentation "
        This method can only be used after an initial draw which
        caches the renderer.  It is used to efficiently update Axes
        data (axis ticks, labels, etc are not updated)
        ")
                        (reparse-symbol indented_block_body) [71195 71536])
                    ("get_renderer_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71564 71568]))                          )
                        (reparse-symbol indented_block_body) [71541 71607])
                    ("__draw_animate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71631 71635]))                          )
                        (reparse-symbol indented_block_body) [71612 71989])
                    ("get_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72052 72056]))                          
                        :documentation "
        Get whether the axes rectangle patch is drawn
        ")
                        (reparse-symbol indented_block_body) [72035 72166])
                    ("set_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72188 72192])
                            ("b" variable nil (reparse-symbol function_parameters) [72194 72195]))                          
                        :documentation "
        Set whether the axes rectangle patch is drawn

        ACCEPTS: [ *True* | *False* ]
        ")
                        (reparse-symbol indented_block_body) [72171 72341])
                    ("get_axisbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72364 72368]))                          
                        :documentation "
        Get whether axis below is true or not
        ")
                        (reparse-symbol indented_block_body) [72346 72472])
                    ("set_axisbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72495 72499])
                            ("b" variable nil (reparse-symbol function_parameters) [72501 72502]))                          
                        :documentation "
        Set whether the axis ticks and gridlines are above or below most artists

        ACCEPTS: [ *True* | *False* ]
        ")
                        (reparse-symbol indented_block_body) [72477 72677])
                    ("grid" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72721 72725])
                            ("b" variable nil (reparse-symbol function_parameters) [72727 72728])
                            ("which" variable nil (reparse-symbol function_parameters) [72735 72740])
                            ("axis" variable nil (reparse-symbol function_parameters) [72750 72754])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [72763 72771]))                          
                        :documentation "
        Call signature::

           grid(self, b=None, which='major', axis='both', **kwargs)

        Set the axes grids on or off; *b* is a boolean.  (For MATLAB
        compatibility, *b* may also be a string, 'on' or 'off'.)

        If *b* is *None* and ``len(kwargs)==0``, toggle the grid state.  If
        *kwargs* are supplied, it is assumed that you want a grid and *b*
        is thus set to *True*.

        *which* can be 'major' (default), 'minor', or 'both' to control
        whether major tick grids, minor tick grids, or both are affected.

        *axis* can be 'both' (default), 'x', or 'y' to control which
        set of gridlines are drawn.

        *kwargs* are used to set the grid line properties, eg::

           ax.grid(color='r', linestyle='-', linewidth=2)

        Valid :class:`~matplotlib.lines.Line2D` kwargs are

        %(Line2D)s

        ")
                        (reparse-symbol indented_block_body) [72682 73934])
                    ("ticklabel_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73960 73964])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [73966 73974]))                          
                        :documentation "
        Convenience method for manipulating the ScalarFormatter
        used by default for linear axes.

        Optional keyword arguments:

          ============   =========================================
          Keyword        Description
          ============   =========================================
          *style*        [ 'sci' (or 'scientific') | 'plain' ]
                         plain turns off scientific notation
          *scilimits*    (m, n), pair of integers; if *style*
                         is 'sci', scientific notation will
                         be used for numbers outside the range
                         10`-m`:sup: to 10`n`:sup:.
                         Use (0,0) to include all numbers.
          *useOffset*    [True | False | offset]; if True,
                         the offset will be calculated as needed;
                         if False, no offset will be used; if a
                         numeric offset is specified, it will be
                         used.
          *axis*         [ 'x' | 'y' | 'both' ]
          *useLocale*    If True, format the number according to
                         the current locale.  This affects things
                         such as the character used for the
                         decimal separator.  If False, use
                         C-style (English) formatting.  The
                         default setting is controlled by the
                         axes.formatter.use_locale rcparam.
          ============   =========================================

        Only the major ticks are affected.
        If the method is called when the
        :class:`~matplotlib.ticker.ScalarFormatter` is not the
        :class:`~matplotlib.ticker.Formatter` being used, an
        :exc:`AttributeError` will be raised.

        ")
                        (reparse-symbol indented_block_body) [73939 78013])
                    ("locator_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78037 78041])
                            ("axis" variable nil (reparse-symbol function_parameters) [78043 78047])
                            ("tight" variable nil (reparse-symbol function_parameters) [78056 78061])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [78068 78076]))                          
                        :documentation "
        Convenience method for controlling tick locators.

        Keyword arguments:

        *axis*
            ['x' | 'y' | 'both']  Axis on which to operate;
            default is 'both'.

        *tight*
            [True | False | None] Parameter passed to :meth:`autoscale_view`.
            Default is None, for no change.

        Remaining keyword arguments are passed to directly to the
        :meth:`~matplotlib.ticker.MaxNLocator.set_params` method.

        Typically one might want to reduce the maximum number
        of ticks and use tight bounds when plotting small
        subplots, for example::

            ax.locator_params(tight=True, nbins=4)

        Because the locator is involved in autoscaling,
        :meth:`autoscale_view` is called automatically after
        the parameters are changed.

        This presently works only for the
        :class:`~matplotlib.ticker.MaxNLocator` used
        by default on linear axes, but it may be generalized.
        ")
                        (reparse-symbol indented_block_body) [78018 79376])
                    ("tick_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79397 79401])
                            ("axis" variable nil (reparse-symbol function_parameters) [79403 79407])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [79416 79424]))                          
                        :documentation "
        Convenience method for changing the appearance of ticks and
        tick labels.

        Keyword arguments:

        *axis* : ['x' | 'y' | 'both']
            Axis on which to operate; default is 'both'.

        *reset* : [True | False]
            If *True*, set all parameters to defaults
            before processing other keyword arguments.  Default is
            *False*.

        *which* : ['major' | 'minor' | 'both']
            Default is 'major'; apply arguments to *which* ticks.

        *direction* : ['in' | 'out']
            Puts ticks inside or outside the axes.

        *length*
            Tick length in points.

        *width*
            Tick width in points.

        *color*
            Tick color; accepts any mpl color spec.

        *pad*
            Distance in points between tick and label.

        *labelsize*
            Tick label font size in points or as a string (e.g. 'large').

        *labelcolor*
            Tick label color; mpl color spec.

        *colors*
            Changes the tick color and the label color to the same value:
            mpl color spec.

        *zorder*
            Tick and label zorder.

        *bottom*, *top*, *left*, *right* : [bool | 'on' | 'off']
            controls whether to draw the respective ticks.

        *labelbottom*, *labeltop*, *labelleft*, *labelright*
            Boolean or ['on' | 'off'], controls whether to draw the
            respective tick labels.

        Example::

            ax.tick_params(direction='out', length=6, width=2, colors='r')

        This will make all major ticks be red, pointing out of the box,
        and with dimensions 6 points by 2 points.  Tick labels will
        also be red.

        ")
                        (reparse-symbol indented_block_body) [79381 81689])
                    ("set_axis_off" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81711 81715]))                          
                        :documentation "turn off the axis")
                        (reparse-symbol indented_block_body) [81694 81778])
                    ("set_axis_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81799 81803]))                          
                        :documentation "turn on the axis")
                        (reparse-symbol indented_block_body) [81783 81864])
                    ("get_axis_bgcolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81890 81894]))                          
                        :documentation "Return the axis background color")
                        (reparse-symbol indented_block_body) [81869 81972])
                    ("set_axis_bgcolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81998 82002])
                            ("color" variable nil (reparse-symbol function_parameters) [82004 82009]))                          
                        :documentation "
        set the axes background color

        ACCEPTS: any matplotlib color - see
        :func:`~matplotlib.pyplot.colors`
        ")
                        (reparse-symbol indented_block_body) [81977 82231])
                    ("invert_xaxis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82310 82314]))                          )
                        (reparse-symbol indented_block_body) [82293 82419])
                    ("xaxis_inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82443 82447]))                          
                        :documentation "Returns *True* if the x-axis is inverted.")
                        (reparse-symbol indented_block_body) [82424 82572])
                    ("get_xbound" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82592 82596]))                          
                        :documentation "
        Returns the x-axis numerical bounds where::

          lowerBound < upperBound

        ")
                        (reparse-symbol indented_block_body) [82577 82850])
                    ("set_xbound" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82870 82874])
                            ("lower" variable nil (reparse-symbol function_parameters) [82876 82881])
                            ("upper" variable nil (reparse-symbol function_parameters) [82888 82893]))                          
                        :documentation "
        Set the lower and upper numerical bounds of the x-axis.
        This method will honor axes inversion regardless of parameter order.
        It will not change the _autoscaleXon attribute.
        ")
                        (reparse-symbol indented_block_body) [82855 83703])
                    ("get_xlim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83721 83725]))                          
                        :documentation "
        Get the x-axis range [*left*, *right*]
        ")
                        (reparse-symbol indented_block_body) [83708 83844])
                    ("set_xlim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83862 83866])
                            ("left" variable nil (reparse-symbol function_parameters) [83868 83872])
                            ("right" variable nil (reparse-symbol function_parameters) [83879 83884])
                            ("emit" variable nil (reparse-symbol function_parameters) [83891 83895])
                            ("auto" variable nil (reparse-symbol function_parameters) [83902 83906])
                            ("kw" variable nil (reparse-symbol function_parameters) [83914 83918]))                          
                        :documentation "
        Call signature::

          set_xlim(self, *args, **kwargs):

        Set the data limits for the xaxis

        Examples::

          set_xlim((left, right))
          set_xlim(left, right)
          set_xlim(left=1) # right unchanged
          set_xlim(right=1) # left unchanged

        Keyword arguments:

          *left*: scalar
            The left xlim; *xmin*, the previous name, may still be used

          *right*: scalar
            The right xlim; *xmax*, the previous name, may still be used

          *emit*: [ *True* | *False* ]
            Notify observers of limit change

          *auto*: [ *True* | *False* | *None* ]
            Turn *x* autoscaling on (*True*), off (*False*; default),
            or leave unchanged (*None*)

        Note, the *left* (formerly *xmin*) value may be greater than
        the *right* (formerly *xmax*).
        For example, suppose *x* is years before present.
        Then one might use::

          set_ylim(5000, 0)

        so 5000 years ago is on the left of the plot and the
        present is on the right.

        Returns the current xlimits as a length 2 tuple

        ACCEPTS: length 2 sequence of floats
        ")
                        (reparse-symbol indented_block_body) [83849 86825])
                    ("get_xscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86845 86849]))                          )
                        (reparse-symbol indented_block_body) [86830 86890])
                    ("get_xscale" code nil (reparse-symbol indented_block_body) [86894 87025])
                    ("set_xscale" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87076 87080])
                            ("value" variable nil (reparse-symbol function_parameters) [87082 87087])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [87089 87097]))                          
                        :documentation "
        Call signature::

          set_xscale(value)

        Set the scaling of the x-axis: %(scale)s

        ACCEPTS: [%(scale)s]

        Different kwargs are accepted, depending on the scale:
        %(scale_docs)s
        ")
                        (reparse-symbol indented_block_body) [87031 87467])
                    ("get_xticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87487 87491])
                            ("minor" variable nil (reparse-symbol function_parameters) [87493 87498]))                          
                        :documentation "Return the x ticks as a list of locations")
                        (reparse-symbol indented_block_body) [87472 87615])
                    ("set_xticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87635 87639])
                            ("ticks" variable nil (reparse-symbol function_parameters) [87641 87646])
                            ("minor" variable nil (reparse-symbol function_parameters) [87648 87653]))                          
                        :documentation "
        Set the x ticks with list of *ticks*

        ACCEPTS: sequence of floats
        ")
                        (reparse-symbol indented_block_body) [87620 87824])
                    ("get_xmajorticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87854 87858]))                          
                        :documentation "
        Get the xtick labels as a list of :class:`~matplotlib.text.Text`
        instances.
        ")
                        (reparse-symbol indented_block_body) [87829 88096])
                    ("get_xminorticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88126 88130]))                          
                        :documentation "
        Get the x minor tick labels as a list of
        :class:`matplotlib.text.Text` instances.
        ")
                        (reparse-symbol indented_block_body) [88101 88374])
                    ("get_xticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88399 88403])
                            ("minor" variable nil (reparse-symbol function_parameters) [88405 88410]))                          
                        :documentation "
        Get the x tick labels as a list of :class:`~matplotlib.text.Text`
        instances.
        ")
                        (reparse-symbol indented_block_body) [88379 88661])
                    ("set_xticklabels" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88716 88720])
                            ("labels" variable nil (reparse-symbol function_parameters) [88722 88728])
                            ("fontdict" variable nil (reparse-symbol function_parameters) [88730 88738])
                            ("minor" variable nil (reparse-symbol function_parameters) [88745 88750])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [88758 88766]))                          
                        :documentation "
        Call signature::

          set_xticklabels(labels, fontdict=None, minor=False, **kwargs)

        Set the xtick labels with list of strings *labels*. Return a
        list of axis text instances.

        *kwargs* set the :class:`~matplotlib.text.Text` properties.
        Valid properties are
        %(Text)s

        ACCEPTS: sequence of strings
        ")
                        (reparse-symbol indented_block_body) [88666 89274])
                    ("invert_yaxis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89296 89300]))                          )
                        (reparse-symbol indented_block_body) [89279 89405])
                    ("yaxis_inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89429 89433]))                          
                        :documentation "Returns *True* if the y-axis is inverted.")
                        (reparse-symbol indented_block_body) [89410 89558])
                    ("get_ybound" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89578 89582]))                          )
                        (reparse-symbol indented_block_body) [89563 89804])
                    ("set_ybound" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89824 89828])
                            ("lower" variable nil (reparse-symbol function_parameters) [89830 89835])
                            ("upper" variable nil (reparse-symbol function_parameters) [89842 89847]))                          
                        :documentation "
        Set the lower and upper numerical bounds of the y-axis.
        This method will honor axes inversion regardless of parameter order.
        It will not change the _autoscaleYon attribute.
        ")
                        (reparse-symbol indented_block_body) [89809 90657])
                    ("get_ylim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90675 90679]))                          
                        :documentation "
        Get the y-axis range [*bottom*, *top*]
        ")
                        (reparse-symbol indented_block_body) [90662 90798])
                    ("set_ylim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90816 90820])
                            ("bottom" variable nil (reparse-symbol function_parameters) [90822 90828])
                            ("top" variable nil (reparse-symbol function_parameters) [90835 90838])
                            ("emit" variable nil (reparse-symbol function_parameters) [90845 90849])
                            ("auto" variable nil (reparse-symbol function_parameters) [90856 90860])
                            ("kw" variable nil (reparse-symbol function_parameters) [90868 90872]))                          
                        :documentation "
        Call signature::

          set_ylim(self, *args, **kwargs):

        Set the data limits for the yaxis

        Examples::

          set_ylim((bottom, top))
          set_ylim(bottom, top)
          set_ylim(bottom=1) # top unchanged
          set_ylim(top=1) # bottom unchanged

        Keyword arguments:

          *bottom*: scalar
            The bottom ylim; the previous name, *ymin*, may still be used

          *top*: scalar
            The top ylim; the previous name, *ymax*, may still be used

          *emit*: [ *True* | *False* ]
            Notify observers of limit change

          *auto*: [ *True* | *False* | *None* ]
            Turn *y* autoscaling on (*True*), off (*False*; default),
            or leave unchanged (*None*)

        Note, the *bottom* (formerly *ymin*) value may be greater than
        the *top* (formerly *ymax*).
        For example, suppose *y* is depth in the ocean.
        Then one might use::

          set_ylim(5000, 0)

        so 5000 m depth is at the bottom of the plot and the
        surface, 0 m, is at the top.

        Returns the current ylimits as a length 2 tuple

        ACCEPTS: length 2 sequence of floats
        ")
                        (reparse-symbol indented_block_body) [90803 93732])
                    ("get_yscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93752 93756]))                          )
                        (reparse-symbol indented_block_body) [93737 93797])
                    ("get_yscale" code nil (reparse-symbol indented_block_body) [93801 93932])
                    ("set_yscale" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93983 93987])
                            ("value" variable nil (reparse-symbol function_parameters) [93989 93994])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [93996 94004]))                          
                        :documentation "
        Call signature::

          set_yscale(value)

        Set the scaling of the y-axis: %(scale)s

        ACCEPTS: [%(scale)s]

        Different kwargs are accepted, depending on the scale:
        %(scale_docs)s
        ")
                        (reparse-symbol indented_block_body) [93938 94374])
                    ("get_yticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94394 94398])
                            ("minor" variable nil (reparse-symbol function_parameters) [94400 94405]))                          
                        :documentation "Return the y ticks as a list of locations")
                        (reparse-symbol indented_block_body) [94379 94522])
                    ("set_yticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94542 94546])
                            ("ticks" variable nil (reparse-symbol function_parameters) [94548 94553])
                            ("minor" variable nil (reparse-symbol function_parameters) [94555 94560]))                          
                        :documentation "
        Set the y ticks with list of *ticks*

        ACCEPTS: sequence of floats

        Keyword arguments:

          *minor*: [ *False* | *True* ]
            Sets the minor ticks if *True*
        ")
                        (reparse-symbol indented_block_body) [94527 94843])
                    ("get_ymajorticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94873 94877]))                          
                        :documentation "
        Get the major y tick labels as a list of 
        :class:`~matplotlib.text.Text` instances.
        ")
                        (reparse-symbol indented_block_body) [94848 95123])
                    ("get_yminorticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95153 95157]))                          
                        :documentation "
        Get the minor y tick labels as a list of
        :class:`~matplotlib.text.Text` instances.
        ")
                        (reparse-symbol indented_block_body) [95128 95402])
                    ("get_yticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95427 95431])
                            ("minor" variable nil (reparse-symbol function_parameters) [95433 95438]))                          
                        :documentation "
        Get the y tick labels as a list of :class:`~matplotlib.text.Text`
        instances
        ")
                        (reparse-symbol indented_block_body) [95407 95688])
                    ("set_yticklabels" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95743 95747])
                            ("labels" variable nil (reparse-symbol function_parameters) [95749 95755])
                            ("fontdict" variable nil (reparse-symbol function_parameters) [95757 95765])
                            ("minor" variable nil (reparse-symbol function_parameters) [95772 95777])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [95785 95793]))                          
                        :documentation "
        Call signature::

          set_yticklabels(labels, fontdict=None, minor=False, **kwargs)

        Set the y tick labels with list of strings *labels*.  Return a list of
        :class:`~matplotlib.text.Text` instances.

        *kwargs* set :class:`~matplotlib.text.Text` properties for the labels.
        Valid properties are
        %(Text)s

        ACCEPTS: sequence of strings
        ")
                        (reparse-symbol indented_block_body) [95693 96335])
                    ("xaxis_date" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96355 96359])
                            ("tz" variable nil (reparse-symbol function_parameters) [96361 96363]))                          
                        :documentation "
        Sets up x-axis ticks and labels that treat the x data as dates.

        *tz* is a timezone string or :class:`tzinfo` instance.
        Defaults to rc value.
        ")
                        (reparse-symbol indented_block_body) [96340 96691])
                    ("yaxis_date" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96711 96715])
                            ("tz" variable nil (reparse-symbol function_parameters) [96717 96719]))                          
                        :documentation "
        Sets up y-axis ticks and labels that treat the y data as dates.

        *tz* is a timezone string or :class:`tzinfo` instance.
        Defaults to rc value.
        ")
                        (reparse-symbol indented_block_body) [96696 96950])
                    ("format_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96972 96976])
                            ("x" variable nil (reparse-symbol function_parameters) [96978 96979]))                          
                        :documentation "
        Return *x* string formatted.  This function will use the attribute
        self.fmt_xdata if it is callable, else will fall back on the xaxis
        major formatter
        ")
                        (reparse-symbol indented_block_body) [96955 97363])
                    ("format_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97385 97389])
                            ("y" variable nil (reparse-symbol function_parameters) [97391 97392]))                          
                        :documentation "
        Return y string formatted.  This function will use the
        :attr:`fmt_ydata` attribute if it is callable, else will fall
        back on the yaxis major formatter
        ")
                        (reparse-symbol indented_block_body) [97368 97778])
                    ("format_coord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97800 97804])
                            ("x" variable nil (reparse-symbol function_parameters) [97806 97807])
                            ("y" variable nil (reparse-symbol function_parameters) [97809 97810]))                          
                        :documentation "Return a format string formatting the *x*, *y* coord")
                        (reparse-symbol indented_block_body) [97783 98110])
                    ("can_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98163 98167]))                          
                        :documentation "
        Return *True* if this axes supports the zoom box button functionality.
        ")
                        (reparse-symbol indented_block_body) [98150 98293])
                    ("can_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98310 98314]))                          
                        :documentation "
        Return *True* if this axes supports any pan/zoom button functionality.
        ")
                        (reparse-symbol indented_block_body) [98298 98441])
                    ("get_navigate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98463 98467]))                          
                        :documentation "
        Get whether the axes responds to navigation commands
        ")
                        (reparse-symbol indented_block_body) [98446 98585])
                    ("set_navigate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98607 98611])
                            ("b" variable nil (reparse-symbol function_parameters) [98613 98614]))                          
                        :documentation "
        Set whether the axes responds to navigation toolbar commands

        ACCEPTS: [ *True* | *False* ]
        ")
                        (reparse-symbol indented_block_body) [98590 98776])
                    ("get_navigate_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98803 98807]))                          
                        :documentation "
        Get the navigation toolbar button status: 'PAN', 'ZOOM', or None
        ")
                        (reparse-symbol indented_block_body) [98781 98942])
                    ("set_navigate_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98969 98973])
                            ("b" variable nil (reparse-symbol function_parameters) [98975 98976]))                          
                        :documentation "
        Set the navigation toolbar button status;

        .. warning::
            this is not a user-API function.

        ")
                        (reparse-symbol indented_block_body) [98947 99153])
                    ("start_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99172 99176])
                            ("x" variable nil (reparse-symbol function_parameters) [99178 99179])
                            ("y" variable nil (reparse-symbol function_parameters) [99181 99182])
                            ("button" variable nil (reparse-symbol function_parameters) [99184 99190]))                          
                        :documentation "
        Called when a pan operation has started.

        *x*, *y* are the mouse coordinates in display coords.
        button is the mouse button number:

        * 1: LEFT
        * 2: MIDDLE
        * 3: RIGHT

        .. note::

            Intended to be overridden by new projection types.

        ")
                        (reparse-symbol indented_block_body) [99158 99844])
                    ("end_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99861 99865]))                          
                        :documentation "
        Called when a pan operation completes (when the mouse button
        is up.)

        .. note::

            Intended to be overridden by new projection types.

        ")
                        (reparse-symbol indented_block_body) [99849 100089])
                    ("drag_pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100107 100111])
                            ("button" variable nil (reparse-symbol function_parameters) [100113 100119])
                            ("key" variable nil (reparse-symbol function_parameters) [100121 100124])
                            ("x" variable nil (reparse-symbol function_parameters) [100126 100127])
                            ("y" variable nil (reparse-symbol function_parameters) [100129 100130]))                          
                        :documentation "
        Called when the mouse moves during a pan operation.

        *button* is the mouse button number:

        * 1: LEFT
        * 2: MIDDLE
        * 3: RIGHT

        *key* is a \"shift\" key

        *x*, *y* are the mouse coordinates in display coords.

        .. note::

            Intended to be overridden by new projection types.

        ")
                        (reparse-symbol indented_block_body) [100094 102240])
                    ("get_cursor_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102266 102270]))                          
                        :documentation "
        Return the cursor propertiess as a (*linewidth*, *color*)
        tuple, where *linewidth* is a float and *color* is an RGBA
        tuple
        ")
                        (reparse-symbol indented_block_body) [102245 102477])
                    ("set_cursor_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102503 102507])
                            ("args" variable nil (reparse-symbol function_parameters) [102509 102514]))                          
                        :documentation "
        Set the cursor property as::

          ax.set_cursor_props(linewidth, color)

        or::

          ax.set_cursor_props((linewidth, color))

        ACCEPTS: a (*float*, *color*) tuple
        ")
                        (reparse-symbol indented_block_body) [102482 103007])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103024 103028])
                            ("s" variable nil (reparse-symbol function_parameters) [103030 103031])
                            ("func" variable nil (reparse-symbol function_parameters) [103033 103037]))                          
                        :documentation "
        Register observers to be notified when certain events occur.  Register
        with callback functions with the following signatures.  The function
        has the following signature::

            func(ax)  # where ax is the instance making the callback.

        The following events can be connected to:

          'xlim_changed','ylim_changed'

        The connection id is is returned - you can use this with
        disconnect to disconnect from the axes event

        ")
                        (reparse-symbol indented_block_body) [103012 103665])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103685 103689])
                            ("cid" variable nil (reparse-symbol function_parameters) [103691 103694]))                          
                        :documentation "disconnect from the Axes event.")
                        (reparse-symbol indented_block_body) [103670 103867])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103889 103893]))                          
                        :documentation "return a list of child artists")
                        (reparse-symbol indented_block_body) [103872 104524])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104542 104546])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [104547 104557]))                          
                        :documentation "
        Test whether the mouse event occured in the axes.

        Returns *True* / *False*, {}
        ")
                        (reparse-symbol indented_block_body) [104529 104804])
                    ("contains_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104828 104832])
                            ("point" variable nil (reparse-symbol function_parameters) [104834 104839]))                          
                        :documentation "
        Returns *True* if the point (tuple of x,y) is inside the axes
        (the area defined by the its patch). A pixel coordinate is
        required.

        ")
                        (reparse-symbol indented_block_body) [104809 105082])
                    ("pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105096 105100])
                            ("args" variable nil (reparse-symbol function_parameters) [105102 105107]))                          
                        :documentation "
        Call signature::

            pick(mouseevent)

        each child artist will fire a pick event if mouseevent is over
        the artist and the artist has picker set
        ")
                        (reparse-symbol indented_block_body) [105087 105524])
                    ("__pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105540 105544])
                            ("x" variable nil (reparse-symbol function_parameters) [105546 105547])
                            ("y" variable nil (reparse-symbol function_parameters) [105549 105550])
                            ("trans" variable nil (reparse-symbol function_parameters) [105552 105557])
                            ("among" variable nil (reparse-symbol function_parameters) [105564 105569]))                          
                        :documentation "
        Return the artist under point that is closest to the *x*, *y*.
        If *trans* is *None*, *x*, and *y* are in window coords,
        (0,0 = lower left).  Otherwise, *trans* is a
        :class:`~matplotlib.transforms.Transform` that specifies the
        coordinate system of *x*, *y*.

        The selection of artists from amongst which the pick function
        finds an artist can be narrowed using the optional keyword
        argument *among*. If provided, this should be either a sequence
        of permitted artists or a function taking an artist as its
        argument and returning a true value if and only if that artist
        can be selected.

        Note this algorithm calculates distance to the vertices of the
        polygon, so if you want to pick a patch, click on the edge!
        ")
                        (reparse-symbol indented_block_body) [105529 108155])
                    ("get_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108194 108198]))                          
                        :documentation "
        Get the title text string.
        ")
                        (reparse-symbol indented_block_body) [108180 108297])
                    ("set_title" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108346 108350])
                            ("label" variable nil (reparse-symbol function_parameters) [108352 108357])
                            ("fontdict" variable nil (reparse-symbol function_parameters) [108359 108367])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [108374 108382]))                          
                        :documentation "
        Call signature::

          set_title(label, fontdict=None, **kwargs):

        Set the title for the axes.

        kwargs are Text properties:
        %(Text)s

        ACCEPTS: str

        .. seealso::

            :meth:`text`
                for information on how override and the optional args work
        ")
                        (reparse-symbol indented_block_body) [108302 109092])
                    ("get_xlabel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109112 109116]))                          
                        :documentation "
        Get the xlabel text string.
        ")
                        (reparse-symbol indented_block_body) [109097 109250])
                    ("set_xlabel" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109300 109304])
                            ("xlabel" variable nil (reparse-symbol function_parameters) [109306 109312])
                            ("fontdict" variable nil (reparse-symbol function_parameters) [109314 109322])
                            ("labelpad" variable nil (reparse-symbol function_parameters) [109329 109337])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [109344 109352]))                          
                        :documentation "
        Call signature::

          set_xlabel(xlabel, fontdict=None, labelpad=None, **kwargs)

        Set the label for the xaxis.

        *labelpad* is the spacing in points between the label and the x-axis

        Valid kwargs are :class:`~matplotlib.text.Text` properties:
        %(Text)s

        ACCEPTS: str

        .. seealso::

            :meth:`text`
                for information on how override and the optional args work
        ")
                        (reparse-symbol indented_block_body) [109255 109954])
                    ("get_ylabel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109974 109978]))                          
                        :documentation "
        Get the ylabel text string.
        ")
                        (reparse-symbol indented_block_body) [109959 110112])
                    ("set_ylabel" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110162 110166])
                            ("ylabel" variable nil (reparse-symbol function_parameters) [110168 110174])
                            ("fontdict" variable nil (reparse-symbol function_parameters) [110176 110184])
                            ("labelpad" variable nil (reparse-symbol function_parameters) [110191 110199])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [110206 110214]))                          
                        :documentation "
        Call signature::

          set_ylabel(ylabel, fontdict=None, labelpad=None, **kwargs)

        Set the label for the yaxis

        *labelpad* is the spacing in points between the label and the y-axis

        Valid kwargs are :class:`~matplotlib.text.Text` properties:
        %(Text)s

        ACCEPTS: str

        .. seealso::

            :meth:`text`
                for information on how override and the optional args work
        ")
                        (reparse-symbol indented_block_body) [110117 110815])
                    ("text" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110859 110863])
                            ("x" variable nil (reparse-symbol function_parameters) [110865 110866])
                            ("y" variable nil (reparse-symbol function_parameters) [110868 110869])
                            ("s" variable nil (reparse-symbol function_parameters) [110871 110872])
                            ("fontdict" variable nil (reparse-symbol function_parameters) [110874 110882])
                            ("withdash" variable nil (reparse-symbol function_parameters) [110902 110910])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [110918 110926]))                          
                        :documentation "
        Call signature::

          text(x, y, s, fontdict=None, **kwargs)

        Add text in string *s* to axis at location *x*, *y*, data
        coordinates.

        Keyword arguments:

          *fontdict*:
            A dictionary to override the default text properties.
            If *fontdict* is *None*, the defaults are determined by your rc
            parameters.

          *withdash*: [ *False* | *True* ]
            Creates a :class:`~matplotlib.text.TextWithDash` instance
            instead of a :class:`~matplotlib.text.Text` instance.

        Individual keyword arguments can be used to override any given
        parameter::

            text(x, y, s, fontsize=12)

        The default transform specifies that text is in data coords,
        alternatively, you can specify text in axis coords (0,0 is
        lower-left and 1,1 is upper-right).  The example below places
        text in the center of the axes::

            text(0.5, 0.5,'matplotlib',
                 horizontalalignment='center',
                 verticalalignment='center',
                 transform = ax.transAxes)

       You can put a rectangular box around the text instance (eg. to
       set a background color) by using the keyword *bbox*.  *bbox* is
       a dictionary of :class:`matplotlib.patches.Rectangle`
       properties.  For example::

         text(x, y, s, bbox=dict(facecolor='red', alpha=0.5))

       Valid kwargs are :class:`~matplotlib.text.Text` properties:

       %(Text)s
        ")
                        (reparse-symbol indented_block_body) [110820 113548])
                    ("annotate" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113596 113600])
                            ("args" variable nil (reparse-symbol function_parameters) [113602 113607])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [113609 113617]))                          
                        :documentation "
        Call signature::

          annotate(s, xy, xytext=None, xycoords='data',
                   textcoords='data', arrowprops=None, **kwargs)

        Keyword arguments:

        %(Annotation)s

        .. plot:: mpl_examples/pylab_examples/annotation_demo2.py
        ")
                        (reparse-symbol indented_block_body) [113553 114218])
                    ("axhline" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114291 114295])
                            ("y" variable nil (reparse-symbol function_parameters) [114297 114298])
                            ("xmin" variable nil (reparse-symbol function_parameters) [114302 114306])
                            ("xmax" variable nil (reparse-symbol function_parameters) [114310 114314])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [114318 114326]))                          
                        :documentation "
        Call signature::

          axhline(y=0, xmin=0, xmax=1, **kwargs)

        Axis Horizontal Line

        Draw a horizontal line at *y* from *xmin* to *xmax*.  With the
        default values of *xmin* = 0 and *xmax* = 1, this line will
        always span the horizontal extent of the axes, regardless of
        the xlim settings, even if you change them, eg. with the
        :meth:`set_xlim` command.  That is, the horizontal extent is
        in axes coords: 0=left, 0.5=middle, 1.0=right but the *y*
        location is in data coordinates.

        Return value is the :class:`~matplotlib.lines.Line2D`
        instance.  kwargs are the same as kwargs to plot, and can be
        used to control the line properties.  Eg.,

        * draw a thick red hline at *y* = 0 that spans the xrange::

            >>> axhline(linewidth=4, color='r')

        * draw a default hline at *y* = 1 that spans the xrange::

            >>> axhline(y=1)

        * draw a default hline at *y* = .5 that spans the the middle half of
          the xrange::

            >>> axhline(y=.5, xmin=0.25, xmax=0.75)

        Valid kwargs are :class:`~matplotlib.lines.Line2D` properties,
        with the exception of 'transform':

        %(Line2D)s

        .. seealso::

            :meth:`axhspan`
                for example plot and source code
        ")
                        (reparse-symbol indented_block_body) [114249 116442])
                    ("axvline" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116489 116493])
                            ("x" variable nil (reparse-symbol function_parameters) [116495 116496])
                            ("ymin" variable nil (reparse-symbol function_parameters) [116500 116504])
                            ("ymax" variable nil (reparse-symbol function_parameters) [116508 116512])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [116516 116524]))                          
                        :documentation "
        Call signature::

          axvline(x=0, ymin=0, ymax=1, **kwargs)

        Axis Vertical Line

        Draw a vertical line at *x* from *ymin* to *ymax*.  With the
        default values of *ymin* = 0 and *ymax* = 1, this line will
        always span the vertical extent of the axes, regardless of the
        ylim settings, even if you change them, eg. with the
        :meth:`set_ylim` command.  That is, the vertical extent is in
        axes coords: 0=bottom, 0.5=middle, 1.0=top but the *x* location
        is in data coordinates.

        Return value is the :class:`~matplotlib.lines.Line2D`
        instance.  kwargs are the same as kwargs to plot, and can be
        used to control the line properties.  Eg.,

        * draw a thick red vline at *x* = 0 that spans the yrange::

            >>> axvline(linewidth=4, color='r')

        * draw a default vline at *x* = 1 that spans the yrange::

            >>> axvline(x=1)

        * draw a default vline at *x* = .5 that spans the the middle half of
          the yrange::

            >>> axvline(x=.5, ymin=0.25, ymax=0.75)

        Valid kwargs are :class:`~matplotlib.lines.Line2D` properties,
        with the exception of 'transform':

        %(Line2D)s

        .. seealso::

            :meth:`axhspan`
                for example plot and source code
        ")
                        (reparse-symbol indented_block_body) [116447 118633])
                    ("axhspan" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118680 118684])
                            ("ymin" variable nil (reparse-symbol function_parameters) [118686 118690])
                            ("ymax" variable nil (reparse-symbol function_parameters) [118692 118696])
                            ("xmin" variable nil (reparse-symbol function_parameters) [118698 118702])
                            ("xmax" variable nil (reparse-symbol function_parameters) [118706 118710])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [118714 118722]))                          
                        :documentation "
        Call signature::

          axhspan(ymin, ymax, xmin=0, xmax=1, **kwargs)

        Axis Horizontal Span.

        *y* coords are in data units and *x* coords are in axes (relative
        0-1) units.

        Draw a horizontal span (rectangle) from *ymin* to *ymax*.
        With the default values of *xmin* = 0 and *xmax* = 1, this
        always spans the xrange, regardless of the xlim settings, even
        if you change them, eg. with the :meth:`set_xlim` command.
        That is, the horizontal extent is in axes coords: 0=left,
        0.5=middle, 1.0=right but the *y* location is in data
        coordinates.

        Return value is a :class:`matplotlib.patches.Polygon`
        instance.

        Examples:

        * draw a gray rectangle from *y* = 0.25-0.75 that spans the
          horizontal extent of the axes::

            >>> axhspan(0.25, 0.75, facecolor='0.5', alpha=0.5)

        Valid kwargs are :class:`~matplotlib.patches.Polygon` properties:

        %(Polygon)s

        **Example:**

        .. plot:: mpl_examples/pylab_examples/axhspan_demo.py

        ")
                        (reparse-symbol indented_block_body) [118638 120476])
                    ("axvspan" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120523 120527])
                            ("xmin" variable nil (reparse-symbol function_parameters) [120529 120533])
                            ("xmax" variable nil (reparse-symbol function_parameters) [120535 120539])
                            ("ymin" variable nil (reparse-symbol function_parameters) [120541 120545])
                            ("ymax" variable nil (reparse-symbol function_parameters) [120549 120553])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [120557 120565]))                          
                        :documentation "
        Call signature::

          axvspan(xmin, xmax, ymin=0, ymax=1, **kwargs)

        Axis Vertical Span.

        *x* coords are in data units and *y* coords are in axes (relative
        0-1) units.

        Draw a vertical span (rectangle) from *xmin* to *xmax*.  With
        the default values of *ymin* = 0 and *ymax* = 1, this always
        spans the yrange, regardless of the ylim settings, even if you
        change them, eg. with the :meth:`set_ylim` command.  That is,
        the vertical extent is in axes coords: 0=bottom, 0.5=middle,
        1.0=top but the *y* location is in data coordinates.

        Return value is the :class:`matplotlib.patches.Polygon`
        instance.

        Examples:

        * draw a vertical green translucent rectangle from x=1.25 to 1.55 that
          spans the yrange of the axes::

            >>> axvspan(1.25, 1.55, facecolor='g', alpha=0.5)

        Valid kwargs are :class:`~matplotlib.patches.Polygon`
        properties:

        %(Polygon)s

        .. seealso::

            :meth:`axhspan`
                for example plot and source code
        ")
                        (reparse-symbol indented_block_body) [120481 122341])
                    ("hlines" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122380 122384])
                            ("y" variable nil (reparse-symbol function_parameters) [122386 122387])
                            ("xmin" variable nil (reparse-symbol function_parameters) [122389 122393])
                            ("xmax" variable nil (reparse-symbol function_parameters) [122395 122399])
                            ("colors" variable nil (reparse-symbol function_parameters) [122401 122407])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [122413 122423])
                            ("label" variable nil (reparse-symbol function_parameters) [122454 122459])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [122464 122472]))                          
                        :documentation "
        call signature::

          hlines(y, xmin, xmax, colors='k', linestyles='solid', **kwargs)

        Plot horizontal lines at each *y* from *xmin* to *xmax*.

        Returns the :class:`~matplotlib.collections.LineCollection`
        that was added.

        Required arguments:

          *y*:
            a 1-D numpy array or iterable.

          *xmin* and *xmax*:
            can be scalars or ``len(x)`` numpy arrays.  If they are
            scalars, then the respective values are constant, else the
            widths of the lines are determined by *xmin* and *xmax*.

        Optional keyword arguments:

          *colors*:
            a line collections color argument, either a single color
            or a ``len(y)`` list of colors

          *linestyles*:
            [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]

        **Example:**

        .. plot:: mpl_examples/pylab_examples/hline_demo.py
        ")
                        (reparse-symbol indented_block_body) [122347 125142])
                    ("vlines" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125188 125192])
                            ("x" variable nil (reparse-symbol function_parameters) [125194 125195])
                            ("ymin" variable nil (reparse-symbol function_parameters) [125197 125201])
                            ("ymax" variable nil (reparse-symbol function_parameters) [125203 125207])
                            ("colors" variable nil (reparse-symbol function_parameters) [125209 125215])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [125221 125231])
                            ("label" variable nil (reparse-symbol function_parameters) [125262 125267])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [125272 125280]))                          
                        :documentation "
        Call signature::

          vlines(x, ymin, ymax, color='k', linestyles='solid')

        Plot vertical lines at each *x* from *ymin* to *ymax*.  *ymin*
        or *ymax* can be scalars or len(*x*) numpy arrays.  If they are
        scalars, then the respective values are constant, else the
        heights of the lines are determined by *ymin* and *ymax*.

        *colors* :
          A line collection's color args, either a single color
          or a ``len(x)`` list of colors

        *linestyles* : [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]

        Returns the :class:`matplotlib.collections.LineCollection`
        that was added.

        kwargs are :class:`~matplotlib.collections.LineCollection` properties:

        %(LineCollection)s
        ")
                        (reparse-symbol indented_block_body) [125147 127847])
                    ("plot" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127915 127919])
                            ("args" variable nil (reparse-symbol function_parameters) [127921 127926])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [127928 127936]))                          
                        :documentation "
        Plot lines and/or markers to the
        :class:`~matplotlib.axes.Axes`.  *args* is a variable length
        argument, allowing for multiple *x*, *y* pairs with an
        optional format string.  For example, each of the following is
        legal::

            plot(x, y)         # plot x and y using default line style and color
            plot(x, y, 'bo')   # plot x and y using blue circle markers
            plot(y)            # plot y using x as index array 0..N-1
            plot(y, 'r+')      # ditto, but with red plusses

        If *x* and/or *y* is 2-dimensional, then the corresponding columns
        will be plotted.

        An arbitrary number of *x*, *y*, *fmt* groups can be
        specified, as in::

            a.plot(x1, y1, 'g^', x2, y2, 'g-')

        Return value is a list of lines that were added.

        The following format string characters are accepted to control
        the line style or marker:

        ================    ===============================
        character           description
        ================    ===============================
        ``'-'``             solid line style
        ``'--'``            dashed line style
        ``'-.'``            dash-dot line style
        ``':'``             dotted line style
        ``'.'``             point marker
        ``','``             pixel marker
        ``'o'``             circle marker
        ``'v'``             triangle_down marker
        ``'^'``             triangle_up marker
        ``'<'``             triangle_left marker
        ``'>'``             triangle_right marker
        ``'1'``             tri_down marker
        ``'2'``             tri_up marker
        ``'3'``             tri_left marker
        ``'4'``             tri_right marker
        ``'s'``             square marker
        ``'p'``             pentagon marker
        ``'*'``             star marker
        ``'h'``             hexagon1 marker
        ``'H'``             hexagon2 marker
        ``'+'``             plus marker
        ``'x'``             x marker
        ``'D'``             diamond marker
        ``'d'``             thin_diamond marker
        ``'|'``             vline marker
        ``'_'``             hline marker
        ================    ===============================


        The following color abbreviations are supported:

        ==========  ========
        character   color
        ==========  ========
        'b'         blue
        'g'         green
        'r'         red
        'c'         cyan
        'm'         magenta
        'y'         yellow
        'k'         black
        'w'         white
        ==========  ========

        In addition, you can specify colors in many weird and
        wonderful ways, including full names (``'green'``), hex
        strings (``'#008000'``), RGB or RGBA tuples (``(0,1,0,1)``) or
        grayscale intensities as a string (``'0.8'``).  Of these, the
        string specifications can be used in place of a ``fmt`` group,
        but the tuple forms can be used only as ``kwargs``.

        Line styles and colors are combined in a single format string, as in
        ``'bo'`` for blue circles.

        The *kwargs* can be used to set line properties (any property that has
        a ``set_*`` method).  You can use this to set a line label (for auto
        legends), linewidth, anitialising, marker face color, etc.  Here is an
        example::

            plot([1,2,3], [1,2,3], 'go-', label='line 1', linewidth=2)
            plot([1,2,3], [1,4,9], 'rs',  label='line 2')
            axis([0, 4, 0, 10])
            legend()

        If you make multiple lines with one plot command, the kwargs
        apply to all those lines, e.g.::

            plot(x1, y1, x2, y2, antialised=False)

        Neither line will be antialiased.

        You do not need to use format strings, which are just
        abbreviations.  All of the line properties can be controlled
        by keyword arguments.  For example, you can set the color,
        marker, linestyle, and markercolor with::

            plot(x, y, color='green', linestyle='dashed', marker='o',
                 markerfacecolor='blue', markersize=12).  See
                 :class:`~matplotlib.lines.Line2D` for details.

        The kwargs are :class:`~matplotlib.lines.Line2D` properties:

        %(Line2D)s

        kwargs *scalex* and *scaley*, if defined, are passed on to
        :meth:`~matplotlib.axes.Axes.autoscale_view` to determine
        whether the *x* and *y* axes are autoscaled; the default is
        *True*.
        ")
                        (reparse-symbol indented_block_body) [127876 132910])
                    ("plot_date" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132959 132963])
                            ("x" variable nil (reparse-symbol function_parameters) [132965 132966])
                            ("y" variable nil (reparse-symbol function_parameters) [132968 132969])
                            ("fmt" variable nil (reparse-symbol function_parameters) [132971 132974])
                            ("tz" variable nil (reparse-symbol function_parameters) [132981 132983])
                            ("xdate" variable nil (reparse-symbol function_parameters) [132990 132995])
                            ("ydate" variable nil (reparse-symbol function_parameters) [133002 133007])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [133033 133041]))                          
                        :documentation "
        Call signature::

           plot_date(x, y, fmt='bo', tz=None, xdate=True, ydate=False, **kwargs)

        Similar to the :func:`~matplotlib.pyplot.plot` command, except
        the *x* or *y* (or both) data is considered to be dates, and the
        axis is labeled accordingly.

        *x* and/or *y* can be a sequence of dates represented as float
        days since 0001-01-01 UTC.

        Keyword arguments:

          *fmt*: string
            The plot format string.

          *tz*: [ *None* | timezone string | :class:`tzinfo` instance]
            The time zone to use in labeling dates. If *None*, defaults to rc
            value.

          *xdate*: [ *True* | *False* ]
            If *True*, the *x*-axis will be labeled with dates.

          *ydate*: [ *False* | *True* ]
            If *True*, the *y*-axis will be labeled with dates.

        Note if you are using custom date tickers and formatters, it
        may be necessary to set the formatters/locators after the call
        to :meth:`plot_date` since :meth:`plot_date` will set the
        default tick locator to
        :class:`matplotlib.dates.AutoDateLocator` (if the tick
        locator is not already set to a
        :class:`matplotlib.dates.DateLocator` instance) and the
        default tick formatter to
        :class:`matplotlib.dates.AutoDateFormatter` (if the tick
        formatter is not already set to a
        :class:`matplotlib.dates.DateFormatter` instance).

        Valid kwargs are :class:`~matplotlib.lines.Line2D` properties:

        %(Line2D)s

        .. seealso::

           :mod:`~matplotlib.dates` for helper functions

           :func:`~matplotlib.dates.date2num`,
           :func:`~matplotlib.dates.num2date` and
           :func:`~matplotlib.dates.drange` for help on creating the required
           floating point dates.
        ")
                        (reparse-symbol indented_block_body) [132915 135156])
                    ("loglog" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135203 135207])
                            ("args" variable nil (reparse-symbol function_parameters) [135209 135214])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [135216 135224]))                          
                        :documentation "
        Call signature::

          loglog(*args, **kwargs)

        Make a plot with log scaling on the *x* and *y* axis.

        :func:`~matplotlib.pyplot.loglog` supports all the keyword
        arguments of :func:`~matplotlib.pyplot.plot` and
        :meth:`matplotlib.axes.Axes.set_xscale` /
        :meth:`matplotlib.axes.Axes.set_yscale`.

        Notable keyword arguments:

          *basex*/*basey*: scalar > 1
            Base of the *x*/*y* logarithm

          *subsx*/*subsy*: [ *None* | sequence ]
            The location of the minor *x*/*y* ticks; *None* defaults
            to autosubs, which depend on the number of decades in the
            plot; see :meth:`matplotlib.axes.Axes.set_xscale` /
            :meth:`matplotlib.axes.Axes.set_yscale` for details

          *nonposx*/*nonposy*: ['mask' | 'clip' ]
            Non-positive values in *x* or *y* can be masked as
            invalid, or clipped to a very small positive number

        The remaining valid kwargs are
        :class:`~matplotlib.lines.Line2D` properties:

        %(Line2D)s

        **Example:**

        .. plot:: mpl_examples/pylab_examples/log_demo.py

        ")
                        (reparse-symbol indented_block_body) [135162 137048])
                    ("semilogx" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137096 137100])
                            ("args" variable nil (reparse-symbol function_parameters) [137102 137107])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [137109 137117]))                          
                        :documentation "
        Call signature::

          semilogx(*args, **kwargs)

        Make a plot with log scaling on the *x* axis.

        :func:`semilogx` supports all the keyword arguments of
        :func:`~matplotlib.pyplot.plot` and
        :meth:`matplotlib.axes.Axes.set_xscale`.

        Notable keyword arguments:

          *basex*: scalar > 1
            Base of the *x* logarithm

          *subsx*: [ *None* | sequence ]
            The location of the minor xticks; *None* defaults to
            autosubs, which depend on the number of decades in the
            plot; see :meth:`~matplotlib.axes.Axes.set_xscale` for
            details.

          *nonposx*: [ 'mask' | 'clip' ]
            Non-positive values in *x* can be masked as
            invalid, or clipped to a very small positive number

        The remaining valid kwargs are
        :class:`~matplotlib.lines.Line2D` properties:

        %(Line2D)s

        .. seealso::

            :meth:`loglog`
                For example code and figure
        ")
                        (reparse-symbol indented_block_body) [137053 138584])
                    ("semilogy" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138632 138636])
                            ("args" variable nil (reparse-symbol function_parameters) [138638 138643])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [138645 138653]))                          
                        :documentation "
        call signature::

          semilogy(*args, **kwargs)

        Make a plot with log scaling on the *y* axis.

        :func:`semilogy` supports all the keyword arguments of
        :func:`~matplotlib.pylab.plot` and
        :meth:`matplotlib.axes.Axes.set_yscale`.

        Notable keyword arguments:

          *basey*: scalar > 1
            Base of the *y* logarithm

          *subsy*: [ *None* | sequence ]
            The location of the minor yticks; *None* defaults to
            autosubs, which depend on the number of decades in the
            plot; see :meth:`~matplotlib.axes.Axes.set_yscale` for
            details.

          *nonposy*: [ 'mask' | 'clip' ]
            Non-positive values in *y* can be masked as
            invalid, or clipped to a very small positive number

        The remaining valid kwargs are
        :class:`~matplotlib.lines.Line2D` properties:

        %(Line2D)s

        .. seealso::

            :meth:`loglog`
                For example code and figure
        ")
                        (reparse-symbol indented_block_body) [138589 140117])
                    ("acorr" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140162 140166])
                            ("x" variable nil (reparse-symbol function_parameters) [140168 140169])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [140171 140179]))                          
                        :documentation "
        Call signature::

            acorr(x, normed=True, detrend=mlab.detrend_none, usevlines=True,
                  maxlags=10, **kwargs)

        Plot the autocorrelation of *x*.  If *normed* = *True*,
        normalize the data by the autocorrelation at 0-th lag.  *x* is
        detrended by the *detrend* callable (default no normalization).

        Data are plotted as ``plot(lags, c, **kwargs)``

        Return value is a tuple (*lags*, *c*, *line*) where:

          - *lags* are a length 2*maxlags+1 lag vector

          - *c* is the 2*maxlags+1 auto correlation vector

          - *line* is a :class:`~matplotlib.lines.Line2D` instance
            returned by :meth:`plot`

        The default *linestyle* is None and the default *marker* is
        ``'o'``, though these can be overridden with keyword args.
        The cross correlation is performed with
        :func:`numpy.correlate` with *mode* = 2.

        If *usevlines* is *True*, :meth:`~matplotlib.axes.Axes.vlines`
        rather than :meth:`~matplotlib.axes.Axes.plot` is used to draw
        vertical lines from the origin to the acorr.  Otherwise, the
        plot style is determined by the kwargs, which are
        :class:`~matplotlib.lines.Line2D` properties.

        *maxlags* is a positive integer detailing the number of lags
        to show.  The default value of *None* will return all
        ``(2*len(x)-1)`` lags.

        The return value is a tuple (*lags*, *c*, *linecol*, *b*)
        where

          - *linecol* is the
            :class:`~matplotlib.collections.LineCollection`

          - *b* is the *x*-axis.

        .. seealso::

            :meth:`~matplotlib.axes.Axes.plot` or
            :meth:`~matplotlib.axes.Axes.vlines`
            For documentation on valid kwargs.

        **Example:**

        :func:`~matplotlib.pyplot.xcorr` is top graph, and
        :func:`~matplotlib.pyplot.acorr` is bottom graph.

        .. plot:: mpl_examples/pylab_examples/xcorr_demo.py
        ")
                        (reparse-symbol indented_block_body) [140122 142234])
                    ("xcorr" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142279 142283])
                            ("x" variable nil (reparse-symbol function_parameters) [142285 142286])
                            ("y" variable nil (reparse-symbol function_parameters) [142288 142289])
                            ("normed" variable nil (reparse-symbol function_parameters) [142291 142297])
                            ("detrend" variable nil (reparse-symbol function_parameters) [142304 142311])
                            ("usevlines" variable nil (reparse-symbol function_parameters) [142345 142354])
                            ("maxlags" variable nil (reparse-symbol function_parameters) [142361 142368])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [142373 142381]))                          
                        :documentation "
        Call signature::

            def xcorr(self, x, y, normed=True, detrend=mlab.detrend_none,
              usevlines=True, maxlags=10, **kwargs):

        Plot the cross correlation between *x* and *y*.  If *normed* =
        *True*, normalize the data by the cross correlation at 0-th
        lag.  *x* and y are detrended by the *detrend* callable
        (default no normalization).  *x* and *y* must be equal length.

        Data are plotted as ``plot(lags, c, **kwargs)``

        Return value is a tuple (*lags*, *c*, *line*) where:

          - *lags* are a length ``2*maxlags+1`` lag vector

          - *c* is the ``2*maxlags+1`` auto correlation vector

          - *line* is a :class:`~matplotlib.lines.Line2D` instance
             returned by :func:`~matplotlib.pyplot.plot`.

        The default *linestyle* is *None* and the default *marker* is
        'o', though these can be overridden with keyword args.  The
        cross correlation is performed with :func:`numpy.correlate`
        with *mode* = 2.

        If *usevlines* is *True*:

           :func:`~matplotlib.pyplot.vlines`
           rather than :func:`~matplotlib.pyplot.plot` is used to draw
           vertical lines from the origin to the xcorr.  Otherwise the
           plotstyle is determined by the kwargs, which are
           :class:`~matplotlib.lines.Line2D` properties.

           The return value is a tuple (*lags*, *c*, *linecol*, *b*)
           where *linecol* is the
           :class:`matplotlib.collections.LineCollection` instance and
           *b* is the *x*-axis.

        *maxlags* is a positive integer detailing the number of lags to show.
        The default value of *None* will return all ``(2*len(x)-1)`` lags.

        **Example:**

        :func:`~matplotlib.pyplot.xcorr` is top graph, and
        :func:`~matplotlib.pyplot.acorr` is bottom graph.

        .. plot:: mpl_examples/pylab_examples/xcorr_demo.py
        ")
                        (reparse-symbol indented_block_body) [142239 145223])
                    ("_get_legend_handles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145253 145257])
                            ("legend_handler_map" variable nil (reparse-symbol function_parameters) [145259 145277]))                          )
                        (reparse-symbol indented_block_body) [145229 145966])
                    ("get_legend_handles_labels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146002 146006])
                            ("legend_handler_map" variable nil (reparse-symbol function_parameters) [146008 146026]))                          
                        :documentation "
        Return handles and labels for legend

        ``ax.legend()`` is equivalent to ::

          h, l = ax.get_legend_handles_labels()
          ax.legend(h, l)

        ")
                        (reparse-symbol indented_block_body) [145972 146616])
                    ("legend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146633 146637])
                            ("args" variable nil (reparse-symbol function_parameters) [146639 146644])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [146646 146654]))                          
                        :documentation "
        Call signature::

          legend(*args, **kwargs)

        Place a legend on the current axes at location *loc*.  Labels are a
        sequence of strings and *loc* can be a string or an integer specifying
        the legend location.

        To make a legend with existing lines::

          legend()

        :meth:`legend` by itself will try and build a legend using the label
        property of the lines/patches/collections.  You can set the label of
        a line by doing::

          plot(x, y, label='my data')

        or::

          line.set_label('my data').

        If label is set to '_nolegend_', the item will not be shown in
        legend.

        To automatically generate the legend from labels::

          legend( ('label1', 'label2', 'label3') )

        To make a legend for a list of lines and labels::

          legend( (line1, line2, line3), ('label1', 'label2', 'label3') )

        To make a legend at a given location, using a location argument::

          legend( ('label1', 'label2', 'label3'), loc='upper left')

        or::

          legend( (line1, line2, line3),  ('label1', 'label2', 'label3'), loc=2)

        The location codes are

          ===============   =============
          Location String   Location Code
          ===============   =============
          'best'            0
          'upper right'     1
          'upper left'      2
          'lower left'      3
          'lower right'     4
          'right'           5
          'center left'     6
          'center right'    7
          'lower center'    8
          'upper center'    9
          'center'          10
          ===============   =============


        Users can specify any arbitrary location for the legend using the
        *bbox_to_anchor* keyword argument. bbox_to_anchor can be an instance
        of BboxBase(or its derivatives) or a tuple of 2 or 4 floats.
        For example,

          loc = 'upper right', bbox_to_anchor = (0.5, 0.5)

        will place the legend so that the upper right corner of the legend at
        the center of the axes.

        The legend location can be specified in other coordinate, by using the
        *bbox_transform* keyword.

        The loc itslef can be a 2-tuple giving x,y of the lower-left corner of
        the legend in axes coords (*bbox_to_anchor* is ignored).


        Keyword arguments:

          *prop*: [ *None* | FontProperties | dict ]
            A :class:`matplotlib.font_manager.FontProperties`
            instance. If *prop* is a dictionary, a new instance will be
            created with *prop*. If *None*, use rc settings.

          *numpoints*: integer
            The number of points in the legend for line

          *scatterpoints*: integer
            The number of points in the legend for scatter plot

          *scatteroffsets*: list of floats
            a list of yoffsets for scatter symbols in legend

          *markerscale*: [ *None* | scalar ]
            The relative size of legend markers vs. original. If *None*,
            use rc settings.

          *frameon*: [ *True* | *False* ]
            if *True*, draw a frame around the legend.
            The default is set by the rcParam 'legend.frameon'

          *fancybox*: [ *None* | *False* | *True* ]
            if *True*, draw a frame with a round fancybox.  If *None*,
            use rc settings

          *shadow*: [ *None* | *False* | *True* ]
            If *True*, draw a shadow behind legend. If *None*,
            use rc settings.

          *ncol* : integer
            number of columns. default is 1

          *mode* : [ \"expand\" | *None* ]
            if mode is \"expand\", the legend will be horizontally expanded
            to fill the axes area (or *bbox_to_anchor*)

          *bbox_to_anchor* : an instance of BboxBase or a tuple of 2 or 4 floats
            the bbox that the legend will be anchored.

          *bbox_transform* : [ an instance of Transform | *None* ]
            the transform for the bbox. transAxes if *None*.

          *title* : string
            the legend title

        Padding and spacing between various elements use following
        keywords parameters. These values are measure in font-size
        units. E.g., a fontsize of 10 points and a handlelength=5
        implies a handlelength of 50 points.  Values from rcParams
        will be used if None.

        ================   ==================================================================
        Keyword            Description
        ================   ==================================================================
        borderpad          the fractional whitespace inside the legend border
        labelspacing       the vertical space between the legend entries
        handlelength       the length of the legend handles
        handletextpad      the pad between the legend handle and text
        borderaxespad      the pad between the axes and legend border
        columnspacing      the spacing between columns
        ================   ==================================================================

        .. Note:: Not all kinds of artist are supported by the legend command.
                  See LINK (FIXME) for details.


        **Example:**

        .. plot:: mpl_examples/api/legend_demo.py

        .. seealso::
            :ref:`plotting-guide-legend`.

        ")
                        (reparse-symbol indented_block_body) [146622 153398])
                    ("step" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153443 153447])
                            ("x" variable nil (reparse-symbol function_parameters) [153449 153450])
                            ("y" variable nil (reparse-symbol function_parameters) [153452 153453])
                            ("args" variable nil (reparse-symbol function_parameters) [153455 153460])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [153462 153470]))                          
                        :documentation "
        Call signature::

          step(x, y, *args, **kwargs)

        Make a step plot. Additional keyword args to :func:`step` are the same
        as those for :func:`~matplotlib.pyplot.plot`.

        *x* and *y* must be 1-D sequences, and it is assumed, but not checked,
        that *x* is uniformly increasing.

        Keyword arguments:

        *where*: [ 'pre' | 'post' | 'mid'  ]
          If 'pre', the interval from x[i] to x[i+1] has level y[i+1]

          If 'post', that interval has level y[i]

          If 'mid', the jumps in *y* occur half-way between the
          *x*-values.
        ")
                        (reparse-symbol indented_block_body) [153434 154407])
                    ("bar" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154451 154455])
                            ("left" variable nil (reparse-symbol function_parameters) [154457 154461])
                            ("height" variable nil (reparse-symbol function_parameters) [154463 154469])
                            ("width" variable nil (reparse-symbol function_parameters) [154471 154476])
                            ("bottom" variable nil (reparse-symbol function_parameters) [154482 154488])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [154495 154503]))                          
                        :documentation "
        Call signature::

          bar(left, height, width=0.8, bottom=0, **kwargs)

        Make a bar plot with rectangles bounded by:

          *left*, *left* + *width*, *bottom*, *bottom* + *height*
                (left, right, bottom and top edges)

        *left*, *height*, *width*, and *bottom* can be either scalars
        or sequences

        Return value is a list of
        :class:`matplotlib.patches.Rectangle` instances.

        Required arguments:

          ========   ===============================================
          Argument   Description
          ========   ===============================================
          *left*     the x coordinates of the left sides of the bars
          *height*   the heights of the bars
          ========   ===============================================

        Optional keyword arguments:

          ===============   ==========================================
          Keyword           Description
          ===============   ==========================================
          *width*           the widths of the bars
          *bottom*          the y coordinates of the bottom edges of
                            the bars
          *color*           the colors of the bars
          *edgecolor*       the colors of the bar edges
          *linewidth*       width of bar edges; None means use default
                            linewidth; 0 means don't draw edges.
          *xerr*            if not None, will be used to generate
                            errorbars on the bar chart
          *yerr*            if not None, will be used to generate
                            errorbars on the bar chart
          *ecolor*          specifies the color of any errorbar
          *capsize*         (default 3) determines the length in
                            points of the error bar caps
          *error_kw*        dictionary of kwargs to be passed to
                            errorbar method. *ecolor* and *capsize*
                            may be specified here rather than as
                            independent kwargs.
          *align*           'edge' (default) | 'center'
          *orientation*     'vertical' | 'horizontal'
          *log*             [False|True] False (default) leaves the
                            orientation axis as-is; True sets it to
                            log scale
          ===============   ==========================================

        For vertical bars, *align* = 'edge' aligns bars by their left
        edges in left, while *align* = 'center' interprets these
        values as the *x* coordinates of the bar centers. For
        horizontal bars, *align* = 'edge' aligns bars by their bottom
        edges in bottom, while *align* = 'center' interprets these
        values as the *y* coordinates of the bar centers.

        The optional arguments *color*, *edgecolor*, *linewidth*,
        *xerr*, and *yerr* can be either scalars or sequences of
        length equal to the number of bars.  This enables you to use
        bar as the basis for stacked bar charts, or candlestick plots.
        Detail: *xerr* and *yerr* are passed directly to
        :meth:`errorbar`, so they can also have shape 2xN for
        independent specification of lower and upper errors.

        Other optional kwargs:

        %(Rectangle)s

        **Example:** A stacked bar chart.

        .. plot:: mpl_examples/pylab_examples/bar_stacked.py
        ")
                        (reparse-symbol indented_block_body) [154413 165403])
                    ("barh" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165447 165451])
                            ("bottom" variable nil (reparse-symbol function_parameters) [165453 165459])
                            ("width" variable nil (reparse-symbol function_parameters) [165461 165466])
                            ("height" variable nil (reparse-symbol function_parameters) [165468 165474])
                            ("left" variable nil (reparse-symbol function_parameters) [165480 165484])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [165491 165499]))                          
                        :documentation "
        Call signature::

          barh(bottom, width, height=0.8, left=0, **kwargs)

        Make a horizontal bar plot with rectangles bounded by:

          *left*, *left* + *width*, *bottom*, *bottom* + *height*
                (left, right, bottom and top edges)

        *bottom*, *width*, *height*, and *left* can be either scalars
        or sequences

        Return value is a list of
        :class:`matplotlib.patches.Rectangle` instances.

        Required arguments:

          ========   ======================================================
          Argument   Description
          ========   ======================================================
          *bottom*   the vertical positions of the bottom edges of the bars
          *width*    the lengths of the bars
          ========   ======================================================

        Optional keyword arguments:

          ===============   ==========================================
          Keyword           Description
          ===============   ==========================================
          *height*          the heights (thicknesses) of the bars
          *left*            the x coordinates of the left edges of the
                            bars
          *color*           the colors of the bars
          *edgecolor*       the colors of the bar edges
          *linewidth*       width of bar edges; None means use default
                            linewidth; 0 means don't draw edges.
          *xerr*            if not None, will be used to generate
                            errorbars on the bar chart
          *yerr*            if not None, will be used to generate
                            errorbars on the bar chart
          *ecolor*          specifies the color of any errorbar
          *capsize*         (default 3) determines the length in
                            points of the error bar caps
          *align*           'edge' (default) | 'center'
          *log*             [False|True] False (default) leaves the
                            horizontal axis as-is; True sets it to log
                            scale
          ===============   ==========================================

        Setting *align* = 'edge' aligns bars by their bottom edges in
        bottom, while *align* = 'center' interprets these values as
        the *y* coordinates of the bar centers.

        The optional arguments *color*, *edgecolor*, *linewidth*,
        *xerr*, and *yerr* can be either scalars or sequences of
        length equal to the number of bars.  This enables you to use
        barh as the basis for stacked bar charts, or candlestick
        plots.

        other optional kwargs:

        %(Rectangle)s
        ")
                        (reparse-symbol indented_block_body) [165408 168443])
                    ("broken_barh" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [168494 168498])
                            ("xranges" variable nil (reparse-symbol function_parameters) [168500 168507])
                            ("yrange" variable nil (reparse-symbol function_parameters) [168509 168515])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [168517 168525]))                          
                        :documentation "
        Call signature::

          broken_barh(self, xranges, yrange, **kwargs)

        A collection of horizontal bars spanning *yrange* with a sequence of
        *xranges*.

        Required arguments:

          =========   ==============================
          Argument    Description
          =========   ==============================
          *xranges*   sequence of (*xmin*, *xwidth*)
          *yrange*    sequence of (*ymin*, *ywidth*)
          =========   ==============================

        kwargs are
        :class:`matplotlib.collections.BrokenBarHCollection`
        properties:

        %(BrokenBarHCollection)s

        these can either be a single argument, ie::

          facecolors = 'black'

        or a sequence of arguments for the various bars, ie::

          facecolors = ('black', 'red', 'green')

        **Example:**

        .. plot:: mpl_examples/pylab_examples/broken_barh.py
        ")
                        (reparse-symbol indented_block_body) [168448 169641])
                    ("stem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [169655 169659])
                            ("x" variable nil (reparse-symbol function_parameters) [169661 169662])
                            ("y" variable nil (reparse-symbol function_parameters) [169664 169665])
                            ("linefmt" variable nil (reparse-symbol function_parameters) [169667 169674])
                            ("markerfmt" variable nil (reparse-symbol function_parameters) [169681 169690])
                            ("basefmt" variable nil (reparse-symbol function_parameters) [169697 169704])
                            ("bottom" variable nil (reparse-symbol function_parameters) [169724 169730])
                            ("label" variable nil (reparse-symbol function_parameters) [169737 169742]))                          
                        :documentation "
        Call signature::

          stem(x, y, linefmt='b-', markerfmt='bo', basefmt='r-')

        A stem plot plots vertical lines (using *linefmt*) at each *x*
        location from the baseline to *y*, and places a marker there
        using *markerfmt*.  A horizontal line at 0 is is plotted using
        *basefmt*.

        Return value is a tuple (*markerline*, *stemlines*,
        *baseline*).

        .. seealso::
            This `document <http://www.mathworks.com/help/techdoc/ref/stem.html>`_
            for details.


        **Example:**

        .. plot:: mpl_examples/pylab_examples/stem_plot.py
        ")
                        (reparse-symbol indented_block_body) [169646 171185])
                    ("pie" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [171199 171203])
                            ("x" variable nil (reparse-symbol function_parameters) [171205 171206])
                            ("explode" variable nil (reparse-symbol function_parameters) [171208 171215])
                            ("labels" variable nil (reparse-symbol function_parameters) [171222 171228])
                            ("colors" variable nil (reparse-symbol function_parameters) [171235 171241])
                            ("autopct" variable nil (reparse-symbol function_parameters) [171260 171267])
                            ("pctdistance" variable nil (reparse-symbol function_parameters) [171274 171285])
                            ("shadow" variable nil (reparse-symbol function_parameters) [171291 171297])
                            ("labeldistance" variable nil (reparse-symbol function_parameters) [171317 171330]))                          )
                        (reparse-symbol indented_block_body) [171191 176617])
                    ("errorbar" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [176665 176669])
                            ("x" variable nil (reparse-symbol function_parameters) [176671 176672])
                            ("y" variable nil (reparse-symbol function_parameters) [176674 176675])
                            ("yerr" variable nil (reparse-symbol function_parameters) [176677 176681])
                            ("xerr" variable nil (reparse-symbol function_parameters) [176688 176692])
                            ("fmt" variable nil (reparse-symbol function_parameters) [176716 176719])
                            ("ecolor" variable nil (reparse-symbol function_parameters) [176725 176731])
                            ("elinewidth" variable nil (reparse-symbol function_parameters) [176738 176748])
                            ("capsize" variable nil (reparse-symbol function_parameters) [176755 176762])
                            ("barsabove" variable nil (reparse-symbol function_parameters) [176783 176792])
                            ("lolims" variable nil (reparse-symbol function_parameters) [176800 176806])
                            ("uplims" variable nil (reparse-symbol function_parameters) [176814 176820])
                            ("xlolims" variable nil (reparse-symbol function_parameters) [176845 176852])
                            ("xuplims" variable nil (reparse-symbol function_parameters) [176860 176867])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [176875 176883]))                          
                        :documentation "
        Call signature::

          errorbar(x, y, yerr=None, xerr=None,
                   fmt='-', ecolor=None, elinewidth=None, capsize=3,
                   barsabove=False, lolims=False, uplims=False,
                   xlolims=False, xuplims=False)

        Plot *x* versus *y* with error deltas in *yerr* and *xerr*.
        Vertical errorbars are plotted if *yerr* is not *None*.
        Horizontal errorbars are plotted if *xerr* is not *None*.

        *x*, *y*, *xerr*, and *yerr* can all be scalars, which plots a
        single error bar at *x*, *y*.

        Optional keyword arguments:

          *xerr*/*yerr*: [ scalar | N, Nx1, or 2xN array-like ]
            If a scalar number, len(N) array-like object, or an Nx1 array-like
            object, errorbars are drawn +/- value.

            If a sequence of shape 2xN, errorbars are drawn at -row1 and
            +row2

          *fmt*: '-'
            The plot format symbol. If *fmt* is *None*, only the
            errorbars are plotted.  This is used for adding
            errorbars to a bar plot, for example.

          *ecolor*: [ *None* | mpl color ]
            a matplotlib color arg which gives the color the errorbar lines;
            if *None*, use the marker color.

          *elinewidth*: scalar
            the linewidth of the errorbar lines. If *None*, use the linewidth.

          *capsize*: scalar
            the size of the error bar caps in points

          *barsabove*: [ *True* | *False* ]
            if *True*, will plot the errorbars above the plot
            symbols. Default is below.

          *lolims* / *uplims* / *xlolims* / *xuplims*: [ *False* | *True* ]
            These arguments can be used to indicate that a value gives
            only upper/lower limits. In that case a caret symbol is
            used to indicate this. lims-arguments may be of the same
            type as *xerr* and *yerr*.

        All other keyword arguments are passed on to the plot command for the
        markers. For example, this code makes big red squares with
        thick green edges::

          x,y,yerr = rand(3,10)
          errorbar(x, y, yerr, marker='s',
                   mfc='red', mec='green', ms=20, mew=4)

        where *mfc*, *mec*, *ms* and *mew* are aliases for the longer
        property names, *markerfacecolor*, *markeredgecolor*, *markersize*
        and *markeredgewith*.

        valid kwargs for the marker properties are

        %(Line2D)s

        Returns (*plotline*, *caplines*, *barlinecols*):

            *plotline*: :class:`~matplotlib.lines.Line2D` instance
                *x*, *y* plot markers and/or line

            *caplines*: list of error bar cap
                :class:`~matplotlib.lines.Line2D` instances
            *barlinecols*: list of
                :class:`~matplotlib.collections.LineCollection` instances for
                the horizontal and vertical error ranges.

        **Example:**

        .. plot:: mpl_examples/pylab_examples/errorbar_demo.py

        ")
                        (reparse-symbol indented_block_body) [176622 187296])
                    ("boxplot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [187313 187317])
                            ("x" variable nil (reparse-symbol function_parameters) [187319 187320])
                            ("notch" variable nil (reparse-symbol function_parameters) [187322 187327])
                            ("sym" variable nil (reparse-symbol function_parameters) [187331 187334])
                            ("vert" variable nil (reparse-symbol function_parameters) [187341 187345])
                            ("whis" variable nil (reparse-symbol function_parameters) [187349 187353])
                            ("positions" variable nil (reparse-symbol function_parameters) [187375 187384])
                            ("widths" variable nil (reparse-symbol function_parameters) [187391 187397])
                            ("patch_artist" variable nil (reparse-symbol function_parameters) [187404 187416])
                            ("bootstrap" variable nil (reparse-symbol function_parameters) [187440 187449]))                          
                        :documentation "
        Call signature::

          boxplot(x, notch=0, sym='+', vert=1, whis=1.5,
                  positions=None, widths=None, patch_artist=False)

        Make a box and whisker plot for each column of *x* or each
        vector in sequence *x*.  The box extends from the lower to
        upper quartile values of the data, with a line at the median.
        The whiskers extend from the box to show the range of the
        data.  Flier points are those past the end of the whiskers.

        Function Arguments:

          *x* :
            Array or a sequence of vectors.

          *notch* : [ 0 (default) | 1]
            If 0, produce a rectangular box plot.
            If 1, produce a notched box plot

          *sym* :
            (default 'b+') is the default symbol for flier points.
            Enter an empty string ('') if you don't want to show fliers.

          *vert* : [1 (default) | 0]
            If 1, make the boxes vertical.
            If 0, make horizontal boxes. (Odd, but kept for compatibility
            with MATLAB boxplots)

          *whis* : (default 1.5)
            Defines the length of the whiskers as
            a function of the inner quartile range.  They extend to the
            most extreme data point within ( ``whis*(75%-25%)`` ) data range.

          *bootstrap* : [ *None* (default) | integer ]
            Specifies whether to bootstrap the confidence intervals
            around the median for notched boxplots. If *None*, no
            bootstrapping is performed, and notches are calculated
            using a Gaussian-based asymptotic approximation
            (see McGill, R., Tukey, J.W., and Larsen, W.A.,
            1978, and Kendall and Stuart, 1967). Otherwise, bootstrap
            specifies the number of times to bootstrap the median to
            determine its 95% confidence intervals. Values between 1000
            and 10000 are recommended.

          *positions* : (default 1,2,...,n)
            Sets the horizontal positions of
            the boxes. The ticks and limits are automatically set to match
            the positions.

          *widths* : [ scalar | array ]
            Either a scalar or a vector to set the width of each box.
            The default is 0.5, or ``0.15*(distance between extreme
            positions)`` if that is smaller.

          *patch_artist* : boolean
            If *False* (default), produce boxes with the
            :class:`~matplotlib.lines.Line2D` artist.
            If *True*, produce boxes with the
            :class:`~matplotlib.patches.Patch` artist.

        Returns a dictionary mapping each component of the boxplot
        to a list of the :class:`~matplotlib.lines.Line2D`
        instances created (unless *patch_artist* was *True*. See above.).

        **Example:**

        .. plot:: pyplots/boxplot_demo.py
        ")
                        (reparse-symbol indented_block_body) [187301 198000])
                    ("scatter" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [198047 198051])
                            ("x" variable nil (reparse-symbol function_parameters) [198053 198054])
                            ("y" variable nil (reparse-symbol function_parameters) [198056 198057])
                            ("s" variable nil (reparse-symbol function_parameters) [198059 198060])
                            ("c" variable nil (reparse-symbol function_parameters) [198065 198066])
                            ("marker" variable nil (reparse-symbol function_parameters) [198072 198078])
                            ("cmap" variable nil (reparse-symbol function_parameters) [198084 198088])
                            ("norm" variable nil (reparse-symbol function_parameters) [198095 198099])
                            ("vmin" variable nil (reparse-symbol function_parameters) [198126 198130])
                            ("vmax" variable nil (reparse-symbol function_parameters) [198137 198141])
                            ("alpha" variable nil (reparse-symbol function_parameters) [198148 198153])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [198160 198170])
                            ("faceted" variable nil (reparse-symbol function_parameters) [198197 198204])
                            ("verts" variable nil (reparse-symbol function_parameters) [198211 198216])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [198243 198251]))                          
                        :documentation "
        Call signatures::

          scatter(x, y, s=20, c='b', marker='o', cmap=None, norm=None,
                  vmin=None, vmax=None, alpha=None, linewidths=None,
                  verts=None, **kwargs)

        Make a scatter plot of *x* versus *y*, where *x*, *y* are
        converted to 1-D sequences which must be of the same length, *N*.

        Keyword arguments:

          *s*:
            size in points^2.  It is a scalar or an array of the same
            length as *x* and *y*.

          *c*:
            a color. *c* can be a single color format string, or a
            sequence of color specifications of length *N*, or a
            sequence of *N* numbers to be mapped to colors using the
            *cmap* and *norm* specified via kwargs (see below). Note
            that *c* should not be a single numeric RGB or RGBA
            sequence because that is indistinguishable from an array
            of values to be colormapped.  *c* can be a 2-D array in
            which the rows are RGB or RGBA, however.

          *marker*:
            can be one of:

            %(MarkerTable)s

        Any or all of *x*, *y*, *s*, and *c* may be masked arrays, in
        which case all masks will be combined and only unmasked points
        will be plotted.

        Other keyword arguments: the color mapping and normalization
        arguments will be used only if *c* is an array of floats.

          *cmap*: [ *None* | Colormap ]
            A :class:`matplotlib.colors.Colormap` instance or registered
            name. If *None*, defaults to rc ``image.cmap``. *cmap* is
            only used if *c* is an array of floats.

          *norm*: [ *None* | Normalize ]
            A :class:`matplotlib.colors.Normalize` instance is used to
            scale luminance data to 0, 1. If *None*, use the default
            :func:`normalize`. *norm* is only used if *c* is an array
            of floats.

          *vmin*/*vmax*:
            *vmin* and *vmax* are used in conjunction with norm to
            normalize luminance data.  If either are *None*, the min and
            max of the color array *C* is used.  Note if you pass a
            *norm* instance, your settings for *vmin* and *vmax* will
            be ignored.

          *alpha*: ``0 <= scalar <= 1``  or *None*
            The alpha value for the patches

          *linewidths*: [ *None* | scalar | sequence ]
            If *None*, defaults to (lines.linewidth,).  Note that this
            is a tuple, and if you set the linewidths argument you
            must set it as a sequence of floats, as required by
            :class:`~matplotlib.collections.RegularPolyCollection`.

        Optional kwargs control the
        :class:`~matplotlib.collections.Collection` properties; in
        particular:

          *edgecolors*:
            The string 'none' to plot faces with no outlines

          *facecolors*:
            The string 'none' to plot unfilled outlines

        Here are the standard descriptions of all the
        :class:`~matplotlib.collections.Collection` kwargs:

        %(Collection)s

        A :class:`~matplotlib.collections.Collection` instance is
        returned.
        ")
                        (reparse-symbol indented_block_body) [198005 204821])
                    ("hexbin" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [204867 204871])
                            ("x" variable nil (reparse-symbol function_parameters) [204873 204874])
                            ("y" variable nil (reparse-symbol function_parameters) [204876 204877])
                            ("C" variable nil (reparse-symbol function_parameters) [204879 204880])
                            ("gridsize" variable nil (reparse-symbol function_parameters) [204889 204897])
                            ("bins" variable nil (reparse-symbol function_parameters) [204905 204909])
                            ("xscale" variable nil (reparse-symbol function_parameters) [204938 204944])
                            ("yscale" variable nil (reparse-symbol function_parameters) [204957 204963])
                            ("extent" variable nil (reparse-symbol function_parameters) [204976 204982])
                            ("cmap" variable nil (reparse-symbol function_parameters) [205011 205015])
                            ("norm" variable nil (reparse-symbol function_parameters) [205022 205026])
                            ("vmin" variable nil (reparse-symbol function_parameters) [205033 205037])
                            ("vmax" variable nil (reparse-symbol function_parameters) [205044 205048])
                            ("alpha" variable nil (reparse-symbol function_parameters) [205075 205080])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [205087 205097])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [205104 205114])
                            ("reduce_C_function" variable nil (reparse-symbol function_parameters) [205143 205160])
                            ("mincnt" variable nil (reparse-symbol function_parameters) [205172 205178])
                            ("marginals" variable nil (reparse-symbol function_parameters) [205185 205194])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [205222 205230]))                          
                        :documentation "
        Call signature::

           hexbin(x, y, C = None, gridsize = 100, bins = None,
                  xscale = 'linear', yscale = 'linear',
                  cmap=None, norm=None, vmin=None, vmax=None,
                  alpha=None, linewidths=None, edgecolors='none'
                  reduce_C_function = np.mean, mincnt=None, marginals=True
                  **kwargs)

        Make a hexagonal binning plot of *x* versus *y*, where *x*,
        *y* are 1-D sequences of the same length, *N*. If *C* is *None*
        (the default), this is a histogram of the number of occurences
        of the observations at (x[i],y[i]).

        If *C* is specified, it specifies values at the coordinate
        (x[i],y[i]). These values are accumulated for each hexagonal
        bin and then reduced according to *reduce_C_function*, which
        defaults to numpy's mean function (np.mean). (If *C* is
        specified, it must also be a 1-D sequence of the same length
        as *x* and *y*.)

        *x*, *y* and/or *C* may be masked arrays, in which case only
        unmasked points will be plotted.

        Optional keyword arguments:

        *gridsize*: [ 100 | integer ]
           The number of hexagons in the *x*-direction, default is
           100. The corresponding number of hexagons in the
           *y*-direction is chosen such that the hexagons are
           approximately regular. Alternatively, gridsize can be a
           tuple with two elements specifying the number of hexagons
           in the *x*-direction and the *y*-direction.

        *bins*: [ *None* | 'log' | integer | sequence ]
           If *None*, no binning is applied; the color of each hexagon
           directly corresponds to its count value.

           If 'log', use a logarithmic scale for the color
           map. Internally, :math:`log_{10}(i+1)` is used to
           determine the hexagon color.

           If an integer, divide the counts in the specified number
           of bins, and color the hexagons accordingly.

           If a sequence of values, the values of the lower bound of
           the bins to be used.

        *xscale*: [ 'linear' | 'log' ]
           Use a linear or log10 scale on the horizontal axis.

        *scale*: [ 'linear' | 'log' ]
           Use a linear or log10 scale on the vertical axis.

        *mincnt*: [ *None* | a positive integer ]
           If not *None*, only display cells with more than *mincnt*
           number of points in the cell

        *marginals*: [ *True* | *False* ]
           if marginals is *True*, plot the marginal density as
           colormapped rectagles along the bottom of the x-axis and
           left of the y-axis

        *extent*: [ *None* | scalars (left, right, bottom, top) ]
           The limits of the bins. The default assigns the limits
           based on gridsize, x, y, xscale and yscale.

        Other keyword arguments controlling color mapping and normalization
        arguments:

        *cmap*: [ *None* | Colormap ]
           a :class:`matplotlib.colors.Colormap` instance. If *None*,
           defaults to rc ``image.cmap``.

        *norm*: [ *None* | Normalize ]
           :class:`matplotlib.colors.Normalize` instance is used to
           scale luminance data to 0,1.

        *vmin* / *vmax*: scalar
           *vmin* and *vmax* are used in conjunction with *norm* to normalize
           luminance data.  If either are *None*, the min and max of the color
           array *C* is used.  Note if you pass a norm instance, your settings
           for *vmin* and *vmax* will be ignored.

        *alpha*: scalar between 0 and 1, or *None*
           the alpha value for the patches

        *linewidths*: [ *None* | scalar ]
           If *None*, defaults to rc lines.linewidth. Note that this
           is a tuple, and if you set the linewidths argument you
           must set it as a sequence of floats, as required by
           :class:`~matplotlib.collections.RegularPolyCollection`.

        Other keyword arguments controlling the Collection properties:

        *edgecolors*: [ *None* | ``'none'`` | mpl color | color sequence ]
           If ``'none'``, draws the edges in the same color as the fill color.
           This is the default, as it avoids unsightly unpainted pixels
           between the hexagons.

           If *None*, draws the outlines in the default color.

           If a matplotlib color arg or sequence of rgba tuples, draws the
           outlines in the specified color.

        Here are the standard descriptions of all the
        :class:`~matplotlib.collections.Collection` kwargs:

        %(Collection)s

        The return value is a
        :class:`~matplotlib.collections.PolyCollection` instance; use
        :meth:`~matplotlib.collections.PolyCollection.get_array` on
        this :class:`~matplotlib.collections.PolyCollection` to get
        the counts in each hexagon. If *marginals* is *True*, horizontal
        bar and vertical bar (both PolyCollections) will be attached
        to the return collection as attributes *hbar* and *vbar*.


        **Example:**

        .. plot:: mpl_examples/pylab_examples/hexbin_demo.py

        ")
                        (reparse-symbol indented_block_body) [204826 220660])
                    ("arrow" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [220706 220710])
                            ("x" variable nil (reparse-symbol function_parameters) [220712 220713])
                            ("y" variable nil (reparse-symbol function_parameters) [220715 220716])
                            ("dx" variable nil (reparse-symbol function_parameters) [220718 220720])
                            ("dy" variable nil (reparse-symbol function_parameters) [220722 220724])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [220726 220734]))                          
                        :documentation "
        Call signature::

           arrow(x, y, dx, dy, **kwargs)

        Draws arrow on specified axis from (*x*, *y*) to (*x* + *dx*,
        *y* + *dy*).

        Optional kwargs control the arrow properties:

        %(FancyArrow)s

        **Example:**

        .. plot:: mpl_examples/pylab_examples/arrow_demo.py
        ")
                        (reparse-symbol indented_block_body) [220666 221443])
                    ("quiverkey" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [221462 221466])
                            ("args" variable nil (reparse-symbol function_parameters) [221468 221473])
                            ("kw" variable nil (reparse-symbol function_parameters) [221475 221479]))                          )
                        (reparse-symbol indented_block_body) [221448 221572])
                    ("quiverkey" variable nil (reparse-symbol indented_block_body) [221576 221627])
                    ("quiver" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [221644 221648])
                            ("args" variable nil (reparse-symbol function_parameters) [221650 221655])
                            ("kw" variable nil (reparse-symbol function_parameters) [221657 221661]))                          )
                        (reparse-symbol indented_block_body) [221633 221867])
                    ("quiver" variable nil (reparse-symbol indented_block_body) [221871 221913])
                    ("barbs" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [221959 221963])
                            ("args" variable nil (reparse-symbol function_parameters) [221965 221970])
                            ("kw" variable nil (reparse-symbol function_parameters) [221972 221976]))                          
                        :documentation "
        %(barbs_doc)s

        **Example:**

        .. plot:: mpl_examples/pylab_examples/barb_demo.py
        ")
                        (reparse-symbol indented_block_body) [221919 222313])
                    ("fill" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [222357 222361])
                            ("args" variable nil (reparse-symbol function_parameters) [222363 222368])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [222370 222378]))                          
                        :documentation "
        Call signature::

          fill(*args, **kwargs)

        Plot filled polygons.  *args* is a variable length argument,
        allowing for multiple *x*, *y* pairs with an optional color
        format string; see :func:`~matplotlib.pyplot.plot` for details
        on the argument parsing.  For example, to plot a polygon with
        vertices at *x*, *y* in blue.::

          ax.fill(x,y, 'b' )

        An arbitrary number of *x*, *y*, *color* groups can be specified::

          ax.fill(x1, y1, 'g', x2, y2, 'r')

        Return value is a list of :class:`~matplotlib.patches.Patch`
        instances that were added.

        The same color strings that :func:`~matplotlib.pyplot.plot`
        supports are supported by the fill format string.

        If you would like to fill below a curve, eg. shade a region
        between 0 and *y* along *x*, use :meth:`fill_between`

        The *closed* kwarg will close the polygon when *True* (default).

        kwargs control the :class:`~matplotlib.patches.Polygon` properties:

        %(Polygon)s

        **Example:**

        .. plot:: mpl_examples/pylab_examples/fill_demo.py

        ")
                        (reparse-symbol indented_block_body) [222318 223799])
                    ("fill_between" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [223851 223855])
                            ("x" variable nil (reparse-symbol function_parameters) [223857 223858])
                            ("y1" variable nil (reparse-symbol function_parameters) [223860 223862])
                            ("y2" variable nil (reparse-symbol function_parameters) [223864 223866])
                            ("where" variable nil (reparse-symbol function_parameters) [223870 223875])
                            ("interpolate" variable nil (reparse-symbol function_parameters) [223882 223893])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [223922 223930]))                          
                        :documentation "
        Call signature::

          fill_between(x, y1, y2=0, where=None, **kwargs)

        Create a :class:`~matplotlib.collections.PolyCollection`
        filling the regions between *y1* and *y2* where
        ``where==True``

          *x* :
            An N-length array of the x data

          *y1* :
            An N-length array (or scalar) of the y data

          *y2* :
            An N-length array (or scalar) of the y data

          *where* :
            If *None*, default to fill between everywhere.  If not *None*,
            it is an N-length numpy boolean array and the fill will
            only happen over the regions where ``where==True``.

          *interpolate* :
            If *True*, interpolate between the two lines to find the
            precise point of intersection.  Otherwise, the start and
            end points of the filled region will only occur on explicit
            values in the *x* array.

          *kwargs* :
            Keyword args passed on to the
            :class:`~matplotlib.collections.PolyCollection`.

        kwargs control the :class:`~matplotlib.patches.Polygon` properties:

        %(PolyCollection)s

        .. plot:: mpl_examples/pylab_examples/fill_between_demo.py

        .. seealso::

            :meth:`fill_betweenx`
                for filling between two sets of x-values

        ")
                        (reparse-symbol indented_block_body) [223804 228654])
                    ("fill_betweenx" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [228707 228711])
                            ("y" variable nil (reparse-symbol function_parameters) [228713 228714])
                            ("x1" variable nil (reparse-symbol function_parameters) [228716 228718])
                            ("x2" variable nil (reparse-symbol function_parameters) [228720 228722])
                            ("where" variable nil (reparse-symbol function_parameters) [228726 228731])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [228738 228746]))                          
                        :documentation "
        Call signature::

          fill_between(y, x1, x2=0, where=None, **kwargs)

        Create a :class:`~matplotlib.collections.PolyCollection`
        filling the regions between *x1* and *x2* where
        ``where==True``

          *y* :
            An N-length array of the y data

          *x1* :
            An N-length array (or scalar) of the x data

          *x2* :
            An N-length array (or scalar) of the x data

          *where* :
             If *None*, default to fill between everywhere.  If not *None*,
             it is a N length numpy boolean array and the fill will
             only happen over the regions where ``where==True``

          *kwargs* :
            keyword args passed on to the
            :class:`~matplotlib.collections.PolyCollection`

        kwargs control the :class:`~matplotlib.patches.Polygon` properties:

        %(PolyCollection)s

        .. plot:: mpl_examples/pylab_examples/fill_betweenx_demo.py

        .. seealso::

            :meth:`fill_between`
                for filling between two sets of y-values

        ")
                        (reparse-symbol indented_block_body) [228659 232176])
                    ("imshow" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [232287 232291])
                            ("X" variable nil (reparse-symbol function_parameters) [232293 232294])
                            ("cmap" variable nil (reparse-symbol function_parameters) [232296 232300])
                            ("norm" variable nil (reparse-symbol function_parameters) [232307 232311])
                            ("aspect" variable nil (reparse-symbol function_parameters) [232318 232324])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [232346 232359])
                            ("alpha" variable nil (reparse-symbol function_parameters) [232366 232371])
                            ("vmin" variable nil (reparse-symbol function_parameters) [232378 232382])
                            ("vmax" variable nil (reparse-symbol function_parameters) [232389 232393])
                            ("origin" variable nil (reparse-symbol function_parameters) [232415 232421])
                            ("extent" variable nil (reparse-symbol function_parameters) [232428 232434])
                            ("shape" variable nil (reparse-symbol function_parameters) [232441 232446])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [232453 232463])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [232482 232491])
                            ("imlim" variable nil (reparse-symbol function_parameters) [232497 232502])
                            ("resample" variable nil (reparse-symbol function_parameters) [232509 232517])
                            ("url" variable nil (reparse-symbol function_parameters) [232524 232527])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [232534 232542]))                          
                        :documentation "
        Call signature::

          imshow(X, cmap=None, norm=None, aspect=None, interpolation=None,
                 alpha=None, vmin=None, vmax=None, origin=None, extent=None,
                 **kwargs)

        Display the image in *X* to current axes.  *X* may be a float
        array, a uint8 array or a PIL image. If *X* is an array, *X*
        can have the following shapes:

        * MxN -- luminance (grayscale, float array only)
        * MxNx3 -- RGB (float or uint8 array)
        * MxNx4 -- RGBA (float or uint8 array)

        The value for each component of MxNx3 and MxNx4 float arrays should be
        in the range 0.0 to 1.0; MxN float arrays may be normalised.

        An :class:`matplotlib.image.AxesImage` instance is returned.

        Keyword arguments:

          *cmap*: [ *None* | Colormap ]
            A :class:`matplotlib.colors.Colormap` instance, eg. cm.jet.
            If *None*, default to rc ``image.cmap`` value.

            *cmap* is ignored when *X* has RGB(A) information

          *aspect*: [ *None* | 'auto' | 'equal' | scalar ]
            If 'auto', changes the image aspect ratio to match that of the axes

            If 'equal', and *extent* is *None*, changes the axes
            aspect ratio to match that of the image. If *extent* is
            not *None*, the axes aspect ratio is changed to match that
            of the extent.

            If *None*, default to rc ``image.aspect`` value.

          *interpolation*:

            Acceptable values are *None*, 'none', 'nearest', 'bilinear',
            'bicubic', 'spline16', 'spline36', 'hanning', 'hamming',
            'hermite', 'kaiser', 'quadric', 'catrom', 'gaussian',
            'bessel', 'mitchell', 'sinc', 'lanczos'

            If *interpolation* is *None*, default to rc
            ``image.interpolation``. See also the *filternorm* and
            *filterrad* parameters

            If *interpolation* is ``'none'``, then no interpolation is
            performed on the Agg, ps and pdf backends. Other backends
            will fall back to 'nearest'.

          *norm*: [ *None* | Normalize ]
            An :class:`matplotlib.colors.Normalize` instance; if
            *None*, default is ``normalization()``.  This scales
            luminance -> 0-1

            *norm* is only used for an MxN float array.

          *vmin*/*vmax*: [ *None* | scalar ]
            Used to scale a luminance image to 0-1.  If either is
            *None*, the min and max of the luminance values will be
            used.  Note if *norm* is not *None*, the settings for
            *vmin* and *vmax* will be ignored.

          *alpha*: scalar
            The alpha blending value, between 0 (transparent) and 1 (opaque)
            or *None*

          *origin*: [ *None* | 'upper' | 'lower' ]
            Place the [0,0] index of the array in the upper left or lower left
            corner of the axes. If *None*, default to rc ``image.origin``.

          *extent*: [ *None* | scalars (left, right, bottom, top) ]
            Data limits for the axes.  The default assigns zero-based row,
            column indices to the *x*, *y* centers of the pixels.

          *shape*: [ *None* | scalars (columns, rows) ]
            For raw buffer images

          *filternorm*:
            A parameter for the antigrain image resize filter.  From the
            antigrain documentation, if *filternorm* = 1, the filter normalizes
            integer values and corrects the rounding errors. It doesn't do
            anything with the source floating point values, it corrects only
            integers according to the rule of 1.0 which means that any sum of
            pixel weights must be equal to 1.0.  So, the filter function must
            produce a graph of the proper shape.

          *filterrad*:
            The filter radius for filters that have a radius
            parameter, i.e. when interpolation is one of: 'sinc',
            'lanczos' or 'blackman'

        Additional kwargs are :class:`~matplotlib.artist.Artist` properties:

        %(Artist)s

        **Example:**

        .. plot:: mpl_examples/pylab_examples/image_demo.py
        ")
                        (reparse-symbol indented_block_body) [232246 237892])
                    ("_pcolorargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [237914 237918])
                            ("funcname" variable nil (reparse-symbol function_parameters) [237920 237928])
                            ("args" variable nil (reparse-symbol function_parameters) [237930 237935]))                          )
                        (reparse-symbol indented_block_body) [237898 238753])
                    ("pcolor" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [238799 238803])
                            ("args" variable nil (reparse-symbol function_parameters) [238805 238810])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [238812 238820]))                          
                        :documentation "
        Call signatures::

          pcolor(C, **kwargs)
          pcolor(X, Y, C, **kwargs)

        Create a pseudocolor plot of a 2-D array.

        *C* is the array of color values.

        *X* and *Y*, if given, specify the (*x*, *y*) coordinates of
        the colored quadrilaterals; the quadrilateral for C[i,j] has
        corners at::

          (X[i,   j],   Y[i,   j]),
          (X[i,   j+1], Y[i,   j+1]),
          (X[i+1, j],   Y[i+1, j]),
          (X[i+1, j+1], Y[i+1, j+1]).

        Ideally the dimensions of *X* and *Y* should be one greater
        than those of *C*; if the dimensions are the same, then the
        last row and column of *C* will be ignored.

        Note that the the column index corresponds to the
        *x*-coordinate, and the row index corresponds to *y*; for
        details, see the :ref:`Grid Orientation
        <axes-pcolor-grid-orientation>` section below.

        If either or both of *X* and *Y* are 1-D arrays or column vectors,
        they will be expanded as needed into the appropriate 2-D arrays,
        making a rectangular grid.

        *X*, *Y* and *C* may be masked arrays.  If either C[i, j], or one
        of the vertices surrounding C[i,j] (*X* or *Y* at [i, j], [i+1, j],
        [i, j+1],[i+1, j+1]) is masked, nothing is plotted.

        Keyword arguments:

          *cmap*: [ *None* | Colormap ]
            A :class:`matplotlib.colors.Colormap` instance. If *None*, use
            rc settings.

          norm: [ *None* | Normalize ]
            An :class:`matplotlib.colors.Normalize` instance is used
            to scale luminance data to 0,1. If *None*, defaults to
            :func:`normalize`.

          *vmin*/*vmax*: [ *None* | scalar ]
            *vmin* and *vmax* are used in conjunction with *norm* to
            normalize luminance data.  If either are *None*, the min
            and max of the color array *C* is used.  If you pass a
            *norm* instance, *vmin* and *vmax* will be ignored.

          *shading*: [ 'flat' | 'faceted' ]
            If 'faceted', a black grid is drawn around each rectangle; if
            'flat', edges are not drawn. Default is 'flat', contrary to
            MATLAB.

            This kwarg is deprecated; please use 'edgecolors' instead:
              * shading='flat' -- edgecolors='none'
              * shading='faceted  -- edgecolors='k'

          *edgecolors*: [ *None* | ``'none'`` | color | color sequence]
            If *None*, the rc setting is used by default.

            If ``'none'``, edges will not be visible.

            An mpl color or sequence of colors will set the edge color

          *alpha*: ``0 <= scalar <= 1``   or *None*
            the alpha blending value

        Return value is a :class:`matplotlib.collections.Collection`
        instance.

        .. _axes-pcolor-grid-orientation:

        The grid orientation follows the MATLAB convention: an
        array *C* with shape (*nrows*, *ncolumns*) is plotted with
        the column number as *X* and the row number as *Y*, increasing
        up; hence it is plotted the way the array would be printed,
        except that the *Y* axis is reversed.  That is, *C* is taken
        as *C*(*y*, *x*).

        Similarly for :func:`meshgrid`::

          x = np.arange(5)
          y = np.arange(3)
          X, Y = meshgrid(x,y)

        is equivalent to::

          X = array([[0, 1, 2, 3, 4],
                     [0, 1, 2, 3, 4],
                     [0, 1, 2, 3, 4]])

          Y = array([[0, 0, 0, 0, 0],
                     [1, 1, 1, 1, 1],
                     [2, 2, 2, 2, 2]])

        so if you have::

          C = rand( len(x), len(y))

        then you need::

          pcolor(X, Y, C.T)

        or::

          pcolor(C.T)

        MATLAB :func:`pcolor` always discards the last row and column
        of *C*, but matplotlib displays the last row and column if *X* and
        *Y* are not specified, or if *X* and *Y* have one more row and
        column than *C*.

        kwargs can be used to control the
        :class:`~matplotlib.collections.PolyCollection` properties:

        %(PolyCollection)s

        Note: the default *antialiaseds* is False if the default
        *edgecolors*=\"none\" is used.  This eliminates artificial lines
        at patch boundaries, and works regardless of the value of
        alpha.  If *edgecolors* is not \"none\", then the default
        *antialiaseds* is taken from
        rcParams['patch.antialiased'], which defaults to *True*.
        Stroking the edges may be preferred if *alpha* is 1, but
        will cause artifacts otherwise.

        ")
                        (reparse-symbol indented_block_body) [238758 246979])
                    ("pcolormesh" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [247029 247033])
                            ("args" variable nil (reparse-symbol function_parameters) [247035 247040])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [247042 247050]))                          
                        :documentation "
        Call signatures::

          pcolormesh(C)
          pcolormesh(X, Y, C)
          pcolormesh(C, **kwargs)

        *C* may be a masked array, but *X* and *Y* may not.  Masked
        array support is implemented via *cmap* and *norm*; in
        contrast, :func:`~matplotlib.pyplot.pcolor` simply does not
        draw quadrilaterals with masked colors or vertices.

        Keyword arguments:

          *cmap*: [ *None* | Colormap ]
            A :class:`matplotlib.colors.Colormap` instance. If *None*, use
            rc settings.

          *norm*: [ *None* | Normalize ]
            A :class:`matplotlib.colors.Normalize` instance is used to
            scale luminance data to 0,1. If *None*, defaults to
            :func:`normalize`.

          *vmin*/*vmax*: [ *None* | scalar ]
            *vmin* and *vmax* are used in conjunction with *norm* to
            normalize luminance data.  If either are *None*, the min
            and max of the color array *C* is used.  If you pass a
            *norm* instance, *vmin* and *vmax* will be ignored.

          *shading*: [ 'flat' | 'faceted' | 'gouraud' ]
            If 'faceted', a black grid is drawn around each rectangle; if
            'flat', edges are not drawn. Default is 'flat', contrary to
            MATLAB.

            This kwarg is deprecated; please use 'edgecolors' instead:
              * shading='flat' -- edgecolors='None'
              * shading='faceted  -- edgecolors='k'

          *edgecolors*: [ *None* | ``'None'`` | color | color sequence]
            If *None*, the rc setting is used by default.

            If ``'None'``, edges will not be visible.

            An mpl color or sequence of colors will set the edge color

          *alpha*: ``0 <= scalar <= 1``  or *None*
            the alpha blending value

        Return value is a :class:`matplotlib.collections.QuadMesh`
        object.

        kwargs can be used to control the
        :class:`matplotlib.collections.QuadMesh` properties:

        %(QuadMesh)s

        .. seealso::

            :func:`~matplotlib.pyplot.pcolor`
                For an explanation of the grid orientation and the
                expansion of 1-D *X* and/or *Y* to 2-D arrays.
        ")
                        (reparse-symbol indented_block_body) [246984 251141])
                    ("pcolorfast" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [251191 251195])
                            ("args" variable nil (reparse-symbol function_parameters) [251197 251202])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [251204 251212]))                          
                        :documentation "
        pseudocolor plot of a 2-D array

        Experimental; this is a version of pcolor that
        does not draw lines, that provides the fastest
        possible rendering with the Agg backend, and that
        can handle any quadrilateral grid.

        Call signatures::

          pcolor(C, **kwargs)
          pcolor(xr, yr, C, **kwargs)
          pcolor(x, y, C, **kwargs)
          pcolor(X, Y, C, **kwargs)

        C is the 2D array of color values corresponding to quadrilateral
        cells. Let (nr, nc) be its shape.  C may be a masked array.

        ``pcolor(C, **kwargs)`` is equivalent to
        ``pcolor([0,nc], [0,nr], C, **kwargs)``

        *xr*, *yr* specify the ranges of *x* and *y* corresponding to the
        rectangular region bounding *C*.  If::

            xr = [x0, x1]

        and::

            yr = [y0,y1]

        then *x* goes from *x0* to *x1* as the second index of *C* goes
        from 0 to *nc*, etc.  (*x0*, *y0*) is the outermost corner of
        cell (0,0), and (*x1*, *y1*) is the outermost corner of cell
        (*nr*-1, *nc*-1).  All cells are rectangles of the same size.
        This is the fastest version.

        *x*, *y* are 1D arrays of length *nc* +1 and *nr* +1, respectively,
        giving the x and y boundaries of the cells.  Hence the cells are
        rectangular but the grid may be nonuniform.  The speed is
        intermediate.  (The grid is checked, and if found to be
        uniform the fast version is used.)

        *X* and *Y* are 2D arrays with shape (*nr* +1, *nc* +1) that specify
        the (x,y) coordinates of the corners of the colored
        quadrilaterals; the quadrilateral for C[i,j] has corners at
        (X[i,j],Y[i,j]), (X[i,j+1],Y[i,j+1]), (X[i+1,j],Y[i+1,j]),
        (X[i+1,j+1],Y[i+1,j+1]).  The cells need not be rectangular.
        This is the most general, but the slowest to render.  It may
        produce faster and more compact output using ps, pdf, and
        svg backends, however.

        Note that the the column index corresponds to the x-coordinate,
        and the row index corresponds to y; for details, see
        the \"Grid Orientation\" section below.

        Optional keyword arguments:

          *cmap*: [ *None* | Colormap ]
            A :class:`matplotlib.colors.Colormap` instance from cm. If *None*,
            use rc settings.

          *norm*: [ *None* | Normalize ]
            A :class:`matplotlib.colors.Normalize` instance is used to scale
            luminance data to 0,1. If *None*, defaults to normalize()

          *vmin*/*vmax*: [ *None* | scalar ]
            *vmin* and *vmax* are used in conjunction with norm to normalize
            luminance data.  If either are *None*, the min and max
            of the color array *C* is used.  If you pass a norm instance,
            *vmin* and *vmax* will be *None*.

          *alpha*: ``0 <= scalar <= 1``  or *None*
            the alpha blending value

        Return value is an image if a regular or rectangular grid
        is specified, and a :class:`~matplotlib.collections.QuadMesh`
        collection in the general quadrilateral case.

        ")
                        (reparse-symbol indented_block_body) [251146 258021])
                    ("contour" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [258038 258042])
                            ("args" variable nil (reparse-symbol function_parameters) [258044 258049])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [258051 258059]))                          )
                        (reparse-symbol indented_block_body) [258026 258195])
                    ("contour" variable nil (reparse-symbol indented_block_body) [258199 258252])
                    ("contourf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [258271 258275])
                            ("args" variable nil (reparse-symbol function_parameters) [258277 258282])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [258284 258292]))                          )
                        (reparse-symbol indented_block_body) [258258 258427])
                    ("contourf" variable nil (reparse-symbol indented_block_body) [258431 258485])
                    ("clabel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [258502 258506])
                            ("CS" variable nil (reparse-symbol function_parameters) [258508 258510])
                            ("args" variable nil (reparse-symbol function_parameters) [258512 258517])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [258519 258527]))                          )
                        (reparse-symbol indented_block_body) [258491 258572])
                    ("clabel" variable nil (reparse-symbol indented_block_body) [258576 258627])
                    ("table" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [258673 258677])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [258679 258687]))                          
                        :documentation "
        Call signature::

          table(cellText=None, cellColours=None,
                cellLoc='right', colWidths=None,
                rowLabels=None, rowColours=None, rowLoc='left',
                colLabels=None, colColours=None, colLoc='center',
                loc='bottom', bbox=None):

        Add a table to the current axes.  Returns a
        :class:`matplotlib.table.Table` instance.  For finer grained
        control over tables, use the :class:`~matplotlib.table.Table`
        class and add it to the axes with
        :meth:`~matplotlib.axes.Axes.add_table`.

        Thanks to John Gill for providing the class and table.

        kwargs control the :class:`~matplotlib.table.Table`
        properties:

        %(Table)s
        ")
                        (reparse-symbol indented_block_body) [258633 259501])
                    ("twinx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [259516 259520]))                          
                        :documentation "
        Call signature::

          ax = twinx()

        create a twin of Axes for generating a plot with a sharex
        x-axis but independent y axis.  The y-axis of self will have
        ticks on left and the returned axes will have ticks on the
        right.

        .. note::
            For those who are 'picking' artists while using twinx, pick
            events are only called for the artists in the top-most axes.
        ")
                        (reparse-symbol indented_block_body) [259506 260290])
                    ("twiny" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [260305 260309]))                          
                        :documentation "
        Call signature::

          ax = twiny()

        create a twin of Axes for generating a plot with a shared
        y-axis but independent x axis.  The x-axis of self will have
        ticks on bottom and the returned axes will have ticks on the
        top.

        .. note::
            For those who are 'picking' artists while using twiny, pick
            events are only called for the artists in the top-most axes.
        ")
                        (reparse-symbol indented_block_body) [260295 261030])
                    ("get_shared_x_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [261057 261061]))                          )
                        (reparse-symbol indented_block_body) [261035 261168])
                    ("get_shared_y_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [261195 261199]))                          )
                        (reparse-symbol indented_block_body) [261173 261306])
                    ("hist" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [261374 261378])
                            ("x" variable nil (reparse-symbol function_parameters) [261380 261381])
                            ("bins" variable nil (reparse-symbol function_parameters) [261383 261387])
                            ("range" variable nil (reparse-symbol function_parameters) [261392 261397])
                            ("normed" variable nil (reparse-symbol function_parameters) [261404 261410])
                            ("weights" variable nil (reparse-symbol function_parameters) [261418 261425])
                            ("cumulative" variable nil (reparse-symbol function_parameters) [261445 261455])
                            ("bottom" variable nil (reparse-symbol function_parameters) [261463 261469])
                            ("histtype" variable nil (reparse-symbol function_parameters) [261476 261484])
                            ("align" variable nil (reparse-symbol function_parameters) [261492 261497])
                            ("orientation" variable nil (reparse-symbol function_parameters) [261518 261529])
                            ("rwidth" variable nil (reparse-symbol function_parameters) [261542 261548])
                            ("log" variable nil (reparse-symbol function_parameters) [261555 261558])
                            ("color" variable nil (reparse-symbol function_parameters) [261579 261584])
                            ("label" variable nil (reparse-symbol function_parameters) [261591 261596])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [261616 261624]))                          
                        :documentation "
        Call signature::

          def hist(x, bins=10, range=None, normed=False, weights=None,
                 cumulative=False, bottom=None, histtype='bar', align='mid',
                 orientation='vertical', rwidth=None, log=False,
                 color=None, label=None,
                 **kwargs)

        Compute and draw the histogram of *x*. The return value is a
        tuple (*n*, *bins*, *patches*) or ([*n0*, *n1*, ...], *bins*,
        [*patches0*, *patches1*,...]) if the input contains multiple
        data.

        Multiple data can be provided via *x* as a list of datasets
        of potentially different length ([*x0*, *x1*, ...]), or as
        a 2-D ndarray in which each column is a dataset.  Note that
        the ndarray form is transposed relative to the list form.

        Masked arrays are not supported at present.

        Keyword arguments:

          *bins*:
            Either an integer number of bins or a sequence giving the
            bins.  If *bins* is an integer, *bins* + 1 bin edges
            will be returned, consistent with :func:`numpy.histogram`
            for numpy version >= 1.3, and with the *new* = True argument
            in earlier versions.
            Unequally spaced bins are supported if *bins* is a sequence.

          *range*:
            The lower and upper range of the bins. Lower and upper outliers
            are ignored. If not provided, *range* is (x.min(), x.max()).
            Range has no effect if *bins* is a sequence.

            If *bins* is a sequence or *range* is specified, autoscaling
            is based on the specified bin range instead of the
            range of x.

          *normed*:
            If *True*, the first element of the return tuple will
            be the counts normalized to form a probability density, i.e.,
            ``n/(len(x)*dbin)``.  In a probability density, the integral of
            the histogram should be 1; you can verify that with a
            trapezoidal integration of the probability density function::

              pdf, bins, patches = ax.hist(...)
              print np.sum(pdf * np.diff(bins))

            .. Note:: Until numpy release 1.5, the underlying numpy
                      histogram function was incorrect with *normed*=*True*
                      if bin sizes were unequal.  MPL inherited that
                      error.  It is now corrected within MPL when using
                      earlier numpy versions

          *weights*:
            An array of weights, of the same shape as *x*.  Each value in
            *x* only contributes its associated weight towards the bin
            count (instead of 1).  If *normed* is True, the weights are
            normalized, so that the integral of the density over the range
            remains 1.

          *cumulative*:
            If *True*, then a histogram is computed where each bin
            gives the counts in that bin plus all bins for smaller values.
            The last bin gives the total number of datapoints.  If *normed*
            is also *True* then the histogram is normalized such that the
            last bin equals 1. If *cumulative* evaluates to less than 0
            (e.g. -1), the direction of accumulation is reversed.  In this
            case, if *normed* is also *True*, then the histogram is normalized
            such that the first bin equals 1.

          *histtype*: [ 'bar' | 'barstacked' | 'step' | 'stepfilled' ]
            The type of histogram to draw.

              - 'bar' is a traditional bar-type histogram.  If multiple data
                are given the bars are aranged side by side.

              - 'barstacked' is a bar-type histogram where multiple
                data are stacked on top of each other.

              - 'step' generates a lineplot that is by default
                unfilled.

              - 'stepfilled' generates a lineplot that is by default
                filled.

          *align*: ['left' | 'mid' | 'right' ]
            Controls how the histogram is plotted.

              - 'left': bars are centered on the left bin edges.

              - 'mid': bars are centered between the bin edges.

              - 'right': bars are centered on the right bin edges.

          *orientation*: [ 'horizontal' | 'vertical' ]
            If 'horizontal', :func:`~matplotlib.pyplot.barh` will be
            used for bar-type histograms and the *bottom* kwarg will be
            the left edges.

          *rwidth*:
            The relative width of the bars as a fraction of the bin
            width.  If *None*, automatically compute the width. Ignored
            if *histtype* = 'step' or 'stepfilled'.

          *log*:
            If *True*, the histogram axis will be set to a log scale.
            If *log* is *True* and *x* is a 1D array, empty bins will
            be filtered out and only the non-empty (*n*, *bins*,
            *patches*) will be returned.

          *color*:
            Color spec or sequence of color specs, one per
            dataset.  Default (*None*) uses the standard line
            color sequence.

          *label*:
            String, or sequence of strings to match multiple
            datasets.  Bar charts yield multiple patches per
            dataset, but only the first gets the label, so
            that the legend command will work as expected::

                ax.hist(10+2*np.random.randn(1000), label='men')
                ax.hist(12+3*np.random.randn(1000), label='women', alpha=0.5)
                ax.legend()

        kwargs are used to update the properties of the
        :class:`~matplotlib.patches.Patch` instances returned by *hist*:

        %(Patch)s

        **Example:**

        .. plot:: mpl_examples/pylab_examples/histogram_demo.py

        ")
                        (reparse-symbol indented_block_body) [261335 277253])
                    ("psd" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [277296 277300])
                            ("x" variable nil (reparse-symbol function_parameters) [277302 277303])
                            ("NFFT" variable nil (reparse-symbol function_parameters) [277305 277309])
                            ("Fs" variable nil (reparse-symbol function_parameters) [277315 277317])
                            ("Fc" variable nil (reparse-symbol function_parameters) [277321 277323])
                            ("detrend" variable nil (reparse-symbol function_parameters) [277327 277334])
                            ("window" variable nil (reparse-symbol function_parameters) [277366 277372])
                            ("noverlap" variable nil (reparse-symbol function_parameters) [277394 277402])
                            ("pad_to" variable nil (reparse-symbol function_parameters) [277406 277412])
                            ("sides" variable nil (reparse-symbol function_parameters) [277431 277436])
                            ("scale_by_freq" variable nil (reparse-symbol function_parameters) [277448 277461])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [277468 277476]))                          
                        :documentation "
        Call signature::

          psd(x, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,
              window=mlab.window_hanning, noverlap=0, pad_to=None,
              sides='default', scale_by_freq=None, **kwargs)

        The power spectral density by Welch's average periodogram
        method.  The vector *x* is divided into *NFFT* length
        segments.  Each segment is detrended by function *detrend* and
        windowed by function *window*.  *noverlap* gives the length of
        the overlap between segments.  The :math:`|\\mathrm{fft}(i)|^2`
        of each segment :math:`i` are averaged to compute *Pxx*, with a
        scaling to correct for power loss due to windowing.  *Fs* is the
        sampling frequency.

        %(PSD)s

          *Fc*: integer
            The center frequency of *x* (defaults to 0), which offsets
            the x extents of the plot to reflect the frequency range used
            when a signal is acquired and then filtered and downsampled to
            baseband.

        Returns the tuple (*Pxx*, *freqs*).

        For plotting, the power is plotted as
        :math:`10\\log_{10}(P_{xx})` for decibels, though *Pxx* itself
        is returned.

        References:
          Bendat & Piersol -- Random Data: Analysis and Measurement
          Procedures, John Wiley & Sons (1986)

        kwargs control the :class:`~matplotlib.lines.Line2D` properties:

        %(Line2D)s

        **Example:**

        .. plot:: mpl_examples/pylab_examples/psd_demo.py
        ")
                        (reparse-symbol indented_block_body) [277258 279875])
                    ("csd" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [279918 279922])
                            ("x" variable nil (reparse-symbol function_parameters) [279924 279925])
                            ("y" variable nil (reparse-symbol function_parameters) [279927 279928])
                            ("NFFT" variable nil (reparse-symbol function_parameters) [279930 279934])
                            ("Fs" variable nil (reparse-symbol function_parameters) [279940 279942])
                            ("Fc" variable nil (reparse-symbol function_parameters) [279946 279948])
                            ("detrend" variable nil (reparse-symbol function_parameters) [279952 279959])
                            ("window" variable nil (reparse-symbol function_parameters) [279991 279997])
                            ("noverlap" variable nil (reparse-symbol function_parameters) [280019 280027])
                            ("pad_to" variable nil (reparse-symbol function_parameters) [280031 280037])
                            ("sides" variable nil (reparse-symbol function_parameters) [280056 280061])
                            ("scale_by_freq" variable nil (reparse-symbol function_parameters) [280073 280086])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [280093 280101]))                          
                        :documentation "
        Call signature::

          csd(x, y, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,
              window=mlab.window_hanning, noverlap=0, pad_to=None,
              sides='default', scale_by_freq=None, **kwargs)

        The cross spectral density :math:`P_{xy}` by Welch's average
        periodogram method.  The vectors *x* and *y* are divided into
        *NFFT* length segments.  Each segment is detrended by function
        *detrend* and windowed by function *window*.  The product of
        the direct FFTs of *x* and *y* are averaged over each segment
        to compute :math:`P_{xy}`, with a scaling to correct for power
        loss due to windowing.

        Returns the tuple (*Pxy*, *freqs*).  *P* is the cross spectrum
        (complex valued), and :math:`10\\log_{10}|P_{xy}|` is
        plotted.

        %(PSD)s

          *Fc*: integer
            The center frequency of *x* (defaults to 0), which offsets
            the x extents of the plot to reflect the frequency range used
            when a signal is acquired and then filtered and downsampled to
            baseband.

        References:
          Bendat & Piersol -- Random Data: Analysis and Measurement
          Procedures, John Wiley & Sons (1986)

        kwargs control the Line2D properties:

        %(Line2D)s

        **Example:**

        .. plot:: mpl_examples/pylab_examples/csd_demo.py

        .. seealso:

            :meth:`psd`
                For a description of the optional parameters.
        ")
                        (reparse-symbol indented_block_body) [279880 282280])
                    ("cohere" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [282326 282330])
                            ("x" variable nil (reparse-symbol function_parameters) [282332 282333])
                            ("y" variable nil (reparse-symbol function_parameters) [282335 282336])
                            ("NFFT" variable nil (reparse-symbol function_parameters) [282338 282342])
                            ("Fs" variable nil (reparse-symbol function_parameters) [282348 282350])
                            ("Fc" variable nil (reparse-symbol function_parameters) [282354 282356])
                            ("detrend" variable nil (reparse-symbol function_parameters) [282360 282367])
                            ("window" variable nil (reparse-symbol function_parameters) [282402 282408])
                            ("noverlap" variable nil (reparse-symbol function_parameters) [282430 282438])
                            ("pad_to" variable nil (reparse-symbol function_parameters) [282442 282448])
                            ("sides" variable nil (reparse-symbol function_parameters) [282470 282475])
                            ("scale_by_freq" variable nil (reparse-symbol function_parameters) [282487 282500])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [282507 282515]))                          
                        :documentation "
        Call signature::

          cohere(x, y, NFFT=256, Fs=2, Fc=0, detrend = mlab.detrend_none,
                 window = mlab.window_hanning, noverlap=0, pad_to=None,
                 sides='default', scale_by_freq=None, **kwargs)

        :meth:`cohere` the coherence between *x* and *y*.  Coherence
        is the normalized cross spectral density:

        .. math::

          C_{xy} = \\\\frac{|P_{xy}|^2}{P_{xx}P_{yy}}

        %(PSD)s

          *Fc*: integer
            The center frequency of *x* (defaults to 0), which offsets
            the x extents of the plot to reflect the frequency range used
            when a signal is acquired and then filtered and downsampled to
            baseband.

        The return value is a tuple (*Cxy*, *f*), where *f* are the
        frequencies of the coherence vector.

        kwargs are applied to the lines.

        References:

          * Bendat & Piersol -- Random Data: Analysis and Measurement
            Procedures, John Wiley & Sons (1986)

        kwargs control the :class:`~matplotlib.lines.Line2D`
        properties of the coherence plot:

        %(Line2D)s

        **Example:**

        .. plot:: mpl_examples/pylab_examples/cohere_demo.py
        ")
                        (reparse-symbol indented_block_body) [282285 284086])
                    ("specgram" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [284134 284138])
                            ("x" variable nil (reparse-symbol function_parameters) [284140 284141])
                            ("NFFT" variable nil (reparse-symbol function_parameters) [284143 284147])
                            ("Fs" variable nil (reparse-symbol function_parameters) [284153 284155])
                            ("Fc" variable nil (reparse-symbol function_parameters) [284159 284161])
                            ("detrend" variable nil (reparse-symbol function_parameters) [284165 284172])
                            ("window" variable nil (reparse-symbol function_parameters) [284209 284215])
                            ("noverlap" variable nil (reparse-symbol function_parameters) [284237 284245])
                            ("cmap" variable nil (reparse-symbol function_parameters) [284268 284272])
                            ("xextent" variable nil (reparse-symbol function_parameters) [284279 284286])
                            ("pad_to" variable nil (reparse-symbol function_parameters) [284293 284299])
                            ("sides" variable nil (reparse-symbol function_parameters) [284306 284311])
                            ("scale_by_freq" variable nil (reparse-symbol function_parameters) [284340 284353])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [284360 284368]))                          
                        :documentation "
        Call signature::

          specgram(x, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,
                   window=mlab.window_hanning, noverlap=128,
                   cmap=None, xextent=None, pad_to=None, sides='default',
                   scale_by_freq=None, **kwargs)

        Compute a spectrogram of data in *x*.  Data are split into
        *NFFT* length segments and the PSD of each section is
        computed.  The windowing function *window* is applied to each
        segment, and the amount of overlap of each segment is
        specified with *noverlap*.

        %(PSD)s

          *Fc*: integer
            The center frequency of *x* (defaults to 0), which offsets
            the y extents of the plot to reflect the frequency range used
            when a signal is acquired and then filtered and downsampled to
            baseband.

          *cmap*:
            A :class:`matplotlib.colors.Colormap` instance; if *None*, use
            default determined by rc

          *xextent*:
            The image extent along the x-axis. xextent = (xmin,xmax)
            The default is (0,max(bins)), where bins is the return
            value from :func:`~matplotlib.mlab.specgram`

          *kwargs*:

            Additional kwargs are passed on to imshow which makes the
            specgram image

          Return value is (*Pxx*, *freqs*, *bins*, *im*):

          - *bins* are the time points the spectrogram is calculated over
          - *freqs* is an array of frequencies
          - *Pxx* is a len(times) x len(freqs) array of power
          - *im* is a :class:`~matplotlib.image.AxesImage` instance

        Note: If *x* is real (i.e. non-complex), only the positive
        spectrum is shown.  If *x* is complex, both positive and
        negative parts of the spectrum are shown.  This can be
        overridden using the *sides* keyword argument.

        **Example:**

        .. plot:: mpl_examples/pylab_examples/specgram_demo.py
        ")
                        (reparse-symbol indented_block_body) [284091 286867])
                    ("spy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [286880 286884])
                            ("Z" variable nil (reparse-symbol function_parameters) [286886 286887])
                            ("precision" variable nil (reparse-symbol function_parameters) [286889 286898])
                            ("marker" variable nil (reparse-symbol function_parameters) [286902 286908])
                            ("markersize" variable nil (reparse-symbol function_parameters) [286915 286925])
                            ("aspect" variable nil (reparse-symbol function_parameters) [286944 286950])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [286961 286969]))                          
                        :documentation "
        Call signature::

          spy(Z, precision=0, marker=None, markersize=None,
              aspect='equal', **kwargs)

        ``spy(Z)`` plots the sparsity pattern of the 2-D array *Z*.

        If *precision* is 0, any non-zero value will be plotted;
        else, values of :math:`|Z| > precision` will be plotted.

        For :class:`scipy.sparse.spmatrix` instances, there is a
        special case: if *precision* is 'present', any value present in
        the array will be plotted, even if it is identically zero.

        The array will be plotted as it would be printed, with
        the first index (row) increasing down and the second
        index (column) increasing to the right.

        By default aspect is 'equal', so that each array element
        occupies a square space; set the aspect kwarg to 'auto'
        to allow the plot to fill the plot box, or to any scalar
        number to specify the aspect ratio of an array element
        directly.

        Two plotting styles are available: image or marker. Both
        are available for full arrays, but only the marker style
        works for :class:`scipy.sparse.spmatrix` instances.

        If *marker* and *markersize* are *None*, an image will be
        returned and any remaining kwargs are passed to
        :func:`~matplotlib.pyplot.imshow`; else, a
        :class:`~matplotlib.lines.Line2D` object will be returned with
        the value of marker determining the marker type, and any
        remaining kwargs passed to the
        :meth:`~matplotlib.axes.Axes.plot` method.

        If *marker* and *markersize* are *None*, useful kwargs include:

        * *cmap*
        * *alpha*

        .. seealso::

            :func:`~matplotlib.pyplot.imshow`
               For image options.

        For controlling colors, e.g. cyan background and red marks,
        use::

          cmap = mcolors.ListedColormap(['c','r'])

        If *marker* or *markersize* is not *None*, useful kwargs include:

        * *marker*
        * *markersize*
        * *color*

        Useful values for *marker* include:

        * 's'  square (default)
        * 'o'  circle
        * '.'  point
        * ','  pixel

        .. seealso::

            :func:`~matplotlib.pyplot.plot`
               For plotting options
        ")
                        (reparse-symbol indented_block_body) [286872 291544])
                    ("matshow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [291561 291565])
                            ("Z" variable nil (reparse-symbol function_parameters) [291567 291568])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [291570 291578]))                          
                        :documentation "
        Plot a matrix or array as an image.

        The matrix will be shown the way it would be printed,
        with the first row at the top.  Row and column numbering
        is zero-based.

        Argument:
            *Z*   anything that can be interpreted as a 2-D array

        kwargs all are passed to :meth:`~matplotlib.axes.Axes.imshow`.
        :meth:`matshow` sets defaults for *origin*,
        *interpolation*, and *aspect*; if you want row zero to
        be at the bottom instead of the top, you can set the *origin*
        kwarg to \"lower\".

        Returns: an :class:`matplotlib.image.AxesImage` instance.
        ")
                        (reparse-symbol indented_block_body) [291549 293022])
                    ("get_default_bbox_extra_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [293062 293066]))                          )
                        (reparse-symbol indented_block_body) [293027 293252])
                    ("get_tightbbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [293276 293280])
                            ("renderer" variable nil (reparse-symbol function_parameters) [293282 293290])
                            ("call_axes_locator" variable nil (reparse-symbol function_parameters) [293292 293309]))                          
                        :documentation "
        Return the tight bounding box of the axes.
        The dimension of the Bbox in canvas coordinate.

        If *call_axes_locator* is *False*, it does not call the
        _axes_locator attribute, which is necessary to get the correct
        bounding box. ``call_axes_locator==False`` can be used if the
        caller is only intereted in the relative size of the tightbbox
        compared to the axes bbox.
        ")
                        (reparse-symbol indented_block_body) [293258 294519])
                    ("minorticks_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [294542 294546]))                          )
                        (reparse-symbol indented_block_body) [294524 294870])
                    ("minorticks_off" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [294894 294898]))                          
                        :documentation "Remove minor ticks from the axes.")
                        (reparse-symbol indented_block_body) [294875 295069])
                    ("tricontour" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [295089 295093])
                            ("args" variable nil (reparse-symbol function_parameters) [295095 295100])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [295102 295110]))                          )
                        (reparse-symbol indented_block_body) [295074 295167])
                    ("tricontour" variable nil (reparse-symbol indented_block_body) [295171 295225])
                    ("tricontourf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [295247 295251])
                            ("args" variable nil (reparse-symbol function_parameters) [295253 295258])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [295260 295268]))                          )
                        (reparse-symbol indented_block_body) [295231 295326])
                    ("tricontourf" variable nil (reparse-symbol indented_block_body) [295330 295385])
                    ("tripcolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [295405 295409])
                            ("args" variable nil (reparse-symbol function_parameters) [295411 295416])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [295418 295426]))                          )
                        (reparse-symbol indented_block_body) [295391 295482])
                    ("tripcolor" variable nil (reparse-symbol indented_block_body) [295486 295528])
                    ("triplot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [295546 295550])
                            ("args" variable nil (reparse-symbol function_parameters) [295552 295557])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [295559 295567]))                          )
                        (reparse-symbol indented_block_body) [295534 295614])
                    ("triplot" variable nil (reparse-symbol indented_block_body) [295618 295656]))                  
                :type "class")
                nil [11170 295657])
            ("matplotlib.gridspec" include nil nil [295659 295712])
            ("SubplotBase" type
               (:documentation "
    Base class for subplots, which are :class:`Axes` instances with
    additional methods to facilitate generating and manipulating a set
    of :class:`Axes` within a figure.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *fig* is a :class:`matplotlib.figure.Figure` instance.

        *args* is the tuple (*numRows*, *numCols*, *plotNum*), where
        the array of subplots in the figure has dimensions *numRows*,
        *numCols*, and where *plotNum* is the number of the subplot
        being created.  *plotNum* starts at 1 in the upper left
        corner and increases to the right.


        If *numRows* <= *numCols* <= *plotNum* < 10, *args* can be the
        decimal integer *numRows* * 100 + *numCols* * 10 + *plotNum*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [295981 296517])
                            ("self" variable nil (reparse-symbol indented_block_body) [296527 296544])
                            ("if" code nil (reparse-symbol indented_block_body) [296554 297632])
                            ("self" code nil (reparse-symbol indented_block_body) [297641 297661])
                            ("self" code nil (reparse-symbol indented_block_body) [297729 297788]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [295944 295948])
                            ("fig" variable nil (reparse-symbol function_parameters) [295950 295953])
                            ("args" variable nil (reparse-symbol function_parameters) [295955 295960])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [295962 295970]))                          
                        :documentation "
        *fig* is a :class:`matplotlib.figure.Figure` instance.

        *args* is the tuple (*numRows*, *numCols*, *plotNum*), where
        the array of subplots in the figure has dimensions *numRows*,
        *numCols*, and where *plotNum* is the number of the subplot
        being created.  *plotNum* starts at 1 in the upper left
        corner and increases to the right.


        If *numRows* <= *numCols* <= *plotNum* < 10, *args* can be the
        decimal integer *numRows* * 100 + *numCols* * 10 + *plotNum*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [295931 297789])
                    ("get_geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [297813 297817]))                          
                        :documentation "get the subplot geometry, eg 2,2,3")
                        (reparse-symbol indented_block_body) [297796 297994])
                    ("change_geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [298079 298083])
                            ("numrows" variable nil (reparse-symbol function_parameters) [298085 298092])
                            ("numcols" variable nil (reparse-symbol function_parameters) [298094 298101])
                            ("num" variable nil (reparse-symbol function_parameters) [298103 298106]))                          
                        :documentation "change subplot geometry, eg. from 1,1,1 to 2,2,3")
                        (reparse-symbol indented_block_body) [298059 298302])
                    ("get_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [298327 298331]))                          
                        :documentation "get the SubplotSpec instance associated with the subplot")
                        (reparse-symbol indented_block_body) [298307 298438])
                    ("set_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [298463 298467])
                            ("subplotspec" variable nil (reparse-symbol function_parameters) [298469 298480]))                          
                        :documentation "set the SubplotSpec instance associated with the subplot")
                        (reparse-symbol indented_block_body) [298443 298594])
                    ("update_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [298617 298621]))                          
                        :documentation "update the subplot position from fig.subplotpars")
                        (reparse-symbol indented_block_body) [298599 298910])
                    ("is_first_col" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [298933 298937]))                          )
                        (reparse-symbol indented_block_body) [298916 298970])
                    ("is_first_row" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [298992 298996]))                          )
                        (reparse-symbol indented_block_body) [298975 299029])
                    ("is_last_row" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [299050 299054]))                          )
                        (reparse-symbol indented_block_body) [299034 299100])
                    ("is_last_col" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [299122 299126]))                          )
                        (reparse-symbol indented_block_body) [299106 299172])
                    ("label_outer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [299253 299257]))                          
                        :documentation "
        set the visible property on ticklabels so xticklabels are
        visible only if the subplot is in the last row and yticklabels
        are visible only if the subplot is in the first column
        ")
                        (reparse-symbol indented_block_body) [299237 299730]))                  
                :type "class")
                nil [295714 299730])
            ("_subplot_classes" variable nil nil [299733 299754])
            ("subplot_class_factory" function (:arguments 
              ( ("axes_class" variable nil (reparse-symbol function_parameters) [299781 299791]))              ) nil [299755 300517])
            ("Subplot" variable nil nil [300564 300597])
            ("docstring" code nil nil [300599 300649])
            ("docstring" code nil nil [300650 300703])
            ("\"\"\"
# this is some discarded code I was using to find the minimum positive
# data point for some log scaling fixes.  I realized there was a
# cleaner way to do it, but am keeping this around as an example for
# how to get the data out of the axes.  Might want to make something
# like this a method one day, or better yet make get_verts an Artist
# method

            minx, maxx = self.get_xlim()
            if minx<=0 or maxx<=0:
                # find the min pos value in the data
                xs = []
                for line in self.lines:
                    xs.extend(line.get_xdata(orig=False))
                for patch in self.patches:
                    xs.extend([x for x,y in patch.get_verts()])
                for collection in self.collections:
                    xs.extend([x for x,y in collection.get_verts()])
                posx = [x for x in xs if x>0]
                if len(posx):

                    minx = min(posx)
                    maxx = max(posx)
                    # warning, probably breaks inverted axis
                    self.set_xlim((0.1*minx, maxx))

\"\"\"" code nil nil [300705 301809]))          
      :file "axes.py"
      :pointmax 301810
      :fsize 301809
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("textwrap" include nil nil [1 16])
            ("numpy" include nil nil [17 35])
            ("numpy" include nil nil [36 56])
            ("MaskedArray" variable nil nil [57 85])
            ("cbook" include nil nil [87 111])
            ("ticker" include nil nil [112 194])
            ("ticker" include nil nil [195 287])
            ("ticker" include nil nil [288 316])
            ("transforms" include nil nil [317 368])
            ("matplotlib" include nil nil [369 401])
            ("ScaleBase" type
               (:documentation "
    The base class for all scales.

    Scales are separable transformations, working on a single dimension.

    Any subclasses will want to override:

      - :attr:`name`
      - :meth:`get_transform`

    And optionally:
      - :meth:`set_default_locators_and_formatters`
      - :meth:`limit_range_for_scale`
    "
                :superclasses ("object")
                :members 
                  ( ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [781 785]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` object
        associated with this scale.
        ")
                        (reparse-symbol indented_block_body) [763 950])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [995 999])
                            ("axis" variable nil (reparse-symbol function_parameters) [1001 1005]))                          
                        :documentation "
        Set the :class:`~matplotlib.ticker.Locator` and
        :class:`~matplotlib.ticker.Formatter` objects on the given
        axis to match this scale.
        ")
                        (reparse-symbol indented_block_body) [955 1223])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1254 1258])
                            ("vmin" variable nil (reparse-symbol function_parameters) [1260 1264])
                            ("vmax" variable nil (reparse-symbol function_parameters) [1266 1270])
                            ("minpos" variable nil (reparse-symbol function_parameters) [1272 1278]))                          
                        :documentation "
        Returns the range *vmin*, *vmax*, possibly limited to the
        domain supported by this scale.

        *minpos* should be the minimum positive value in the data.
         This is used by log scales to determine a minimum value.
        ")
                        (reparse-symbol indented_block_body) [1228 1571]))                  
                :type "class")
                nil [403 1571])
            ("LinearScale" type
               (:documentation "
    The default linear scale.
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [1653 1668])
                    ("__init__" function
                       (:suite 
                          ( ("pass" code nil (reparse-symbol indented_block_body) [1718 1722]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1687 1691])
                            ("axis" variable nil (reparse-symbol function_parameters) [1693 1697])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1699 1707]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1674 1723])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1768 1772])
                            ("axis" variable nil (reparse-symbol function_parameters) [1774 1778]))                          
                        :documentation "
        Set the locators and formatters to reasonable defaults for
        linear scaling.
        ")
                        (reparse-symbol indented_block_body) [1728 2090])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2113 2117]))                          
                        :documentation "
        The transform for linear scaling is just the
        :class:`~matplotlib.transforms.IdentityTransform`.
        ")
                        (reparse-symbol indented_block_body) [2095 2291]))                  
                :type "class")
                nil [1572 2291])
            ("_mask_non_positives" function
               (:documentation "
    Return a Numpy masked array where all non-positive values are
    masked.  If there are no non-positive values, the original array
    is returned.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [2317 2318]))                  )
                nil [2293 2585])
            ("_clip_non_positives" function (:arguments 
              ( ("a" variable nil (reparse-symbol function_parameters) [2610 2611]))              ) nil [2586 2652])
            ("LogScale" type
               (:documentation "
    A standard logarithmic scale.  Care is taken so non-positive
    values are not plotted.

    For computational efficiency (to push as much as possible to Numpy
    C code in the common cases), this scale provides different
    transforms depending on the base of the logarithm:

       - base 10 (:class:`Log10Transform`)
       - base 2 (:class:`Log2Transform`)
       - base e (:class:`NaturalLogTransform`)
       - arbitrary base (:class:`LogTransform`)
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [3164 3176])
                    ("LogTransformBase" type
                       (:superclasses ("Transform")
                        :members 
                          ( ("input_dims" variable nil (reparse-symbol indented_block_body) [3225 3239])
                            ("output_dims" variable nil (reparse-symbol indented_block_body) [3248 3263])
                            ("is_separable" variable nil (reparse-symbol indented_block_body) [3272 3291])
                            ("__init__" function
                               (:suite 
                                  ( ("Transform" code nil (reparse-symbol indented_block_body) [3341 3365])
                                    ("if" code nil (reparse-symbol indented_block_body) [3378 3533]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [3314 3318])
                                    ("nonpos" variable nil (reparse-symbol function_parameters) [3320 3326]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [3301 3533]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [3182 3533])
                    ("Log10Transform" type
                       (:superclasses ("LogTransformBase")
                        :members 
                          ( ("base" variable nil (reparse-symbol indented_block_body) [3587 3598])
                            ("transform" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [3622 3626])
                                    ("a" variable nil (reparse-symbol function_parameters) [3628 3629]))                                  )
                                (reparse-symbol indented_block_body) [3608 3787])
                            ("inverted" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [3809 3813]))                                  )
                                (reparse-symbol indented_block_body) [3796 3869]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [3539 3869])
                    ("InvertedLog10Transform" type
                       (:superclasses ("Transform")
                        :members 
                          ( ("input_dims" variable nil (reparse-symbol indented_block_body) [3923 3937])
                            ("output_dims" variable nil (reparse-symbol indented_block_body) [3946 3961])
                            ("is_separable" variable nil (reparse-symbol indented_block_body) [3970 3989])
                            ("base" variable nil (reparse-symbol indented_block_body) [3998 4009])
                            ("transform" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4033 4037])
                                    ("a" variable nil (reparse-symbol function_parameters) [4039 4040]))                                  )
                                (reparse-symbol indented_block_body) [4019 4087])
                            ("inverted" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4109 4113]))                                  )
                                (reparse-symbol indented_block_body) [4096 4161]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [3874 4161])
                    ("Log2Transform" type
                       (:superclasses ("LogTransformBase")
                        :members 
                          ( ("base" variable nil (reparse-symbol indented_block_body) [4213 4223])
                            ("transform" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4247 4251])
                                    ("a" variable nil (reparse-symbol function_parameters) [4253 4254]))                                  )
                                (reparse-symbol indented_block_body) [4233 4420])
                            ("inverted" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4442 4446]))                                  )
                                (reparse-symbol indented_block_body) [4429 4501]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [4166 4501])
                    ("InvertedLog2Transform" type
                       (:superclasses ("Transform")
                        :members 
                          ( ("input_dims" variable nil (reparse-symbol indented_block_body) [4554 4568])
                            ("output_dims" variable nil (reparse-symbol indented_block_body) [4577 4592])
                            ("is_separable" variable nil (reparse-symbol indented_block_body) [4601 4620])
                            ("base" variable nil (reparse-symbol indented_block_body) [4629 4639])
                            ("transform" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4663 4667])
                                    ("a" variable nil (reparse-symbol function_parameters) [4669 4670]))                                  )
                                (reparse-symbol indented_block_body) [4649 4715])
                            ("inverted" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4737 4741]))                                  )
                                (reparse-symbol indented_block_body) [4724 4788]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [4506 4788])
                    ("NaturalLogTransform" type
                       (:superclasses ("LogTransformBase")
                        :members 
                          ( ("base" variable nil (reparse-symbol indented_block_body) [4846 4857])
                            ("transform" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4881 4885])
                                    ("a" variable nil (reparse-symbol function_parameters) [4887 4888]))                                  )
                                (reparse-symbol indented_block_body) [4867 5042])
                            ("inverted" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [5064 5068]))                                  )
                                (reparse-symbol indented_block_body) [5051 5129]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [4793 5129])
                    ("InvertedNaturalLogTransform" type
                       (:superclasses ("Transform")
                        :members 
                          ( ("input_dims" variable nil (reparse-symbol indented_block_body) [5188 5202])
                            ("output_dims" variable nil (reparse-symbol indented_block_body) [5211 5226])
                            ("is_separable" variable nil (reparse-symbol indented_block_body) [5235 5254])
                            ("base" variable nil (reparse-symbol indented_block_body) [5263 5274])
                            ("transform" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [5298 5302])
                                    ("a" variable nil (reparse-symbol function_parameters) [5304 5305]))                                  )
                                (reparse-symbol indented_block_body) [5284 5352])
                            ("inverted" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [5374 5378]))                                  )
                                (reparse-symbol indented_block_body) [5361 5431]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [5134 5431])
                    ("LogTransform" type
                       (:superclasses ("Transform")
                        :members 
                          ( ("input_dims" variable nil (reparse-symbol indented_block_body) [5475 5489])
                            ("output_dims" variable nil (reparse-symbol indented_block_body) [5498 5513])
                            ("is_separable" variable nil (reparse-symbol indented_block_body) [5522 5541])
                            ("__init__" function
                               (:suite 
                                  ( ("Transform" code nil (reparse-symbol indented_block_body) [5597 5621])
                                    ("self" variable nil (reparse-symbol indented_block_body) [5634 5650])
                                    ("if" code nil (reparse-symbol indented_block_body) [5663 5818]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [5564 5568])
                                    ("base" variable nil (reparse-symbol function_parameters) [5570 5574])
                                    ("nonpos" variable nil (reparse-symbol function_parameters) [5576 5582]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [5551 5818])
                            ("transform" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [5841 5845])
                                    ("a" variable nil (reparse-symbol function_parameters) [5847 5848]))                                  )
                                (reparse-symbol indented_block_body) [5827 6047])
                            ("inverted" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [6069 6073]))                                  )
                                (reparse-symbol indented_block_body) [6056 6136]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [5436 6136])
                    ("InvertedLogTransform" type
                       (:superclasses ("Transform")
                        :members 
                          ( ("input_dims" variable nil (reparse-symbol indented_block_body) [6188 6202])
                            ("output_dims" variable nil (reparse-symbol indented_block_body) [6211 6226])
                            ("is_separable" variable nil (reparse-symbol indented_block_body) [6235 6254])
                            ("__init__" function
                               (:suite 
                                  ( ("Transform" code nil (reparse-symbol indented_block_body) [6302 6326])
                                    ("self" variable nil (reparse-symbol indented_block_body) [6339 6355]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [6277 6281])
                                    ("base" variable nil (reparse-symbol function_parameters) [6283 6287]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [6264 6356])
                            ("transform" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [6379 6383])
                                    ("a" variable nil (reparse-symbol function_parameters) [6385 6386]))                                  )
                                (reparse-symbol indented_block_body) [6365 6443])
                            ("inverted" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [6465 6469]))                                  )
                                (reparse-symbol indented_block_body) [6452 6524]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [6141 6524])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *basex*/*basey*:
           The base of the logarithm

        *nonposx*/*nonposy*: ['mask' | 'clip' ]
          non-positive values in *x* or *y* can be masked as
          invalid, or clipped to a very small positive number

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.
        \"\"\"" code nil (reparse-symbol indented_block_body) [6574 7126])
                            ("if" code nil (reparse-symbol indented_block_body) [7135 7457])
                            ("if" code nil (reparse-symbol indented_block_body) [7466 7581])
                            ("if" code nil (reparse-symbol indented_block_body) [7590 7914])
                            ("self" variable nil (reparse-symbol indented_block_body) [7923 7939])
                            ("self" variable nil (reparse-symbol indented_block_body) [7948 7964]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6543 6547])
                            ("axis" variable nil (reparse-symbol function_parameters) [6549 6553])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6555 6563]))                          
                        :documentation "
        *basex*/*basey*:
           The base of the logarithm

        *nonposx*/*nonposy*: ['mask' | 'clip' ]
          non-positive values in *x* or *y* can be masked as
          invalid, or clipped to a very small positive number

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6530 7965])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8010 8014])
                            ("axis" variable nil (reparse-symbol function_parameters) [8016 8020]))                          
                        :documentation "
        Set the locators and formatters to specialized versions for
        log scaling.
        ")
                        (reparse-symbol indented_block_body) [7970 8371])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8394 8398]))                          
                        :documentation "
        Return a :class:`~matplotlib.transforms.Transform` instance
        appropriate for the given logarithm base.
        ")
                        (reparse-symbol indented_block_body) [8376 8574])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8605 8609])
                            ("vmin" variable nil (reparse-symbol function_parameters) [8611 8615])
                            ("vmax" variable nil (reparse-symbol function_parameters) [8617 8621])
                            ("minpos" variable nil (reparse-symbol function_parameters) [8623 8629]))                          
                        :documentation "
        Limit the domain to positive values.
        ")
                        (reparse-symbol indented_block_body) [8579 8797]))                  
                :type "class")
                nil [2653 8797])
            ("SymmetricalLogScale" type
               (:documentation "
    The symmetrical logarithmic scale is logarithmic in both the
    positive and negative directions from the origin.

    Since the values close to zero tend toward infinity, there is a
    need to have a range around zero that is linear.  The parameter
    *linthresh* allows the user to specify the size of this range
    (-*linthresh*, *linthresh*).
    "
                :superclasses ("ScaleBase")
                :members 
                  ( ("name" variable nil (reparse-symbol indented_block_body) [9212 9227])
                    ("SymmetricalLogTransform" type
                       (:superclasses ("Transform")
                        :members 
                          ( ("input_dims" variable nil (reparse-symbol indented_block_body) [9287 9301])
                            ("output_dims" variable nil (reparse-symbol indented_block_body) [9314 9329])
                            ("is_separable" variable nil (reparse-symbol indented_block_body) [9342 9361])
                            ("__init__" function
                               (:suite 
                                  ( ("Transform" code nil (reparse-symbol indented_block_body) [9428 9452])
                                    ("self" variable nil (reparse-symbol indented_block_body) [9469 9485])
                                    ("self" variable nil (reparse-symbol indented_block_body) [9502 9528])
                                    ("self" variable nil (reparse-symbol indented_block_body) [9545 9574])
                                    ("self" code nil (reparse-symbol indented_block_body) [9591 9657]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [9388 9392])
                                    ("base" variable nil (reparse-symbol function_parameters) [9394 9398])
                                    ("linthresh" variable nil (reparse-symbol function_parameters) [9400 9409]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [9375 9658])
                            ("transform" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [9685 9689])
                                    ("a" variable nil (reparse-symbol function_parameters) [9691 9692]))                                  )
                                (reparse-symbol indented_block_body) [9671 10059])
                            ("inverted" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [10085 10089]))                                  )
                                (reparse-symbol indented_block_body) [10072 10194]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [9233 10194])
                    ("InvertedSymmetricalLogTransform" type
                       (:superclasses ("Transform")
                        :members 
                          ( ("input_dims" variable nil (reparse-symbol indented_block_body) [10257 10271])
                            ("output_dims" variable nil (reparse-symbol indented_block_body) [10280 10295])
                            ("is_separable" variable nil (reparse-symbol indented_block_body) [10304 10323])
                            ("__init__" function
                               (:suite 
                                  ( ("Transform" code nil (reparse-symbol indented_block_body) [10382 10406])
                                    ("self" variable nil (reparse-symbol indented_block_body) [10419 10435])
                                    ("self" variable nil (reparse-symbol indented_block_body) [10448 10474])
                                    ("self" variable nil (reparse-symbol indented_block_body) [10487 10516])
                                    ("self" code nil (reparse-symbol indented_block_body) [10529 10585])
                                    ("self" code nil (reparse-symbol indented_block_body) [10598 10664]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [10346 10350])
                                    ("base" variable nil (reparse-symbol function_parameters) [10352 10356])
                                    ("linthresh" variable nil (reparse-symbol function_parameters) [10358 10367]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [10333 10665])
                            ("transform" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [10688 10692])
                                    ("a" variable nil (reparse-symbol function_parameters) [10694 10695]))                                  )
                                (reparse-symbol indented_block_body) [10674 11031]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [10199 11031])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *basex*/*basey*:
           The base of the logarithm

        *linthreshx*/*linthreshy*:
          The range (-*x*, *x*) within which the plot is linear (to
          avoid having the plot go to infinity around zero).

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.
        \"\"\"" code nil (reparse-symbol indented_block_body) [11080 11625])
                            ("if" code nil (reparse-symbol indented_block_body) [11634 11962])
                            ("self" variable nil (reparse-symbol indented_block_body) [11971 12034])
                            ("assert" code nil (reparse-symbol indented_block_body) [12044 12061])
                            ("assert" code nil (reparse-symbol indented_block_body) [12070 12092])
                            ("self" variable nil (reparse-symbol indented_block_body) [12102 12118])
                            ("self" variable nil (reparse-symbol indented_block_body) [12127 12153])
                            ("self" variable nil (reparse-symbol indented_block_body) [12162 12178]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11049 11053])
                            ("axis" variable nil (reparse-symbol function_parameters) [11055 11059])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11061 11069]))                          
                        :documentation "
        *basex*/*basey*:
           The base of the logarithm

        *linthreshx*/*linthreshy*:
          The range (-*x*, *x*) within which the plot is linear (to
          avoid having the plot go to infinity around zero).

        *subsx*/*subsy*:
           Where to place the subticks between each major tick.
           Should be a sequence of integers.  For example, in a log10
           scale: ``[2, 3, 4, 5, 6, 7, 8, 9]``

           will place 8 logarithmically spaced minor ticks between
           each major tick.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11036 12179])
                    ("set_default_locators_and_formatters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12224 12228])
                            ("axis" variable nil (reparse-symbol function_parameters) [12230 12234]))                          
                        :documentation "
        Set the locators and formatters to specialized versions for
        symmetrical log scaling.
        ")
                        (reparse-symbol indented_block_body) [12184 12641])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12664 12668]))                          
                        :documentation "
        Return a :class:`SymmetricalLogTransform` instance.
        ")
                        (reparse-symbol indented_block_body) [12646 12786]))                  
                :type "class")
                nil [8799 12786])
            ("_scale_mapping" variable nil nil [12789 12934])
            ("get_scale_names" function nil nil [12935 13026])
            ("scale_factory" function
               (:documentation "
    Return a scale class by name.

    ACCEPTS: [ %(names)s ]
    "
                :arguments 
                  ( ("scale" variable nil (reparse-symbol function_parameters) [13045 13050])
                    ("axis" variable nil (reparse-symbol function_parameters) [13052 13056])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [13058 13066]))                  )
                nil [13027 13367])
            ("scale_factory" code nil nil [13367 13469])
            ("register_scale" function
               (:documentation "
    Register a new kind of scale.

    *scale_class* must be a subclass of :class:`ScaleBase`.
    "
                :arguments 
                  ( ("scale_class" variable nil (reparse-symbol function_parameters) [13490 13501]))                  )
                nil [13471 13666])
            ("get_scale_docs" function (:documentation "
    Helper function for generating docstrings related to scales.
    ") nil [13667 14179])
            ("docstring" code nil nil [14180 14316]))          
      :file "scale.py"
      :pointmax 14317
      :fsize 14316
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module provides a large set of colormaps, functions for
registering new colormaps and for getting a colormap by name,
and a mixin class for adding color mapping functionality.

\"\"\"" code nil nil [1 190])
            ("os" include nil nil [192 201])
            ("numpy" include nil nil [203 221])
            ("numpy" include nil nil [222 242])
            ("matplotlib" include nil nil [243 267])
            ("matplotlib.colors" include nil nil [268 302])
            ("matplotlib.cbook" include nil nil [303 335])
            ("matplotlib._cm" include nil nil [336 368])
            ("matplotlib._cm" include nil nil [369 405])
            ("cmap_d" variable nil nil [407 422])
            ("_reverser" function (:arguments 
              ( ("f" variable nil (reparse-symbol function_parameters) [521 522]))              ) nil [507 590])
            ("revcmap" function
               (:documentation "Can only handle specification *data* in dictionary format."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [603 607]))                  )
                nil [591 1221])
            ("_reverse_cmap_spec" function
               (:documentation "Reverses cmap specification *spec*, can handle both dict and tuple
    type specs."
                :arguments 
                  ( ("spec" variable nil (reparse-symbol function_parameters) [1245 1249]))                  )
                nil [1222 1591])
            ("_generate_cmap" function
               (:documentation "Generates the requested cmap from it's name *name*.  The lut size is
    *lutsize*."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1611 1615])
                    ("lutsize" variable nil (reparse-symbol function_parameters) [1617 1624]))                  )
                nil [1592 1958])
            ("LUTSIZE" variable nil nil [1959 1994])
            ("_cmapnames" variable nil nil [1996 2021])
            ("for" code nil nil [2118 2261])
            ("for" code nil nil [2392 2479])
            ("locals" code nil nil [2480 2503])
            ("register_cmap" function
               (:documentation "
    Add a colormap to the set recognized by :func:`get_cmap`.

    It can be used in two ways::

        register_cmap(name='swirly', cmap=swirly_cmap)

        register_cmap(name='choppy', data=choppydata, lut=128)

    In the first case, *cmap* must be a :class:`colors.Colormap`
    instance.  The *name* is optional; if absent, the name will
    be the :attr:`name` attribute of the *cmap*.

    In the second case, the three arguments are passed to
    the :class:`colors.LinearSegmentedColormap` initializer,
    and the resulting colormap is registered.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [2556 2560])
                    ("cmap" variable nil (reparse-symbol function_parameters) [2567 2571])
                    ("data" variable nil (reparse-symbol function_parameters) [2578 2582])
                    ("lut" variable nil (reparse-symbol function_parameters) [2589 2592]))                  )
                nil [2538 3728])
            ("get_cmap" function
               (:documentation "
    Get a colormap instance, defaulting to rc values if *name* is None.

    Colormaps added with :func:`register_cmap` take precedence over
    builtin colormaps.

    If *name* is a :class:`colors.Colormap` instance, it will be
    returned.

    If *lut* is not None it must be an integer giving the number of
    entries desired in the lookup table, and *name* must be a
    standard mpl colormap name with a corresponding data dictionary
    in *datad*.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3742 3746])
                    ("lut" variable nil (reparse-symbol function_parameters) [3753 3756]))                  )
                nil [3729 4601])
            ("ScalarMappable" type
               (:documentation "
    This is a mixin class to support scalar -> RGBA mapping.  Handles
    normalization and colormapping
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *norm* is an instance of :class:`colors.Normalize` or one of
        its subclasses, used to map luminance to 0-1. *cmap* is a
        :mod:`cm` colormap instance, for example :data:`cm.jet`
        \"\"\"" code nil (reparse-symbol indented_block_body) [4800 5014])
                            ("self" variable nil (reparse-symbol indented_block_body) [5024 5067])
                            ("if" code nil (reparse-symbol indented_block_body) [5077 5112])
                            ("if" code nil (reparse-symbol indented_block_body) [5120 5163])
                            ("self" variable nil (reparse-symbol indented_block_body) [5172 5186])
                            ("self" variable nil (reparse-symbol indented_block_body) [5195 5211])
                            ("self" variable nil (reparse-symbol indented_block_body) [5220 5246])
                            ("self" variable nil (reparse-symbol indented_block_body) [5255 5275])
                            ("self" variable nil (reparse-symbol indented_block_body) [5284 5318]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4763 4767])
                            ("norm" variable nil (reparse-symbol function_parameters) [4769 4773])
                            ("cmap" variable nil (reparse-symbol function_parameters) [4780 4784]))                          
                        :documentation "
        *norm* is an instance of :class:`colors.Normalize` or one of
        its subclasses, used to map luminance to 0-1. *cmap* is a
        :mod:`cm` colormap instance, for example :data:`cm.jet`
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4750 5319])
                    ("set_colorbar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5341 5345])
                            ("im" variable nil (reparse-symbol function_parameters) [5347 5349])
                            ("ax" variable nil (reparse-symbol function_parameters) [5351 5353]))                          )
                        (reparse-symbol indented_block_body) [5324 5454])
                    ("to_rgba" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5471 5475])
                            ("x" variable nil (reparse-symbol function_parameters) [5477 5478])
                            ("alpha" variable nil (reparse-symbol function_parameters) [5480 5485])
                            ("bytes" variable nil (reparse-symbol function_parameters) [5492 5497]))                          )
                        (reparse-symbol indented_block_body) [5459 6674])
                    ("set_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6693 6697])
                            ("A" variable nil (reparse-symbol function_parameters) [6699 6700]))                          )
                        (reparse-symbol indented_block_body) [6679 6815])
                    ("get_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6834 6838]))                          )
                        (reparse-symbol indented_block_body) [6820 6891])
                    ("get_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6909 6913]))                          )
                        (reparse-symbol indented_block_body) [6896 6971])
                    ("get_clim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6989 6993]))                          )
                        (reparse-symbol indented_block_body) [6976 7110])
                    ("set_clim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7128 7132])
                            ("vmin" variable nil (reparse-symbol function_parameters) [7134 7138])
                            ("vmax" variable nil (reparse-symbol function_parameters) [7145 7149]))                          
                        :documentation "
        set the norm limits for image scaling; if *vmin* is a length2
        sequence, interpret it as ``(vmin, vmax)`` which is used to
        support setp

        ACCEPTS: a length 2 sequence of floats
        ")
                        (reparse-symbol indented_block_body) [7115 7666])
                    ("set_cmap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7684 7688])
                            ("cmap" variable nil (reparse-symbol function_parameters) [7690 7694]))                          
                        :documentation "
        set the colormap for luminance data

        ACCEPTS: a colormap or registered colormap name
        ")
                        (reparse-symbol indented_block_body) [7671 7900])
                    ("set_norm" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7918 7922])
                            ("norm" variable nil (reparse-symbol function_parameters) [7924 7928]))                          )
                        (reparse-symbol indented_block_body) [7905 8071])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8090 8094]))                          
                        :documentation "
        Autoscale the scalar limits on the norm instance using the
        current array
        ")
                        (reparse-symbol indented_block_body) [8076 8367])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8391 8395]))                          
                        :documentation "
        Autoscale the scalar limits on the norm instance using the
        current array, changing only limits that are None
        ")
                        (reparse-symbol indented_block_body) [8372 8709])
                    ("add_checker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8731 8735])
                            ("checker" variable nil (reparse-symbol function_parameters) [8737 8744]))                          
                        :documentation "
        Add an entry to a dictionary of boolean flags
        that are set to True when the mappable is changed.
        ")
                        (reparse-symbol indented_block_body) [8715 8926])
                    ("check_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8948 8952])
                            ("checker" variable nil (reparse-symbol function_parameters) [8954 8961]))                          
                        :documentation "
        If mappable has changed since the last check,
        return True; else return False
        ")
                        (reparse-symbol indented_block_body) [8931 9210])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9227 9231]))                          
                        :documentation "
        Call this whenever the mappable is changed to notify all the
        callbackSM listeners to the 'changed' signal
        ")
                        (reparse-symbol indented_block_body) [9215 9509]))                  
                :type "class")
                nil [4602 9509]))          
      :file "cm.py"
      :pointmax 9509
      :fsize 9508
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for converting numbers or color arguments to *RGB* or *RGBA*

*RGB* and *RGBA* are sequences of, respectively, 3 or 4 floats in the
range 0-1.

This module includes functions and classes for color specification
conversions, and for mapping numbers to colors in a 1-D array of
colors called a colormap. Colormapping typically involves two steps:
a data array is first mapped onto the range 0-1 using an instance
of :class:`Normalize` or of a subclass; then this number in the 0-1
range is mapped to a color using an instance of a subclass of
:class:`Colormap`.  Two are provided here:
:class:`LinearSegmentedColormap`, which is used to generate all
the built-in colormap instances, but is also useful for making
custom colormaps, and :class:`ListedColormap`, which is used for
generating a custom colormap from a list of color specifications.

The module also provides a single instance, *colorConverter*, of the
:class:`ColorConverter` class providing methods for converting single
color specifications or sequences of them to *RGB* or *RGBA*.

Commands which take color arguments can use several formats to specify
the colors.  For the basic builtin colors, you can use a single letter

    - b  : blue
    - g  : green
    - r  : red
    - c  : cyan
    - m  : magenta
    - y  : yellow
    - k  : black
    - w  : white

Gray shades can be given as a string encoding a float in the 0-1
range, e.g.::

    color = '0.75'

For a greater range of colors, you have two options.  You can specify
the color using an html hex string, as in::

      color = '#eeefff'

or you can pass an *R* , *G* , *B* tuple, where each of *R* , *G* , *B*
are in the range [0,1].

Finally, legal html names for colors, like 'red', 'burlywood' and
'chartreuse' are supported.
\"\"\"" code nil nil [1 1772])
            ("re" include nil nil [1773 1782])
            ("numpy" include nil nil [1783 1801])
            ("numpy" include nil nil [1802 1822])
            ("matplotlib.cbook" include nil nil [1823 1855])
            ("parts" variable nil nil [1857 1890])
            ("NP_MAJOR, NP_MINOR" code nil nil [1891 1931])
            ("NP_CLIP_OUT" code nil nil [1970 2011])
            ("cnames" variable nil nil [2013 7589])
            ("for" code nil nil [7613 7727])
            ("is_color_like" function (:arguments 
              ( ("c" variable nil (reparse-symbol function_parameters) [7746 7747]))              ) nil [7728 7909])
            ("rgb2hex" function (:arguments 
              ( ("rgb" variable nil (reparse-symbol function_parameters) [7923 7926]))              ) nil [7911 8074])
            ("hexColorPattern" variable nil nil [8075 8126])
            ("hex2color" function
               (:documentation "
    Take a hex string *s* and return the corresponding rgb 3-tuple
    Example: #efefef -> (0.93725, 0.93725, 0.93725)
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8142 8143]))                  )
                nil [8128 8557])
            ("ColorConverter" type
               (:documentation "
    Provides methods for converting color specifications to *RGB* or *RGBA*

    Caching is used for more efficient conversion upon repeated calls
    with the same argument.

    Ordinarily only the single instance instantiated in this module,
    *colorConverter*, is needed.
    "
                :members 
                  ( ("colors" variable nil (reparse-symbol indented_block_body) [8878 9148])
                    ("cache" variable nil (reparse-symbol indented_block_body) [9154 9164])
                    ("to_rgb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9180 9184])
                            ("arg" variable nil (reparse-symbol function_parameters) [9186 9189]))                          
                        :documentation "
        Returns an *RGB* tuple of three floats from 0-1.

        *arg* can be an *RGB* or *RGBA* sequence or a string in any of
        several forms:

            1) a letter from the set 'rgbcmykw'
            2) a hex color string, like '#00FFFF'
            3) a standard name, like 'aqua'
            4) a float, like '0.4', indicating gray on a 0-1 scale

        if *arg* is *RGBA*, the *A* will simply be discarded.
        ")
                        (reparse-symbol indented_block_body) [9169 11589])
                    ("to_rgba" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11606 11610])
                            ("arg" variable nil (reparse-symbol function_parameters) [11612 11615])
                            ("alpha" variable nil (reparse-symbol function_parameters) [11617 11622]))                          
                        :documentation "
        Returns an *RGBA* tuple of four floats from 0-1.

        For acceptable values of *arg*, see :meth:`to_rgb`.
        In addition, if *arg* is \"none\" (case-insensitive),
        then (0,0,0,0) will be returned.
        If *arg* is an *RGBA* sequence and *alpha* is not *None*,
        *alpha* will replace the original *A*.
        ")
                        (reparse-symbol indented_block_body) [11594 13199])
                    ("to_rgba_array" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13222 13226])
                            ("c" variable nil (reparse-symbol function_parameters) [13228 13229])
                            ("alpha" variable nil (reparse-symbol function_parameters) [13231 13236]))                          
                        :documentation "
        Returns a numpy array of *RGBA* tuples.

        Accepts a single mpl color spec or a sequence of specs.

        Special case to handle \"no color\": if *c* is \"none\" (case-insensitive),
        then an empty array will be returned.  Same for an empty list.
        ")
                        (reparse-symbol indented_block_body) [13204 15289]))                  
                :type "class")
                nil [8558 15289])
            ("colorConverter" variable nil nil [15290 15323])
            ("makeMappingArray" function
               (:documentation "Create an *N* -element 1-d lookup table

    *data* represented by a list of x,y0,y1 mapping correspondences.
    Each element in this list represents how a value between 0 and 1
    (inclusive) represented by x is mapped to a corresponding value
    between 0 and 1 (inclusive). The two values of y are to allow
    for discontinuous mapping functions (say as might be found in a
    sawtooth) where y0 represents the value of y for values of x
    <= to that given, and y1 is the value to be used for x > than
    that given). The list must start with x=0, end with x=1, and
    all values of x must be in increasing order. Values between
    the given mapping points are determined by simple linear interpolation.

    Alternatively, data can be a function mapping values between 0 - 1
    to 0 - 1.

    The function returns an array \"result\" where ``result[x*(N-1)]``
    gives the closest value for values of x between 0 and 1.
    "
                :arguments 
                  ( ("N" variable nil (reparse-symbol function_parameters) [15346 15347])
                    ("data" variable nil (reparse-symbol function_parameters) [15349 15353])
                    ("gamma" variable nil (reparse-symbol function_parameters) [15355 15360]))                  )
                nil [15325 17561])
            ("Colormap" type
               (:documentation "Base class for all scalar to rgb mappings

        Important methods:

            * :meth:`set_bad`
            * :meth:`set_under`
            * :meth:`set_over`
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Public class attributes:
            :attr:`N` : number of rgb quantization levels
            :attr:`name` : name of colormap

        \"\"\"" code nil (reparse-symbol indented_block_body) [17803 17954])
                            ("self" variable nil (reparse-symbol indented_block_body) [17963 17979])
                            ("self" variable nil (reparse-symbol indented_block_body) [17988 17998])
                            ("self" variable nil (reparse-symbol indented_block_body) [18007 18044])
                            ("self" variable nil (reparse-symbol indented_block_body) [18085 18108])
                            ("self" variable nil (reparse-symbol indented_block_body) [18117 18139])
                            ("self" variable nil (reparse-symbol indented_block_body) [18148 18165])
                            ("self" code nil (reparse-symbol indented_block_body) [18174 18192])
                            ("self" code nil (reparse-symbol indented_block_body) [18201 18218])
                            ("self" variable nil (reparse-symbol indented_block_body) [18227 18247]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17775 17779])
                            ("name" variable nil (reparse-symbol function_parameters) [17781 17785])
                            ("N" variable nil (reparse-symbol function_parameters) [17787 17788]))                          
                        :documentation "
        Public class attributes:
            :attr:`N` : number of rgb quantization levels
            :attr:`name` : name of colormap

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17762 18248])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18267 18271])
                            ("X" variable nil (reparse-symbol function_parameters) [18273 18274])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18276 18281])
                            ("bytes" variable nil (reparse-symbol function_parameters) [18288 18293]))                          
                        :documentation "
        *X* is either a scalar or an array (of any dimension).
        If scalar, a tuple of rgba values is returned, otherwise
        an array with the new shape = oldshape+(4,). If the X-values
        are integers, then they are used as indices into the array.
        If they are floating point, then they must be in the
        interval (0.0, 1.0).
        Alpha must be a scalar between 0 and 1, or None.
        If bytes is False, the rgba values will be floats on a
        0-1 scale; if True, they will be uint8, 0-255.
        ")
                        (reparse-symbol indented_block_body) [18254 21645])
                    ("set_bad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21662 21666])
                            ("color" variable nil (reparse-symbol function_parameters) [21668 21673])
                            ("alpha" variable nil (reparse-symbol function_parameters) [21681 21686]))                          )
                        (reparse-symbol indented_block_body) [21650 21867])
                    ("set_under" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21886 21890])
                            ("color" variable nil (reparse-symbol function_parameters) [21892 21897])
                            ("alpha" variable nil (reparse-symbol function_parameters) [21905 21910]))                          )
                        (reparse-symbol indented_block_body) [21872 22141])
                    ("set_over" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22159 22163])
                            ("color" variable nil (reparse-symbol function_parameters) [22165 22170])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22178 22183]))                          )
                        (reparse-symbol indented_block_body) [22146 22414])
                    ("_set_extremes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22437 22441]))                          )
                        (reparse-symbol indented_block_body) [22419 22797])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22812 22816]))                          )
                        (reparse-symbol indented_block_body) [22802 22927])
                    ("is_gray" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22944 22948]))                          )
                        (reparse-symbol indented_block_body) [22932 23124]))                  
                :type "class")
                nil [17563 23124])
            ("LinearSegmentedColormap" type
               (:documentation "Colormap objects based on lookup tables using linear segments.

    The lookup table is generated using linear interpolation for each
    primary color, with the 0-1 domain divided into any number of
    segments.
    "
                :superclasses ("Colormap")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create color map from linear mapping segments

        segmentdata argument is a dictionary with a red, green and blue
        entries. Each entry should be a list of *x*, *y0*, *y1* tuples,
        forming rows in a table.

        Example: suppose you want red to increase from 0 to 1 over
        the bottom half, green to do the same over the middle half,
        and blue over the top half.  Then you would use::

            cdict = {'red':   [(0.0,  0.0, 0.0),
                               (0.5,  1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'green': [(0.0,  0.0, 0.0),
                               (0.25, 0.0, 0.0),
                               (0.75, 1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'blue':  [(0.0,  0.0, 0.0),
                               (0.5,  0.0, 0.0),
                               (1.0,  1.0, 1.0)]}

        Each row in the table for a given color is a sequence of
        *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase
        monotonically from 0 to 1.  For any input value *z* falling
        between *x[i]* and *x[i+1]*, the output value of a given color
        will be linearly interpolated between *y1[i]* and *y0[i+1]*::

            row i:   x  y0  y1
                           /
                          /
            row i+1: x  y0  y1

        Hence y0 in the first row and y1 in the last row are never used.


        .. seealso::

            :meth:`LinearSegmentedColormap.from_list`
               Static method; factory function for generating a
               smoothly-varying LinearSegmentedColormap.

            :func:`makeMappingArray`
               For information about making a mapping array.
        \"\"\"" code nil (reparse-symbol indented_block_body) [23465 25229])
                            ("self" variable nil (reparse-symbol indented_block_body) [25238 25261])
                            ("Colormap" code nil (reparse-symbol indented_block_body) [25377 25409])
                            ("self" variable nil (reparse-symbol indented_block_body) [25418 25449])
                            ("self" variable nil (reparse-symbol indented_block_body) [25458 25477]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23413 23417])
                            ("name" variable nil (reparse-symbol function_parameters) [23419 23423])
                            ("segmentdata" variable nil (reparse-symbol function_parameters) [23425 23436])
                            ("N" variable nil (reparse-symbol function_parameters) [23438 23439])
                            ("gamma" variable nil (reparse-symbol function_parameters) [23445 23450]))                          
                        :documentation "Create color map from linear mapping segments

        segmentdata argument is a dictionary with a red, green and blue
        entries. Each entry should be a list of *x*, *y0*, *y1* tuples,
        forming rows in a table.

        Example: suppose you want red to increase from 0 to 1 over
        the bottom half, green to do the same over the middle half,
        and blue over the top half.  Then you would use::

            cdict = {'red':   [(0.0,  0.0, 0.0),
                               (0.5,  1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'green': [(0.0,  0.0, 0.0),
                               (0.25, 0.0, 0.0),
                               (0.75, 1.0, 1.0),
                               (1.0,  1.0, 1.0)],

                     'blue':  [(0.0,  0.0, 0.0),
                               (0.5,  0.0, 0.0),
                               (1.0,  1.0, 1.0)]}

        Each row in the table for a given color is a sequence of
        *x*, *y0*, *y1* tuples.  In each sequence, *x* must increase
        monotonically from 0 to 1.  For any input value *z* falling
        between *x[i]* and *x[i+1]*, the output value of a given color
        will be linearly interpolated between *y1[i]* and *y0[i+1]*::

            row i:   x  y0  y1
                           /
                          /
            row i+1: x  y0  y1

        Hence y0 in the first row and y1 in the last row are never used.


        .. seealso::

            :meth:`LinearSegmentedColormap.from_list`
               Static method; factory function for generating a
               smoothly-varying LinearSegmentedColormap.

            :func:`makeMappingArray`
               For information about making a mapping array.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23400 25478])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25493 25497]))                          )
                        (reparse-symbol indented_block_body) [25483 25939])
                    ("set_gamma" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25958 25962])
                            ("gamma" variable nil (reparse-symbol function_parameters) [25964 25969]))                          
                        :documentation "
        Set a new gamma value and regenerate color map.
        ")
                        (reparse-symbol indented_block_body) [25944 26101])
                    ("from_list" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("name" variable nil (reparse-symbol function_parameters) [26138 26142])
                            ("colors" variable nil (reparse-symbol function_parameters) [26144 26150])
                            ("N" variable nil (reparse-symbol function_parameters) [26152 26153])
                            ("gamma" variable nil (reparse-symbol function_parameters) [26159 26164]))                          
                        :documentation "
        Make a linear segmented colormap with *name* from a sequence
        of *colors* which evenly transitions from colors[0] at val=0
        to colors[-1] at val=1.  *N* is the number of rgb quantization
        levels.
        Alternatively, a list of (value, color) tuples can be given
        to divide the range unevenly.
        ")
                        (reparse-symbol indented_block_body) [26106 27234]))                  
                :type "class")
                nil [23126 27234])
            ("ListedColormap" type
               (:documentation "Colormap object generated from a list of colors.

    This may be most useful when indexing directly into a colormap,
    but it can also be used to generate special colormaps for ordinary
    mapping.
    "
                :superclasses ("Colormap")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Make a colormap from a list of colors.

        *colors*
            a list of matplotlib color specifications,
            or an equivalent Nx3 floating point array (*N* rgb values)
        *name*
            a string to identify the colormap
        *N*
            the number of entries in the map.  The default is *None*,
            in which case there is one colormap entry for each
            element in the list of colors.  If::

                N < len(colors)

            the list will be truncated at *N*.  If::

                N > len(colors)

            the list will be extended by repetition.
        \"\"\"" code nil (reparse-symbol indented_block_body) [27554 28189])
                            ("self" variable nil (reparse-symbol indented_block_body) [28198 28218])
                            ("self" variable nil (reparse-symbol indented_block_body) [28227 28250])
                            ("if" code nil (reparse-symbol indented_block_body) [28366 29093])
                            ("Colormap" code nil (reparse-symbol indented_block_body) [29101 29133]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27501 27505])
                            ("colors" variable nil (reparse-symbol function_parameters) [27507 27513])
                            ("name" variable nil (reparse-symbol function_parameters) [27515 27519])
                            ("N" variable nil (reparse-symbol function_parameters) [27535 27536]))                          
                        :documentation "
        Make a colormap from a list of colors.

        *colors*
            a list of matplotlib color specifications,
            or an equivalent Nx3 floating point array (*N* rgb values)
        *name*
            a string to identify the colormap
        *N*
            the number of entries in the map.  The default is *None*,
            in which case there is one colormap entry for each
            element in the list of colors.  If::

                N < len(colors)

            the list will be truncated at *N*.  If::

                N > len(colors)

            the list will be extended by repetition.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27488 29134])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29150 29154]))                          )
                        (reparse-symbol indented_block_body) [29140 29437]))                  
                :type "class")
                nil [27235 29437])
            ("Normalize" type
               (:documentation "
    Normalize a given value to the 0-1 range
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        If *vmin* or *vmax* is not given, they are taken from the input's
        minimum and maximum value respectively.  If *clip* is *True* and
        the given value falls outside the range, the returned value
        will be 0 or 1, whichever is closer. Returns 0 if::

            vmin==vmax

        Works with scalars or arrays, including masked arrays.  If
        *clip* is *True*, masked values are set to 1; otherwise they
        remain masked.  Clipping silently defeats the purpose of setting
        the over, under, and masked colors in the colormap, so it is
        likely to lead to surprises; therefore the default is
        *clip* = *False*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [29583 30264])
                            ("self" variable nil (reparse-symbol indented_block_body) [30273 30289])
                            ("self" variable nil (reparse-symbol indented_block_body) [30298 30314])
                            ("self" variable nil (reparse-symbol indented_block_body) [30323 30339]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29534 29538])
                            ("vmin" variable nil (reparse-symbol function_parameters) [29540 29544])
                            ("vmax" variable nil (reparse-symbol function_parameters) [29551 29555])
                            ("clip" variable nil (reparse-symbol function_parameters) [29562 29566]))                          
                        :documentation "
        If *vmin* or *vmax* is not given, they are taken from the input's
        minimum and maximum value respectively.  If *clip* is *True* and
        the given value falls outside the range, the returned value
        will be 0 or 1, whichever is closer. Returns 0 if::

            vmin==vmax

        Works with scalars or arrays, including masked arrays.  If
        *clip* is *True*, masked values are set to 1; otherwise they
        remain masked.  Clipping silently defeats the purpose of setting
        the over, under, and masked colors in the colormap, so it is
        likely to lead to surprises; therefore the default is
        *clip* = *False*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29521 30340])
                    ("process_value" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("value" variable nil (reparse-symbol function_parameters) [30381 30386]))                          
                        :documentation "
        Homogenize the input *value* for easy and efficient normalization.

        *value* can be a scalar or sequence.

        Returns *result*, *is_scalar*, where *result* is a
        masked array matching *value*.  Float dtypes are preserved;
        integer types with two bytes or smaller are converted to
        np.float32, and larger types are converted to np.float.
        Preserving float32 when possible, and using in-place operations,
        can greatly improve speed for large arrays.

        Experimental; we may want to add an option to force the
        use of float32.
        ")
                        (reparse-symbol indented_block_body) [30345 31536])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31554 31558])
                            ("value" variable nil (reparse-symbol function_parameters) [31560 31565])
                            ("clip" variable nil (reparse-symbol function_parameters) [31567 31571]))                          )
                        (reparse-symbol indented_block_body) [31541 32531])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32548 32552])
                            ("value" variable nil (reparse-symbol function_parameters) [32554 32559]))                          )
                        (reparse-symbol indented_block_body) [32536 32895])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32914 32918])
                            ("A" variable nil (reparse-symbol function_parameters) [32920 32921]))                          )
                        (reparse-symbol indented_block_body) [32900 33055])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33079 33083])
                            ("A" variable nil (reparse-symbol function_parameters) [33085 33086]))                          )
                        (reparse-symbol indented_block_body) [33060 33268])
                    ("scaled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33284 33288]))                          )
                        (reparse-symbol indented_block_body) [33273 33399]))                  
                :type "class")
                nil [29439 33399])
            ("LogNorm" type
               (:documentation "
    Normalize a given value to the 0-1 range on a log scale
    "
                :superclasses ("Normalize")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33519 33523])
                            ("value" variable nil (reparse-symbol function_parameters) [33525 33530])
                            ("clip" variable nil (reparse-symbol function_parameters) [33532 33536]))                          )
                        (reparse-symbol indented_block_body) [33506 34864])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34881 34885])
                            ("value" variable nil (reparse-symbol function_parameters) [34887 34892]))                          )
                        (reparse-symbol indented_block_body) [34869 35215])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35234 35238])
                            ("A" variable nil (reparse-symbol function_parameters) [35240 35241]))                          )
                        (reparse-symbol indented_block_body) [35220 35426])
                    ("autoscale_None" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35450 35454])
                            ("A" variable nil (reparse-symbol function_parameters) [35456 35457]))                          )
                        (reparse-symbol indented_block_body) [35431 35769]))                  
                :type "class")
                nil [33400 35769])
            ("BoundaryNorm" type
               (:superclasses ("Normalize")
                :members 
                  ( ("'''
    Generate a colormap index based on discrete intervals.

    Unlike :class:`Normalize` or :class:`LogNorm`,
    :class:`BoundaryNorm` maps values to integers instead of to the
    interval 0-1.

    Mapping to the 0-1 interval could have been done via
    piece-wise linear interpolation, but using integers seems
    simpler, and reduces the number of conversions back and forth
    between integer and floating point.
    '''" code nil (reparse-symbol indented_block_body) [35805 36239])
                    ("__init__" function
                       (:suite 
                          ( ("'''
        *boundaries*
            a monotonically increasing sequence
        *ncolors*
            number of colors in the colormap to be used

        If::

            b[i] <= v < b[i+1]

        then v is mapped to color j;
        as i varies from 0 to len(boundaries)-2,
        j goes from 0 to ncolors-1.

        Out-of-range values are mapped to -1 if low and ncolors
        if high; these are converted to valid indices by
        :meth:`Colormap.__call__` .
        '''" code nil (reparse-symbol indented_block_body) [36305 36790])
                            ("self" variable nil (reparse-symbol indented_block_body) [36799 36815])
                            ("self" variable nil (reparse-symbol indented_block_body) [36824 36849])
                            ("self" variable nil (reparse-symbol indented_block_body) [36858 36884])
                            ("self" variable nil (reparse-symbol indented_block_body) [36893 36933])
                            ("self" variable nil (reparse-symbol indented_block_body) [36942 36971])
                            ("self" variable nil (reparse-symbol indented_block_body) [36980 37000])
                            ("if" code nil (reparse-symbol indented_block_body) [37009 37115]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36257 36261])
                            ("boundaries" variable nil (reparse-symbol function_parameters) [36263 36273])
                            ("ncolors" variable nil (reparse-symbol function_parameters) [36275 36282])
                            ("clip" variable nil (reparse-symbol function_parameters) [36284 36288]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36244 37115])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37133 37137])
                            ("x" variable nil (reparse-symbol function_parameters) [37139 37140])
                            ("clip" variable nil (reparse-symbol function_parameters) [37142 37146]))                          )
                        (reparse-symbol indented_block_body) [37120 37818])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37835 37839])
                            ("value" variable nil (reparse-symbol function_parameters) [37841 37846]))                          )
                        (reparse-symbol indented_block_body) [37823 37909]))                  
                :type "class")
                nil [35770 37909])
            ("NoNorm" type
               (:superclasses ("Normalize")
                :members 
                  ( ("'''
    Dummy replacement for Normalize, for the case where we
    want to use indices directly in a
    :class:`~matplotlib.cm.ScalarMappable` .
    '''" code nil (reparse-symbol indented_block_body) [37940 38093])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38111 38115])
                            ("value" variable nil (reparse-symbol function_parameters) [38117 38122])
                            ("clip" variable nil (reparse-symbol function_parameters) [38124 38128]))                          )
                        (reparse-symbol indented_block_body) [38098 38157])
                    ("inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38174 38178])
                            ("value" variable nil (reparse-symbol function_parameters) [38180 38185]))                          )
                        (reparse-symbol indented_block_body) [38162 38209]))                  
                :type "class")
                nil [37911 38209])
            ("normalize" variable nil nil [38277 38298])
            ("no_norm" variable nil nil [38299 38315])
            ("rgb_to_hsv" function
               (:documentation "
    convert rgb values in a numpy array to hsv values
    input and output arrays should have shape (M,N,3)
    "
                :arguments 
                  ( ("arr" variable nil (reparse-symbol function_parameters) [38332 38335]))                  )
                nil [38317 39121])
            ("hsv_to_rgb" function
               (:documentation "
    convert hsv values in a numpy array to rgb values
    both input and output arrays have shape (M,N,3)
    "
                :arguments 
                  ( ("hsv" variable nil (reparse-symbol function_parameters) [39137 39140]))                  )
                nil [39122 40094])
            ("LightSource" type
               (:documentation "
    Create a light source coming from the specified azimuth and elevation.
    Angles are in degrees, with the azimuth measured
    clockwise from north and elevation up from the zero plane of the surface.
    The :meth:`shade` is used to produce rgb values for a shaded relief image
    given a data array.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
       Specify the azimuth (measured clockwise from south) and altitude
       (measured up from the plane of the surface) of the light source
       in degrees.

       The color of the resulting image will be darkened
       by moving the (s,v) values (in hsv colorspace) toward
       (hsv_min_sat, hsv_min_val) in the shaded regions, or
       lightened by sliding (s,v) toward
       (hsv_max_sat hsv_max_val) in regions that are illuminated.
       The default extremes are chose so that completely shaded points
       are nearly black (s = 1, v = 0) and completely illuminated points
       are nearly white (s = 0, v = 1).
       \"\"\"" code nil (reparse-symbol indented_block_body) [40572 41218])
                            ("self" variable nil (reparse-symbol indented_block_body) [41226 41244])
                            ("self" variable nil (reparse-symbol indented_block_body) [41252 41272])
                            ("self" variable nil (reparse-symbol indented_block_body) [41280 41310])
                            ("self" variable nil (reparse-symbol indented_block_body) [41318 41348])
                            ("self" variable nil (reparse-symbol indented_block_body) [41356 41386])
                            ("self" variable nil (reparse-symbol indented_block_body) [41394 41424]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40463 40467])
                            ("azdeg" variable nil (reparse-symbol function_parameters) [40468 40473])
                            ("altdeg" variable nil (reparse-symbol function_parameters) [40478 40484])
                            ("hsv_min_val" variable nil (reparse-symbol function_parameters) [40507 40518])
                            ("hsv_max_val" variable nil (reparse-symbol function_parameters) [40521 40532])
                            ("hsv_min_sat" variable nil (reparse-symbol function_parameters) [40535 40546])
                            ("hsv_max_sat" variable nil (reparse-symbol function_parameters) [40549 40560]))                          
                        :documentation "
       Specify the azimuth (measured clockwise from south) and altitude
       (measured up from the plane of the surface) of the light source
       in degrees.

       The color of the resulting image will be darkened
       by moving the (s,v) values (in hsv colorspace) toward
       (hsv_min_sat, hsv_min_val) in the shaded regions, or
       lightened by sliding (s,v) toward
       (hsv_max_sat hsv_max_val) in regions that are illuminated.
       The default extremes are chose so that completely shaded points
       are nearly black (s = 1, v = 0) and completely illuminated points
       are nearly white (s = 0, v = 1).
       "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40450 41425])
                    ("shade" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41440 41444])
                            ("data" variable nil (reparse-symbol function_parameters) [41445 41449])
                            ("cmap" variable nil (reparse-symbol function_parameters) [41450 41454]))                          
                        :documentation "
        Take the input data array, convert to HSV values in the
        given colormap, then adjust those color values
        to given the impression of a shaded relief map with a
        specified light source.
        RGBA values are returned, which can then be used to
        plot the shaded image with imshow.
        ")
                        (reparse-symbol indented_block_body) [41430 41962])
                    ("shade_rgb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41981 41985])
                            ("rgb" variable nil (reparse-symbol function_parameters) [41986 41989])
                            ("elevation" variable nil (reparse-symbol function_parameters) [41991 42000])
                            ("fraction" variable nil (reparse-symbol function_parameters) [42002 42010]))                          
                        :documentation "
        Take the input RGB array (ny*nx*3) adjust their color values
        to given the impression of a shaded relief map with a
        specified light source using the elevation (ny*nx).
        A new RGB array ((ny*nx*3)) is returned.
        ")
                        (reparse-symbol indented_block_body) [41967 44187]))                  
                :type "class")
                nil [40095 44187]))          
      :file "colors.py"
      :pointmax 44187
      :fsize 44186
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module contains all the 2D line class which can draw with a
variety of line styles, markers and colors.
\"\"\"" code nil nil [1 117])
            ("__future__" include nil nil [159 190])
            ("numpy" include nil nil [192 210])
            ("numpy" include nil nil [211 231])
            ("matplotlib" include nil nil [232 262])
            ("artist" include nil nil [263 276])
            ("artist" include nil nil [277 302])
            ("cbook" include nil nil [303 400])
            ("colors" include nil nil [401 434])
            ("path" include nil nil [435 456])
            ("transforms" include nil nil [457 530])
            ("matplotlib" include nil nil [532 563])
            ("artist" include nil nil [564 602])
            ("matplotlib" include nil nil [603 635])
            ("matplotlib.font_manager" include nil nil [636 686])
            ("matplotlib.markers" include nil nil [687 729])
            ("matplotlib.markers" include nil nil [814 936])
            ("segment_hits" function
               (:documentation "
    Determine if any line segments are within radius of a
    point. Returns the list of line segments that are within that
    radius.
    "
                :arguments 
                  ( ("cx" variable nil (reparse-symbol function_parameters) [955 957])
                    ("cy" variable nil (reparse-symbol function_parameters) [959 961])
                    ("x" variable nil (reparse-symbol function_parameters) [963 964])
                    ("y" variable nil (reparse-symbol function_parameters) [966 967])
                    ("radius" variable nil (reparse-symbol function_parameters) [969 975]))                  )
                nil [938 2536])
            ("Line2D" type
               (:documentation "
    A line - the line can have both a solid linestyle connecting all
    the vertices, and a marker at each vertex.  Additionally, the
    drawing of the solid line is influenced by the drawstyle, eg one
    can create \"stepped\" lines in various styles.


    "
                :superclasses ("Artist")
                :members 
                  ( ("lineStyles" variable nil (reparse-symbol indented_block_body) [2835 3173])
                    ("_drawStyles_l" variable nil (reparse-symbol indented_block_body) [3179 3367])
                    ("_drawStyles_s" variable nil (reparse-symbol indented_block_body) [3373 3438])
                    ("drawStyles" variable nil (reparse-symbol indented_block_body) [3443 3458])
                    ("drawStyles" code nil (reparse-symbol indented_block_body) [3463 3495])
                    ("drawStyles" code nil (reparse-symbol indented_block_body) [3500 3532])
                    ("drawStyleKeys" code nil (reparse-symbol indented_block_body) [3586 3645])
                    ("markers" variable nil (reparse-symbol indented_block_body) [3730 3759])
                    ("filled_markers" variable nil (reparse-symbol indented_block_body) [3764 3807])
                    ("fillStyles" variable nil (reparse-symbol indented_block_body) [3812 3847])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [3853 3863])
                    ("validCap" variable nil (reparse-symbol indented_block_body) [3868 3910])
                    ("validJoin" variable nil (reparse-symbol indented_block_body) [3915 3956])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3974 3978]))                          )
                        (reparse-symbol indented_block_body) [3962 4447])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a :class:`~matplotlib.lines.Line2D` instance with *x*
        and *y* data in sequences *xdata*, *ydata*.

        The kwargs are :class:`~matplotlib.lines.Line2D` properties:

        %(Line2D)s

        See :meth:`set_linestyle` for a decription of the line styles,
        :meth:`set_marker` for a description of the markers, and
        :meth:`set_drawstyle` for a description of the draw styles.

        \"\"\"" code nil (reparse-symbol indented_block_body) [5307 5739])
                            ("Artist" code nil (reparse-symbol indented_block_body) [5748 5769])
                            ("if" code nil (reparse-symbol indented_block_body) [5822 5905])
                            ("if" code nil (reparse-symbol indented_block_body) [5913 5996])
                            ("if" code nil (reparse-symbol indented_block_body) [6005 6068])
                            ("if" code nil (reparse-symbol indented_block_body) [6077 6140])
                            ("if" code nil (reparse-symbol indented_block_body) [6148 6205])
                            ("if" code nil (reparse-symbol indented_block_body) [6213 6268])
                            ("if" code nil (reparse-symbol indented_block_body) [6277 6342])
                            ("if" code nil (reparse-symbol indented_block_body) [6350 6417])
                            ("if" code nil (reparse-symbol indented_block_body) [6425 6498])
                            ("if" code nil (reparse-symbol indented_block_body) [6506 6582])
                            ("if" code nil (reparse-symbol indented_block_body) [6590 6666])
                            ("if" code nil (reparse-symbol indented_block_body) [6674 6753])
                            ("if" code nil (reparse-symbol indented_block_body) [6762 6805])
                            ("self" code nil (reparse-symbol indented_block_body) [6814 6851])
                            ("self" code nil (reparse-symbol indented_block_body) [6860 6899])
                            ("self" code nil (reparse-symbol indented_block_body) [6908 6947])
                            ("self" code nil (reparse-symbol indented_block_body) [6956 6997])
                            ("self" code nil (reparse-symbol indented_block_body) [7008 7037])
                            ("self" code nil (reparse-symbol indented_block_body) [7046 7075])
                            ("self" code nil (reparse-symbol indented_block_body) [7084 7113])
                            ("self" code nil (reparse-symbol indented_block_body) [7122 7143])
                            ("self" variable nil (reparse-symbol indented_block_body) [7152 7180])
                            ("self" code nil (reparse-symbol indented_block_body) [7189 7212])
                            ("self" code nil (reparse-symbol indented_block_body) [7221 7250])
                            ("self" code nil (reparse-symbol indented_block_body) [7259 7292])
                            ("self" code nil (reparse-symbol indented_block_body) [7301 7332])
                            ("self" variable nil (reparse-symbol indented_block_body) [7341 7361])
                            ("self" code nil (reparse-symbol indented_block_body) [7372 7413])
                            ("self" code nil (reparse-symbol indented_block_body) [7422 7469])
                            ("self" code nil (reparse-symbol indented_block_body) [7478 7519])
                            ("self" code nil (reparse-symbol indented_block_body) [7528 7569])
                            ("self" code nil (reparse-symbol indented_block_body) [7578 7607])
                            ("self" variable nil (reparse-symbol indented_block_body) [7617 7643])
                            ("self" code nil (reparse-symbol indented_block_body) [7774 7793])
                            ("self" variable nil (reparse-symbol indented_block_body) [7802 7830])
                            ("self" variable nil (reparse-symbol indented_block_body) [7839 7858])
                            ("if" code nil (reparse-symbol indented_block_body) [7867 7939])
                            ("self" variable nil (reparse-symbol indented_block_body) [7948 7976])
                            ("self" variable nil (reparse-symbol indented_block_body) [7985 8013])
                            ("self" variable nil (reparse-symbol indented_block_body) [8022 8043])
                            ("self" variable nil (reparse-symbol indented_block_body) [8052 8073])
                            ("self" code nil (reparse-symbol indented_block_body) [8082 8109]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4465 4469])
                            ("xdata" variable nil (reparse-symbol function_parameters) [4471 4476])
                            ("ydata" variable nil (reparse-symbol function_parameters) [4478 4483])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [4502 4511])
                            ("linestyle" variable nil (reparse-symbol function_parameters) [4569 4578])
                            ("color" variable nil (reparse-symbol function_parameters) [4610 4615])
                            ("marker" variable nil (reparse-symbol function_parameters) [4651 4657])
                            ("markersize" variable nil (reparse-symbol function_parameters) [4692 4702])
                            ("markeredgewidth" variable nil (reparse-symbol function_parameters) [4733 4748])
                            ("markeredgecolor" variable nil (reparse-symbol function_parameters) [4774 4789])
                            ("markerfacecolor" variable nil (reparse-symbol function_parameters) [4815 4830])
                            ("markerfacecoloralt" variable nil (reparse-symbol function_parameters) [4856 4874])
                            ("fillstyle" variable nil (reparse-symbol function_parameters) [4902 4911])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [4945 4956])
                            ("dash_capstyle" variable nil (reparse-symbol function_parameters) [4986 4999])
                            ("solid_capstyle" variable nil (reparse-symbol function_parameters) [5027 5041])
                            ("dash_joinstyle" variable nil (reparse-symbol function_parameters) [5068 5082])
                            ("solid_joinstyle" variable nil (reparse-symbol function_parameters) [5109 5124])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [5150 5160])
                            ("drawstyle" variable nil (reparse-symbol function_parameters) [5188 5197])
                            ("markevery" variable nil (reparse-symbol function_parameters) [5229 5238])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5270 5278]))                          
                        :documentation "
        Create a :class:`~matplotlib.lines.Line2D` instance with *x*
        and *y* data in sequences *xdata*, *ydata*.

        The kwargs are :class:`~matplotlib.lines.Line2D` properties:

        %(Line2D)s

        See :meth:`set_linestyle` for a decription of the line styles,
        :meth:`set_marker` for a description of the markers, and
        :meth:`set_drawstyle` for a description of the draw styles.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4452 8110])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8128 8132])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [8134 8144]))                          
                        :documentation "
        Test whether the mouse event occurred on the line.  The pick
        radius determines the precision of the location test (usually
        within five points of the value).  Use
        :meth:`~matplotlib.lines.Line2D.get_pickradius` or
        :meth:`~matplotlib.lines.Line2D.set_pickradius` to view or
        modify it.

        Returns *True* if any values are within the radius along with
        ``{'ind': pointlist}``, where *pointlist* is the set of points
        within the radius.

        TODO: sort returned indices by distance
        ")
                        (reparse-symbol indented_block_body) [8115 10444])
                    ("get_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10468 10472]))                          )
                        (reparse-symbol indented_block_body) [10449 10566])
                    ("set_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10590 10594])
                            ("d" variable nil (reparse-symbol function_parameters) [10595 10596]))                          
                        :documentation "Sets the pick radius used for containment tests

        ACCEPTS: float distance in points
        ")
                        (reparse-symbol indented_block_body) [10571 10741])
                    ("get_fillstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10764 10768]))                          
                        :documentation "
        return the marker fillstyle
        ")
                        (reparse-symbol indented_block_body) [10746 10875])
                    ("set_fillstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10898 10902])
                            ("fs" variable nil (reparse-symbol function_parameters) [10904 10906]))                          
                        :documentation "
        Set the marker fill style; 'full' means fill the whole marker.
        The other options are for half filled markers

        ACCEPTS: ['full' | 'left' | 'right' | 'bottom' | 'top']
        ")
                        (reparse-symbol indented_block_body) [10880 11162])
                    ("set_markevery" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11185 11189])
                            ("every" variable nil (reparse-symbol function_parameters) [11191 11196]))                          
                        :documentation "
        Set the markevery property to subsample the plot when using
        markers.  Eg if ``markevery=5``, every 5-th marker will be
        plotted.  *every* can be

        None
            Every point will be plotted

        an integer N
            Every N-th marker will be plotted starting with marker 0

        A length-2 tuple of integers
            every=(start, N) will start at point start and plot every N-th marker


        ACCEPTS: None | integer | (startind, stride)

        ")
                        (reparse-symbol indented_block_body) [11167 11744])
                    ("get_markevery" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11767 11771]))                          )
                        (reparse-symbol indented_block_body) [11749 11844])
                    ("set_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11864 11868])
                            ("p" variable nil (reparse-symbol function_parameters) [11869 11870]))                          
                        :documentation "Sets the event picker details for the line.

        ACCEPTS: float distance in points or callable pick function
        ``fn(artist, event)``
        ")
                        (reparse-symbol indented_block_body) [11849 12165])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12192 12196])
                            ("renderer" variable nil (reparse-symbol function_parameters) [12198 12206]))                          )
                        (reparse-symbol indented_block_body) [12170 12555])
                    ("set_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12573 12577])
                            ("ax" variable nil (reparse-symbol function_parameters) [12579 12581]))                          )
                        (reparse-symbol indented_block_body) [12560 12848])
                    ("set_axes" variable nil (reparse-symbol indented_block_body) [12852 12894])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12913 12917])
                            ("args" variable nil (reparse-symbol function_parameters) [12919 12924]))                          
                        :documentation "
        Set the x and y data

        ACCEPTS: 2D array (rows are x, y) or two 1D arrays
        ")
                        (reparse-symbol indented_block_body) [12900 13183])
                    ("recache_always" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13207 13211]))                          )
                        (reparse-symbol indented_block_body) [13188 13248])
                    ("recache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13265 13269])
                            ("always" variable nil (reparse-symbol function_parameters) [13271 13277]))                          )
                        (reparse-symbol indented_block_body) [13253 15105])
                    ("_transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15130 15134])
                            ("subslice" variable nil (reparse-symbol function_parameters) [15136 15144]))                          )
                        (reparse-symbol indented_block_body) [15110 15420])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15444 15448])
                            ("t" variable nil (reparse-symbol function_parameters) [15450 15451]))                          
                        :documentation "
        set the Transformation instance used by this artist

        ACCEPTS: a :class:`matplotlib.transforms.Transform` instance
        ")
                        (reparse-symbol indented_block_body) [15426 15706])
                    ("_is_sorted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15726 15730])
                            ("x" variable nil (reparse-symbol function_parameters) [15732 15733]))                          )
                        (reparse-symbol indented_block_body) [15711 15847])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15886 15890])
                            ("renderer" variable nil (reparse-symbol function_parameters) [15892 15900]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15852 20355])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20380 20384]))                          )
                        (reparse-symbol indented_block_body) [20360 20412])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20430 20434]))                          )
                        (reparse-symbol indented_block_body) [20416 20456])
                    ("get_drawstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20478 20482]))                          )
                        (reparse-symbol indented_block_body) [20460 20508])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20530 20534]))                          )
                        (reparse-symbol indented_block_body) [20512 20560])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20583 20587]))                          )
                        (reparse-symbol indented_block_body) [20565 20613])
                    ("get_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20632 20636]))                          )
                        (reparse-symbol indented_block_body) [20617 20672])
                    ("get_markeredgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20701 20705]))                          )
                        (reparse-symbol indented_block_body) [20677 21110])
                    ("get_markeredgewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21139 21143]))                          )
                        (reparse-symbol indented_block_body) [21115 21175])
                    ("_get_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21205 21209])
                            ("alt" variable nil (reparse-symbol function_parameters) [21211 21214]))                          )
                        (reparse-symbol indented_block_body) [21180 21557])
                    ("get_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21586 21590]))                          )
                        (reparse-symbol indented_block_body) [21562 21645])
                    ("get_markerfacecoloralt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21677 21681]))                          )
                        (reparse-symbol indented_block_body) [21650 21735])
                    ("get_markersize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21759 21763]))                          )
                        (reparse-symbol indented_block_body) [21740 21790])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21808 21812])
                            ("orig" variable nil (reparse-symbol function_parameters) [21814 21818]))                          
                        :documentation "
        Return the xdata, ydata.

        If *orig* is *True*, return the original data
        ")
                        (reparse-symbol indented_block_body) [21795 22006])
                    ("get_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22026 22030])
                            ("orig" variable nil (reparse-symbol function_parameters) [22032 22036]))                          
                        :documentation "
        Return the xdata.

        If *orig* is *True*, return the original data, else the
        processed data.
        ")
                        (reparse-symbol indented_block_body) [22012 22308])
                    ("get_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22327 22331])
                            ("orig" variable nil (reparse-symbol function_parameters) [22333 22337]))                          
                        :documentation "
        Return the ydata.

        If *orig* is *True*, return the original data, else the
        processed data.
        ")
                        (reparse-symbol indented_block_body) [22313 22609])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22627 22631]))                          
                        :documentation "
        Return the :class:`~matplotlib.path.Path` object associated
        with this line.
        ")
                        (reparse-symbol indented_block_body) [22614 22848])
                    ("get_xydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22868 22872]))                          
                        :documentation "
        Return the *xy* data as a Nx2 numpy array.
        ")
                        (reparse-symbol indented_block_body) [22853 23046])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23071 23075])
                            ("b" variable nil (reparse-symbol function_parameters) [23077 23078]))                          
                        :documentation "
        True if line should be drawin with antialiased rendering

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [23051 23233])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23252 23256])
                            ("color" variable nil (reparse-symbol function_parameters) [23258 23263]))                          
                        :documentation "
        Set the color of the line

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [23238 23391])
                    ("set_drawstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23414 23418])
                            ("drawstyle" variable nil (reparse-symbol function_parameters) [23420 23429]))                          
                        :documentation "
        Set the drawstyle of the plot

        'default' connects the points with lines. The steps variants
        produce step-plots. 'steps' is equivalent to 'steps-pre' and
        is maintained for backward-compatibility.

        ACCEPTS: [ 'default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post' ]
        ")
                        (reparse-symbol indented_block_body) [23396 23804])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23827 23831])
                            ("w" variable nil (reparse-symbol function_parameters) [23833 23834]))                          
                        :documentation "
        Set the line width in points

        ACCEPTS: float value in points
        ")
                        (reparse-symbol indented_block_body) [23809 23966])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23989 23993])
                            ("linestyle" variable nil (reparse-symbol function_parameters) [23995 24004]))                          
                        :documentation "
        Set the linestyle of the line (also accepts drawstyles)


        ================    =================
        linestyle           description
        ================    =================
        ``'-'``             solid
        ``'--'``            dashed
        ``'-.'``            dash_dot
        ``':'``             dotted
        ``'None'``          draw nothing
        ``' '``             draw nothing
        ``''``              draw nothing
        ================    =================

        'steps' is equivalent to 'steps-pre' and is maintained for
        backward-compatibility.

        .. seealso::

            :meth:`set_drawstyle`
               To set the drawing style (stepping) of the plot.

        ACCEPTS: [ ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` | ``' '`` | ``''`` ]
        and any drawstyle in combination with a linestyle, e.g. ``'steps--'``.
        ")
                        (reparse-symbol indented_block_body) [23971 25659])
                    ("set_marker" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25709 25713])
                            ("marker" variable nil (reparse-symbol function_parameters) [25715 25721]))                          
                        :documentation "
        Set the line marker

        %(MarkerTable)s

        %(MarkerAccepts)s
        ")
                        (reparse-symbol indented_block_body) [25664 25868])
                    ("set_markeredgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25897 25901])
                            ("ec" variable nil (reparse-symbol function_parameters) [25903 25905]))                          
                        :documentation "
        Set the marker edge color

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [25873 26088])
                    ("set_markeredgewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26117 26121])
                            ("ew" variable nil (reparse-symbol function_parameters) [26123 26125]))                          
                        :documentation "
        Set the marker edge width in points

        ACCEPTS: float value in points
        ")
                        (reparse-symbol indented_block_body) [26093 26346])
                    ("set_markerfacecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26375 26379])
                            ("fc" variable nil (reparse-symbol function_parameters) [26381 26383]))                          
                        :documentation "
        Set the marker face color.

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [26351 26567])
                    ("set_markerfacecoloralt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26599 26603])
                            ("fc" variable nil (reparse-symbol function_parameters) [26605 26607]))                          
                        :documentation "
        Set the alternate marker face color.

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [26572 26804])
                    ("set_markersize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26828 26832])
                            ("sz" variable nil (reparse-symbol function_parameters) [26834 26836]))                          
                        :documentation "
        Set the marker size in points

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [26809 26955])
                    ("set_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26974 26978])
                            ("x" variable nil (reparse-symbol function_parameters) [26980 26981]))                          
                        :documentation "
        Set the data np.array for x

        ACCEPTS: 1D array
        ")
                        (reparse-symbol indented_block_body) [26960 27125])
                    ("set_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27144 27148])
                            ("y" variable nil (reparse-symbol function_parameters) [27150 27151]))                          
                        :documentation "
        Set the data np.array for y

        ACCEPTS: 1D array
        ")
                        (reparse-symbol indented_block_body) [27130 27295])
                    ("set_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27315 27319])
                            ("seq" variable nil (reparse-symbol function_parameters) [27321 27324]))                          
                        :documentation "
        Set the dash sequence, sequence of dashes with on off ink in
        points.  If seq is empty or if seq = (None, None), the
        linestyle will be set to solid.

        ACCEPTS: sequence of on/off ink in points
        ")
                        (reparse-symbol indented_block_body) [27300 27768])
                    ("_draw_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27790 27794])
                            ("renderer" variable nil (reparse-symbol function_parameters) [27796 27804])
                            ("gc" variable nil (reparse-symbol function_parameters) [27806 27808])
                            ("path" variable nil (reparse-symbol function_parameters) [27810 27814])
                            ("trans" variable nil (reparse-symbol function_parameters) [27816 27821]))                          )
                        (reparse-symbol indented_block_body) [27774 27874])
                    ("_draw_steps_pre" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27900 27904])
                            ("renderer" variable nil (reparse-symbol function_parameters) [27906 27914])
                            ("gc" variable nil (reparse-symbol function_parameters) [27916 27918])
                            ("path" variable nil (reparse-symbol function_parameters) [27920 27924])
                            ("trans" variable nil (reparse-symbol function_parameters) [27926 27931]))                          )
                        (reparse-symbol indented_block_body) [27880 28318])
                    ("_draw_steps_post" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28345 28349])
                            ("renderer" variable nil (reparse-symbol function_parameters) [28351 28359])
                            ("gc" variable nil (reparse-symbol function_parameters) [28361 28363])
                            ("path" variable nil (reparse-symbol function_parameters) [28365 28369])
                            ("trans" variable nil (reparse-symbol function_parameters) [28371 28376]))                          )
                        (reparse-symbol indented_block_body) [28324 28762])
                    ("_draw_steps_mid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28788 28792])
                            ("renderer" variable nil (reparse-symbol function_parameters) [28794 28802])
                            ("gc" variable nil (reparse-symbol function_parameters) [28804 28806])
                            ("path" variable nil (reparse-symbol function_parameters) [28808 28812])
                            ("trans" variable nil (reparse-symbol function_parameters) [28814 28819]))                          )
                        (reparse-symbol indented_block_body) [28768 29341])
                    ("_draw_solid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29363 29367])
                            ("renderer" variable nil (reparse-symbol function_parameters) [29369 29377])
                            ("gc" variable nil (reparse-symbol function_parameters) [29379 29381])
                            ("path" variable nil (reparse-symbol function_parameters) [29383 29387])
                            ("trans" variable nil (reparse-symbol function_parameters) [29389 29394]))                          )
                        (reparse-symbol indented_block_body) [29347 29475])
                    ("_draw_dashed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29498 29502])
                            ("renderer" variable nil (reparse-symbol function_parameters) [29504 29512])
                            ("gc" variable nil (reparse-symbol function_parameters) [29514 29516])
                            ("path" variable nil (reparse-symbol function_parameters) [29518 29522])
                            ("trans" variable nil (reparse-symbol function_parameters) [29524 29529]))                          )
                        (reparse-symbol indented_block_body) [29481 29694])
                    ("_draw_dash_dot" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29719 29723])
                            ("renderer" variable nil (reparse-symbol function_parameters) [29725 29733])
                            ("gc" variable nil (reparse-symbol function_parameters) [29735 29737])
                            ("path" variable nil (reparse-symbol function_parameters) [29739 29743])
                            ("trans" variable nil (reparse-symbol function_parameters) [29745 29750]))                          )
                        (reparse-symbol indented_block_body) [29700 29833])
                    ("_draw_dotted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29856 29860])
                            ("renderer" variable nil (reparse-symbol function_parameters) [29862 29870])
                            ("gc" variable nil (reparse-symbol function_parameters) [29872 29874])
                            ("path" variable nil (reparse-symbol function_parameters) [29876 29880])
                            ("trans" variable nil (reparse-symbol function_parameters) [29882 29887]))                          )
                        (reparse-symbol indented_block_body) [29839 29969])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29991 29995])
                            ("other" variable nil (reparse-symbol function_parameters) [29997 30002]))                          )
                        (reparse-symbol indented_block_body) [29975 30941])
                    ("_get_rgb_face" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30965 30969])
                            ("alt" variable nil (reparse-symbol function_parameters) [30971 30974]))                          )
                        (reparse-symbol indented_block_body) [30947 31225])
                    ("set_aa" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31264 31268])
                            ("val" variable nil (reparse-symbol function_parameters) [31270 31273]))                          )
                        (reparse-symbol indented_block_body) [31253 31346])
                    ("set_c" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31361 31365])
                            ("val" variable nil (reparse-symbol function_parameters) [31367 31370]))                          )
                        (reparse-symbol indented_block_body) [31351 31431])
                    ("set_ls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31448 31452])
                            ("val" variable nil (reparse-symbol function_parameters) [31454 31457]))                          )
                        (reparse-symbol indented_block_body) [31437 31526])
                    ("set_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31543 31547])
                            ("val" variable nil (reparse-symbol function_parameters) [31549 31552]))                          )
                        (reparse-symbol indented_block_body) [31532 31621])
                    ("set_mec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31639 31643])
                            ("val" variable nil (reparse-symbol function_parameters) [31645 31648]))                          )
                        (reparse-symbol indented_block_body) [31627 31729])
                    ("set_mew" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31747 31751])
                            ("val" variable nil (reparse-symbol function_parameters) [31753 31756]))                          )
                        (reparse-symbol indented_block_body) [31735 31837])
                    ("set_mfc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31855 31859])
                            ("val" variable nil (reparse-symbol function_parameters) [31861 31864]))                          )
                        (reparse-symbol indented_block_body) [31843 31945])
                    ("set_mfcalt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31965 31969])
                            ("val" variable nil (reparse-symbol function_parameters) [31971 31974]))                          )
                        (reparse-symbol indented_block_body) [31950 32061])
                    ("set_ms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32077 32081])
                            ("val" variable nil (reparse-symbol function_parameters) [32083 32086]))                          )
                        (reparse-symbol indented_block_body) [32066 32157])
                    ("get_aa" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32173 32177]))                          )
                        (reparse-symbol indented_block_body) [32162 32254])
                    ("get_c" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32269 32273]))                          )
                        (reparse-symbol indented_block_body) [32259 32338])
                    ("get_ls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32355 32359]))                          )
                        (reparse-symbol indented_block_body) [32344 32432])
                    ("get_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32449 32453]))                          )
                        (reparse-symbol indented_block_body) [32438 32526])
                    ("get_mec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32544 32548]))                          )
                        (reparse-symbol indented_block_body) [32532 32633])
                    ("get_mew" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32651 32655]))                          )
                        (reparse-symbol indented_block_body) [32639 32740])
                    ("get_mfc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32758 32762]))                          )
                        (reparse-symbol indented_block_body) [32746 32847])
                    ("get_mfcalt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32867 32871])
                            ("alt" variable nil (reparse-symbol function_parameters) [32873 32876]))                          )
                        (reparse-symbol indented_block_body) [32852 32973])
                    ("get_ms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32989 32993]))                          )
                        (reparse-symbol indented_block_body) [32978 33068])
                    ("set_dash_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33096 33100])
                            ("s" variable nil (reparse-symbol function_parameters) [33102 33103]))                          
                        :documentation "
        Set the join style for dashed linestyles
        ACCEPTS: ['miter' | 'round' | 'bevel']
        ")
                        (reparse-symbol indented_block_body) [33073 33455])
                    ("set_solid_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33484 33488])
                            ("s" variable nil (reparse-symbol function_parameters) [33490 33491]))                          
                        :documentation "
        Set the join style for solid linestyles
        ACCEPTS: ['miter' | 'round' | 'bevel']
        ")
                        (reparse-symbol indented_block_body) [33460 33844])
                    ("get_dash_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33873 33877]))                          
                        :documentation "
        Get the join style for dashed linestyles
        ")
                        (reparse-symbol indented_block_body) [33850 33988])
                    ("get_solid_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34017 34021]))                          
                        :documentation "
        Get the join style for solid linestyles
        ")
                        (reparse-symbol indented_block_body) [33993 34132])
                    ("set_dash_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34159 34163])
                            ("s" variable nil (reparse-symbol function_parameters) [34165 34166]))                          
                        :documentation "
        Set the cap style for dashed linestyles

        ACCEPTS: ['butt' | 'round' | 'projecting']
        ")
                        (reparse-symbol indented_block_body) [34137 34518])
                    ("set_solid_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34547 34551])
                            ("s" variable nil (reparse-symbol function_parameters) [34553 34554]))                          
                        :documentation "
        Set the cap style for solid linestyles

        ACCEPTS: ['butt' | 'round' |  'projecting']
        ")
                        (reparse-symbol indented_block_body) [34524 34908])
                    ("get_dash_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34936 34940]))                          
                        :documentation "
        Get the cap style for dashed linestyles
        ")
                        (reparse-symbol indented_block_body) [34914 35049])
                    ("get_solid_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35078 35082]))                          
                        :documentation "
        Get the cap style for solid linestyles
        ")
                        (reparse-symbol indented_block_body) [35055 35191])
                    ("is_dashed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35211 35215]))                          )
                        (reparse-symbol indented_block_body) [35197 35313]))                  
                :type "class")
                nil [2537 35313])
            ("VertexSelector" type
               (:documentation "
    Manage the callbacks to maintain a list of selected vertices for
    :class:`matplotlib.lines.Line2D`. Derived classes should override
    :meth:`~matplotlib.lines.VertexSelector.process_selected` to do
    something with the picks.

    Here is an example which highlights the selected verts with red
    circles::

        import numpy as np
        import matplotlib.pyplot as plt
        import matplotlib.lines as lines

        class HighlightSelected(lines.VertexSelector):
            def __init__(self, line, fmt='ro', **kwargs):
                lines.VertexSelector.__init__(self, line)
                self.markers, = self.axes.plot([], [], fmt, **kwargs)

            def process_selected(self, ind, xs, ys):
                self.markers.set_data(xs, ys)
                self.canvas.draw()

        fig = plt.figure()
        ax = fig.add_subplot(111)
        x, y = np.random.rand(2, 30)
        line, = ax.plot(x, y, 'bs-', picker=5)

        selector = HighlightSelected(line)
        plt.show()

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the class with a :class:`matplotlib.lines.Line2D`
        instance.  The line should already be added to some
        :class:`matplotlib.axes.Axes` instance and should have the
        picker property set.
        \"\"\"" code nil (reparse-symbol indented_block_body) [36406 36646])
                            ("if" code nil (reparse-symbol indented_block_body) [36655 36759])
                            ("if" code nil (reparse-symbol indented_block_body) [36768 36883])
                            ("self" variable nil (reparse-symbol indented_block_body) [36892 36913])
                            ("self" variable nil (reparse-symbol indented_block_body) [36922 36938])
                            ("self" variable nil (reparse-symbol indented_block_body) [36947 36984])
                            ("self" variable nil (reparse-symbol indented_block_body) [36993 37054])
                            ("self" variable nil (reparse-symbol indented_block_body) [37064 37080]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36385 36389])
                            ("line" variable nil (reparse-symbol function_parameters) [36391 36395]))                          
                        :documentation "
        Initialize the class with a :class:`matplotlib.lines.Line2D`
        instance.  The line should already be added to some
        :class:`matplotlib.axes.Axes` instance and should have the
        picker property set.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36372 37081])
                    ("process_selected" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37108 37112])
                            ("ind" variable nil (reparse-symbol function_parameters) [37114 37117])
                            ("xs" variable nil (reparse-symbol function_parameters) [37119 37121])
                            ("ys" variable nil (reparse-symbol function_parameters) [37123 37125]))                          
                        :documentation "
        Default \"do nothing\" implementation of the
        :meth:`process_selected` method.

        *ind* are the indices of the selected vertices.  *xs* and *ys*
        are the coordinates of the selected vertices.
        ")
                        (reparse-symbol indented_block_body) [37087 37383])
                    ("onpick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37399 37403])
                            ("event" variable nil (reparse-symbol function_parameters) [37405 37410]))                          )
                        (reparse-symbol indented_block_body) [37388 37831]))                  
                :type "class")
                nil [35314 37831])
            ("lineStyles" variable nil nil [37832 37863])
            ("lineMarkers" variable nil nil [37864 37897])
            ("drawStyles" variable nil nil [37898 37928])
            ("fillStyles" variable nil nil [37929 37964])
            ("docstring" code nil nil [37966 38021])
            ("docstring" code nil nil [38131 38180]))          
      :file "lines.py"
      :pointmax 38181
      :fsize 38180
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Classes for including text in a figure.
\"\"\"" code nil nil [1 48])
            ("__future__" include nil nil [49 80])
            ("math" include nil nil [81 92])
            ("numpy" include nil nil [94 112])
            ("matplotlib" include nil nil [114 142])
            ("matplotlib" include nil nil [143 174])
            ("matplotlib.artist" include nil nil [175 209])
            ("matplotlib.artist" include nil nil [210 246])
            ("matplotlib.cbook" include nil nil [247 299])
            ("matplotlib" include nil nil [300 332])
            ("matplotlib.font_manager" include nil nil [333 383])
            ("matplotlib.patches" include nil nil [384 486])
            ("matplotlib.transforms" include nil nil [487 530])
            ("matplotlib.transforms" include nil nil [531 625])
            ("matplotlib.lines" include nil nil [626 661])
            ("matplotlib.artist" include nil nil [663 712])
            ("matplotlib.nxutils" include nil nil [714 750])
            ("matplotlib.path" include nil nil [752 784])
            ("matplotlib.font_manager" include nil nil [785 831])
            ("matplotlib.ft2font" include nil nil [832 870])
            ("matplotlib.backend_bases" include nil nil [872 921])
            ("_process_text_args" function (:arguments 
              ( ("override" variable nil (reparse-symbol function_parameters) [946 954])
                ("fontdict" variable nil (reparse-symbol function_parameters) [956 964])
                ("kwargs" variable nil (reparse-symbol function_parameters) [971 979]))              ) nil [923 1171])
            ("get_rotation" function
               (:documentation "
    Return the text angle as float.

    *rotation* may be 'horizontal', 'vertical', or a numeric value in degrees.
    "
                :arguments 
                  ( ("rotation" variable nil (reparse-symbol function_parameters) [1243 1251]))                  )
                nil [1226 1562])
            ("docstring" code nil nil [1750 3955])
            ("_get_textbox" function
               (:documentation "
    Calculate the bounding box of the text. Unlike
    :meth:`matplotlib.text.Text.get_extents` method, The bbox size of
    the text before the rotation is calculated.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [4315 4319])
                    ("renderer" variable nil (reparse-symbol function_parameters) [4321 4329]))                  )
                nil [4298 5166])
            ("Text" type
               (:documentation "
    Handle storing and drawing of text in window or data coordinates.
    "
                :superclasses ("Artist")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [5279 5289])
                    ("cached" variable nil (reparse-symbol indented_block_body) [5295 5315])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5333 5337]))                          )
                        (reparse-symbol indented_block_body) [5321 5407])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a :class:`~matplotlib.text.Text` instance at *x*, *y*
        with string *text*.

        Valid kwargs are
        %(Text)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [5922 6077])
                            ("Artist" code nil (reparse-symbol indented_block_body) [6087 6108])
                            ("self, self" code nil (reparse-symbol indented_block_body) [6117 6140])
                            ("if" code nil (reparse-symbol indented_block_body) [6150 6199])
                            ("if" code nil (reparse-symbol indented_block_body) [6207 6357])
                            ("self" code nil (reparse-symbol indented_block_body) [6366 6401])
                            ("self" code nil (reparse-symbol indented_block_body) [6410 6429])
                            ("self" code nil (reparse-symbol indented_block_body) [6438 6459])
                            ("self" variable nil (reparse-symbol indented_block_body) [6468 6511])
                            ("self" variable nil (reparse-symbol indented_block_body) [6520 6567])
                            ("self" variable nil (reparse-symbol indented_block_body) [6576 6613])
                            ("self" variable nil (reparse-symbol indented_block_body) [6622 6647])
                            ("self" variable nil (reparse-symbol indented_block_body) [6656 6693])
                            ("self" variable nil (reparse-symbol indented_block_body) [6702 6719])
                            ("self" variable nil (reparse-symbol indented_block_body) [6728 6751])
                            ("self" variable nil (reparse-symbol indented_block_body) [6788 6809])
                            ("if" code nil (reparse-symbol indented_block_body) [6818 6901])
                            ("self" variable nil (reparse-symbol indented_block_body) [6909 6940])
                            ("self" code nil (reparse-symbol indented_block_body) [6949 6986])
                            ("self" code nil (reparse-symbol indented_block_body) [6995 7014]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5425 5429])
                            ("x" variable nil (reparse-symbol function_parameters) [5448 5449])
                            ("y" variable nil (reparse-symbol function_parameters) [5453 5454])
                            ("text" variable nil (reparse-symbol function_parameters) [5458 5462])
                            ("color" variable nil (reparse-symbol function_parameters) [5484 5489])
                            ("verticalalignment" variable nil (reparse-symbol function_parameters) [5546 5563])
                            ("horizontalalignment" variable nil (reparse-symbol function_parameters) [5593 5612])
                            ("multialignment" variable nil (reparse-symbol function_parameters) [5638 5652])
                            ("fontproperties" variable nil (reparse-symbol function_parameters) [5676 5690])
                            ("rotation" variable nil (reparse-symbol function_parameters) [5745 5753])
                            ("linespacing" variable nil (reparse-symbol function_parameters) [5777 5788])
                            ("rotation_mode" variable nil (reparse-symbol function_parameters) [5812 5825])
                            ("path_effects" variable nil (reparse-symbol function_parameters) [5849 5861])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5885 5893]))                          
                        :documentation "
        Create a :class:`~matplotlib.text.Text` instance at *x*, *y*
        with string *text*.

        Valid kwargs are
        %(Text)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5412 7015])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7069 7073])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [7074 7084]))                          
                        :documentation "Test whether the mouse event occurred in the patch.

        In the case of text, a hit is true anywhere in the
        axis-aligned bounding-box containing the text.

        Returns True or False.
        ")
                        (reparse-symbol indented_block_body) [7056 7722])
                    ("_get_xy_display" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7747 7751]))                          )
                        (reparse-symbol indented_block_body) [7727 7927])
                    ("_get_multialignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7956 7960]))                          )
                        (reparse-symbol indented_block_body) [7932 8083])
                    ("get_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8105 8109]))                          )
                        (reparse-symbol indented_block_body) [8088 8238])
                    ("set_rotation_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8265 8269])
                            ("m" variable nil (reparse-symbol function_parameters) [8271 8272]))                          
                        :documentation "
        set text rotation mode. If \"anchor\", the un-rotated text
        will first aligned according to their *ha* and
        *va*, and then will be rotated with the alignement
        reference point as a origin. If None (default), the text will be
        rotated first then will be aligned.
        ")
                        (reparse-symbol indented_block_body) [8243 8766])
                    ("get_rotation_mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8793 8797]))                          )
                        (reparse-symbol indented_block_body) [8771 8868])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8890 8894])
                            ("other" variable nil (reparse-symbol function_parameters) [8896 8901]))                          )
                        (reparse-symbol indented_block_body) [8874 9384])
                    ("_get_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9405 9409])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9411 9419]))                          
                        :documentation "
        return the extent (bbox) of the text together with
        multile-alignment information. Note that it returns a extent
        of a rotated text when necessary.
        ")
                        (reparse-symbol indented_block_body) [9389 15179])
                    ("set_path_effects" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15205 15209])
                            ("path_effects" variable nil (reparse-symbol function_parameters) [15211 15223]))                          )
                        (reparse-symbol indented_block_body) [15184 15268])
                    ("get_path_effects" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15294 15298]))                          )
                        (reparse-symbol indented_block_body) [15273 15335])
                    ("set_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15354 15358])
                            ("rectprops" variable nil (reparse-symbol function_parameters) [15360 15369]))                          
                        :documentation "
        Draw a bounding box around self.  rectprops are any settable
        properties for a rectangle, eg facecolor='red', alpha=0.5.

          t.set_bbox(dict(facecolor='red', alpha=0.5))

        If rectprops has \"boxstyle\" key. A FancyBboxPatch
        is initialized with rectprops and will be drawn. The mutation
        scale of the FancyBboxPath is set to the fontsize.

        ACCEPTS: rectangle prop dict
        ")
                        (reparse-symbol indented_block_body) [15341 16804])
                    ("get_bbox_patch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16829 16833]))                          
                        :documentation "
        Return the bbox Patch object. Returns None if the the
        FancyBboxPatch is not made.
        ")
                        (reparse-symbol indented_block_body) [16810 16990])
                    ("update_bbox_position_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17026 17030])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17032 17040]))                          
                        :documentation "
        Update the location and the size of the bbox. This method
        should be used when the position and size of the bbox needs to
        be updated before actually drawing the bbox.
        ")
                        (reparse-symbol indented_block_body) [16996 18161])
                    ("_draw_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18227 18231])
                            ("renderer" variable nil (reparse-symbol function_parameters) [18233 18241])
                            ("posx" variable nil (reparse-symbol function_parameters) [18243 18247])
                            ("posy" variable nil (reparse-symbol function_parameters) [18249 18253]))                          
                        :documentation " Update the location and the size of the bbox
        (FancyBoxPatch), and draw
        ")
                        (reparse-symbol indented_block_body) [18212 18887])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18927 18931])
                            ("renderer" variable nil (reparse-symbol function_parameters) [18933 18941]))                          
                        :documentation "
        Draws the :class:`Text` object to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [18893 21767])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21786 21790]))                          )
                        (reparse-symbol indented_block_body) [21772 21859])
                    ("get_fontproperties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21887 21891]))                          )
                        (reparse-symbol indented_block_body) [21864 21996])
                    ("get_font_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22025 22029]))                          )
                        (reparse-symbol indented_block_body) [22001 22112])
                    ("get_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22132 22136]))                          )
                        (reparse-symbol indented_block_body) [22117 22252])
                    ("get_fontfamily" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22276 22280]))                          )
                        (reparse-symbol indented_block_body) [22257 22347])
                    ("get_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22365 22369]))                          )
                        (reparse-symbol indented_block_body) [22352 22460])
                    ("get_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22479 22483]))                          )
                        (reparse-symbol indented_block_body) [22465 22576])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22594 22598]))                          )
                        (reparse-symbol indented_block_body) [22581 22700])
                    ("get_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22721 22725]))                          )
                        (reparse-symbol indented_block_body) [22705 22824])
                    ("get_fontvariant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22849 22853]))                          )
                        (reparse-symbol indented_block_body) [22829 22922])
                    ("get_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22942 22946]))                          )
                        (reparse-symbol indented_block_body) [22927 23048])
                    ("get_fontname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23070 23074]))                          )
                        (reparse-symbol indented_block_body) [23053 23137])
                    ("get_fontstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23160 23164]))                          )
                        (reparse-symbol indented_block_body) [23142 23229])
                    ("get_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23251 23255]))                          )
                        (reparse-symbol indented_block_body) [23234 23318])
                    ("get_fontweight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23342 23346]))                          )
                        (reparse-symbol indented_block_body) [23323 23413])
                    ("get_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23434 23438]))                          )
                        (reparse-symbol indented_block_body) [23418 23544])
                    ("get_fontstretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23569 23573]))                          )
                        (reparse-symbol indented_block_body) [23549 23642])
                    ("get_ha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23658 23662]))                          )
                        (reparse-symbol indented_block_body) [23647 23755])
                    ("get_horizontalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23788 23792]))                          
                        :documentation "
        Return the horizontal alignment as string.  Will be one of
        'left', 'center' or 'right'.
        ")
                        (reparse-symbol indented_block_body) [23760 23964])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23987 23991]))                          )
                        (reparse-symbol indented_block_body) [23970 24174])
                    ("get_prop_tup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24196 24200]))                          
                        :documentation "
        Return a hashable tuple of properties.

        Not intended to be human readable, but useful for backends who
        want to cache derived information about text (eg layouts) and
        need to know if the text has changed.
        ")
                        (reparse-symbol indented_block_body) [24179 24785])
                    ("get_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24803 24807]))                          )
                        (reparse-symbol indented_block_body) [24790 24869])
                    ("get_va" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24885 24889]))                          )
                        (reparse-symbol indented_block_body) [24874 24985])
                    ("get_verticalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25016 25020]))                          
                        :documentation "
        Return the vertical alignment as string.  Will be one of
        'top', 'center', 'bottom' or 'baseline'.
        ")
                        (reparse-symbol indented_block_body) [24990 25200])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25227 25231])
                            ("renderer" variable nil (reparse-symbol function_parameters) [25233 25241])
                            ("dpi" variable nil (reparse-symbol function_parameters) [25248 25251]))                          )
                        (reparse-symbol indented_block_body) [25205 26912])
                    ("set_backgroundcolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26941 26945])
                            ("color" variable nil (reparse-symbol function_parameters) [26947 26952]))                          
                        :documentation "
        Set the background color of the text by updating the bbox.

        .. seealso::

            :meth:`set_bbox`
               To change the position of the bounding box.

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [26917 27358])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27379 27383])
                            ("color" variable nil (reparse-symbol function_parameters) [27385 27390]))                          
                        :documentation "
        Set the foreground color of the text

        ACCEPTS: any matplotlib color
        ")
                        (reparse-symbol indented_block_body) [27365 27688])
                    ("set_ha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27704 27708])
                            ("align" variable nil (reparse-symbol function_parameters) [27710 27715]))                          )
                        (reparse-symbol indented_block_body) [27693 27806])
                    ("set_horizontalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27839 27843])
                            ("align" variable nil (reparse-symbol function_parameters) [27845 27850]))                          
                        :documentation "
        Set the horizontal alignment to one of

        ACCEPTS: [ 'center' | 'right' | 'left' ]
        ")
                        (reparse-symbol indented_block_body) [27811 28175])
                    ("set_ma" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28191 28195])
                            ("align" variable nil (reparse-symbol function_parameters) [28197 28202]))                          )
                        (reparse-symbol indented_block_body) [28180 28286])
                    ("set_multialignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28315 28319])
                            ("align" variable nil (reparse-symbol function_parameters) [28321 28326]))                          
                        :documentation "
        Set the alignment for multiple lines layout.  The layout of the
        bounding box of all the lines is determined bu the horizontalalignment
        and verticalalignment properties, but the multiline text within that
        box can be

        ACCEPTS: ['left' | 'right' | 'center' ]
        ")
                        (reparse-symbol indented_block_body) [28292 28845])
                    ("set_linespacing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28870 28874])
                            ("spacing" variable nil (reparse-symbol function_parameters) [28876 28883]))                          
                        :documentation "
        Set the line spacing as a multiple of the font size.
        Default is 1.2.

        ACCEPTS: float (multiple of font size)
        ")
                        (reparse-symbol indented_block_body) [28850 29079])
                    ("set_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29099 29103])
                            ("fontname" variable nil (reparse-symbol function_parameters) [29105 29113]))                          
                        :documentation "
        Set the font family.  May be either a single string, or a list
        of strings in decreasing priority.  Each string may be either
        a real font name or a generic font class name.  If the latter,
        the specific font names will be looked up in the
        :file:`matplotlibrc` file.

        ACCEPTS: [ FONTNAME | 'serif' | 'sans-serif' | 'cursive' | 'fantasy' | 'monospace' ]
        ")
                        (reparse-symbol indented_block_body) [29084 29588])
                    ("set_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29609 29613])
                            ("variant" variable nil (reparse-symbol function_parameters) [29615 29622]))                          
                        :documentation "
        Set the font variant, either 'normal' or 'small-caps'.

        ACCEPTS: [ 'normal' | 'small-caps' ]
        ")
                        (reparse-symbol indented_block_body) [29593 29808])
                    ("set_fontvariant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29833 29837])
                            ("variant" variable nil (reparse-symbol function_parameters) [29839 29846]))                          )
                        (reparse-symbol indented_block_body) [29813 29922])
                    ("set_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29940 29944])
                            ("fontname" variable nil (reparse-symbol function_parameters) [29946 29954]))                          
                        :documentation "alias for set_family")
                        (reparse-symbol indented_block_body) [29927 30033])
                    ("set_fontname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30055 30059])
                            ("fontname" variable nil (reparse-symbol function_parameters) [30061 30069]))                          
                        :documentation "alias for set_family")
                        (reparse-symbol indented_block_body) [30038 30141])
                    ("set_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30160 30164])
                            ("fontstyle" variable nil (reparse-symbol function_parameters) [30166 30175]))                          
                        :documentation "
        Set the font style.

        ACCEPTS: [ 'normal' | 'italic' | 'oblique']
        ")
                        (reparse-symbol indented_block_body) [30146 30333])
                    ("set_fontstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30356 30360])
                            ("fontstyle" variable nil (reparse-symbol function_parameters) [30362 30371]))                          )
                        (reparse-symbol indented_block_body) [30338 30445])
                    ("set_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30463 30467])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [30469 30477]))                          
                        :documentation "
        Set the font size.  May be either a size string, relative to
        the default font size, or an absolute font size in points.

        ACCEPTS: [ size in points | 'xx-small' | 'x-small' | 'small' | 'medium' | 'large' | 'x-large' | 'xx-large' ]
        ")
                        (reparse-symbol indented_block_body) [30450 30806])
                    ("set_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30828 30832])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [30834 30842]))                          )
                        (reparse-symbol indented_block_body) [30811 30913])
                    ("set_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30933 30937])
                            ("weight" variable nil (reparse-symbol function_parameters) [30939 30945]))                          
                        :documentation "
        Set the font weight.

        ACCEPTS: [ a numeric value in range 0-1000 | 'ultralight' | 'light' | 'normal' | 'regular' | 'book' | 'medium' | 'roman' | 'semibold' | 'demibold' | 'demi' | 'bold' | 'heavy' | 'extra bold' | 'black' ]
        ")
                        (reparse-symbol indented_block_body) [30918 31260])
                    ("set_fontweight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31284 31288])
                            ("weight" variable nil (reparse-symbol function_parameters) [31290 31296]))                          )
                        (reparse-symbol indented_block_body) [31265 31369])
                    ("set_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31390 31394])
                            ("stretch" variable nil (reparse-symbol function_parameters) [31396 31403]))                          
                        :documentation "
        Set the font stretch (horizontal condensation or expansion).

        ACCEPTS: [ a numeric value in range 0-1000 | 'ultra-condensed' | 'extra-condensed' | 'condensed' | 'semi-condensed' | 'normal' | 'semi-expanded' | 'expanded' | 'extra-expanded' | 'ultra-expanded' ]
        ")
                        (reparse-symbol indented_block_body) [31374 31756])
                    ("set_fontstretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31781 31785])
                            ("stretch" variable nil (reparse-symbol function_parameters) [31787 31794]))                          )
                        (reparse-symbol indented_block_body) [31761 31870])
                    ("set_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31892 31896])
                            ("xy" variable nil (reparse-symbol function_parameters) [31898 31900]))                          
                        :documentation "
        Set the (*x*, *y*) position of the text

        ACCEPTS: (x,y)
        ")
                        (reparse-symbol indented_block_body) [31875 32051])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32066 32070])
                            ("x" variable nil (reparse-symbol function_parameters) [32072 32073]))                          
                        :documentation "
        Set the *x* position of the text

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [32056 32185])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32201 32205])
                            ("y" variable nil (reparse-symbol function_parameters) [32207 32208]))                          
                        :documentation "
        Set the *y* position of the text

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [32191 32320])
                    ("set_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32343 32347])
                            ("s" variable nil (reparse-symbol function_parameters) [32349 32350]))                          
                        :documentation "
        Set the rotation of the text

        ACCEPTS: [ angle in degrees | 'vertical' | 'horizontal' ]
        ")
                        (reparse-symbol indented_block_body) [32326 32508])
                    ("set_va" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32526 32530])
                            ("align" variable nil (reparse-symbol function_parameters) [32532 32537]))                          )
                        (reparse-symbol indented_block_body) [32515 32624])
                    ("set_verticalalignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32655 32659])
                            ("align" variable nil (reparse-symbol function_parameters) [32661 32666]))                          
                        :documentation "
        Set the vertical alignment

        ACCEPTS: [ 'center' | 'top' | 'bottom' | 'baseline' ]
        ")
                        (reparse-symbol indented_block_body) [32629 33001])
                    ("set_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33019 33023])
                            ("s" variable nil (reparse-symbol function_parameters) [33025 33026]))                          
                        :documentation "
        Set the text string *s*

        It may contain newlines (``\\\\n``) or math in LaTeX syntax.

        ACCEPTS: string or anything printable with '%s' conversion.
        ")
                        (reparse-symbol indented_block_body) [33006 33255])
                    ("is_math_text" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("s" variable nil (reparse-symbol function_parameters) [33295 33296]))                          
                        :documentation "
        Returns a cleaned string and a boolean flag.
        The flag indicates if the given string *s* contains any mathtext,
        determined by counting unescaped dollar signs. If no mathtext
        is present, the cleaned string has its dollar signs unescaped.
        If usetex is on, the flag always has the value \"TeX\".
        ")
                        (reparse-symbol indented_block_body) [33260 33998])
                    ("set_fontproperties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34026 34030])
                            ("fp" variable nil (reparse-symbol function_parameters) [34032 34034]))                          
                        :documentation "
        Set the font properties that control the text.  *fp* must be a
        :class:`matplotlib.font_manager.FontProperties` object.

        ACCEPTS: a :class:`matplotlib.font_manager.FontProperties` instance
        ")
                        (reparse-symbol indented_block_body) [34003 34381])
                    ("set_font_properties" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34410 34414])
                            ("fp" variable nil (reparse-symbol function_parameters) [34416 34418]))                          )
                        (reparse-symbol indented_block_body) [34386 34496]))                  
                :type "class")
                nil [5169 34496])
            ("docstring" code nil nil [34497 34548])
            ("docstring" code nil nil [34549 34596])
            ("TextWithDash" type
               (:documentation "
    This is basically a :class:`~matplotlib.text.Text` with a dash
    (drawn with a :class:`~matplotlib.lines.Line2D`) before/after
    it. It is intended to be a drop-in replacement for
    :class:`~matplotlib.text.Text`, and should behave identically to
    it when *dashlength* = 0.0.

    The dash always comes between the point specified by
    :meth:`~matplotlib.text.Text.set_position` and the text. When a
    dash exists, the text alignment arguments (*horizontalalignment*,
    *verticalalignment*) are ignored.

    *dashlength* is the length of the dash in canvas units.
    (default = 0.0).

    *dashdirection* is one of 0 or 1, where 0 draws the dash after the
    text and 1 before.  (default = 0).

    *dashrotation* specifies the rotation of the dash, and should
    generally stay *None*. In this case
    :meth:`~matplotlib.text.TextWithDash.get_dashrotation` returns
    :meth:`~matplotlib.text.Text.get_rotation`.  (I.e., the dash takes
    its rotation from the text's rotation). Because the text center is
    projected onto the dash, major deviations in the rotation cause
    what may be considered visually unappealing results.
    (default = *None*)

    *dashpad* is a padding length to add (or subtract) space
    between the text and the dash, in canvas units.
    (default = 3)

    *dashpush* \"pushes\" the dash and text away from the point
    specified by :meth:`~matplotlib.text.Text.set_position` by the
    amount in canvas units.  (default = 0)

    .. note::

        The alignment of the two objects is based on the bounding box
        of the :class:`~matplotlib.text.Text`, as obtained by
        :meth:`~matplotlib.artist.Artist.get_window_extent`.  This, in
        turn, appears to depend on the font metrics as given by the
        rendering backend. Hence the quality of the \"centering\" of the
        label text with respect to the dash varies depending on the
        backend used.

    .. note::

        I'm not sure that I got the
        :meth:`~matplotlib.text.TextWithDash.get_window_extent` right,
        or whether that's sufficient for providing the object bounding
        box.

    "
                :superclasses ("Text")
                :members 
                  ( ("__name__" variable nil (reparse-symbol indented_block_body) [36786 36811])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36829 36833]))                          )
                        (reparse-symbol indented_block_body) [36817 36911])
                    ("__init__" function
                       (:suite 
                          ( ("Text" code nil (reparse-symbol indented_block_body) [37487 37856])
                            ("self" variable nil (reparse-symbol indented_block_body) [38042 38211])
                            ("self" variable nil (reparse-symbol indented_block_body) [38221 38243])
                            ("self" variable nil (reparse-symbol indented_block_body) [38252 38274])
                            ("self" variable nil (reparse-symbol indented_block_body) [38283 38312])
                            ("self" variable nil (reparse-symbol indented_block_body) [38321 38356])
                            ("self" variable nil (reparse-symbol indented_block_body) [38365 38398])
                            ("self" variable nil (reparse-symbol indented_block_body) [38407 38430])
                            ("self" variable nil (reparse-symbol indented_block_body) [38439 38464]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36928 36932])
                            ("x" variable nil (reparse-symbol function_parameters) [36951 36952])
                            ("y" variable nil (reparse-symbol function_parameters) [36956 36957])
                            ("text" variable nil (reparse-symbol function_parameters) [36961 36965])
                            ("color" variable nil (reparse-symbol function_parameters) [36987 36992])
                            ("verticalalignment" variable nil (reparse-symbol function_parameters) [37049 37066])
                            ("horizontalalignment" variable nil (reparse-symbol function_parameters) [37094 37113])
                            ("multialignment" variable nil (reparse-symbol function_parameters) [37141 37155])
                            ("fontproperties" variable nil (reparse-symbol function_parameters) [37179 37193])
                            ("rotation" variable nil (reparse-symbol function_parameters) [37248 37256])
                            ("linespacing" variable nil (reparse-symbol function_parameters) [37280 37291])
                            ("dashlength" variable nil (reparse-symbol function_parameters) [37315 37325])
                            ("dashdirection" variable nil (reparse-symbol function_parameters) [37348 37361])
                            ("dashrotation" variable nil (reparse-symbol function_parameters) [37382 37394])
                            ("dashpad" variable nil (reparse-symbol function_parameters) [37418 37425])
                            ("dashpush" variable nil (reparse-symbol function_parameters) [37446 37454]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36915 38465])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38524 38528]))                          )
                        (reparse-symbol indented_block_body) [38507 38719])
                    ("get_prop_tup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38741 38745]))                          
                        :documentation "
        Return a hashable tuple of properties.

        Not intended to be human readable, but useful for backends who
        want to cache derived information about text (eg layouts) and
        need to know if the text has changed.
        ")
                        (reparse-symbol indented_block_body) [38724 39219])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39233 39237])
                            ("renderer" variable nil (reparse-symbol function_parameters) [39239 39247]))                          
                        :documentation "
        Draw the :class:`TextWithDash` object to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [39224 39497])
                    ("update_coords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39520 39524])
                            ("renderer" variable nil (reparse-symbol function_parameters) [39526 39534]))                          
                        :documentation "
        Computes the actual *x*, *y* coordinates for text based on the
        input *x*, *y* and the *dashlength*. Since the rotation is
        with respect to the actual canvas's coordinates we need to map
        back and forth.
        ")
                        (reparse-symbol indented_block_body) [39502 42694])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42721 42725])
                            ("renderer" variable nil (reparse-symbol function_parameters) [42727 42735]))                          )
                        (reparse-symbol indented_block_body) [42699 43583])
                    ("get_dashlength" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43607 43611]))                          
                        :documentation "
        Get the length of the dash.
        ")
                        (reparse-symbol indented_block_body) [43588 43706])
                    ("set_dashlength" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43730 43734])
                            ("dl" variable nil (reparse-symbol function_parameters) [43736 43738]))                          
                        :documentation "
        Set the length of the dash.

        ACCEPTS: float (canvas units)
        ")
                        (reparse-symbol indented_block_body) [43711 43870])
                    ("get_dashdirection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43897 43901]))                          
                        :documentation "
        Get the direction dash.  1 is before the text and 0 is after.
        ")
                        (reparse-symbol indented_block_body) [43875 44033])
                    ("set_dashdirection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44060 44064])
                            ("dd" variable nil (reparse-symbol function_parameters) [44066 44068]))                          
                        :documentation "
        Set the direction of the dash following the text.
        1 is before the text and 0 is after. The default
        is 0, which is what you'd want for the typical
        case of ticks below and on the left of the figure.

        ACCEPTS: int (1 is before, 0 is after)
        ")
                        (reparse-symbol indented_block_body) [44038 44405])
                    ("get_dashrotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44431 44435]))                          
                        :documentation "
        Get the rotation of the dash in degrees.
        ")
                        (reparse-symbol indented_block_body) [44410 44641])
                    ("set_dashrotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44667 44671])
                            ("dr" variable nil (reparse-symbol function_parameters) [44673 44675]))                          
                        :documentation "
        Set the rotation of the dash, in degrees

        ACCEPTS: float (degrees)
        ")
                        (reparse-symbol indented_block_body) [44646 44817])
                    ("get_dashpad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44838 44842]))                          
                        :documentation "
        Get the extra spacing between the dash and the text, in canvas units.
        ")
                        (reparse-symbol indented_block_body) [44822 44976])
                    ("set_dashpad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44997 45001])
                            ("dp" variable nil (reparse-symbol function_parameters) [45003 45005]))                          
                        :documentation "
        Set the \"pad\" of the TextWithDash, which is the extra spacing
        between the dash and the text, in canvas units.

        ACCEPTS: float (canvas units)
        ")
                        (reparse-symbol indented_block_body) [44981 45224])
                    ("get_dashpush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45246 45250]))                          
                        :documentation "
        Get the extra spacing between the dash and the specified text
        position, in canvas units.
        ")
                        (reparse-symbol indented_block_body) [45229 45412])
                    ("set_dashpush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45434 45438])
                            ("dp" variable nil (reparse-symbol function_parameters) [45440 45442]))                          
                        :documentation "
        Set the \"push\" of the TextWithDash, which
        is the extra spacing between the beginning
        of the dash and the specified position.

        ACCEPTS: float (canvas units)
        ")
                        (reparse-symbol indented_block_body) [45417 45685])
                    ("set_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45708 45712])
                            ("xy" variable nil (reparse-symbol function_parameters) [45714 45716]))                          
                        :documentation "
        Set the (*x*, *y*) position of the :class:`TextWithDash`.

        ACCEPTS: (x, y)
        ")
                        (reparse-symbol indented_block_body) [45691 45886])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45901 45905])
                            ("x" variable nil (reparse-symbol function_parameters) [45907 45908]))                          
                        :documentation "
        Set the *x* position of the :class:`TextWithDash`.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [45891 46049])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46064 46068])
                            ("y" variable nil (reparse-symbol function_parameters) [46070 46071]))                          
                        :documentation "
        Set the *y* position of the :class:`TextWithDash`.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [46054 46212])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46235 46239])
                            ("t" variable nil (reparse-symbol function_parameters) [46241 46242]))                          
                        :documentation "
        Set the :class:`matplotlib.transforms.Transform` instance used
        by this artist.

        ACCEPTS: a :class:`matplotlib.transforms.Transform` instance
        ")
                        (reparse-symbol indented_block_body) [46217 46509])
                    ("get_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46529 46533]))                          )
                        (reparse-symbol indented_block_body) [46514 46622])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46642 46646])
                            ("fig" variable nil (reparse-symbol function_parameters) [46648 46651]))                          
                        :documentation "
        Set the figure instance the artist belong to.

        ACCEPTS: a :class:`matplotlib.figure.Figure` instance
        ")
                        (reparse-symbol indented_block_body) [46627 46868]))                  
                :type "class")
                nil [34599 46868])
            ("docstring" code nil nil [46869 46934])
            ("OffsetFrom" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [47029 47050])
                            ("self" variable nil (reparse-symbol indented_block_body) [47059 47085])
                            ("self" code nil (reparse-symbol indented_block_body) [47094 47113]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46980 46984])
                            ("artist" variable nil (reparse-symbol function_parameters) [46986 46992])
                            ("ref_coord" variable nil (reparse-symbol function_parameters) [46994 47003])
                            ("unit" variable nil (reparse-symbol function_parameters) [47005 47009]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [46967 47114])
                    ("set_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47132 47136])
                            ("unit" variable nil (reparse-symbol function_parameters) [47138 47142]))                          )
                        (reparse-symbol indented_block_body) [47119 47215])
                    ("get_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47233 47237]))                          )
                        (reparse-symbol indented_block_body) [47220 47266])
                    ("_get_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47286 47290])
                            ("renderer" variable nil (reparse-symbol function_parameters) [47292 47300]))                          )
                        (reparse-symbol indented_block_body) [47271 47449])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47467 47471])
                            ("renderer" variable nil (reparse-symbol function_parameters) [47473 47481]))                          )
                        (reparse-symbol indented_block_body) [47454 48151]))                  
                :type "class")
                nil [46937 48151])
            ("_AnnotationBase" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [48339 48382])
                            ("if" code nil (reparse-symbol indented_block_body) [48390 48447])
                            ("x, y" code nil (reparse-symbol indented_block_body) [48524 48550])
                            ("self" variable nil (reparse-symbol indented_block_body) [48560 48572])
                            ("self" variable nil (reparse-symbol indented_block_body) [48581 48605])
                            ("self" variable nil (reparse-symbol indented_block_body) [48614 48642])
                            ("self" code nil (reparse-symbol indented_block_body) [48651 48692])
                            ("self" variable nil (reparse-symbol indented_block_body) [48702 48724]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48200 48204])
                            ("xy" variable nil (reparse-symbol function_parameters) [48223 48225])
                            ("xytext" variable nil (reparse-symbol function_parameters) [48227 48233])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [48257 48265])
                            ("textcoords" variable nil (reparse-symbol function_parameters) [48274 48284])
                            ("annotation_clip" variable nil (reparse-symbol function_parameters) [48308 48323]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48187 48725])
                    ("_get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48742 48746])
                            ("renderer" variable nil (reparse-symbol function_parameters) [48748 48756])
                            ("x" variable nil (reparse-symbol function_parameters) [48758 48759])
                            ("y" variable nil (reparse-symbol function_parameters) [48761 48762])
                            ("s" variable nil (reparse-symbol function_parameters) [48764 48765]))                          )
                        (reparse-symbol indented_block_body) [48730 49268])
                    ("_get_xy_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49295 49299])
                            ("renderer" variable nil (reparse-symbol function_parameters) [49301 49309])
                            ("s" variable nil (reparse-symbol function_parameters) [49311 49312]))                          )
                        (reparse-symbol indented_block_body) [49273 52157])
                    ("_get_ref_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52179 52183])
                            ("renderer" variable nil (reparse-symbol function_parameters) [52185 52193]))                          
                        :documentation "
        return x, y (in display coordinate) that is to be used for a reference
        of any offset coordinate
        ")
                        (reparse-symbol indented_block_body) [52163 53061])
                    ("_get_xy_legacy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53482 53486])
                            ("renderer" variable nil (reparse-symbol function_parameters) [53488 53496])
                            ("x" variable nil (reparse-symbol function_parameters) [53498 53499])
                            ("y" variable nil (reparse-symbol function_parameters) [53501 53502])
                            ("s" variable nil (reparse-symbol function_parameters) [53504 53505]))                          
                        :documentation "
        only used when s in ['axes points', 'axes pixel', 'figure points', 'figure pixel'].
        ")
                        (reparse-symbol indented_block_body) [53463 54186])
                    ("set_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54216 54220])
                            ("b" variable nil (reparse-symbol function_parameters) [54222 54223]))                          
                        :documentation "
        set *annotation_clip* attribute.

          * True : the annotation will only be drawn when self.xy is inside the axes.
          * False : the annotation will always be drawn regardless of its position.
          * None : the self.xy will be checked only if *xycoords* is \"data\"
        ")
                        (reparse-symbol indented_block_body) [54192 54572])
                    ("get_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54601 54605]))                          
                        :documentation "
        Return *annotation_clip* attribute.
        See :meth:`set_annotation_clip` for the meaning of return values.
        ")
                        (reparse-symbol indented_block_body) [54577 54787])
                    ("_get_position_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54813 54817])
                            ("renderer" variable nil (reparse-symbol function_parameters) [54819 54827]))                          )
                        (reparse-symbol indented_block_body) [54792 54976])
                    ("_check_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54995 54999])
                            ("renderer" variable nil (reparse-symbol function_parameters) [55001 55009])
                            ("xy_pixel" variable nil (reparse-symbol function_parameters) [55011 55019]))                          
                        :documentation "
        given the xy pixel coordinate, check if the annotation need to
        be drawn.
        ")
                        (reparse-symbol indented_block_body) [54981 55389])
                    ("draggable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55409 55413])
                            ("state" variable nil (reparse-symbol function_parameters) [55415 55420])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [55427 55435]))                          
                        :documentation "
        Set the draggable state -- if state is

          * None : toggle the current state

          * True : turn draggable on

          * False : turn draggable off

        If draggable is on, you can drag the annotation on the canvas with
        the mouse.  The DraggableAnnotation helper instance is returned if
        draggable is on.
        ")
                        (reparse-symbol indented_block_body) [55395 56329]))                  
                :type "class")
                nil [48152 56329])
            ("Annotation" type
               (:documentation "
    A :class:`~matplotlib.text.Text` class to make annotating things
    in the figure, such as :class:`~matplotlib.figure.Figure`,
    :class:`~matplotlib.axes.Axes`,
    :class:`~matplotlib.patches.Rectangle`, etc., easier.
    "
                :superclasses ("Text" "_AnnotationBase")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56630 56634]))                          )
                        (reparse-symbol indented_block_body) [56618 56716])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Annotate the *x*, *y* point *xy* with text *s* at *x*, *y*
        location *xytext*.  (If *xytext* = *None*, defaults to *xy*,
        and if *textcoords* = *None*, defaults to *xycoords*).

        *arrowprops*, if not *None*, is a dictionary of line properties
        (see :class:`matplotlib.lines.Line2D`) for the arrow that connects
        annotation to the point.

        If the dictionary has a key *arrowstyle*, a FancyArrowPatch
        instance is created with the given dictionary and is
        drawn. Otherwise, a YAArow patch instance is created and
        drawn. Valid keys for YAArow are


        =========   =============================================================
        Key         Description
        =========   =============================================================
        width       the width of the arrow in points
        frac        the fraction of the arrow length occupied by the head
        headwidth   the width of the base of the arrow head in points
        shrink      oftentimes it is convenient to have the arrowtip
                    and base a bit away from the text and point being
                    annotated.  If *d* is the distance between the text and
                    annotated point, shrink will shorten the arrow so the tip
                    and base are shink percent of the distance *d* away from the
                    endpoints.  ie, ``shrink=0.05 is 5%%``
        ?           any key for :class:`matplotlib.patches.polygon`
        =========   =============================================================


        Valid keys for FancyArrowPatch are


        ===============  ======================================================
        Key              Description
        ===============  ======================================================
        arrowstyle       the arrow style
        connectionstyle  the connection style
        relpos           default is (0.5, 0.5)
        patchA           default is bounding box of the text
        patchB           default is None
        shrinkA          default is 2 points
        shrinkB          default is 2 points
        mutation_scale   default is text size (in points)
        mutation_aspect  default is 1.
        ?                any key for :class:`matplotlib.patches.PathPatch`
        ===============  ======================================================


        *xycoords* and *textcoords* are strings that indicate the
        coordinates of *xy* and *xytext*.

        =================   ===================================================
        Property            Description
        =================   ===================================================
        'figure points'     points from the lower left corner of the figure
        'figure pixels'     pixels from the lower left corner of the figure
        'figure fraction'   0,0 is lower left of figure and 1,1 is upper, right
        'axes points'       points from lower left corner of axes
        'axes pixels'       pixels from lower left corner of axes
        'axes fraction'     0,1 is lower left of axes and 1,1 is upper right
        'data'              use the coordinate system of the object being
                            annotated (default)
        'offset points'     Specify an offset (in points) from the *xy* value

        'polar'             you can specify *theta*, *r* for the annotation,
                            even in cartesian plots.  Note that if you
                            are using a polar axes, you do not need
                            to specify polar for the coordinate
                            system since that is the native \"data\" coordinate
                            system.
        =================   ===================================================

        If a 'points' or 'pixels' option is specified, values will be
        added to the bottom-left and if negative, values will be
        subtracted from the top-right.  Eg::

          # 10 points to the right of the left border of the axes and
          # 5 points below the top border
          xy=(10,-5), xycoords='axes points'

        You may use an instance of
        :class:`~matplotlib.transforms.Transform` or
        :class:`~matplotlib.artist.Artist`. See
        :ref:`plotting-guide-annotation` for more details.


        The *annotation_clip* attribute contols the visibility of the
        annotation when it goes outside the axes area. If True, the
        annotation will only be drawn when the *xy* is inside the
        axes. If False, the annotation will always be drawn regardless
        of its position.  The default is *None*, which behave as True
        only if *xycoords* is\"data\".

        Additional kwargs are Text properties:

        %(Text)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [56983 61827])
                            ("_AnnotationBase" code nil (reparse-symbol indented_block_body) [61837 62060])
                            ("x, y" code nil (reparse-symbol indented_block_body) [62070 62087])
                            ("Text" code nil (reparse-symbol indented_block_body) [62096 62134])
                            ("self" variable nil (reparse-symbol indented_block_body) [62144 62172])
                            ("self" variable nil (reparse-symbol indented_block_body) [62182 62199])
                            ("if" code nil (reparse-symbol indented_block_body) [62209 62552]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56763 56767])
                            ("s" variable nil (reparse-symbol function_parameters) [56769 56770])
                            ("xy" variable nil (reparse-symbol function_parameters) [56772 56774])
                            ("xytext" variable nil (reparse-symbol function_parameters) [56793 56799])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [56823 56831])
                            ("textcoords" variable nil (reparse-symbol function_parameters) [56857 56867])
                            ("arrowprops" variable nil (reparse-symbol function_parameters) [56891 56901])
                            ("annotation_clip" variable nil (reparse-symbol function_parameters) [56925 56940])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [56964 56972]))                          
                        :documentation "
        Annotate the *x*, *y* point *xy* with text *s* at *x*, *y*
        location *xytext*.  (If *xytext* = *None*, defaults to *xy*,
        and if *textcoords* = *None*, defaults to *xycoords*).

        *arrowprops*, if not *None*, is a dictionary of line properties
        (see :class:`matplotlib.lines.Line2D`) for the arrow that connects
        annotation to the point.

        If the dictionary has a key *arrowstyle*, a FancyArrowPatch
        instance is created with the given dictionary and is
        drawn. Otherwise, a YAArow patch instance is created and
        drawn. Valid keys for YAArow are


        =========   =============================================================
        Key         Description
        =========   =============================================================
        width       the width of the arrow in points
        frac        the fraction of the arrow length occupied by the head
        headwidth   the width of the base of the arrow head in points
        shrink      oftentimes it is convenient to have the arrowtip
                    and base a bit away from the text and point being
                    annotated.  If *d* is the distance between the text and
                    annotated point, shrink will shorten the arrow so the tip
                    and base are shink percent of the distance *d* away from the
                    endpoints.  ie, ``shrink=0.05 is 5%%``
        ?           any key for :class:`matplotlib.patches.polygon`
        =========   =============================================================


        Valid keys for FancyArrowPatch are


        ===============  ======================================================
        Key              Description
        ===============  ======================================================
        arrowstyle       the arrow style
        connectionstyle  the connection style
        relpos           default is (0.5, 0.5)
        patchA           default is bounding box of the text
        patchB           default is None
        shrinkA          default is 2 points
        shrinkB          default is 2 points
        mutation_scale   default is text size (in points)
        mutation_aspect  default is 1.
        ?                any key for :class:`matplotlib.patches.PathPatch`
        ===============  ======================================================


        *xycoords* and *textcoords* are strings that indicate the
        coordinates of *xy* and *xytext*.

        =================   ===================================================
        Property            Description
        =================   ===================================================
        'figure points'     points from the lower left corner of the figure
        'figure pixels'     pixels from the lower left corner of the figure
        'figure fraction'   0,0 is lower left of figure and 1,1 is upper, right
        'axes points'       points from lower left corner of axes
        'axes pixels'       pixels from lower left corner of axes
        'axes fraction'     0,1 is lower left of axes and 1,1 is upper right
        'data'              use the coordinate system of the object being
                            annotated (default)
        'offset points'     Specify an offset (in points) from the *xy* value

        'polar'             you can specify *theta*, *r* for the annotation,
                            even in cartesian plots.  Note that if you
                            are using a polar axes, you do not need
                            to specify polar for the coordinate
                            system since that is the native \"data\" coordinate
                            system.
        =================   ===================================================

        If a 'points' or 'pixels' option is specified, values will be
        added to the bottom-left and if negative, values will be
        subtracted from the top-right.  Eg::

          # 10 points to the right of the left border of the axes and
          # 5 points below the top border
          xy=(10,-5), xycoords='axes points'

        You may use an instance of
        :class:`~matplotlib.transforms.Transform` or
        :class:`~matplotlib.artist.Artist`. See
        :ref:`plotting-guide-annotation` for more details.


        The *annotation_clip* attribute contols the visibility of the
        annotation when it goes outside the axes area. If True, the
        annotation will only be drawn when the *xy* is inside the
        axes. If False, the annotation will always be drawn regardless
        of its position.  The default is *None*, which behave as True
        only if *xycoords* is\"data\".

        Additional kwargs are Text properties:

        %(Text)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [56720 62552])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62571 62575])
                            ("event" variable nil (reparse-symbol function_parameters) [62576 62581]))                          )
                        (reparse-symbol indented_block_body) [62558 62837])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62858 62862])
                            ("fig" variable nil (reparse-symbol function_parameters) [62864 62867]))                          )
                        (reparse-symbol indented_block_body) [62843 63068])
                    ("update_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63095 63099])
                            ("renderer" variable nil (reparse-symbol function_parameters) [63101 63109]))                          )
                        (reparse-symbol indented_block_body) [63074 63294])
                    ("_update_position_xytext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63328 63332])
                            ("renderer" variable nil (reparse-symbol function_parameters) [63334 63342])
                            ("xy_pixel" variable nil (reparse-symbol function_parameters) [63344 63352]))                          )
                        (reparse-symbol indented_block_body) [63300 67470])
                    ("update_bbox_position_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67506 67510])
                            ("renderer" variable nil (reparse-symbol function_parameters) [67512 67520]))                          
                        :documentation "
        Update the location and the size of the bbox. This method
        should be used when the position and size of the bbox needs to
        be updated before actually drawing the bbox.
        ")
                        (reparse-symbol indented_block_body) [67476 68476])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68517 68521])
                            ("renderer" variable nil (reparse-symbol function_parameters) [68523 68531]))                          
                        :documentation "
        Draw the :class:`Annotation` object to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [68483 69414]))                  
                :type "class")
                nil [56331 69414])
            ("docstring" code nil nil [69419 69483])
            ("matplotlib.textpath" include nil nil [69486 69526]))          
      :file "text.py"
      :pointmax 69527
      :fsize 69526
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [26 57])
            ("math" include nil nil [58 69])
            ("matplotlib" include nil nil [71 95])
            ("numpy" include nil nil [96 114])
            ("matplotlib.cbook" include nil nil [115 147])
            ("matplotlib.artist" include nil nil [148 182])
            ("matplotlib.artist" include nil nil [183 232])
            ("matplotlib.colors" include nil nil [233 267])
            ("matplotlib" include nil nil [268 300])
            ("matplotlib.transforms" include nil nil [301 343])
            ("matplotlib.path" include nil nil [344 376])
            ("docstring" code nil nil [571 1671])
            ("Patch" type
               (:documentation "
    A patch is a 2D artist with a face color and an edge color.

    If any of *edgecolor*, *facecolor*, *linewidth*, or *antialiased*
    are *None*, they default to their rc params setting.
    "
                :superclasses ("artist.Artist")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [1913 1923])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1940 1944]))                          )
                        (reparse-symbol indented_block_body) [1928 1997])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The following kwarg properties are supported

        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [2370 2457])
                            ("artist" code nil (reparse-symbol indented_block_body) [2466 2494])
                            ("if" code nil (reparse-symbol indented_block_body) [2504 2570])
                            ("if" code nil (reparse-symbol indented_block_body) [2578 2620])
                            ("if" code nil (reparse-symbol indented_block_body) [2628 2700])
                            ("self" variable nil (reparse-symbol indented_block_body) [2709 2726])
                            ("if" code nil (reparse-symbol indented_block_body) [2767 3182])
                            ("self" code nil (reparse-symbol indented_block_body) [3190 3219])
                            ("self" code nil (reparse-symbol indented_block_body) [3228 3257])
                            ("self" code nil (reparse-symbol indented_block_body) [3266 3299])
                            ("self" code nil (reparse-symbol indented_block_body) [3308 3329])
                            ("self" code nil (reparse-symbol indented_block_body) [3338 3357])
                            ("self" variable nil (reparse-symbol indented_block_body) [3366 3423])
                            ("self" code nil (reparse-symbol indented_block_body) [3433 3468])
                            ("if" code nil (reparse-symbol indented_block_body) [3478 3522]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2015 2019])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [2038 2047])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [2071 2080])
                            ("color" variable nil (reparse-symbol function_parameters) [2104 2109])
                            ("linewidth" variable nil (reparse-symbol function_parameters) [2133 2142])
                            ("linestyle" variable nil (reparse-symbol function_parameters) [2166 2175])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [2199 2210])
                            ("hatch" variable nil (reparse-symbol function_parameters) [2236 2241])
                            ("fill" variable nil (reparse-symbol function_parameters) [2267 2271])
                            ("path_effects" variable nil (reparse-symbol function_parameters) [2295 2307])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2333 2341]))                          
                        :documentation "
        The following kwarg properties are supported

        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2002 3522])
                    ("get_verts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3541 3545]))                          
                        :documentation "
        Return a copy of the vertices used in this patch

        If the patch contains Bezier curves, the curves will be
        interpolated by line segments.  To access the curves as
        curves, use :meth:`get_path`.
        ")
                        (reparse-symbol indented_block_body) [3527 3982])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4000 4004])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [4006 4016])
                            ("radius" variable nil (reparse-symbol function_parameters) [4018 4024]))                          
                        :documentation "Test whether the mouse event occurred in the patch.

        Returns T/F, {}
        ")
                        (reparse-symbol indented_block_body) [3987 4645])
                    ("contains_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4669 4673])
                            ("point" variable nil (reparse-symbol function_parameters) [4675 4680])
                            ("radius" variable nil (reparse-symbol function_parameters) [4682 4688]))                          
                        :documentation "
        Returns *True* if the given point is inside the path
        (transformed with its transform attribute).
        ")
                        (reparse-symbol indented_block_body) [4650 4985])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5006 5010])
                            ("other" variable nil (reparse-symbol function_parameters) [5012 5017]))                          
                        :documentation "
        Updates this :class:`Patch` from the properties of *other*.
        ")
                        (reparse-symbol indented_block_body) [4990 5582])
                    ("get_extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5603 5607]))                          
                        :documentation "
        Return a :class:`~matplotlib.transforms.Bbox` object defining
        the axis-aligned extents of the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [5587 5825])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5848 5852]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` applied
        to the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [5830 6057])
                    ("get_data_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6085 6089]))                          )
                        (reparse-symbol indented_block_body) [6062 6141])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6170 6174]))                          )
                        (reparse-symbol indented_block_body) [6146 6223])
                    ("get_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6248 6252]))                          
                        :documentation "
        Returns True if the :class:`Patch` is to be drawn with antialiasing.
        ")
                        (reparse-symbol indented_block_body) [6228 6389])
                    ("get_aa" variable nil (reparse-symbol indented_block_body) [6393 6417])
                    ("get_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6441 6445]))                          
                        :documentation "
        Return the edge color of the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [6423 6556])
                    ("get_ec" variable nil (reparse-symbol indented_block_body) [6560 6582])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6606 6610]))                          
                        :documentation "
        Return the face color of the :class:`Patch`.
        ")
                        (reparse-symbol indented_block_body) [6588 6721])
                    ("get_fc" variable nil (reparse-symbol indented_block_body) [6725 6747])
                    ("get_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6771 6775]))                          
                        :documentation "
        Return the line width in points.
        ")
                        (reparse-symbol indented_block_body) [6753 6874])
                    ("get_lw" variable nil (reparse-symbol indented_block_body) [6878 6900])
                    ("get_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6924 6928]))                          
                        :documentation "
        Return the linestyle.  Will be one of ['solid' | 'dashed' |
        'dashdot' | 'dotted']
        ")
                        (reparse-symbol indented_block_body) [6906 7084])
                    ("get_ls" variable nil (reparse-symbol indented_block_body) [7088 7110])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7136 7140])
                            ("aa" variable nil (reparse-symbol function_parameters) [7142 7144]))                          
                        :documentation "
        Set whether to use antialiased rendering

        ACCEPTS: [True | False]  or None for default
        ")
                        (reparse-symbol indented_block_body) [7116 7367])
                    ("set_aa" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7383 7387])
                            ("aa" variable nil (reparse-symbol function_parameters) [7389 7391]))                          
                        :documentation "alias for set_antialiased")
                        (reparse-symbol indented_block_body) [7372 7474])
                    ("set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7497 7501])
                            ("color" variable nil (reparse-symbol function_parameters) [7503 7508]))                          
                        :documentation "
        Set the patch edge color

        ACCEPTS: mpl color spec, or None for default, or 'none' for no color
        ")
                        (reparse-symbol indented_block_body) [7479 7788])
                    ("set_ec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7804 7808])
                            ("color" variable nil (reparse-symbol function_parameters) [7810 7815]))                          
                        :documentation "alias for set_edgecolor")
                        (reparse-symbol indented_block_body) [7793 7897])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7920 7924])
                            ("color" variable nil (reparse-symbol function_parameters) [7926 7931]))                          
                        :documentation "
        Set the patch face color

        ACCEPTS: mpl color spec, or None for default, or 'none' for no color
        ")
                        (reparse-symbol indented_block_body) [7902 8469])
                    ("set_fc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8485 8489])
                            ("color" variable nil (reparse-symbol function_parameters) [8491 8496]))                          
                        :documentation "alias for set_facecolor")
                        (reparse-symbol indented_block_body) [8474 8578])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8597 8601])
                            ("c" variable nil (reparse-symbol function_parameters) [8603 8604]))                          
                        :documentation "
        Set both the edgecolor and the facecolor.

        ACCEPTS: matplotlib color spec

        .. seealso::

            :meth:`set_facecolor`, :meth:`set_edgecolor`
               For setting the edge or face color individually.
        ")
                        (reparse-symbol indented_block_body) [8583 8925])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8944 8948])
                            ("alpha" variable nil (reparse-symbol function_parameters) [8950 8955]))                          
                        :documentation "
        Set the alpha tranparency of the patch.

        ACCEPTS: float or None
        ")
                        (reparse-symbol indented_block_body) [8930 9497])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9520 9524])
                            ("w" variable nil (reparse-symbol function_parameters) [9526 9527]))                          
                        :documentation "
        Set the patch linewidth in points

        ACCEPTS: float or None for default
        ")
                        (reparse-symbol indented_block_body) [9502 9726])
                    ("set_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9742 9746])
                            ("lw" variable nil (reparse-symbol function_parameters) [9748 9750]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [9731 9829])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9852 9856])
                            ("ls" variable nil (reparse-symbol function_parameters) [9858 9860]))                          
                        :documentation "
        Set the patch linestyle

        ACCEPTS: ['solid' | 'dashed' | 'dashdot' | 'dotted']
        ")
                        (reparse-symbol indented_block_body) [9834 10046])
                    ("set_ls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10062 10066])
                            ("ls" variable nil (reparse-symbol function_parameters) [10068 10070]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [10051 10149])
                    ("set_fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10167 10171])
                            ("b" variable nil (reparse-symbol function_parameters) [10173 10174]))                          
                        :documentation "
        Set whether to fill the patch

        ACCEPTS: [True | False]
        ")
                        (reparse-symbol indented_block_body) [10154 10354])
                    ("get_fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10372 10376]))                          )
                        (reparse-symbol indented_block_body) [10359 10442])
                    ("fill" variable nil (reparse-symbol indented_block_body) [10589 10624])
                    ("set_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10644 10648])
                            ("hatch" variable nil (reparse-symbol function_parameters) [10650 10655]))                          
                        :documentation "
        Set the hatching pattern

        *hatch* can be one of::

          /   - diagonal hatching
          \\   - back diagonal
          |   - vertical
          -   - horizontal
          +   - crossed
          x   - crossed diagonal
          o   - small circle
          O   - large circle
          .   - dots
          *   - stars

        Letters can be combined, in which case all the specified
        hatchings are done.  If same letter repeats, it increases the
        density of hatching of that pattern.

        Hatching is supported in the PostScript, PDF, SVG and Agg
        backends only.

        ACCEPTS: [ '/' | '\\\\\\\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ]
        ")
                        (reparse-symbol indented_block_body) [10630 11405])
                    ("get_hatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11424 11428]))                          )
                        (reparse-symbol indented_block_body) [11410 11504])
                    ("set_path_effects" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11530 11534])
                            ("path_effects" variable nil (reparse-symbol function_parameters) [11536 11548]))                          
                        :documentation "
        set path_effects, which should be a list of instances of
        matplotlib.patheffect._Base class or its derivatives.
        ")
                        (reparse-symbol indented_block_body) [11509 11744])
                    ("get_path_effects" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11770 11774]))                          )
                        (reparse-symbol indented_block_body) [11749 11811])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11850 11854])
                            ("renderer" variable nil (reparse-symbol function_parameters) [11856 11864]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11816 13247])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13265 13269]))                          
                        :documentation "
        Return the path of this patch
        ")
                        (reparse-symbol indented_block_body) [13252 13393])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13420 13424])
                            ("renderer" variable nil (reparse-symbol function_parameters) [13426 13434]))                          )
                        (reparse-symbol indented_block_body) [13398 13507]))                  
                :type "class")
                nil [1673 13507])
            ("patchdoc" variable nil nil [13508 13538])
            ("for" code nil nil [13539 13770])
            ("docstring" code nil nil [13847 13895])
            ("Shadow" type
               (:superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13934 13938]))                          )
                        (reparse-symbol indented_block_body) [13922 13987])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a shadow of the given *patch* offset by *ox*, *oy*.
        *props*, if not *None*, is a patch property update dictionary.
        If *None*, the shadow will have have the same color as the face,
        but darkened.

        kwargs are
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [14087 14373])
                            ("Patch" code nil (reparse-symbol indented_block_body) [14382 14402])
                            ("self" variable nil (reparse-symbol indented_block_body) [14411 14429])
                            ("self" variable nil (reparse-symbol indented_block_body) [14438 14456])
                            ("self, self" code nil (reparse-symbol indented_block_body) [14465 14492])
                            ("self" variable nil (reparse-symbol indented_block_body) [14501 14547])
                            ("self" code nil (reparse-symbol indented_block_body) [14556 14570]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14035 14039])
                            ("patch" variable nil (reparse-symbol function_parameters) [14041 14046])
                            ("ox" variable nil (reparse-symbol function_parameters) [14048 14050])
                            ("oy" variable nil (reparse-symbol function_parameters) [14052 14054])
                            ("props" variable nil (reparse-symbol function_parameters) [14056 14061])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [14068 14076]))                          
                        :documentation "
        Create a shadow of the given *patch* offset by *ox*, *oy*.
        *props*, if not *None*, is a patch property update dictionary.
        If *None*, the shadow will have have the same color as the face,
        but darkened.

        kwargs are
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13992 14571])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14588 14592]))                          )
                        (reparse-symbol indented_block_body) [14576 15006])
                    ("_update_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15033 15037])
                            ("renderer" variable nil (reparse-symbol function_parameters) [15039 15047]))                          )
                        (reparse-symbol indented_block_body) [15011 15205])
                    ("_get_ox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15222 15226]))                          )
                        (reparse-symbol indented_block_body) [15210 15253])
                    ("_set_ox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15269 15273])
                            ("ox" variable nil (reparse-symbol function_parameters) [15275 15277]))                          )
                        (reparse-symbol indented_block_body) [15257 15302])
                    ("_get_oy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15319 15323]))                          )
                        (reparse-symbol indented_block_body) [15307 15350])
                    ("_set_oy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15366 15370])
                            ("oy" variable nil (reparse-symbol function_parameters) [15372 15374]))                          )
                        (reparse-symbol indented_block_body) [15354 15399])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15417 15421]))                          )
                        (reparse-symbol indented_block_body) [15404 15461])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15490 15494]))                          )
                        (reparse-symbol indented_block_body) [15466 15570])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15584 15588])
                            ("renderer" variable nil (reparse-symbol function_parameters) [15590 15598]))                          )
                        (reparse-symbol indented_block_body) [15575 15677]))                  
                :type "class")
                nil [13897 15677])
            ("Rectangle" type
               (:documentation "
    Draw a rectangle with lower left at *xy* = (*x*, *y*) with
    specified *width* and *height*.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15834 15838]))                          )
                        (reparse-symbol indented_block_body) [15822 15960])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"

        *fill* is a boolean indicating whether to fill the rectangle

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [16052 16182])
                            ("Patch" code nil (reparse-symbol indented_block_body) [16192 16222])
                            ("self" variable nil (reparse-symbol indented_block_body) [16232 16247])
                            ("self" variable nil (reparse-symbol indented_block_body) [16256 16271])
                            ("self" variable nil (reparse-symbol indented_block_body) [16280 16299])
                            ("self" variable nil (reparse-symbol indented_block_body) [16308 16329])
                            ("self" variable nil (reparse-symbol indented_block_body) [16411 16464]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16008 16012])
                            ("xy" variable nil (reparse-symbol function_parameters) [16014 16016])
                            ("width" variable nil (reparse-symbol function_parameters) [16018 16023])
                            ("height" variable nil (reparse-symbol function_parameters) [16025 16031])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16033 16041]))                          
                        :documentation "

        *fill* is a boolean indicating whether to fill the rectangle

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15965 16465])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16483 16487]))                          
                        :documentation "
        Return the vertices of the rectangle
        ")
                        (reparse-symbol indented_block_body) [16470 16596])
                    ("_update_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16629 16633]))                          
                        :documentation "NOTE: This cannot be called until after this has been added
                 to an Axes, otherwise unit conversion will fail. This
                 maxes it very important to call the accessor method and
                 not directly access the transformation member variable.
        ")
                        (reparse-symbol indented_block_body) [16601 17246])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17275 17279]))                          )
                        (reparse-symbol indented_block_body) [17251 17357])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17375 17379])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [17381 17391]))                          )
                        (reparse-symbol indented_block_body) [17362 17693])
                    ("get_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17708 17712]))                          )
                        (reparse-symbol indented_block_body) [17698 17787])
                    ("get_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17802 17806]))                          )
                        (reparse-symbol indented_block_body) [17792 17883])
                    ("get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17899 17903]))                          )
                        (reparse-symbol indented_block_body) [17888 17999])
                    ("get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18018 18022]))                          )
                        (reparse-symbol indented_block_body) [18004 18097])
                    ("get_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18117 18121]))                          )
                        (reparse-symbol indented_block_body) [18102 18197])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18212 18216])
                            ("x" variable nil (reparse-symbol function_parameters) [18218 18219]))                          
                        :documentation "
        Set the left coord of the rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [18202 18334])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18349 18353])
                            ("y" variable nil (reparse-symbol function_parameters) [18355 18356]))                          
                        :documentation "
        Set the bottom coord of the rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [18339 18473])
                    ("set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18489 18493])
                            ("xy" variable nil (reparse-symbol function_parameters) [18495 18497]))                          
                        :documentation "
        Set the left and bottom coords of the rectangle

        ACCEPTS: 2-item sequence
        ")
                        (reparse-symbol indented_block_body) [18478 18644])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18663 18667])
                            ("w" variable nil (reparse-symbol function_parameters) [18669 18670]))                          
                        :documentation "
        Set the width rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [18649 18777])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18797 18801])
                            ("h" variable nil (reparse-symbol function_parameters) [18803 18804]))                          
                        :documentation "
        Set the width rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [18782 18912])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18932 18936])
                            ("args" variable nil (reparse-symbol function_parameters) [18938 18943]))                          
                        :documentation "
        Set the bounds of the rectangle: l,b,w,h

        ACCEPTS: (left, bottom, width, height)
        ")
                        (reparse-symbol indented_block_body) [18917 19252])
                    ("get_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19270 19274]))                          )
                        (reparse-symbol indented_block_body) [19257 19365])
                    ("xy" variable nil (reparse-symbol indented_block_body) [19370 19399]))                  
                :type "class")
                nil [15678 19400])
            ("RegularPolygon" type
               (:documentation "
    A regular polygon patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19491 19495]))                          )
                        (reparse-symbol indented_block_body) [19479 19573])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Constructor arguments:

        *xy*
          A length 2 tuple (*x*, *y*) of the center.

        *numVertices*
          the number of vertices.

        *radius*
          The distance from the center to each of the vertices.

        *orientation*
          rotates the polygon (in radians).

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [19705 20069])
                            ("self" variable nil (reparse-symbol indented_block_body) [20078 20091])
                            ("self" variable nil (reparse-symbol indented_block_body) [20100 20131])
                            ("self" variable nil (reparse-symbol indented_block_body) [20140 20171])
                            ("self" variable nil (reparse-symbol indented_block_body) [20180 20201])
                            ("self" variable nil (reparse-symbol indented_block_body) [20210 20261])
                            ("self" variable nil (reparse-symbol indented_block_body) [20270 20314])
                            ("self" code nil (reparse-symbol indented_block_body) [20323 20347])
                            ("Patch" code nil (reparse-symbol indented_block_body) [20357 20387]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19621 19625])
                            ("xy" variable nil (reparse-symbol function_parameters) [19627 19629])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [19631 19642])
                            ("radius" variable nil (reparse-symbol function_parameters) [19644 19650])
                            ("orientation" variable nil (reparse-symbol function_parameters) [19654 19665])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19686 19694]))                          
                        :documentation "
        Constructor arguments:

        *xy*
          A length 2 tuple (*x*, *y*) of the center.

        *numVertices*
          the number of vertices.

        *radius*
          The distance from the center to each of the vertices.

        *orientation*
          rotates the polygon (in radians).

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19578 20388])
                    ("_update_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20415 20419]))                          )
                        (reparse-symbol indented_block_body) [20393 20568])
                    ("_get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20585 20589]))                          )
                        (reparse-symbol indented_block_body) [20573 20616])
                    ("_set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20632 20636])
                            ("xy" variable nil (reparse-symbol function_parameters) [20638 20640]))                          )
                        (reparse-symbol indented_block_body) [20620 20698])
                    ("xy" variable nil (reparse-symbol indented_block_body) [20702 20733])
                    ("_get_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20760 20764]))                          )
                        (reparse-symbol indented_block_body) [20739 20800])
                    ("_set_orientation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20825 20829])
                            ("orientation" variable nil (reparse-symbol function_parameters) [20831 20842]))                          )
                        (reparse-symbol indented_block_body) [20804 20918])
                    ("orientation" variable nil (reparse-symbol indented_block_body) [20922 20980])
                    ("_get_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21002 21006]))                          )
                        (reparse-symbol indented_block_body) [20986 21037])
                    ("_set_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21057 21061])
                            ("radius" variable nil (reparse-symbol function_parameters) [21063 21069]))                          )
                        (reparse-symbol indented_block_body) [21041 21135])
                    ("radius" variable nil (reparse-symbol indented_block_body) [21139 21182])
                    ("_get_numvertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21209 21213]))                          )
                        (reparse-symbol indented_block_body) [21188 21249])
                    ("_set_numvertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21274 21278])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [21280 21291]))                          )
                        (reparse-symbol indented_block_body) [21253 21334])
                    ("numvertices" variable nil (reparse-symbol indented_block_body) [21338 21396])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21415 21419]))                          )
                        (reparse-symbol indented_block_body) [21402 21448])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21477 21481]))                          )
                        (reparse-symbol indented_block_body) [21453 21553]))                  
                :type "class")
                nil [19401 21553])
            ("PathPatch" type
               (:documentation "
    A general polycurve path patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21646 21650]))                          )
                        (reparse-symbol indented_block_body) [21634 21721])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *path* is a :class:`matplotlib.path.Path` object.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        \"\"\"" code nil (reparse-symbol indented_block_body) [21800 22007])
                            ("Patch" code nil (reparse-symbol indented_block_body) [22016 22046])
                            ("self" variable nil (reparse-symbol indented_block_body) [22055 22072]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21769 21773])
                            ("path" variable nil (reparse-symbol function_parameters) [21775 21779])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [21781 21789]))                          
                        :documentation "
        *path* is a :class:`matplotlib.path.Path` object.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21726 22073])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22091 22095]))                          )
                        (reparse-symbol indented_block_body) [22078 22124]))                  
                :type "class")
                nil [21554 22124])
            ("Polygon" type
               (:documentation "
    A general polygon patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22208 22212]))                          )
                        (reparse-symbol indented_block_body) [22196 22283])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xy* is a numpy array with shape Nx2.

        If *closed* is *True*, the polygon will be closed so the
        starting and ending points are the same.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        \"\"\"" code nil (reparse-symbol indented_block_body) [22373 22683])
                            ("Patch" code nil (reparse-symbol indented_block_body) [22692 22722])
                            ("xy" variable nil (reparse-symbol indented_block_body) [22731 22761])
                            ("self" variable nil (reparse-symbol indented_block_body) [22770 22791])
                            ("self" variable nil (reparse-symbol indented_block_body) [22801 22822])
                            ("if" code nil (reparse-symbol indented_block_body) [22831 22901])
                            ("self" code nil (reparse-symbol indented_block_body) [22910 22926]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22331 22335])
                            ("xy" variable nil (reparse-symbol function_parameters) [22337 22339])
                            ("closed" variable nil (reparse-symbol function_parameters) [22341 22347])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [22354 22362]))                          
                        :documentation "
        *xy* is a numpy array with shape Nx2.

        If *closed* is *True*, the polygon will be closed so the
        starting and ending points are the same.

        Valid kwargs are:
        %(Patch)s

        .. seealso::

            :class:`Patch`
                For additional kwargs

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22288 22927])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22945 22949]))                          )
                        (reparse-symbol indented_block_body) [22932 22978])
                    ("get_closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22998 23002]))                          )
                        (reparse-symbol indented_block_body) [22983 23033])
                    ("set_closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23053 23057])
                            ("closed" variable nil (reparse-symbol function_parameters) [23059 23065]))                          )
                        (reparse-symbol indented_block_body) [23038 23431])
                    ("get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23447 23451]))                          )
                        (reparse-symbol indented_block_body) [23436 23489])
                    ("set_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23504 23508])
                            ("vertices" variable nil (reparse-symbol function_parameters) [23510 23518]))                          )
                        (reparse-symbol indented_block_body) [23493 23578])
                    ("_get_xy" variable nil (reparse-symbol indented_block_body) [23582 23598])
                    ("_set_xy" variable nil (reparse-symbol indented_block_body) [23603 23619])
                    ("xy" variable nil (reparse-symbol indented_block_body) [23624 23967]))                  
                :type "class")
                nil [22125 23968])
            ("Wedge" type
               (:documentation "
    Wedge shaped patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24045 24049]))                          )
                        (reparse-symbol indented_block_body) [24033 24108])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Draw a wedge centered at *x*, *y* center with radius *r* that
        sweeps *theta1* to *theta2* (in degrees).  If *width* is given,
        then a partial wedge is drawn from inner radius *r* - *width*
        to outer radius *r*.

        Valid kwargs are:

        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [24220 24522])
                            ("Patch" code nil (reparse-symbol indented_block_body) [24531 24561])
                            ("self" variable nil (reparse-symbol indented_block_body) [24570 24590])
                            ("self, self" code nil (reparse-symbol indented_block_body) [24599 24626])
                            ("self, self" code nil (reparse-symbol indented_block_body) [24635 24674])
                            ("delta" code nil (reparse-symbol indented_block_body) [24761 24780])
                            ("if" code nil (reparse-symbol indented_block_body) [24789 24949])
                            ("arc" variable nil (reparse-symbol indented_block_body) [24988 25017])
                            ("if" code nil (reparse-symbol indented_block_body) [25027 25625])
                            ("v" variable nil (reparse-symbol indented_block_body) [25693 25699])
                            ("v" variable nil (reparse-symbol indented_block_body) [25708 25731])
                            ("self" variable nil (reparse-symbol indented_block_body) [25740 25762])
                            ("self" variable nil (reparse-symbol indented_block_body) [25771 25825]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24156 24160])
                            ("center" variable nil (reparse-symbol function_parameters) [24162 24168])
                            ("r" variable nil (reparse-symbol function_parameters) [24170 24171])
                            ("theta1" variable nil (reparse-symbol function_parameters) [24173 24179])
                            ("theta2" variable nil (reparse-symbol function_parameters) [24181 24187])
                            ("width" variable nil (reparse-symbol function_parameters) [24189 24194])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [24201 24209]))                          
                        :documentation "
        Draw a wedge centered at *x*, *y* center with radius *r* that
        sweeps *theta1* to *theta2* (in degrees).  If *width* is given,
        then a partial wedge is drawn from inner radius *r* - *width*
        to outer radius *r*.

        Valid kwargs are:

        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24113 25826])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25844 25848]))                          )
                        (reparse-symbol indented_block_body) [25831 25877]))                  
                :type "class")
                nil [23969 25877])
            ("Arrow" type
               (:documentation "
    An arrow patch.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26005 26009]))                          )
                        (reparse-symbol indented_block_body) [25993 26037])
                    ("_path" variable nil (reparse-symbol indented_block_body) [26042 26254])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Draws an arrow, starting at (*x*, *y*), direction and length
        given by (*dx*, *dy*) the width of the arrow is scaled by *width*.

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [26355 26559])
                            ("Patch" code nil (reparse-symbol indented_block_body) [26568 26598])
                            ("L" code nil (reparse-symbol indented_block_body) [26607 26636])
                            ("cx" code nil (reparse-symbol indented_block_body) [26671 26687])
                            ("sx" code nil (reparse-symbol indented_block_body) [26696 26712])
                            ("trans1" variable nil (reparse-symbol indented_block_body) [26722 26768])
                            ("trans2" variable nil (reparse-symbol indented_block_body) [26777 26844])
                            ("trans3" variable nil (reparse-symbol indented_block_body) [26853 26899])
                            ("trans" code nil (reparse-symbol indented_block_body) [26908 26940])
                            ("self" variable nil (reparse-symbol indented_block_body) [26949 26987]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26304 26308])
                            ("x" variable nil (reparse-symbol function_parameters) [26310 26311])
                            ("y" variable nil (reparse-symbol function_parameters) [26313 26314])
                            ("dx" variable nil (reparse-symbol function_parameters) [26316 26318])
                            ("dy" variable nil (reparse-symbol function_parameters) [26320 26322])
                            ("width" variable nil (reparse-symbol function_parameters) [26324 26329])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [26335 26343]))                          
                        :documentation "
        Draws an arrow, starting at (*x*, *y*), direction and length
        given by (*dx*, *dy*) the width of the arrow is scaled by *width*.

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26260 26988])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27006 27010]))                          )
                        (reparse-symbol indented_block_body) [26993 27039])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27068 27072]))                          )
                        (reparse-symbol indented_block_body) [27044 27112]))                  
                :type "class")
                nil [25933 27112])
            ("FancyArrow" type
               (:documentation "
    Like Arrow, but lets you set head width and head height independently.
    "
                :superclasses ("Polygon")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27248 27252]))                          )
                        (reparse-symbol indented_block_body) [27236 27285])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Constructor arguments

            *length_includes_head*:
               *True* if head is counted in calculating the length.

            *shape*: ['full', 'left', 'right']

            *overhang*:
              distance that the arrow is swept back (0 overhang means
              triangular shape).

            *head_starts_at_zero*:
              If *True*, the head starts being drawn at coordinate 0
              instead of ending at coordinate 0.

        Valid kwargs are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [27520 28046])
                            ("if" code nil (reparse-symbol indented_block_body) [28055 28113])
                            ("if" code nil (reparse-symbol indented_block_body) [28121 28188])
                            ("distance" variable nil (reparse-symbol indented_block_body) [28197 28230])
                            ("if" code nil (reparse-symbol indented_block_body) [28239 28346])
                            ("if" code nil (reparse-symbol indented_block_body) [28354 30119])
                            ("Polygon" code nil (reparse-symbol indented_block_body) [30128 30192]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27333 27337])
                            ("x" variable nil (reparse-symbol function_parameters) [27339 27340])
                            ("y" variable nil (reparse-symbol function_parameters) [27342 27343])
                            ("dx" variable nil (reparse-symbol function_parameters) [27345 27347])
                            ("dy" variable nil (reparse-symbol function_parameters) [27349 27351])
                            ("width" variable nil (reparse-symbol function_parameters) [27353 27358])
                            ("length_includes_head" variable nil (reparse-symbol function_parameters) [27366 27386])
                            ("head_width" variable nil (reparse-symbol function_parameters) [27404 27414])
                            ("head_length" variable nil (reparse-symbol function_parameters) [27421 27432])
                            ("shape" variable nil (reparse-symbol function_parameters) [27439 27444])
                            ("overhang" variable nil (reparse-symbol function_parameters) [27453 27461])
                            ("head_starts_at_zero" variable nil (reparse-symbol function_parameters) [27475 27494])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27501 27509]))                          
                        :documentation "
        Constructor arguments

            *length_includes_head*:
               *True* if head is counted in calculating the length.

            *shape*: ['full', 'left', 'right']

            *overhang*:
              distance that the arrow is swept back (0 overhang means
              triangular shape).

            *head_starts_at_zero*:
              If *True*, the head starts being drawn at coordinate 0
              instead of ending at coordinate 0.

        Valid kwargs are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27290 30193]))                  
                :type "class")
                nil [27113 30193])
            ("docstring" code nil nil [30194 30262])
            ("YAArrow" type
               (:documentation "
    Yet another arrow class.

    This is an arrow that is defined in display space and has a tip at
    *x1*, *y1* and a base at *x2*, *y2*.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30460 30464]))                          )
                        (reparse-symbol indented_block_body) [30448 30494])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Constructor arguments:

        *xytip*
          (*x*, *y*) location of arrow tip

        *xybase*
          (*x*, *y*) location the arrow base mid point

        *figure*
          The :class:`~matplotlib.figure.Figure` instance
          (fig.dpi)

        *width*
          The width of the arrow in points

        *frac*
          The fraction of the arrow length occupied by the head

        *headwidth*
          The width of the base of the arrow head in points

        Valid kwargs are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [30623 31165])
                            ("self" variable nil (reparse-symbol indented_block_body) [31174 31194])
                            ("self" variable nil (reparse-symbol indented_block_body) [31203 31221])
                            ("self" variable nil (reparse-symbol indented_block_body) [31230 31250])
                            ("self" variable nil (reparse-symbol indented_block_body) [31259 31277])
                            ("self" variable nil (reparse-symbol indented_block_body) [31286 31302])
                            ("self" variable nil (reparse-symbol indented_block_body) [31311 31337])
                            ("Patch" code nil (reparse-symbol indented_block_body) [31346 31376]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30542 30546])
                            ("figure" variable nil (reparse-symbol function_parameters) [30548 30554])
                            ("xytip" variable nil (reparse-symbol function_parameters) [30556 30561])
                            ("xybase" variable nil (reparse-symbol function_parameters) [30563 30569])
                            ("width" variable nil (reparse-symbol function_parameters) [30571 30576])
                            ("frac" variable nil (reparse-symbol function_parameters) [30580 30584])
                            ("headwidth" variable nil (reparse-symbol function_parameters) [30590 30599])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [30604 30612]))                          
                        :documentation "
        Constructor arguments:

        *xytip*
          (*x*, *y*) location of arrow tip

        *xybase*
          (*x*, *y*) location the arrow base mid point

        *figure*
          The :class:`~matplotlib.figure.Figure` instance
          (fig.dpi)

        *width*
          The width of the arrow in points

        *frac*
          The fraction of the arrow length occupied by the head

        *headwidth*
          The width of the base of the arrow head in points

        Valid kwargs are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30499 31377])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31395 31399]))                          )
                        (reparse-symbol indented_block_body) [31382 32334])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32363 32367]))                          )
                        (reparse-symbol indented_block_body) [32339 32416])
                    ("getpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32435 32439])
                            ("x1" variable nil (reparse-symbol function_parameters) [32441 32443])
                            ("y1" variable nil (reparse-symbol function_parameters) [32444 32446])
                            ("x2" variable nil (reparse-symbol function_parameters) [32447 32449])
                            ("y2" variable nil (reparse-symbol function_parameters) [32450 32452])
                            ("k" variable nil (reparse-symbol function_parameters) [32454 32455]))                          
                        :documentation "
        For line segment defined by (*x1*, *y1*) and (*x2*, *y2*)
        return the points on the line that is perpendicular to the
        line and intersects (*x2*, *y2*) and the distance from (*x2*,
        *y2*) of the returned points is *k*.
        ")
                        (reparse-symbol indented_block_body) [32421 33239]))                  
                :type "class")
                nil [30264 33239])
            ("CirclePolygon" type
               (:documentation "
    A polygon-approximation of a circle patch.
    "
                :superclasses ("RegularPolygon")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33357 33361]))                          )
                        (reparse-symbol indented_block_body) [33345 33414])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a circle at *xy* = (*x*, *y*) with given *radius*.
        This circle is approximated by a regular polygon with
        *resolution* sides.  For a smoother circle drawn with splines,
        see :class:`~matplotlib.patches.Circle`.

        Valid kwargs are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [33576 33885])
                            ("RegularPolygon" code nil (reparse-symbol indented_block_body) [33894 34100]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33462 33466])
                            ("xy" variable nil (reparse-symbol function_parameters) [33468 33470])
                            ("radius" variable nil (reparse-symbol function_parameters) [33472 33478])
                            ("resolution" variable nil (reparse-symbol function_parameters) [33499 33509])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33557 33565]))                          
                        :documentation "
        Create a circle at *xy* = (*x*, *y*) with given *radius*.
        This circle is approximated by a regular polygon with
        *resolution* sides.  For a smoother circle drawn with splines,
        see :class:`~matplotlib.patches.Circle`.

        Valid kwargs are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33419 34101]))                  
                :type "class")
                nil [33241 34101])
            ("Ellipse" type
               (:documentation "
    A scale-free ellipse.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34183 34187]))                          )
                        (reparse-symbol indented_block_body) [34171 34283])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xy*
          center of ellipse

        *width*
          total length (diameter) of horizontal axis

        *height*
          total length (diameter) of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [34386 34690])
                            ("Patch" code nil (reparse-symbol indented_block_body) [34699 34729])
                            ("self" variable nil (reparse-symbol indented_block_body) [34739 34755])
                            ("self, self" code nil (reparse-symbol indented_block_body) [34764 34803])
                            ("self" variable nil (reparse-symbol indented_block_body) [34812 34830])
                            ("self" variable nil (reparse-symbol indented_block_body) [34839 34870])
                            ("self" variable nil (reparse-symbol indented_block_body) [34952 35006]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34331 34335])
                            ("xy" variable nil (reparse-symbol function_parameters) [34337 34339])
                            ("width" variable nil (reparse-symbol function_parameters) [34341 34346])
                            ("height" variable nil (reparse-symbol function_parameters) [34348 34354])
                            ("angle" variable nil (reparse-symbol function_parameters) [34356 34361])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34367 34375]))                          
                        :documentation "
        *xy*
          center of ellipse

        *width*
          total length (diameter) of horizontal axis

        *height*
          total length (diameter) of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34288 35007])
                    ("_recompute_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35037 35041]))                          
                        :documentation "NOTE: This cannot be called until after this has been added
                 to an Axes, otherwise unit conversion will fail. This
                 maxes it very important to call the accessor method and
                 not directly access the transformation member variable.
        ")
                        (reparse-symbol indented_block_body) [35012 35726])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35744 35748]))                          
                        :documentation "
        Return the vertices of the rectangle
        ")
                        (reparse-symbol indented_block_body) [35731 35846])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35875 35879]))                          )
                        (reparse-symbol indented_block_body) [35851 35955])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35973 35977])
                            ("ev" variable nil (reparse-symbol function_parameters) [35978 35980]))                          )
                        (reparse-symbol indented_block_body) [35960 36155]))                  
                :type "class")
                nil [34103 36155])
            ("Circle" type
               (:documentation "
    A circle patch.
    "
                :superclasses ("Ellipse")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36232 36236]))                          )
                        (reparse-symbol indented_block_body) [36220 36321])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create true circle at center *xy* = (*x*, *y*) with given
        *radius*.  Unlike :class:`~matplotlib.patches.CirclePolygon`
        which is a polygonal approximation, this uses Bézier splines
        and is much closer to a scale-free circle.

        Valid kwargs are:
        %(Patch)s

        \"\"\"" code nil (reparse-symbol indented_block_body) [36408 36724])
                            ("if" code nil (reparse-symbol indented_block_body) [36733 36928])
                            ("self" variable nil (reparse-symbol indented_block_body) [36937 36957])
                            ("Ellipse" code nil (reparse-symbol indented_block_body) [36966 37022]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36369 36373])
                            ("xy" variable nil (reparse-symbol function_parameters) [36375 36377])
                            ("radius" variable nil (reparse-symbol function_parameters) [36379 36385])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36389 36397]))                          
                        :documentation "
        Create true circle at center *xy* = (*x*, *y*) with given
        *radius*.  Unlike :class:`~matplotlib.patches.CirclePolygon`
        which is a polygonal approximation, this uses Bézier splines
        and is much closer to a scale-free circle.

        Valid kwargs are:
        %(Patch)s

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36326 37023])
                    ("set_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37043 37047])
                            ("radius" variable nil (reparse-symbol function_parameters) [37049 37055]))                          
                        :documentation "
        Set the radius of the circle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [37028 37189])
                    ("get_radius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37209 37213]))                          )
                        (reparse-symbol indented_block_body) [37194 37289])
                    ("radius" variable nil (reparse-symbol indented_block_body) [37294 37335]))                  
                :type "class")
                nil [36157 37336])
            ("Arc" type
               (:documentation "
    An elliptical arc.  Because it performs various optimizations, it
    can not be filled.

    The arc must be used in an :class:`~matplotlib.axes.Axes`
    instance---it can not be added directly to a
    :class:`~matplotlib.figure.Figure`---because it is optimized to
    only render the segments that are inside the axes bounding box
    with high resolution.
    "
                :superclasses ("Ellipse")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37755 37759]))                          )
                        (reparse-symbol indented_block_body) [37743 37851])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The following args are supported:

        *xy*
          center of ellipse

        *width*
          length of horizontal axis

        *height*
          length of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        *theta1*
          starting angle of the arc in degrees

        *theta2*
          ending angle of the arc in degrees

        If *theta1* and *theta2* are not provided, the arc will form a
        complete ellipse.

        Valid kwargs are:

        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [37980 38520])
                            ("fill" variable nil (reparse-symbol indented_block_body) [38529 38568])
                            ("if" code nil (reparse-symbol indented_block_body) [38577 38648])
                            ("Ellipse" code nil (reparse-symbol indented_block_body) [38657 38715])
                            ("self" variable nil (reparse-symbol indented_block_body) [38725 38745])
                            ("self" variable nil (reparse-symbol indented_block_body) [38754 38774])
                            ("self" variable nil (reparse-symbol indented_block_body) [38784 38831]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37899 37903])
                            ("xy" variable nil (reparse-symbol function_parameters) [37905 37907])
                            ("width" variable nil (reparse-symbol function_parameters) [37909 37914])
                            ("height" variable nil (reparse-symbol function_parameters) [37916 37922])
                            ("angle" variable nil (reparse-symbol function_parameters) [37924 37929])
                            ("theta1" variable nil (reparse-symbol function_parameters) [37935 37941])
                            ("theta2" variable nil (reparse-symbol function_parameters) [37947 37953])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [37961 37969]))                          
                        :documentation "
        The following args are supported:

        *xy*
          center of ellipse

        *width*
          length of horizontal axis

        *height*
          length of vertical axis

        *angle*
          rotation in degrees (anti-clockwise)

        *theta1*
          starting angle of the arc in degrees

        *theta2*
          ending angle of the arc in degrees

        If *theta1* and *theta2* are not provided, the arc will form a
        complete ellipse.

        Valid kwargs are:

        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37856 38832])
                    ("draw" function
                       (:parent "dummy"
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38872 38876])
                            ("renderer" variable nil (reparse-symbol function_parameters) [38878 38886]))                          
                        :documentation "
        Ellipses are normally drawn using an approximation that uses
        eight cubic bezier splines.  The error of this approximation
        is 1.89818e-6, according to this unverified source:

          Lancaster, Don.  Approximating a Circle or an Ellipse Using
          Four Bezier Cubic Splines.

          http://www.tinaja.com/glib/ellipse4.pdf

        There is a use case where very large ellipses must be drawn
        with very high accuracy, and it is too expensive to render the
        entire ellipse with enough segments (either splines or line
        segments).  Therefore, in the case where either radius of the
        ellipse is large enough that the error of the spline
        approximation will be visible (greater than one pixel offset
        from the ideal), a different technique is used.

        In that case, only the visible parts of the ellipse are drawn,
        with each visible arc using a fixed number of spline segments
        (8).  The algorithm proceeds as follows:

          1. The points where the ellipse intersects the axes bounding
             box are located.  (This is done be performing an inverse
             transformation on the axes bbox such that it is relative
             to the unit circle -- this makes the intersection
             calculation much easier than doing rotated ellipse
             intersection directly).

             This uses the \"line intersecting a circle\" algorithm
             from:

               Vince, John.  Geometry for Computer Graphics: Formulae,
               Examples & Proofs.  London: Springer-Verlag, 2005.

          2. The angles of each of the intersection points are
             calculated.

          3. Proceeding counterclockwise starting in the positive
             x-direction, each of the visible arc-segments between the
             pairs of vertices are drawn using the bezier arc
             approximation technique implemented in
             :meth:`matplotlib.path.Path.arc`.
        ")
                        (reparse-symbol indented_block_body) [38838 44752]))                  
                :type "class")
                nil [37337 44752])
            ("bbox_artist" function
               (:documentation "
    This is a debug function to draw a rectangle around the bounding
    box returned by
    :meth:`~matplotlib.artist.Artist.get_window_extent` of an artist,
    to test whether the artist is returning the correct bbox.

    *props* is a dict of rectangle props with the additional property
    'pad' that sets the padding around the bbox in points.
    "
                :arguments 
                  ( ("artist" variable nil (reparse-symbol function_parameters) [44770 44776])
                    ("renderer" variable nil (reparse-symbol function_parameters) [44778 44786])
                    ("props" variable nil (reparse-symbol function_parameters) [44788 44793])
                    ("fill" variable nil (reparse-symbol function_parameters) [44800 44804]))                  )
                nil [44754 45735])
            ("draw_bbox" function
               (:documentation "
    This is a debug function to draw a rectangle around the bounding
    box returned by
    :meth:`~matplotlib.artist.Artist.get_window_extent` of an artist,
    to test whether the artist is returning the correct bbox.
    "
                :arguments 
                  ( ("bbox" variable nil (reparse-symbol function_parameters) [45751 45755])
                    ("renderer" variable nil (reparse-symbol function_parameters) [45757 45765])
                    ("color" variable nil (reparse-symbol function_parameters) [45767 45772])
                    ("trans" variable nil (reparse-symbol function_parameters) [45778 45783]))                  )
                nil [45737 46324])
            ("_pprint_table" function
               (:documentation "
    Given the list of list of strings, return a string of REST table format.
    "
                :arguments 
                  ( ("_table" variable nil (reparse-symbol function_parameters) [46345 46351])
                    ("leadingspace" variable nil (reparse-symbol function_parameters) [46353 46365]))                  )
                nil [46327 47251])
            ("_pprint_styles" function
               (:documentation "
    A helper function for the _Style class.  Given the dictionary of
    (stylename : styleclass), return a formatted string listing all the
    styles. Used to update the documentation.
    "
                :arguments 
                  ( ("_styles" variable nil (reparse-symbol function_parameters) [47272 47279])
                    ("leadingspace" variable nil (reparse-symbol function_parameters) [47281 47293]))                  )
                nil [47253 48287])
            ("_Style" type
               (:documentation "
    A base class for the Styles. It is meant to be a container class,
    where actual styles are declared as subclass of it, and it
    provides some helper functions.
    "
                :superclasses ("object")
                :members 
                  ( ("__new__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48513 48517])
                            ("stylename" variable nil (reparse-symbol function_parameters) [48519 48528])
                            ("kw" variable nil (reparse-symbol function_parameters) [48530 48534]))                          
                        :documentation "
        return the instance of the subclass with the given style name.
        ")
                        (reparse-symbol indented_block_body) [48501 49284])
                    ("get_styles" function
                       (:documentation "
        A class method which returns a dictionary of available styles.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [49322 49327]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [49290 49458])
                    ("pprint_styles" function
                       (:documentation "
        A class method which returns a string of the available styles.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [49498 49503]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [49463 49650])
                    ("register" function
                       (:documentation "
        Register a new style.
        "
                        :arguments 
                          ( ("klass" variable nil (reparse-symbol function_parameters) [49686 49691])
                            ("name" variable nil (reparse-symbol function_parameters) [49693 49697])
                            ("style" variable nil (reparse-symbol function_parameters) [49699 49704]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [49656 49932]))                  
                :type "class")
                nil [48290 49932])
            ("BoxStyle" type
               (:documentation "
    :class:`BoxStyle` is a container class which defines several
    boxstyle classes, which are used for :class:`FancyBoxPatch`.

    A style object can be created as::

           BoxStyle.Round(pad=0.2)

    or::

           BoxStyle(\"Round\", pad=0.2)

    or::

           BoxStyle(\"Round, pad=0.2\")

    Following boxstyle classes are defined.

    %(AvailableBoxstyles)s

    An instance of any boxstyle class is an callable object,
    whose call signature is::

       __call__(self, x0, y0, width, height, mutation_size, aspect_ratio=1.)

    and returns a :class:`Path` instance. *x0*, *y0*, *width* and
    *height* specify the location and size of the box to be
    drawn. *mutation_scale* determines the overall size of the
    mutation (by which I mean the transformation of the rectangle to
    the fancy box).  *mutation_aspect* determines the aspect-ratio of
    the mutation.

    .. plot:: mpl_examples/pylab_examples/fancybox_demo2.py
    "
                :superclasses ("_Style")
                :members 
                  ( ("_style_list" variable nil (reparse-symbol indented_block_body) [50934 50950])
                    ("_Base" type
                       (:documentation "
        :class:`BBoxTransmuterBase` and its derivatives are used to make a
        fancy box around a given rectangle. The :meth:`__call__` method
        returns the :class:`~matplotlib.path.Path` of the fancy box. This
        class is not an artist and actual drawing of the fancy box is done
        by the :class:`FancyBboxPatch` class.
        "
                        :superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            initializtion.
            \"\"\"" code nil (reparse-symbol indented_block_body) [51560 51606])
                                    ("super" code nil (reparse-symbol indented_block_body) [51619 51657]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [51541 51545]))                                  
                                :documentation "
            initializtion.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [51528 51658])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [51684 51688])
                                    ("x0" variable nil (reparse-symbol function_parameters) [51690 51692])
                                    ("y0" variable nil (reparse-symbol function_parameters) [51694 51696])
                                    ("width" variable nil (reparse-symbol function_parameters) [51698 51703])
                                    ("height" variable nil (reparse-symbol function_parameters) [51705 51711])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [51713 51726]))                                  
                                :documentation "
            The transmute method is a very core of the
            :class:`BboxTransmuter` class and must be overriden in the
            subclasses. It receives the location and size of the
            rectangle, and the mutation_size, with which the amount of
            padding and etc. will be scaled. It returns a
            :class:`~matplotlib.path.Path` instance.
            ")
                                (reparse-symbol indented_block_body) [51670 52197])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [52221 52225])
                                    ("x0" variable nil (reparse-symbol function_parameters) [52227 52229])
                                    ("y0" variable nil (reparse-symbol function_parameters) [52231 52233])
                                    ("width" variable nil (reparse-symbol function_parameters) [52235 52240])
                                    ("height" variable nil (reparse-symbol function_parameters) [52242 52248])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [52250 52263])
                                    ("aspect_ratio" variable nil (reparse-symbol function_parameters) [52286 52298]))                                  
                                :documentation "
            Given the location and size of the box, return the path of
            the box around it.

              - *x0*, *y0*, *width*, *height* : location and size of the box
              - *mutation_size* : a reference scale for the mutation.
              - *aspect_ratio* : aspect-ration for the mutation.
            ")
                                (reparse-symbol indented_block_body) [52208 53380]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [50957 53380])
                    ("Square" type
                       (:documentation "
        A simple square box.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
             *pad*
                amount of padding
            \"\"\"" code nil (reparse-symbol indented_block_body) [53511 53583])
                                    ("self" variable nil (reparse-symbol indented_block_body) [53597 53611])
                                    ("super" code nil (reparse-symbol indented_block_body) [53624 53663]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [53483 53487])
                                    ("pad" variable nil (reparse-symbol function_parameters) [53489 53492]))                                  
                                :documentation "
             *pad*
                amount of padding
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [53470 53664])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [53687 53691])
                                    ("x0" variable nil (reparse-symbol function_parameters) [53693 53695])
                                    ("y0" variable nil (reparse-symbol function_parameters) [53697 53699])
                                    ("width" variable nil (reparse-symbol function_parameters) [53701 53706])
                                    ("height" variable nil (reparse-symbol function_parameters) [53708 53714])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [53716 53729]))                                  )
                                (reparse-symbol indented_block_body) [53673 54415]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [53387 54415])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [54420 54450])
                    ("LArrow" type
                       (:documentation "
        (left) Arrow Box
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [54577 54591])
                                    ("super" code nil (reparse-symbol indented_block_body) [54604 54643]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [54549 54553])
                                    ("pad" variable nil (reparse-symbol function_parameters) [54555 54558]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [54536 54644])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [54667 54671])
                                    ("x0" variable nil (reparse-symbol function_parameters) [54673 54675])
                                    ("y0" variable nil (reparse-symbol function_parameters) [54677 54679])
                                    ("width" variable nil (reparse-symbol function_parameters) [54681 54686])
                                    ("height" variable nil (reparse-symbol function_parameters) [54688 54694])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [54696 54709]))                                  )
                                (reparse-symbol indented_block_body) [54653 55597]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [54457 55597])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [55601 55631])
                    ("RArrow" type
                       (:documentation "
        (right) Arrow Box
        "
                        :superclasses ("LArrow")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("super" code nil (reparse-symbol indented_block_body) [55789 55831]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [55733 55737])
                                    ("pad" variable nil (reparse-symbol function_parameters) [55739 55742]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [55720 55832])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [55855 55859])
                                    ("x0" variable nil (reparse-symbol function_parameters) [55861 55863])
                                    ("y0" variable nil (reparse-symbol function_parameters) [55865 55867])
                                    ("width" variable nil (reparse-symbol function_parameters) [55869 55874])
                                    ("height" variable nil (reparse-symbol function_parameters) [55876 55882])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [55884 55897]))                                  )
                                (reparse-symbol indented_block_body) [55841 56113]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [55639 56113])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [56119 56149])
                    ("Round" type
                       (:documentation "
        A box with round corners.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *rounding_size*
              rounding radius of corners. *pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [56304 56458])
                                    ("self" variable nil (reparse-symbol indented_block_body) [56471 56485])
                                    ("self" variable nil (reparse-symbol indented_block_body) [56498 56532])
                                    ("super" code nil (reparse-symbol indented_block_body) [56545 56583]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [56256 56260])
                                    ("pad" variable nil (reparse-symbol function_parameters) [56262 56265])
                                    ("rounding_size" variable nil (reparse-symbol function_parameters) [56271 56284]))                                  
                                :documentation "
            *pad*
              amount of padding

            *rounding_size*
              rounding radius of corners. *pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [56243 56584])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [56607 56611])
                                    ("x0" variable nil (reparse-symbol function_parameters) [56613 56615])
                                    ("y0" variable nil (reparse-symbol function_parameters) [56617 56619])
                                    ("width" variable nil (reparse-symbol function_parameters) [56621 56626])
                                    ("height" variable nil (reparse-symbol function_parameters) [56628 56634])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [56636 56649]))                                  )
                                (reparse-symbol indented_block_body) [56593 57998]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [56156 57998])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [58003 58031])
                    ("Round4" type
                       (:documentation "
        Another box with round edges.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *rounding_size*
              rounding size of edges. *pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [58191 58341])
                                    ("self" variable nil (reparse-symbol indented_block_body) [58355 58369])
                                    ("self" variable nil (reparse-symbol indented_block_body) [58382 58416])
                                    ("super" code nil (reparse-symbol indented_block_body) [58429 58468]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [58143 58147])
                                    ("pad" variable nil (reparse-symbol function_parameters) [58149 58152])
                                    ("rounding_size" variable nil (reparse-symbol function_parameters) [58158 58171]))                                  
                                :documentation "
            *pad*
              amount of padding

            *rounding_size*
              rounding size of edges. *pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [58130 58469])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [58492 58496])
                                    ("x0" variable nil (reparse-symbol function_parameters) [58498 58500])
                                    ("y0" variable nil (reparse-symbol function_parameters) [58502 58504])
                                    ("width" variable nil (reparse-symbol function_parameters) [58506 58511])
                                    ("height" variable nil (reparse-symbol function_parameters) [58513 58519])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [58521 58534]))                                  )
                                (reparse-symbol indented_block_body) [58478 59657]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [58038 59657])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [59662 59692])
                    ("Sawtooth" type
                       (:documentation "
        A sawtooth box.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [59837 59981])
                                    ("self" variable nil (reparse-symbol indented_block_body) [59994 60008])
                                    ("self" variable nil (reparse-symbol indented_block_body) [60021 60049])
                                    ("super" code nil (reparse-symbol indented_block_body) [60062 60103]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [59792 59796])
                                    ("pad" variable nil (reparse-symbol function_parameters) [59798 59801])
                                    ("tooth_size" variable nil (reparse-symbol function_parameters) [59807 59817]))                                  
                                :documentation "
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [59779 60104])
                            ("_get_sawtooth_vertices" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [60140 60144])
                                    ("x0" variable nil (reparse-symbol function_parameters) [60146 60148])
                                    ("y0" variable nil (reparse-symbol function_parameters) [60150 60152])
                                    ("width" variable nil (reparse-symbol function_parameters) [60154 60159])
                                    ("height" variable nil (reparse-symbol function_parameters) [60161 60167])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [60169 60182]))                                  )
                                (reparse-symbol indented_block_body) [60113 62752])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [62776 62780])
                                    ("x0" variable nil (reparse-symbol function_parameters) [62782 62784])
                                    ("y0" variable nil (reparse-symbol function_parameters) [62786 62788])
                                    ("width" variable nil (reparse-symbol function_parameters) [62790 62795])
                                    ("height" variable nil (reparse-symbol function_parameters) [62797 62803])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [62805 62818]))                                  )
                                (reparse-symbol indented_block_body) [62762 62977]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [59699 62977])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [62982 63016])
                    ("Roundtooth" type
                       (:documentation "
        A roundtooth(?) box.
        "
                        :superclasses ("Sawtooth")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            \"\"\"" code nil (reparse-symbol indented_block_body) [63171 63315])
                                    ("super" code nil (reparse-symbol indented_block_body) [63328 63386]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [63126 63130])
                                    ("pad" variable nil (reparse-symbol function_parameters) [63132 63135])
                                    ("tooth_size" variable nil (reparse-symbol function_parameters) [63141 63151]))                                  
                                :documentation "
            *pad*
              amount of padding

            *tooth_size*
              size of the sawtooth. pad* if None
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [63113 63387])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [63411 63415])
                                    ("x0" variable nil (reparse-symbol function_parameters) [63417 63419])
                                    ("y0" variable nil (reparse-symbol function_parameters) [63421 63423])
                                    ("width" variable nil (reparse-symbol function_parameters) [63425 63430])
                                    ("height" variable nil (reparse-symbol function_parameters) [63432 63438])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [63440 63453]))                                  )
                                (reparse-symbol indented_block_body) [63397 63709]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [63023 63709])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [63714 63752])
                    ("if" code nil (reparse-symbol indented_block_body) [63758 63936]))                  
                :type "class")
                nil [49934 63936])
            ("docstring" code nil nil [63937 64018])
            ("FancyBboxPatch" type
               (:documentation "
    Draw a fancy box around a rectangle with lower left at *xy*=(*x*,
    *y*) with specified width and height.

    :class:`FancyBboxPatch` class is similar to :class:`Rectangle`
    class, but it draws a fancy box around the rectangle. The
    transformation of the rectangle box to the fancy box is delegated
    to the :class:`BoxTransmuterBase` and its derived classes.

    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64458 64462]))                          )
                        (reparse-symbol indented_block_body) [64446 64598])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xy* = lower left corner

        *width*, *height*

        *boxstyle* determines what kind of fancy box will be drawn. It
        can be a string of the style name with a comma separated
        attribute, or an instance of :class:`BoxStyle`. Following box
        styles are available.

        %(AvailableBoxstyles)s

        *mutation_scale* : a value with which attributes of boxstyle
        (e.g., pad) will be scaled. default=1.

        *mutation_aspect* : The height of the rectangle will be
        squeezed by this value before the mutation and the mutated
        box will be stretched by the inverse of it. default=None.

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [64856 65560])
                            ("Patch" code nil (reparse-symbol indented_block_body) [65570 65600])
                            ("self" variable nil (reparse-symbol indented_block_body) [65610 65625])
                            ("self" variable nil (reparse-symbol indented_block_body) [65634 65649])
                            ("self" variable nil (reparse-symbol indented_block_body) [65658 65677])
                            ("self" variable nil (reparse-symbol indented_block_body) [65686 65707])
                            ("if" code nil (reparse-symbol indented_block_body) [65717 65980])
                            ("self" variable nil (reparse-symbol indented_block_body) [65989 66024])
                            ("self" variable nil (reparse-symbol indented_block_body) [66033 66070]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64646 64650])
                            ("xy" variable nil (reparse-symbol function_parameters) [64652 64654])
                            ("width" variable nil (reparse-symbol function_parameters) [64656 64661])
                            ("height" variable nil (reparse-symbol function_parameters) [64663 64669])
                            ("boxstyle" variable nil (reparse-symbol function_parameters) [64688 64696])
                            ("bbox_transmuter" variable nil (reparse-symbol function_parameters) [64723 64738])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [64762 64776])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [64798 64813])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [64837 64845]))                          
                        :documentation "
        *xy* = lower left corner

        *width*, *height*

        *boxstyle* determines what kind of fancy box will be drawn. It
        can be a string of the style name with a comma separated
        attribute, or an instance of :class:`BoxStyle`. Following box
        styles are available.

        %(AvailableBoxstyles)s

        *mutation_scale* : a value with which attributes of boxstyle
        (e.g., pad) will be scaled. default=1.

        *mutation_aspect* : The height of the rectangle will be
        squeezed by this value before the mutation and the mutated
        box will be stretched by the inverse of it. default=None.

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [64603 66071])
                    ("set_boxstyle" function
                       (:parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66124 66128])
                            ("boxstyle" variable nil (reparse-symbol function_parameters) [66130 66138])
                            ("kw" variable nil (reparse-symbol function_parameters) [66145 66149]))                          
                        :documentation "
        Set the box style.

        *boxstyle* can be a string with boxstyle name with optional
        comma-separated attributes. Alternatively, the attrs can
        be provided as keywords::

            set_boxstyle(\"round,pad=0.2\")
            set_boxstyle(\"round\", pad=0.2)

        Old attrs simply are forgotten.

        Without argument (or with *boxstyle* = None), it returns
        available box styles.

        ACCEPTS: %(AvailableBoxstyles)s

        ")
                        (reparse-symbol indented_block_body) [66077 66956])
                    ("set_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66985 66989])
                            ("scale" variable nil (reparse-symbol function_parameters) [66991 66996]))                          
                        :documentation "
        Set the mutation scale.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [66962 67114])
                    ("get_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67142 67146]))                          
                        :documentation "
        Return the mutation scale.
        ")
                        (reparse-symbol indented_block_body) [67119 67244])
                    ("set_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67273 67277])
                            ("aspect" variable nil (reparse-symbol function_parameters) [67279 67285]))                          
                        :documentation "
        Set the aspect ratio of the bbox mutation.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [67249 67424])
                    ("get_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67453 67457]))                          
                        :documentation "
        Return the aspect ratio of the bbox mutation.
        ")
                        (reparse-symbol indented_block_body) [67429 67575])
                    ("get_boxstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67597 67601]))                          )
                        (reparse-symbol indented_block_body) [67580 67678])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67696 67700]))                          
                        :documentation "
        Return the mutated path of the rectangle
        ")
                        (reparse-symbol indented_block_body) [67683 68042])
                    ("get_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68122 68126]))                          )
                        (reparse-symbol indented_block_body) [68112 68201])
                    ("get_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68216 68220]))                          )
                        (reparse-symbol indented_block_body) [68206 68297])
                    ("get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68316 68320]))                          )
                        (reparse-symbol indented_block_body) [68302 68395])
                    ("get_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68415 68419]))                          )
                        (reparse-symbol indented_block_body) [68400 68495])
                    ("set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68510 68514])
                            ("x" variable nil (reparse-symbol function_parameters) [68516 68517]))                          
                        :documentation "
        Set the left coord of the rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [68500 68632])
                    ("set_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68647 68651])
                            ("y" variable nil (reparse-symbol function_parameters) [68653 68654]))                          
                        :documentation "
        Set the bottom coord of the rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [68637 68771])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68790 68794])
                            ("w" variable nil (reparse-symbol function_parameters) [68796 68797]))                          
                        :documentation "
        Set the width rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [68776 68904])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68924 68928])
                            ("h" variable nil (reparse-symbol function_parameters) [68930 68931]))                          
                        :documentation "
        Set the width rectangle

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [68909 69039])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69059 69063])
                            ("args" variable nil (reparse-symbol function_parameters) [69065 69070]))                          
                        :documentation "
        Set the bounds of the rectangle: l,b,w,h

        ACCEPTS: (left, bottom, width, height)
        ")
                        (reparse-symbol indented_block_body) [69044 69379])
                    ("get_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69398 69402]))                          )
                        (reparse-symbol indented_block_body) [69385 69493]))                  
                :type "class")
                nil [64020 69493])
            ("matplotlib.bezier" include nil nil [69498 69569])
            ("matplotlib.bezier" include nil nil [69570 69646])
            ("matplotlib.bezier" include nil nil [69647 69696])
            ("matplotlib.bezier" include nil nil [69697 69756])
            ("matplotlib.bezier" include nil nil [69757 69823])
            ("ConnectionStyle" type
               (:documentation "
    :class:`ConnectionStyle` is a container class which defines
    several connectionstyle classes, which is used to create a path
    between two points. These are mainly used with
    :class:`FancyArrowPatch`.

    A connectionstyle object can be either created as::

           ConnectionStyle.Arc3(rad=0.2)

    or::

           ConnectionStyle(\"Arc3\", rad=0.2)

    or::

           ConnectionStyle(\"Arc3, rad=0.2\")

    The following classes are defined

    %(AvailableConnectorstyles)s


    An instance of any connection style class is an callable object,
    whose call signature is::

        __call__(self, posA, posB, patchA=None, patchB=None, shrinkA=2., shrinkB=2.)

    and it returns a :class:`Path` instance. *posA* and *posB* are
    tuples of x,y coordinates of the two points to be
    connected. *patchA* (or *patchB*) is given, the returned path is
    clipped so that it start (or end) from the boundary of the
    patch. The path is further shrunk by *shrinkA* (or *shrinkB*)
    which is given in points.

    "
                :superclasses ("_Style")
                :members 
                  ( ("_style_list" variable nil (reparse-symbol indented_block_body) [70911 70927])
                    ("_Base" type
                       (:documentation "
        A base class for connectionstyle classes. The dervided needs
        to implement a *connect* methods whose call signature is::

          connect(posA, posB)

        where posA and posB are tuples of x, y coordinates to be
        connected.  The methods needs to return a path connecting two
        points. This base class defines a __call__ method, and few
        helper methods.
        "
                        :superclasses ("object")
                        :members 
                          ( ("SimpleEvent" type
                               (:members 
                                  ( ("__init__" function
                                       (:suite 
                                          ( ("self, self" code nil (reparse-symbol indented_block_body) [71453 71472]))                                          
                                        :parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [71426 71430])
                                            ("xy" variable nil (reparse-symbol function_parameters) [71432 71434]))                                          
                                        :constructor-flag t)
                                        (reparse-symbol indented_block_body) [71413 71473]))                                  
                                :type "class")
                                (reparse-symbol indented_block_body) [71382 71473])
                            ("_clip" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [71492 71496])
                                    ("path" variable nil (reparse-symbol function_parameters) [71498 71502])
                                    ("patchA" variable nil (reparse-symbol function_parameters) [71504 71510])
                                    ("patchB" variable nil (reparse-symbol function_parameters) [71512 71518]))                                  
                                :documentation "
            Clip the path to the boundary of the patchA and patchB.
            The starting point of the path needed to be inside of the
            patchA and the end point inside the patch B. The *contains*
            methods of each patch object is utilized to test if the point
            is inside the path.
            ")
                                (reparse-symbol indented_block_body) [71482 72836])
                            ("_shrink" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [72858 72862])
                                    ("path" variable nil (reparse-symbol function_parameters) [72864 72868])
                                    ("shrinkA" variable nil (reparse-symbol function_parameters) [72870 72877])
                                    ("shrinkB" variable nil (reparse-symbol function_parameters) [72879 72886]))                                  
                                :documentation "
            Shrink the path by fixed size (in points) with shrinkA and shrinkB
            ")
                                (reparse-symbol indented_block_body) [72846 73626])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [73648 73652])
                                    ("posA" variable nil (reparse-symbol function_parameters) [73654 73658])
                                    ("posB" variable nil (reparse-symbol function_parameters) [73660 73664])
                                    ("shrinkA" variable nil (reparse-symbol function_parameters) [73687 73694])
                                    ("shrinkB" variable nil (reparse-symbol function_parameters) [73699 73706])
                                    ("patchA" variable nil (reparse-symbol function_parameters) [73711 73717])
                                    ("patchB" variable nil (reparse-symbol function_parameters) [73724 73730]))                                  
                                :documentation "
            Calls the *connect* method to create a path between *posA*
             and *posB*. The path is clipped and shrinked.
            ")
                                (reparse-symbol indented_block_body) [73635 74113]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [70934 74113])
                    ("Arc3" type
                       (:documentation "
        Creates a simple quadratic bezier curve between two
        points. The curve is created so that the middle contol points
        (C1) is located at the same distance from the start (C0) and
        end points(C2) and the distance of the C1 to the line
        connecting C0-C2 is *rad* times the distance of C0-C2.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *rad*
              curvature of the curve.
            \"\"\"" code nil (reparse-symbol indented_block_body) [74535 74610])
                                    ("self" variable nil (reparse-symbol indented_block_body) [74623 74637]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [74508 74512])
                                    ("rad" variable nil (reparse-symbol function_parameters) [74514 74517]))                                  
                                :documentation "
            *rad*
              curvature of the curve.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [74495 74638])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [74659 74663])
                                    ("posA" variable nil (reparse-symbol function_parameters) [74665 74669])
                                    ("posB" variable nil (reparse-symbol function_parameters) [74671 74675]))                                  )
                                (reparse-symbol indented_block_body) [74647 75136]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [74119 75136])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [75141 75167])
                    ("Angle3" type
                       (:documentation "
        Creates a simple quadratic bezier curve between two
        points. The middle control points is placed at the
        intersecting point of two lines which crosses the start (or
        end) point and has a angle of angleA (or angleB).
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path
            \"\"\"" code nil (reparse-symbol indented_block_body) [75527 75669])
                                    ("self" variable nil (reparse-symbol indented_block_body) [75683 75703])
                                    ("self" variable nil (reparse-symbol indented_block_body) [75716 75736]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [75487 75491])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [75493 75499])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [75504 75510]))                                  
                                :documentation "
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [75474 75737])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [75759 75763])
                                    ("posA" variable nil (reparse-symbol function_parameters) [75765 75769])
                                    ("posB" variable nil (reparse-symbol function_parameters) [75771 75775]))                                  )
                                (reparse-symbol indented_block_body) [75747 76351]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [75174 76351])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [76356 76386])
                    ("Angle" type
                       (:documentation "
        Creates a picewise continuous quadratic bezier path between
        two points. The path has a one passing-through point placed at
        the intersecting point of two lines which crosses the start
        (or end) point and has a angle of angleA (or angleB).  The
        connecting edges are rounded with *rad*.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path

            *rad*
              rounding radius of the edge
            \"\"\"" code nil (reparse-symbol indented_block_body) [76830 77033])
                                    ("self" variable nil (reparse-symbol indented_block_body) [77047 77067])
                                    ("self" variable nil (reparse-symbol indented_block_body) [77080 77100])
                                    ("self" variable nil (reparse-symbol indented_block_body) [77114 77128]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [76782 76786])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [76788 76794])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [76799 76805])
                                    ("rad" variable nil (reparse-symbol function_parameters) [76809 76812]))                                  
                                :documentation "
            *angleA*
              starting angle of the path

            *angleB*
              ending angle of the path

            *rad*
              rounding radius of the edge
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [76769 77129])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [77150 77154])
                                    ("posA" variable nil (reparse-symbol function_parameters) [77156 77160])
                                    ("posB" variable nil (reparse-symbol function_parameters) [77162 77166]))                                  )
                                (reparse-symbol indented_block_body) [77138 78375]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [76393 78375])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [78380 78408])
                    ("Arc" type
                       (:documentation "
        Creates a picewise continuous quadratic bezier path between
        two points. The path can have two passing-through points, a
        point placed at the distance of armA and angle of angleA from
        point A, another point with respect to point B. The edges are
        rounded with *rad*.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *angleA* :
              starting angle of the path

            *angleB* :
              ending angle of the path

            *armA* :
              length of the starting arm

            *armB* :
              length of the ending arm

            *rad* :
              rounding radius of the edges
            \"\"\"" code nil (reparse-symbol indented_block_body) [78852 79186])
                                    ("self" variable nil (reparse-symbol indented_block_body) [79200 79220])
                                    ("self" variable nil (reparse-symbol indented_block_body) [79233 79253])
                                    ("self" variable nil (reparse-symbol indented_block_body) [79266 79282])
                                    ("self" variable nil (reparse-symbol indented_block_body) [79295 79311])
                                    ("self" variable nil (reparse-symbol indented_block_body) [79325 79339]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [78783 78787])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [78789 78795])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [78799 78805])
                                    ("armA" variable nil (reparse-symbol function_parameters) [78809 78813])
                                    ("armB" variable nil (reparse-symbol function_parameters) [78820 78824])
                                    ("rad" variable nil (reparse-symbol function_parameters) [78831 78834]))                                  
                                :documentation "
            *angleA* :
              starting angle of the path

            *angleB* :
              ending angle of the path

            *armA* :
              length of the starting arm

            *armB* :
              length of the ending arm

            *rad* :
              rounding radius of the edges
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [78770 79340])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [79361 79365])
                                    ("posA" variable nil (reparse-symbol function_parameters) [79367 79371])
                                    ("posB" variable nil (reparse-symbol function_parameters) [79373 79377]))                                  )
                                (reparse-symbol indented_block_body) [79349 81357]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [78415 81357])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [81362 81386])
                    ("Bar" type
                       (:documentation "
        A line with *angle* between A and B with *armA* and
        *armB*. One of the arm is extend so that they are connected in
        a right angle. The length of armA is determined by (*armA*
        + *fraction* x AB distance). Same for armB.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *armA* : minimum length of armA
            *armB* : minimum length of armB
            *fraction* : a fraction of the distance between two points that will be added to armA and armB.
            *angle* : anlge of the connecting line (if None, parallel to A and B)
            \"\"\"" code nil (reparse-symbol indented_block_body) [81771 82068])
                                    ("self" variable nil (reparse-symbol indented_block_body) [82081 82097])
                                    ("self" variable nil (reparse-symbol indented_block_body) [82110 82126])
                                    ("self" variable nil (reparse-symbol indented_block_body) [82139 82163])
                                    ("self" variable nil (reparse-symbol indented_block_body) [82176 82194]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [81708 81712])
                                    ("armA" variable nil (reparse-symbol function_parameters) [81714 81718])
                                    ("armB" variable nil (reparse-symbol function_parameters) [81723 81727])
                                    ("fraction" variable nil (reparse-symbol function_parameters) [81732 81740])
                                    ("angle" variable nil (reparse-symbol function_parameters) [81746 81751]))                                  
                                :documentation "
            *armA* : minimum length of armA
            *armB* : minimum length of armB
            *fraction* : a fraction of the distance between two points that will be added to armA and armB.
            *angle* : anlge of the connecting line (if None, parallel to A and B)
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [81695 82195])
                            ("connect" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [82216 82220])
                                    ("posA" variable nil (reparse-symbol function_parameters) [82222 82226])
                                    ("posB" variable nil (reparse-symbol function_parameters) [82228 82232]))                                  )
                                (reparse-symbol indented_block_body) [82204 84018]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [81394 84018])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [84023 84047])
                    ("if" code nil (reparse-symbol indented_block_body) [84053 84182]))                  
                :type "class")
                nil [69826 84182])
            ("ArrowStyle" type
               (:documentation "
    :class:`ArrowStyle` is a container class which defines several
    arrowstyle classes, which is used to create an arrow path along a
    given path. These are mainly used with :class:`FancyArrowPatch`.

    A arrowstyle object can be either created as::

           ArrowStyle.Fancy(head_length=.4, head_width=.4, tail_width=.4)

    or::

           ArrowStyle(\"Fancy\", head_length=.4, head_width=.4, tail_width=.4)

    or::

           ArrowStyle(\"Fancy, head_length=.4, head_width=.4, tail_width=.4\")

    The following classes are defined

    %(AvailableArrowstyles)s


    An instance of any arrow style class is an callable object,
    whose call signature is::

        __call__(self, path, mutation_size, linewidth, aspect_ratio=1.)

    and it returns a tuple of a :class:`Path` instance and a boolean
    value. *path* is a :class:`Path` instance along witch the arrow
    will be drawn. *mutation_size* and *aspect_ratio* has a same
    meaning as in :class:`BoxStyle`. *linewidth* is a line width to be
    stroked. This is meant to be used to correct the location of the
    head so that it does not overshoot the destination point, but not all
    classes support it.

    .. plot:: mpl_examples/pylab_examples/fancyarrow_demo.py
    "
                :superclasses ("_Style")
                :members 
                  ( ("_style_list" variable nil (reparse-symbol indented_block_body) [85483 85499])
                    ("_Base" type
                       (:documentation "
        Arrow Transmuter Base class

        ArrowTransmuterBase and its derivatives are used to make a fancy
        arrow around a given path. The __call__ method returns a path
        (which will be used to create a PathPatch instance) and a boolean
        value indicating the path is open therefore is not fillable.  This
        class is not an artist and actual drawing of the fancy arrow is
        done by the FancyArrowPatch class.

        "
                        :superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("super" code nil (reparse-symbol indented_block_body) [86211 86251]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [86192 86196]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [86179 86252])
                            ("ensure_quadratic_bezier" function
                               (:typemodifiers ("static")
                                :decorators 
                                  ( ("staticmethod" function (:type "decorator") nil nil))                                  
                                :arguments 
                                  ( ("path" variable nil (reparse-symbol function_parameters) [86311 86315]))                                  
                                :documentation " Some ArrowStyle class only wokrs with a simple
            quaratic bezier curve (created with Arc3Connetion or
            Angle3Connector). This static method is to check if the
            provided path is a simple quadratic bezier curve and returns
            its control points if true.
            ")
                                (reparse-symbol indented_block_body) [86261 86894])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [86918 86922])
                                    ("path" variable nil (reparse-symbol function_parameters) [86924 86928])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [86930 86943])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [86945 86954]))                                  
                                :documentation "
            The transmute method is a very core of the ArrowStyle
            class and must be overriden in the subclasses. It receives
            the path object along which the arrow will be drawn, and
            the mutation_size, with which the amount arrow head and
            etc. will be scaled. The linewidth may be used to adjust
            the the path so that it does not pass beyond the given
            points. It returns a tuple of a Path instance and a
            boolean. The boolean value indicate whether the path can
            be filled or not. The return value can also be a list of paths
            and list of booleans of a same length.
            ")
                                (reparse-symbol indented_block_body) [86904 87722])
                            ("__call__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [87746 87750])
                                    ("path" variable nil (reparse-symbol function_parameters) [87752 87756])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [87758 87771])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [87773 87782])
                                    ("aspect_ratio" variable nil (reparse-symbol function_parameters) [87805 87817]))                                  
                                :documentation "
            The __call__ method is a thin wrapper around the transmute method
            and take care of the aspect ratio.
            ")
                                (reparse-symbol indented_block_body) [87733 89158]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [85505 89158])
                    ("_Curve" type
                       (:documentation "
        A simple arrow which will work with any path instance. The
        returned path is simply concatenation of the original path + at
        most two paths representing the arrow head at the begin point and the
        at the end point. The arrow heads can be either open or closed.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            The arrows are drawn if *beginarrow* and/or *endarrow* are
            true. *head_length* and *head_width* determines the size
            of the arrow relative to the *mutation scale*.  The
            arrowhead at the begin (or end) is closed if fillbegin (or
            fillend) is True.
            \"\"\"" code nil (reparse-symbol indented_block_body) [89677 90001])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [90014 90067])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [90080 90161])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [90174 90223])
                                    ("super" code nil (reparse-symbol indented_block_body) [90236 90277]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [89521 89525])
                                    ("beginarrow" variable nil (reparse-symbol function_parameters) [89527 89537])
                                    ("endarrow" variable nil (reparse-symbol function_parameters) [89544 89552])
                                    ("fillbegin" variable nil (reparse-symbol function_parameters) [89580 89589])
                                    ("fillend" variable nil (reparse-symbol function_parameters) [89597 89604])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [89633 89644])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [89649 89659]))                                  
                                :documentation "
            The arrows are drawn if *beginarrow* and/or *endarrow* are
            true. *head_length* and *head_width* determines the size
            of the arrow relative to the *mutation scale*.  The
            arrowhead at the begin (or end) is closed if fillbegin (or
            fillend) is True.
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [89508 90278])
                            ("_get_arrow_wedge" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [90309 90313])
                                    ("x0" variable nil (reparse-symbol function_parameters) [90315 90317])
                                    ("y0" variable nil (reparse-symbol function_parameters) [90319 90321])
                                    ("x1" variable nil (reparse-symbol function_parameters) [90323 90325])
                                    ("y1" variable nil (reparse-symbol function_parameters) [90327 90329])
                                    ("head_dist" variable nil (reparse-symbol function_parameters) [90360 90369])
                                    ("cos_t" variable nil (reparse-symbol function_parameters) [90371 90376])
                                    ("sin_t" variable nil (reparse-symbol function_parameters) [90378 90383])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [90385 90394]))                                  
                                :documentation "
            Return the paths for arrow heads. Since arrow lines are
            drawn with capstyle=projected, The arrow goes beyond the
            desired point. This method also returns the amount of the path
            to be shrinked so that it does not overshoot.
            ")
                                (reparse-symbol indented_block_body) [90288 91781])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [91805 91809])
                                    ("path" variable nil (reparse-symbol function_parameters) [91811 91815])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [91817 91830])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [91832 91841]))                                  )
                                (reparse-symbol indented_block_body) [91791 94582]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [89165 94582])
                    ("Curve" type
                       (:documentation "
        A simple curve without any arrow head.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("super" code nil (reparse-symbol indented_block_body) [94721 94812]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [94702 94706]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [94689 94813]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [94588 94813])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [94818 94842])
                    ("CurveA" type
                       (:documentation "
        An arrow with a head at its begin point.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *head_length*
              length of the arrow head

            *head_width*
              width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [95017 95165])
                                    ("super" code nil (reparse-symbol indented_block_body) [95179 95335]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [94967 94971])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [94973 94984])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [94989 94999]))                                  
                                :documentation "
            *head_length*
              length of the arrow head

            *head_width*
              width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [94954 95336]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [94850 95336])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [95341 95367])
                    ("CurveB" type
                       (:documentation "
        An arrow with a head at its end point.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *head_length*
              length of the arrow head

            *head_width*
              width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [95538 95686])
                                    ("super" code nil (reparse-symbol indented_block_body) [95700 95856]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [95488 95492])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [95494 95505])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [95510 95520]))                                  
                                :documentation "
            *head_length*
              length of the arrow head

            *head_width*
              width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [95475 95857]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [95373 95857])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [95894 95920])
                    ("CurveAB" type
                       (:documentation "
        An arrow with heads both at the begin and the end point.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *head_length*
              length of the arrow head

            *head_width*
              width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [96111 96259])
                                    ("super" code nil (reparse-symbol indented_block_body) [96273 96429]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [96061 96065])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [96067 96078])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [96083 96093]))                                  
                                :documentation "
            *head_length*
              length of the arrow head

            *head_width*
              width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [96048 96430]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [95927 96430])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [96469 96497])
                    ("CurveFilledA" type
                       (:documentation "
        An arrow with filled triangle head at the begin.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *head_length*
              length of the arrow head

            *head_width*
              width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [96686 96834])
                                    ("super" code nil (reparse-symbol indented_block_body) [96848 97057]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [96636 96640])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [96642 96653])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [96658 96668]))                                  
                                :documentation "
            *head_length*
              length of the arrow head

            *head_width*
              width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [96623 97058]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [96505 97058])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [97063 97096])
                    ("CurveFilledB" type
                       (:documentation "
        An arrow with filled triangle head at the end.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *head_length*
              length of the arrow head

            *head_width*
              width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [97282 97430])
                                    ("super" code nil (reparse-symbol indented_block_body) [97444 97653]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [97232 97236])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [97238 97249])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [97254 97264]))                                  
                                :documentation "
            *head_length*
              length of the arrow head

            *head_width*
              width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [97219 97654]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [97103 97654])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [97659 97692])
                    ("CurveFilledAB" type
                       (:documentation "
        An arrow with filled triangle heads both at the begin and the end point.
        "
                        :superclasses ("_Curve")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *head_length*
              length of the arrow head

            *head_width*
              width of the arrow head
            \"\"\"" code nil (reparse-symbol indented_block_body) [97905 98053])
                                    ("super" code nil (reparse-symbol indented_block_body) [98067 98275]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [97855 97859])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [97861 97872])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [97877 97887]))                                  
                                :documentation "
            *head_length*
              length of the arrow head

            *head_width*
              width of the arrow head
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [97842 98276]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [97699 98276])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [98281 98317])
                    ("_Bracket" type
                       (:superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self, self" code nil (reparse-symbol indented_block_body) [98624 98673])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [98686 98727])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [98740 98785])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [98798 98839])
                                    ("self, self" code nil (reparse-symbol indented_block_body) [98852 98892]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [98369 98373])
                                    ("bracketA" variable nil (reparse-symbol function_parameters) [98375 98383])
                                    ("bracketB" variable nil (reparse-symbol function_parameters) [98390 98398])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [98426 98432])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [98437 98443])
                                    ("lengthA" variable nil (reparse-symbol function_parameters) [98469 98476])
                                    ("lengthB" variable nil (reparse-symbol function_parameters) [98482 98489])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [98516 98522])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [98529 98535])
                                    ("scaleA" variable nil (reparse-symbol function_parameters) [98563 98569])
                                    ("scaleB" variable nil (reparse-symbol function_parameters) [98576 98582]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [98356 98893])
                            ("_get_bracket" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [98919 98923])
                                    ("x0" variable nil (reparse-symbol function_parameters) [98925 98927])
                                    ("y0" variable nil (reparse-symbol function_parameters) [98929 98931])
                                    ("cos_t" variable nil (reparse-symbol function_parameters) [98958 98963])
                                    ("sin_t" variable nil (reparse-symbol function_parameters) [98965 98970])
                                    ("width" variable nil (reparse-symbol function_parameters) [98972 98977])
                                    ("length" variable nil (reparse-symbol function_parameters) [98979 98985]))                                  )
                                (reparse-symbol indented_block_body) [98902 99628])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [99652 99656])
                                    ("path" variable nil (reparse-symbol function_parameters) [99658 99662])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [99664 99677])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [99679 99688]))                                  )
                                (reparse-symbol indented_block_body) [99638 101242]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [98324 101242])
                    ("BracketAB" type
                       (:documentation "
        An arrow with a bracket(])  at both ends.
        "
                        :superclasses ("_Bracket")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *widthA*
              width of the bracket

            *lengthA*
              length of the bracket

            *angleA*
              angle between the bracket and the line

            *widthB*
              width of the bracket

            *lengthB*
              length of the bracket

            *angleB*
              angle between the bracket and the line
            \"\"\"" code nil (reparse-symbol indented_block_body) [101505 101905])
                                    ("super" code nil (reparse-symbol indented_block_body) [101919 102117]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [101370 101374])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [101397 101403])
                                    ("lengthA" variable nil (reparse-symbol function_parameters) [101408 101415])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [101421 101427])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [101455 101461])
                                    ("lengthB" variable nil (reparse-symbol function_parameters) [101466 101473])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [101479 101485]))                                  
                                :documentation "
            *widthA*
              width of the bracket

            *lengthA*
              length of the bracket

            *angleA*
              angle between the bracket and the line

            *widthB*
              width of the bracket

            *lengthB*
              length of the bracket

            *angleB*
              angle between the bracket and the line
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [101357 102118]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [101247 102118])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [102123 102153])
                    ("BracketA" type
                       (:documentation "
        An arrow with a bracket(])  at its end.
        "
                        :superclasses ("_Bracket")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *widthA*
              width of the bracket

            *lengthA*
              length of the bracket

            *angleA*
              angle between the bracket and the line
            \"\"\"" code nil (reparse-symbol indented_block_body) [102336 102545])
                                    ("super" code nil (reparse-symbol indented_block_body) [102559 102681]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [102280 102284])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [102286 102292])
                                    ("lengthA" variable nil (reparse-symbol function_parameters) [102297 102304])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [102310 102316]))                                  
                                :documentation "
            *widthA*
              width of the bracket

            *lengthA*
              length of the bracket

            *angleA*
              angle between the bracket and the line
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [102267 102682]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [102160 102682])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [102687 102715])
                    ("BracketB" type
                       (:documentation "
        An arrow with a bracket([)  at its end.
        "
                        :superclasses ("_Bracket")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *widthB*
              width of the bracket

            *lengthB*
              length of the bracket

            *angleB*
              angle between the bracket and the line
            \"\"\"" code nil (reparse-symbol indented_block_body) [102898 103107])
                                    ("super" code nil (reparse-symbol indented_block_body) [103121 103243]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [102842 102846])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [102848 102854])
                                    ("lengthB" variable nil (reparse-symbol function_parameters) [102859 102866])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [102872 102878]))                                  
                                :documentation "
            *widthB*
              width of the bracket

            *lengthB*
              length of the bracket

            *angleB*
              angle between the bracket and the line
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [102829 103244]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [102722 103244])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [103249 103277])
                    ("BarAB" type
                       (:documentation "
        An arrow with a bar(|) at both ends.
        "
                        :superclasses ("_Bracket")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *widthA*
              width of the bracket

            *lengthA*
              length of the bracket

            *angleA*
              angle between the bracket and the line

            *widthB*
              width of the bracket

            *lengthB*
              length of the bracket

            *angleB*
              angle between the bracket and the line
            \"\"\"" code nil (reparse-symbol indented_block_body) [103507 103907])
                                    ("super" code nil (reparse-symbol indented_block_body) [103921 104103]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [103398 103402])
                                    ("widthA" variable nil (reparse-symbol function_parameters) [103425 103431])
                                    ("angleA" variable nil (reparse-symbol function_parameters) [103436 103442])
                                    ("widthB" variable nil (reparse-symbol function_parameters) [103470 103476])
                                    ("angleB" variable nil (reparse-symbol function_parameters) [103481 103487]))                                  
                                :documentation "
            *widthA*
              width of the bracket

            *lengthA*
              length of the bracket

            *angleA*
              angle between the bracket and the line

            *widthB*
              width of the bracket

            *lengthB*
              length of the bracket

            *angleB*
              angle between the bracket and the line
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [103385 104104]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [103284 104104])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [104109 104135])
                    ("Simple" type
                       (:documentation "
        A simple arrow. Only works with a quadratic bezier curve.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *head_length*
              length of the arrow head

            *head_with*
              width of the arrow head

            *tail_width*
              width of the arrow tail

            \"\"\"" code nil (reparse-symbol indented_block_body) [104340 104552])
                                    ("self, self, self" code nil (reparse-symbol indented_block_body) [104566 104676])
                                    ("super" code nil (reparse-symbol indented_block_body) [104689 104730]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [104275 104279])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [104281 104292])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [104297 104307])
                                    ("tail_width" variable nil (reparse-symbol function_parameters) [104312 104322]))                                  
                                :documentation "
            *head_length*
              length of the arrow head

            *head_with*
              width of the arrow head

            *tail_width*
              width of the arrow tail

            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [104262 104731])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [104754 104758])
                                    ("path" variable nil (reparse-symbol function_parameters) [104760 104764])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [104766 104779])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [104781 104790]))                                  )
                                (reparse-symbol indented_block_body) [104740 106634]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [104142 106634])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [106639 106669])
                    ("Fancy" type
                       (:documentation "
        A fancy arrow. Only works with a quadratic bezier curve.
        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *head_length*
              length of the arrow head

            *head_with*
              width of the arrow head

            *tail_width*
              width of the arrow tail

            \"\"\"" code nil (reparse-symbol indented_block_body) [106872 107084])
                                    ("self, self, self" code nil (reparse-symbol indented_block_body) [107098 107208])
                                    ("super" code nil (reparse-symbol indented_block_body) [107221 107261]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [106807 106811])
                                    ("head_length" variable nil (reparse-symbol function_parameters) [106813 106824])
                                    ("head_width" variable nil (reparse-symbol function_parameters) [106829 106839])
                                    ("tail_width" variable nil (reparse-symbol function_parameters) [106844 106854]))                                  
                                :documentation "
            *head_length*
              length of the arrow head

            *head_with*
              width of the arrow head

            *tail_width*
              width of the arrow tail

            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [106794 107262])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [107285 107289])
                                    ("path" variable nil (reparse-symbol function_parameters) [107291 107295])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [107297 107310])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [107312 107321]))                                  )
                                (reparse-symbol indented_block_body) [107271 110662]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [106676 110662])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [110667 110695])
                    ("Wedge" type
                       (:documentation "
        Wedge(?) shape. Only wokrs with a quadratic bezier curve.  The
        begin point has a width of the tail_width and the end point has a
        width of 0. At the middle, the width is shrink_factor*tail_width.

        "
                        :superclasses ("_Base")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"
            *tail_width*
              width of the tail

            *shrink_factor*
              fraction of the arrow width at the middle point
            \"\"\"" code nil (reparse-symbol indented_block_body) [111041 111208])
                                    ("self" variable nil (reparse-symbol indented_block_body) [111222 111250])
                                    ("self" variable nil (reparse-symbol indented_block_body) [111263 111297])
                                    ("super" code nil (reparse-symbol indented_block_body) [111310 111350]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [110988 110992])
                                    ("tail_width" variable nil (reparse-symbol function_parameters) [110994 111004])
                                    ("shrink_factor" variable nil (reparse-symbol function_parameters) [111009 111022]))                                  
                                :documentation "
            *tail_width*
              width of the tail

            *shrink_factor*
              fraction of the arrow width at the middle point
            "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [110975 111351])
                            ("transmute" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [111375 111379])
                                    ("path" variable nil (reparse-symbol function_parameters) [111381 111385])
                                    ("mutation_size" variable nil (reparse-symbol function_parameters) [111387 111400])
                                    ("linewidth" variable nil (reparse-symbol function_parameters) [111402 111411]))                                  )
                                (reparse-symbol indented_block_body) [111361 112279]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [110702 112279])
                    ("_style_list" variable nil (reparse-symbol indented_block_body) [112284 112312])
                    ("if" code nil (reparse-symbol indented_block_body) [112318 112443]))                  
                :type "class")
                nil [84185 112443])
            ("docstring" code nil nil [112446 112616])
            ("FancyArrowPatch" type
               (:documentation "
    A fancy arrow patch. It draws an arrow using the :class:ArrowStyle.
    "
                :superclasses ("Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112754 112758]))                          )
                        (reparse-symbol indented_block_body) [112742 113071])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        If *posA* and *posB* is given, a path connecting two point are
        created according to the connectionstyle. The path will be
        clipped with *patchA* and *patchB* and further shirnked by
        *shrinkA* and *shrinkB*. An arrow is drawn along this
        resulting path using the *arrowstyle* parameter. If *path*
        provided, an arrow is drawn along this path and *patchA*,
        *patchB*, *shrinkA*, and *shrinkB* are ignored.

        The *connectionstyle* describes how *posA* and *posB* are
        connected. It can be an instance of the ConnectionStyle class
        (matplotlib.patches.ConnectionStlye) or a string of the
        connectionstyle name, with optional comma-separated
        attributes.  The following connection styles are available.

        %(AvailableConnectorstyles)s


        The *arrowstyle* describes how the fancy arrow will be
        drawn. It can be string of the available arrowstyle names,
        with optional comma-separated attributes, or one of the
        ArrowStyle instance. The optional attributes are meant to be
        scaled with the *mutation_scale*. The following arrow styles are
        available.

        %(AvailableArrowstyles)s

        *mutation_scale* : a value with which attributes of arrowstyle
            (e.g., head_length) will be scaled. default=1.

        *mutation_aspect* : The height of the rectangle will be
            squeezed by this value before the mutation and the mutated
            box will be stretched by the inverse of it. default=None.

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [113586 115197])
                            ("if" code nil (reparse-symbol indented_block_body) [115207 115674])
                            ("self" variable nil (reparse-symbol indented_block_body) [115683 115703])
                            ("self" variable nil (reparse-symbol indented_block_body) [115712 115732])
                            ("self" variable nil (reparse-symbol indented_block_body) [115741 115763])
                            ("self" variable nil (reparse-symbol indented_block_body) [115772 115794])
                            ("Patch" code nil (reparse-symbol indented_block_body) [115804 115834])
                            ("self" variable nil (reparse-symbol indented_block_body) [115844 115870])
                            ("self" code nil (reparse-symbol indented_block_body) [115880 115911])
                            ("self" variable nil (reparse-symbol indented_block_body) [115922 115957])
                            ("self" variable nil (reparse-symbol indented_block_body) [115966 116003])
                            ("self" code nil (reparse-symbol indented_block_body) [116013 116038]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113120 113124])
                            ("posA" variable nil (reparse-symbol function_parameters) [113126 113130])
                            ("posB" variable nil (reparse-symbol function_parameters) [113137 113141])
                            ("path" variable nil (reparse-symbol function_parameters) [113165 113169])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [113193 113203])
                            ("arrow_transmuter" variable nil (reparse-symbol function_parameters) [113231 113247])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [113271 113286])
                            ("connector" variable nil (reparse-symbol function_parameters) [113312 113321])
                            ("patchA" variable nil (reparse-symbol function_parameters) [113345 113351])
                            ("patchB" variable nil (reparse-symbol function_parameters) [113375 113381])
                            ("shrinkA" variable nil (reparse-symbol function_parameters) [113405 113412])
                            ("shrinkB" variable nil (reparse-symbol function_parameters) [113434 113441])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [113463 113477])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [113499 113514])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [113538 113545])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [113567 113575]))                          
                        :documentation "
        If *posA* and *posB* is given, a path connecting two point are
        created according to the connectionstyle. The path will be
        clipped with *patchA* and *patchB* and further shirnked by
        *shrinkA* and *shrinkB*. An arrow is drawn along this
        resulting path using the *arrowstyle* parameter. If *path*
        provided, an arrow is drawn along this path and *patchA*,
        *patchB*, *shrinkA*, and *shrinkB* are ignored.

        The *connectionstyle* describes how *posA* and *posB* are
        connected. It can be an instance of the ConnectionStyle class
        (matplotlib.patches.ConnectionStlye) or a string of the
        connectionstyle name, with optional comma-separated
        attributes.  The following connection styles are available.

        %(AvailableConnectorstyles)s


        The *arrowstyle* describes how the fancy arrow will be
        drawn. It can be string of the available arrowstyle names,
        with optional comma-separated attributes, or one of the
        ArrowStyle instance. The optional attributes are meant to be
        scaled with the *mutation_scale*. The following arrow styles are
        available.

        %(AvailableArrowstyles)s

        *mutation_scale* : a value with which attributes of arrowstyle
            (e.g., head_length) will be scaled. default=1.

        *mutation_aspect* : The height of the rectangle will be
            squeezed by this value before the mutation and the mutated
            box will be stretched by the inverse of it. default=None.

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [113077 116039])
                    ("set_dpi_cor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116109 116113])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [116115 116122]))                          
                        :documentation "
        dpi_cor is currently used for linewidth-related things and
        shink factor. Mutation scale is not affected by this.
        ")
                        (reparse-symbol indented_block_body) [116093 116311])
                    ("get_dpi_cor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116332 116336]))                          
                        :documentation "
        dpi_cor is currently used for linewidth-related things and
        shink factor. Mutation scale is not affected by this.
        ")
                        (reparse-symbol indented_block_body) [116316 116522])
                    ("set_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116546 116550])
                            ("posA" variable nil (reparse-symbol function_parameters) [116552 116556])
                            ("posB" variable nil (reparse-symbol function_parameters) [116558 116562]))                          
                        :documentation " set the begin end end positions of the connecting
        path. Use current vlaue if None.
        ")
                        (reparse-symbol indented_block_body) [116528 116790])
                    ("set_patchA" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116811 116815])
                            ("patchA" variable nil (reparse-symbol function_parameters) [116817 116823]))                          
                        :documentation " set the begin patch.
        ")
                        (reparse-symbol indented_block_body) [116796 116900])
                    ("set_patchB" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116921 116925])
                            ("patchB" variable nil (reparse-symbol function_parameters) [116927 116933]))                          
                        :documentation " set the begin patch
        ")
                        (reparse-symbol indented_block_body) [116906 117009])
                    ("set_connectionstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117039 117043])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [117045 117060])
                            ("kw" variable nil (reparse-symbol function_parameters) [117062 117066]))                          
                        :documentation "
        Set the connection style.

        *connectionstyle* can be a string with connectionstyle name with optional
         comma-separated attributes. Alternatively, the attrs can
         be probided as keywords.

         set_connectionstyle(\"arc,angleA=0,armA=30,rad=10\")
         set_connectionstyle(\"arc\", angleA=0,armA=30,rad=10)

        Old attrs simply are forgotten.

        Without argument (or with connectionstyle=None), return
        available styles as a list of strings.
        ")
                        (reparse-symbol indented_block_body) [117015 118027])
                    ("get_connectionstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118057 118061]))                          
                        :documentation "
        Return the ConnectionStyle instance
        ")
                        (reparse-symbol indented_block_body) [118033 118163])
                    ("set_arrowstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118188 118192])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [118194 118204])
                            ("kw" variable nil (reparse-symbol function_parameters) [118211 118215]))                          
                        :documentation "
        Set the arrow style.

        *arrowstyle* can be a string with arrowstyle name with optional
         comma-separated attributes. Alternatively, the attrs can
         be provided as keywords.

         set_arrowstyle(\"Fancy,head_length=0.2\")
         set_arrowstyle(\"fancy\", head_length=0.2)

        Old attrs simply are forgotten.

        Without argument (or with arrowstyle=None), return
        available box styles as a list of strings.
        ")
                        (reparse-symbol indented_block_body) [118169 118959])
                    ("get_arrowstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118983 118987]))                          
                        :documentation "
        Return the arrowstyle object
        ")
                        (reparse-symbol indented_block_body) [118964 119089])
                    ("set_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119118 119122])
                            ("scale" variable nil (reparse-symbol function_parameters) [119124 119129]))                          
                        :documentation "
        Set the mutation scale.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [119095 119247])
                    ("get_mutation_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119275 119279]))                          
                        :documentation "
        Return the mutation scale.
        ")
                        (reparse-symbol indented_block_body) [119252 119377])
                    ("set_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119406 119410])
                            ("aspect" variable nil (reparse-symbol function_parameters) [119412 119418]))                          
                        :documentation "
        Set the aspect ratio of the bbox mutation.

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [119382 119557])
                    ("get_mutation_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119586 119590]))                          
                        :documentation "
        Return the aspect ratio of the bbox mutation.
        ")
                        (reparse-symbol indented_block_body) [119562 119708])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119727 119731]))                          
                        :documentation "
        return the path of the arrow in the data coordinate. Use
        get_path_in_displaycoord() method to retrieve the arrow path
        in the display coord.
        ")
                        (reparse-symbol indented_block_body) [119714 120133])
                    ("get_path_in_displaycoord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120168 120172]))                          
                        :documentation "
        Return the mutated path of the arrow in the display coord
        ")
                        (reparse-symbol indented_block_body) [120139 121409])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121425 121429])
                            ("renderer" variable nil (reparse-symbol function_parameters) [121431 121439]))                          )
                        (reparse-symbol indented_block_body) [121416 123335]))                  
                :type "class")
                nil [112618 123335])
            ("ConnectionPatch" type
               (:documentation "
    A :class:`~matplotlib.patches.ConnectionPatch` class is to make
    connecting lines between two points (possibly in different axes).
    "
                :superclasses ("FancyArrowPatch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123547 123551]))                          )
                        (reparse-symbol indented_block_body) [123535 123673])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Connect point *xyA* in *coordsA* with point *xyB* in *coordsB*


        Valid keys are


        ===============  ======================================================
        Key              Description
        ===============  ======================================================
        arrowstyle       the arrow style
        connectionstyle  the connection style
        relpos           default is (0.5, 0.5)
        patchA           default is bounding box of the text
        patchB           default is None
        shrinkA          default is 2 points
        shrinkB          default is 2 points
        mutation_scale   default is text size (in points)
        mutation_aspect  default is 1.
        ?                any key for :class:`matplotlib.patches.PathPatch`
        ===============  ======================================================


        *coordsA* and *coordsB* are strings that indicate the
        coordinates of *xyA* and *xyB*.

        =================   ===================================================
        Property            Description
        =================   ===================================================
        'figure points'     points from the lower left corner of the figure
        'figure pixels'     pixels from the lower left corner of the figure
        'figure fraction'   0,0 is lower left of figure and 1,1 is upper, right
        'axes points'       points from lower left corner of axes
        'axes pixels'       pixels from lower left corner of axes
        'axes fraction'     0,1 is lower left of axes and 1,1 is upper right
        'data'              use the coordinate system of the object being
                            annotated (default)
        'offset points'     Specify an offset (in points) from the *xy* value

        'polar'             you can specify *theta*, *r* for the annotation,
                            even in cartesian plots.  Note that if you
                            are using a polar axes, you do not need
                            to specify polar for the coordinate
                            system since that is the native \"data\" coordinate
                            system.
        =================   ===================================================

        \"\"\"" code nil (reparse-symbol indented_block_body) [124239 126549])
                            ("if" code nil (reparse-symbol indented_block_body) [126558 126608])
                            ("self" variable nil (reparse-symbol indented_block_body) [126685 126699])
                            ("self" variable nil (reparse-symbol indented_block_body) [126708 126722])
                            ("self" variable nil (reparse-symbol indented_block_body) [126731 126753])
                            ("self" variable nil (reparse-symbol indented_block_body) [126762 126784])
                            ("self" variable nil (reparse-symbol indented_block_body) [126794 126812])
                            ("self" variable nil (reparse-symbol indented_block_body) [126821 126839])
                            ("FancyArrowPatch" code nil (reparse-symbol indented_block_body) [126849 127649])
                            ("self" variable nil (reparse-symbol indented_block_body) [127729 127757]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123721 123725])
                            ("xyA" variable nil (reparse-symbol function_parameters) [123727 123730])
                            ("xyB" variable nil (reparse-symbol function_parameters) [123732 123735])
                            ("coordsA" variable nil (reparse-symbol function_parameters) [123737 123744])
                            ("coordsB" variable nil (reparse-symbol function_parameters) [123746 123753])
                            ("axesA" variable nil (reparse-symbol function_parameters) [123777 123782])
                            ("axesB" variable nil (reparse-symbol function_parameters) [123789 123794])
                            ("arrowstyle" variable nil (reparse-symbol function_parameters) [123818 123828])
                            ("arrow_transmuter" variable nil (reparse-symbol function_parameters) [123851 123867])
                            ("connectionstyle" variable nil (reparse-symbol function_parameters) [123891 123906])
                            ("connector" variable nil (reparse-symbol function_parameters) [123932 123941])
                            ("patchA" variable nil (reparse-symbol function_parameters) [123965 123971])
                            ("patchB" variable nil (reparse-symbol function_parameters) [123995 124001])
                            ("shrinkA" variable nil (reparse-symbol function_parameters) [124025 124032])
                            ("shrinkB" variable nil (reparse-symbol function_parameters) [124054 124061])
                            ("mutation_scale" variable nil (reparse-symbol function_parameters) [124083 124097])
                            ("mutation_aspect" variable nil (reparse-symbol function_parameters) [124120 124135])
                            ("clip_on" variable nil (reparse-symbol function_parameters) [124159 124166])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [124191 124198])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [124220 124228]))                          
                        :documentation "
        Connect point *xyA* in *coordsA* with point *xyB* in *coordsB*


        Valid keys are


        ===============  ======================================================
        Key              Description
        ===============  ======================================================
        arrowstyle       the arrow style
        connectionstyle  the connection style
        relpos           default is (0.5, 0.5)
        patchA           default is bounding box of the text
        patchB           default is None
        shrinkA          default is 2 points
        shrinkB          default is 2 points
        mutation_scale   default is text size (in points)
        mutation_aspect  default is 1.
        ?                any key for :class:`matplotlib.patches.PathPatch`
        ===============  ======================================================


        *coordsA* and *coordsB* are strings that indicate the
        coordinates of *xyA* and *xyB*.

        =================   ===================================================
        Property            Description
        =================   ===================================================
        'figure points'     points from the lower left corner of the figure
        'figure pixels'     pixels from the lower left corner of the figure
        'figure fraction'   0,0 is lower left of figure and 1,1 is upper, right
        'axes points'       points from lower left corner of axes
        'axes pixels'       pixels from lower left corner of axes
        'axes fraction'     0,1 is lower left of axes and 1,1 is upper right
        'data'              use the coordinate system of the object being
                            annotated (default)
        'offset points'     Specify an offset (in points) from the *xy* value

        'polar'             you can specify *theta*, *r* for the annotation,
                            even in cartesian plots.  Note that if you
                            are using a polar axes, you do not need
                            to specify polar for the coordinate
                            system since that is the native \"data\" coordinate
                            system.
        =================   ===================================================

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [123678 127758])
                    ("_get_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127776 127780])
                            ("x" variable nil (reparse-symbol function_parameters) [127782 127783])
                            ("y" variable nil (reparse-symbol function_parameters) [127785 127786])
                            ("s" variable nil (reparse-symbol function_parameters) [127788 127789])
                            ("axes" variable nil (reparse-symbol function_parameters) [127791 127795]))                          
                        :documentation "
        caculate the pixel position of given point
        ")
                        (reparse-symbol indented_block_body) [127764 130721])
                    ("set_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130750 130754])
                            ("b" variable nil (reparse-symbol function_parameters) [130756 130757]))                          
                        :documentation "
        set *annotation_clip* attribute.

          * True : the annotation will only be drawn when self.xy is inside the axes.
          * False : the annotation will always be drawn regardless of its position.
          * None : the self.xy will be checked only if *xycoords* is \"data\"
        ")
                        (reparse-symbol indented_block_body) [130726 131106])
                    ("get_annotation_clip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131135 131139]))                          
                        :documentation "
        Return *annotation_clip* attribute.
        See :meth:`set_annotation_clip` for the meaning of return values.
        ")
                        (reparse-symbol indented_block_body) [131111 131321])
                    ("get_path_in_displaycoord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131356 131360]))                          
                        :documentation "
        Return the mutated path of the arrow in the display coord
        ")
                        (reparse-symbol indented_block_body) [131327 132401])
                    ("_check_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132422 132426])
                            ("renderer" variable nil (reparse-symbol function_parameters) [132428 132436]))                          
                        :documentation "
        check if the annotation need to
        be drawn.
        ")
                        (reparse-symbol indented_block_body) [132408 133172])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133187 133191])
                            ("renderer" variable nil (reparse-symbol function_parameters) [133193 133201]))                          
                        :documentation "
        Draw.
        ")
                        (reparse-symbol indented_block_body) [133178 133463]))                  
                :type "class")
                nil [123337 133463]))          
      :file "patches.py"
      :pointmax 133466
      :fsize 133466
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
GUI Neutral widgets
===================

Widgets that are designed to work for any of the GUI backends.
All of these widgets require you to predefine an :class:`matplotlib.axes.Axes`
instance and pass that as the first arg.  matplotlib doesn't try to
be too smart with respect to layout -- you will have to figure out how
wide and tall you want your Axes to be to accommodate your widget.
\"\"\"" code nil nil [1 397])
            ("numpy" include nil nil [399 417])
            ("mlab" include nil nil [419 440])
            ("patches" include nil nil [441 478])
            ("lines" include nil nil [479 503])
            ("transforms" include nil nil [504 552])
            ("LockDraw" type
               (:documentation "
    Some widgets, like the cursor, draw onto the canvas, and this is not
    desirable under all circumstaces, like when the toolbar is in
    zoom-to-rect mode and drawing a rectangle.  The module level \"lock\"
    allows someone to grab the lock and prevent other widgets from
    drawing.  Use ``matplotlib.widgets.lock(someobj)`` to pr
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1011 1029]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [996 1000]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [983 1030])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1048 1052])
                            ("o" variable nil (reparse-symbol function_parameters) [1054 1055]))                          )
                        (reparse-symbol indented_block_body) [1035 1198])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1215 1219])
                            ("o" variable nil (reparse-symbol function_parameters) [1221 1222]))                          )
                        (reparse-symbol indented_block_body) [1203 1370])
                    ("available" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1389 1393])
                            ("o" variable nil (reparse-symbol function_parameters) [1395 1396]))                          )
                        (reparse-symbol indented_block_body) [1375 1489])
                    ("isowner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1506 1510])
                            ("o" variable nil (reparse-symbol function_parameters) [1512 1513]))                          )
                        (reparse-symbol indented_block_body) [1494 1592])
                    ("locked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1608 1612]))                          )
                        (reparse-symbol indented_block_body) [1597 1718]))                  
                :type "class")
                nil [554 1718])
            ("Widget" type
               (:documentation "
    Abstract base class for GUI neutral widgets
    "
                :superclasses ("object")
                :members 
                  ( ("drawon" variable nil (reparse-symbol indented_block_body) [1811 1824])
                    ("eventson" variable nil (reparse-symbol indented_block_body) [1829 1844]))                  
                :type "class")
                nil [1721 1845])
            ("Button" type
               (:documentation "
    A GUI neutral button

    The following attributes are accesible

      *ax*
        The :class:`matplotlib.axes.Axes` the button renders into.

      *label*
        A :class:`matplotlib.text.Text` instance.

      *color*
        The color of the button when not hovering.

      *hovercolor*
        The color of the button when hovering.

    Call :meth:`on_clicked` to connect to the button
    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *ax*
            The :class:`matplotlib.axes.Axes` instance the button
            will be placed into.

        *label*
            The button text. Accepts string.

        *image*
            The image to place in the button, if not *None*.
            Can be any legal arg to imshow (numpy array,
            matplotlib Image instance, or PIL image).

        *color*
            The color of the button when not activated

        *hovercolor*
            The color of the button when the mouse is over it
        \"\"\"" code nil (reparse-symbol indented_block_body) [2393 2927])
                            ("if" code nil (reparse-symbol indented_block_body) [2936 2987])
                            ("self" variable nil (reparse-symbol indented_block_body) [2995 3201])
                            ("self" variable nil (reparse-symbol indented_block_body) [3211 3223])
                            ("self" variable nil (reparse-symbol indented_block_body) [3232 3251])
                            ("self" variable nil (reparse-symbol indented_block_body) [3260 3272])
                            ("ax" code nil (reparse-symbol indented_block_body) [3283 3346])
                            ("ax" code nil (reparse-symbol indented_block_body) [3355 3422])
                            ("ax" code nil (reparse-symbol indented_block_body) [3431 3496])
                            ("ax" code nil (reparse-symbol indented_block_body) [3505 3527])
                            ("ax" code nil (reparse-symbol indented_block_body) [3536 3562])
                            ("ax" code nil (reparse-symbol indented_block_body) [3571 3588])
                            ("ax" code nil (reparse-symbol indented_block_body) [3597 3614])
                            ("self" variable nil (reparse-symbol indented_block_body) [3623 3641])
                            ("self" variable nil (reparse-symbol indented_block_body) [3650 3678])
                            ("self" variable nil (reparse-symbol indented_block_body) [3688 3711]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2305 2309])
                            ("ax" variable nil (reparse-symbol function_parameters) [2311 2313])
                            ("label" variable nil (reparse-symbol function_parameters) [2315 2320])
                            ("image" variable nil (reparse-symbol function_parameters) [2322 2327])
                            ("color" variable nil (reparse-symbol function_parameters) [2351 2356])
                            ("hovercolor" variable nil (reparse-symbol function_parameters) [2365 2375]))                          
                        :documentation "
        *ax*
            The :class:`matplotlib.axes.Axes` instance the button
            will be placed into.

        *label*
            The button text. Accepts string.

        *image*
            The image to place in the button, if not *None*.
            Can be any legal arg to imshow (numpy array,
            matplotlib Image instance, or PIL image).

        *color*
            The color of the button when not activated

        *hovercolor*
            The color of the button when the mouse is over it
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2292 3712])
                    ("_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3728 3732])
                            ("event" variable nil (reparse-symbol function_parameters) [3734 3739]))                          )
                        (reparse-symbol indented_block_body) [3717 3941])
                    ("_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3959 3963])
                            ("event" variable nil (reparse-symbol function_parameters) [3965 3970]))                          )
                        (reparse-symbol indented_block_body) [3946 4263])
                    ("_motion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4280 4284])
                            ("event" variable nil (reparse-symbol function_parameters) [4286 4291]))                          )
                        (reparse-symbol indented_block_body) [4268 4563])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4583 4587])
                            ("func" variable nil (reparse-symbol function_parameters) [4589 4593]))                          
                        :documentation "
        When the button is clicked, call this *func* with event

        A connection id is returned which can be used to disconnect
        ")
                        (reparse-symbol indented_block_body) [4568 4852])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4872 4876])
                            ("cid" variable nil (reparse-symbol function_parameters) [4878 4881]))                          )
                        (reparse-symbol indented_block_body) [4857 5006]))                  
                :type "class")
                nil [1849 5006])
            ("Slider" type
               (:documentation "
    A slider representing a floating point range

    The following attributes are defined
      *ax*        : the slider :class:`matplotlib.axes.Axes` instance

      *val*       : the current slider value

      *vline*     : a :class:`matplotlib.lines.Line2D` instance
                     representing the initial value of the slider

      *poly*      : A :class:`matplotlib.patches.Polygon` instance
                     which is the slider knob

      *valfmt*    : the format string for formatting the slider text

      *label*     : a :class:`matplotlib.text.Text` instance
                     for the slider label

      *closedmin* : whether the slider is closed on the minimum

      *closedmax* : whether the slider is closed on the maximum

      *slidermin* : another slider - if not *None*, this slider must be
                     greater than *slidermin*

      *slidermax* : another slider - if not *None*, this slider must be
                     less than *slidermax*

      *dragging*  : allow for mouse dragging on slider

    Call :meth:`on_changed` to connect to the slider event
    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a slider from *valmin* to *valmax* in axes *ax*

        *valinit*
            The slider initial position

        *label*
            The slider label

        *valfmt*
            Used to format the slider value

        *closedmin* and *closedmax*
            Indicate whether the slider interval is closed

        *slidermin* and *slidermax*
            Used to contrain the value of this slider to the values
            of other sliders.

        additional kwargs are passed on to ``self.poly`` which is the
        :class:`matplotlib.patches.Rectangle` which draws the slider
        knob.  See the :class:`matplotlib.patches.Rectangle` documentation
        valid property names (e.g., *facecolor*, *edgecolor*, *alpha*, ...)
        \"\"\"" code nil (reparse-symbol indented_block_body) [6365 7132])
                            ("self" variable nil (reparse-symbol indented_block_body) [7141 7153])
                            ("self" variable nil (reparse-symbol indented_block_body) [7163 7183])
                            ("self" variable nil (reparse-symbol indented_block_body) [7192 7212])
                            ("self" variable nil (reparse-symbol indented_block_body) [7221 7239])
                            ("self" variable nil (reparse-symbol indented_block_body) [7248 7270])
                            ("self" variable nil (reparse-symbol indented_block_body) [7279 7331])
                            ("self" variable nil (reparse-symbol indented_block_body) [7341 7394])
                            ("self" variable nil (reparse-symbol indented_block_body) [7405 7423])
                            ("ax" code nil (reparse-symbol indented_block_body) [7432 7449])
                            ("ax" code nil (reparse-symbol indented_block_body) [7458 7487])
                            ("ax" code nil (reparse-symbol indented_block_body) [7496 7513])
                            ("ax" code nil (reparse-symbol indented_block_body) [7522 7544])
                            ("ax" code nil (reparse-symbol indented_block_body) [7554 7618])
                            ("ax" code nil (reparse-symbol indented_block_body) [7627 7693])
                            ("if" code nil (reparse-symbol indented_block_body) [7702 7793])
                            ("self" variable nil (reparse-symbol indented_block_body) [7801 7979])
                            ("self" variable nil (reparse-symbol indented_block_body) [7989 8211])
                            ("self" variable nil (reparse-symbol indented_block_body) [8221 8233])
                            ("self" variable nil (reparse-symbol indented_block_body) [8242 8261])
                            ("self" variable nil (reparse-symbol indented_block_body) [8271 8297])
                            ("self" variable nil (reparse-symbol indented_block_body) [8306 8332])
                            ("self" variable nil (reparse-symbol indented_block_body) [8341 8367])
                            ("self" variable nil (reparse-symbol indented_block_body) [8376 8402])
                            ("self" variable nil (reparse-symbol indented_block_body) [8411 8436]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6171 6175])
                            ("ax" variable nil (reparse-symbol function_parameters) [6177 6179])
                            ("label" variable nil (reparse-symbol function_parameters) [6181 6186])
                            ("valmin" variable nil (reparse-symbol function_parameters) [6188 6194])
                            ("valmax" variable nil (reparse-symbol function_parameters) [6196 6202])
                            ("valinit" variable nil (reparse-symbol function_parameters) [6204 6211])
                            ("valfmt" variable nil (reparse-symbol function_parameters) [6217 6223])
                            ("closedmin" variable nil (reparse-symbol function_parameters) [6250 6259])
                            ("closedmax" variable nil (reparse-symbol function_parameters) [6266 6275])
                            ("slidermin" variable nil (reparse-symbol function_parameters) [6282 6291])
                            ("slidermax" variable nil (reparse-symbol function_parameters) [6298 6307])
                            ("dragging" variable nil (reparse-symbol function_parameters) [6331 6339])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6346 6354]))                          
                        :documentation "
        Create a slider from *valmin* to *valmax* in axes *ax*

        *valinit*
            The slider initial position

        *label*
            The slider label

        *valfmt*
            Used to format the slider value

        *closedmin* and *closedmax*
            Indicate whether the slider interval is closed

        *slidermin* and *slidermax*
            Used to contrain the value of this slider to the values
            of other sliders.

        additional kwargs are passed on to ``self.poly`` which is the
        :class:`matplotlib.patches.Rectangle` which draws the slider
        knob.  See the :class:`matplotlib.patches.Rectangle` documentation
        valid property names (e.g., *facecolor*, *edgecolor*, *alpha*, ...)
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6158 8437])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8454 8458])
                            ("event" variable nil (reparse-symbol function_parameters) [8460 8465]))                          )
                        (reparse-symbol indented_block_body) [8442 9473])
                    ("set_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9490 9494])
                            ("val" variable nil (reparse-symbol function_parameters) [9496 9499]))                          )
                        (reparse-symbol indented_block_body) [9478 9831])
                    ("on_changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9851 9855])
                            ("func" variable nil (reparse-symbol function_parameters) [9857 9861]))                          
                        :documentation "
        When the slider value is changed, call *func* with the new
        slider position

        A connection id is returned which can be used to disconnect
        ")
                        (reparse-symbol indented_block_body) [9836 10147])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10167 10171])
                            ("cid" variable nil (reparse-symbol function_parameters) [10173 10176]))                          )
                        (reparse-symbol indented_block_body) [10152 10301])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10316 10320]))                          )
                        (reparse-symbol indented_block_body) [10306 10459]))                  
                :type "class")
                nil [5009 10459])
            ("CheckButtons" type
               (:documentation "
    A GUI neutral radio button

    The following attributes are exposed

     *ax*
        The :class:`matplotlib.axes.Axes` instance the buttons are
        located in

     *labels*
        List of :class:`matplotlib.text.Text` instances

     *lines*
        List of (line1, line2) tuples for the x's in the check boxes.
        These lines exist for each box, but have ``set_visible(False)``
        when its box is not checked.

     *rectangles*
        List of :class:`matplotlib.patches.Rectangle` instances

    Connect to the CheckButtons with the :meth:`on_clicked` method
    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Add check buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *actives*
            A len(buttons) list of booleans indicating whether
             the button is active
        \"\"\"" code nil (reparse-symbol indented_block_body) [11144 11419])
                            ("ax" code nil (reparse-symbol indented_block_body) [11429 11446])
                            ("ax" code nil (reparse-symbol indented_block_body) [11455 11472])
                            ("ax" code nil (reparse-symbol indented_block_body) [11481 11503])
                            ("if" code nil (reparse-symbol indented_block_body) [11513 11678])
                            ("cnt" variable nil (reparse-symbol indented_block_body) [11687 11694])
                            ("axcolor" variable nil (reparse-symbol indented_block_body) [11703 11734])
                            ("self" variable nil (reparse-symbol indented_block_body) [11744 11760])
                            ("self" variable nil (reparse-symbol indented_block_body) [11769 11784])
                            ("self" variable nil (reparse-symbol indented_block_body) [11793 11813])
                            ("lineparams" variable nil (reparse-symbol indented_block_body) [11823 11940])
                            ("for" code nil (reparse-symbol indented_block_body) [11949 12783])
                            ("ax" code nil (reparse-symbol indented_block_body) [12792 12857])
                            ("self" variable nil (reparse-symbol indented_block_body) [12866 12878])
                            ("self" variable nil (reparse-symbol indented_block_body) [12889 12901])
                            ("self" variable nil (reparse-symbol indented_block_body) [12910 12929]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11108 11112])
                            ("ax" variable nil (reparse-symbol function_parameters) [11114 11116])
                            ("labels" variable nil (reparse-symbol function_parameters) [11118 11124])
                            ("actives" variable nil (reparse-symbol function_parameters) [11126 11133]))                          
                        :documentation "
        Add check buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *actives*
            A len(buttons) list of booleans indicating whether
             the button is active
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11095 12930])
                    ("_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12948 12952])
                            ("event" variable nil (reparse-symbol function_parameters) [12954 12959]))                          )
                        (reparse-symbol indented_block_body) [12935 13646])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13667 13671])
                            ("func" variable nil (reparse-symbol function_parameters) [13673 13677]))                          
                        :documentation "
        When the button is clicked, call *func* with button label

        A connection id is returned which can be used to disconnect
        ")
                        (reparse-symbol indented_block_body) [13652 13938])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13958 13962])
                            ("cid" variable nil (reparse-symbol function_parameters) [13964 13967]))                          )
                        (reparse-symbol indented_block_body) [13943 14092]))                  
                :type "class")
                nil [10462 14092])
            ("RadioButtons" type
               (:documentation "
    A GUI neutral radio button

    The following attributes are exposed

     *ax*
        The :class:`matplotlib.axes.Axes` instance the buttons are in

     *activecolor*
        The color of the button when clicked

     *labels*
        A list of :class:`matplotlib.text.Text` instances

     *circles*
        A list of :class:`matplotlib.patches.Circle` instances

    Connect to the RadioButtons with the :meth:`on_clicked` method
    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Add radio buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *active*
            The index into labels for the button that is active

        *activecolor*
            The color of the button when clicked
        \"\"\"" code nil (reparse-symbol indented_block_body) [14651 14964])
                            ("self" variable nil (reparse-symbol indented_block_body) [14973 15003])
                            ("ax" code nil (reparse-symbol indented_block_body) [15014 15031])
                            ("ax" code nil (reparse-symbol indented_block_body) [15040 15057])
                            ("ax" code nil (reparse-symbol indented_block_body) [15066 15088])
                            ("dy" code nil (reparse-symbol indented_block_body) [15097 15120])
                            ("ys" variable nil (reparse-symbol indented_block_body) [15129 15168])
                            ("cnt" variable nil (reparse-symbol indented_block_body) [15177 15184])
                            ("axcolor" variable nil (reparse-symbol indented_block_body) [15193 15224])
                            ("self" variable nil (reparse-symbol indented_block_body) [15234 15250])
                            ("self" variable nil (reparse-symbol indented_block_body) [15259 15276])
                            ("for" code nil (reparse-symbol indented_block_body) [15285 15848])
                            ("ax" code nil (reparse-symbol indented_block_body) [15857 15922])
                            ("self" variable nil (reparse-symbol indented_block_body) [15931 15943])
                            ("self" variable nil (reparse-symbol indented_block_body) [15954 15966])
                            ("self" variable nil (reparse-symbol indented_block_body) [15975 15994]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14594 14598])
                            ("ax" variable nil (reparse-symbol function_parameters) [14600 14602])
                            ("labels" variable nil (reparse-symbol function_parameters) [14604 14610])
                            ("active" variable nil (reparse-symbol function_parameters) [14612 14618])
                            ("activecolor" variable nil (reparse-symbol function_parameters) [14622 14633]))                          
                        :documentation "
        Add radio buttons to :class:`matplotlib.axes.Axes` instance *ax*

        *labels*
            A len(buttons) list of labels as strings

        *active*
            The index into labels for the button that is active

        *activecolor*
            The color of the button when clicked
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14581 15995])
                    ("_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16013 16017])
                            ("event" variable nil (reparse-symbol function_parameters) [16019 16024]))                          )
                        (reparse-symbol indented_block_body) [16000 16930])
                    ("on_clicked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16951 16955])
                            ("func" variable nil (reparse-symbol function_parameters) [16957 16961]))                          
                        :documentation "
        When the button is clicked, call *func* with button label

        A connection id is returned which can be used to disconnect
        ")
                        (reparse-symbol indented_block_body) [16936 17222])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17242 17246])
                            ("cid" variable nil (reparse-symbol function_parameters) [17248 17251]))                          )
                        (reparse-symbol indented_block_body) [17227 17376]))                  
                :type "class")
                nil [14094 17376])
            ("SubplotTool" type
               (:documentation "
    A tool to adjust to subplot params of a :class:`matplotlib.figure.Figure`
    "
                :superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *targetfig*
            The figure instance to adjust

        *toolfig*
            The figure instance to embed the subplot tool into. If
            None, a default figure will be created. If you are using
            this from the GUI
        \"\"\"" code nil (reparse-symbol indented_block_body) [17552 17814])
                            ("self" variable nil (reparse-symbol indented_block_body) [17893 17919])
                            ("toolfig" code nil (reparse-symbol indented_block_body) [17928 17972])
                            ("toolbarfmt" type
                               (:members 
                                  ( ("__init__" function
                                       (:suite 
                                          ( ("self" variable nil (reparse-symbol indented_block_body) [18056 18076]))                                          
                                        :parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [18025 18029])
                                            ("slider" variable nil (reparse-symbol function_parameters) [18031 18037]))                                          
                                        :constructor-flag t)
                                        (reparse-symbol indented_block_body) [18012 18077])
                                    ("__call__" function
                                       (:parent "dummy"
                                        :arguments 
                                          ( ("self" variable nil (reparse-symbol function_parameters) [18103 18107])
                                            ("x" variable nil (reparse-symbol function_parameters) [18109 18110])
                                            ("y" variable nil (reparse-symbol function_parameters) [18112 18113]))                                          )
                                        (reparse-symbol indented_block_body) [18090 18226]))                                  
                                :type "class")
                                (reparse-symbol indented_block_body) [17982 18226])
                            ("self" variable nil (reparse-symbol indented_block_body) [18235 18273])
                            ("self" code nil (reparse-symbol indented_block_body) [18282 18346])
                            ("self" code nil (reparse-symbol indented_block_body) [18355 18386])
                            ("self" variable nil (reparse-symbol indented_block_body) [18396 18492])
                            ("self" code nil (reparse-symbol indented_block_body) [18501 18542])
                            ("self" variable nil (reparse-symbol indented_block_body) [18553 18593])
                            ("self" code nil (reparse-symbol indented_block_body) [18602 18635])
                            ("self" variable nil (reparse-symbol indented_block_body) [18644 18748])
                            ("self" code nil (reparse-symbol indented_block_body) [18757 18802])
                            ("self" variable nil (reparse-symbol indented_block_body) [18812 18851])
                            ("self" code nil (reparse-symbol indented_block_body) [18860 18892])
                            ("self" variable nil (reparse-symbol indented_block_body) [18901 19001])
                            ("self" code nil (reparse-symbol indented_block_body) [19010 19053])
                            ("self" variable nil (reparse-symbol indented_block_body) [19063 19100])
                            ("self" code nil (reparse-symbol indented_block_body) [19109 19139])
                            ("self" variable nil (reparse-symbol indented_block_body) [19148 19240])
                            ("self" code nil (reparse-symbol indented_block_body) [19249 19288])
                            ("self" variable nil (reparse-symbol indented_block_body) [19299 19339])
                            ("self" code nil (reparse-symbol indented_block_body) [19348 19381])
                            ("self" variable nil (reparse-symbol indented_block_body) [19390 19494])
                            ("self" code nil (reparse-symbol indented_block_body) [19503 19548])
                            ("self" variable nil (reparse-symbol indented_block_body) [19558 19598])
                            ("self" code nil (reparse-symbol indented_block_body) [19607 19640])
                            ("self" variable nil (reparse-symbol indented_block_body) [19649 19753])
                            ("self" code nil (reparse-symbol indented_block_body) [19762 19807])
                            ("self" variable nil (reparse-symbol indented_block_body) [19840 19884])
                            ("self" variable nil (reparse-symbol indented_block_body) [19893 19937])
                            ("self" variable nil (reparse-symbol indented_block_body) [19946 19990])
                            ("self" variable nil (reparse-symbol indented_block_body) [19999 20043])
                            ("bax" variable nil (reparse-symbol indented_block_body) [20054 20102])
                            ("self" variable nil (reparse-symbol indented_block_body) [20111 20150])
                            ("sliders" variable nil (reparse-symbol indented_block_body) [20160 20299])
                            ("func" function (:arguments 
                              ( ("event" variable nil (reparse-symbol function_parameters) [20319 20324]))                              ) (reparse-symbol indented_block_body) [20310 20994])
                            ("validate" variable nil (reparse-symbol indented_block_body) [21166 21205])
                            ("toolfig" variable nil (reparse-symbol indented_block_body) [21214 21250])
                            ("self" code nil (reparse-symbol indented_block_body) [21259 21292])
                            ("toolfig" variable nil (reparse-symbol indented_block_body) [21301 21340]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17517 17521])
                            ("targetfig" variable nil (reparse-symbol function_parameters) [17523 17532])
                            ("toolfig" variable nil (reparse-symbol function_parameters) [17534 17541]))                          
                        :documentation "
        *targetfig*
            The figure instance to adjust

        *toolfig*
            The figure instance to embed the subplot tool into. If
            None, a default figure will be created. If you are using
            this from the GUI
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17504 21341])
                    ("funcleft" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21359 21363])
                            ("val" variable nil (reparse-symbol function_parameters) [21365 21368]))                          )
                        (reparse-symbol indented_block_body) [21346 21473])
                    ("funcright" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21492 21496])
                            ("val" variable nil (reparse-symbol function_parameters) [21498 21501]))                          )
                        (reparse-symbol indented_block_body) [21478 21607])
                    ("funcbottom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21627 21631])
                            ("val" variable nil (reparse-symbol function_parameters) [21633 21636]))                          )
                        (reparse-symbol indented_block_body) [21612 21743])
                    ("functop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21760 21764])
                            ("val" variable nil (reparse-symbol function_parameters) [21766 21769]))                          )
                        (reparse-symbol indented_block_body) [21748 21873])
                    ("funcwspace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21893 21897])
                            ("val" variable nil (reparse-symbol function_parameters) [21899 21902]))                          )
                        (reparse-symbol indented_block_body) [21878 22009])
                    ("funchspace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22029 22033])
                            ("val" variable nil (reparse-symbol function_parameters) [22035 22038]))                          )
                        (reparse-symbol indented_block_body) [22014 22145]))                  
                :type "class")
                nil [17379 22145])
            ("Cursor" type
               (:documentation "
    A horizontal and vertical line span the axes that and move with
    the pointer.  You can turn off the hline or vline spectively with
    the attributes

      *horizOn*
        Controls the visibility of the horizontal line

      *vertOn*
        Controls the visibility of the horizontal line

    and the visibility of the cursor itself with the *visible* attribute
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Add a cursor to *ax*.  If ``useblit=True``, use the backend-
        dependent blitting features for faster updates (GTKAgg
        only for now).  *lineprops* is a dictionary of line properties.

        .. plot :: mpl_examples/widgets/cursor.py
        \"\"\"" code nil (reparse-symbol indented_block_body) [22615 22885])
                            ("self" variable nil (reparse-symbol indented_block_body) [22948 22960])
                            ("self" variable nil (reparse-symbol indented_block_body) [22969 22999])
                            ("self" code nil (reparse-symbol indented_block_body) [23009 23068])
                            ("self" code nil (reparse-symbol indented_block_body) [23077 23126])
                            ("self" variable nil (reparse-symbol indented_block_body) [23136 23155])
                            ("self" variable nil (reparse-symbol indented_block_body) [23164 23183])
                            ("self" variable nil (reparse-symbol indented_block_body) [23192 23210])
                            ("self" variable nil (reparse-symbol indented_block_body) [23219 23241])
                            ("if" code nil (reparse-symbol indented_block_body) [23251 23304])
                            ("self" variable nil (reparse-symbol indented_block_body) [23312 23383])
                            ("self" variable nil (reparse-symbol indented_block_body) [23392 23463])
                            ("self" variable nil (reparse-symbol indented_block_body) [23473 23495])
                            ("self" variable nil (reparse-symbol indented_block_body) [23504 23526]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22568 22572])
                            ("ax" variable nil (reparse-symbol function_parameters) [22574 22576])
                            ("useblit" variable nil (reparse-symbol function_parameters) [22578 22585])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [22593 22604]))                          
                        :documentation "
        Add a cursor to *ax*.  If ``useblit=True``, use the backend-
        dependent blitting features for faster updates (GTKAgg
        only for now).  *lineprops* is a dictionary of line properties.

        .. plot :: mpl_examples/widgets/cursor.py
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22555 23527])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23543 23547])
                            ("event" variable nil (reparse-symbol function_parameters) [23549 23554]))                          )
                        (reparse-symbol indented_block_body) [23533 23756])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23772 23776])
                            ("event" variable nil (reparse-symbol function_parameters) [23778 23783]))                          )
                        (reparse-symbol indented_block_body) [23761 24412])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24430 24434]))                          )
                        (reparse-symbol indented_block_body) [24418 24771]))                  
                :type "class")
                nil [22147 24771])
            ("MultiCursor" type
               (:documentation "
    Provide a vertical line cursor shared between multiple axes

    Example usage::

        from matplotlib.widgets import MultiCursor
        from pylab import figure, show, nx

        t = nx.arange(0.0, 2.0, 0.01)
        s1 = nx.sin(2*nx.pi*t)
        s2 = nx.sin(4*nx.pi*t)
        fig = figure()
        ax1 = fig.add_subplot(211)
        ax1.plot(t, s1)


        ax2 = fig.add_subplot(212, sharex=ax1)
        ax2.plot(t, s2)

        multi = MultiCursor(fig.canvas, (ax1, ax2), color='r', lw=1)
        show()

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [25403 25423])
                            ("self" variable nil (reparse-symbol indented_block_body) [25432 25448])
                            ("xmin, xmax" code nil (reparse-symbol indented_block_body) [25457 25489])
                            ("xmid" code nil (reparse-symbol indented_block_body) [25498 25520])
                            ("if" code nil (reparse-symbol indented_block_body) [25529 25582])
                            ("self" variable nil (reparse-symbol indented_block_body) [25591 25665])
                            ("self" variable nil (reparse-symbol indented_block_body) [25675 25694])
                            ("self" variable nil (reparse-symbol indented_block_body) [25703 25725])
                            ("self" variable nil (reparse-symbol indented_block_body) [25734 25756])
                            ("self" variable nil (reparse-symbol indented_block_body) [25765 25787])
                            ("self" code nil (reparse-symbol indented_block_body) [25797 25856])
                            ("self" code nil (reparse-symbol indented_block_body) [25865 25914]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25346 25350])
                            ("canvas" variable nil (reparse-symbol function_parameters) [25352 25358])
                            ("axes" variable nil (reparse-symbol function_parameters) [25360 25364])
                            ("useblit" variable nil (reparse-symbol function_parameters) [25366 25373])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [25380 25391]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25333 25915])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25931 25935])
                            ("event" variable nil (reparse-symbol function_parameters) [25937 25942]))                          )
                        (reparse-symbol indented_block_body) [25921 26135])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26152 26156])
                            ("event" variable nil (reparse-symbol function_parameters) [26158 26163]))                          )
                        (reparse-symbol indented_block_body) [26141 26488])
                    ("_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26506 26510]))                          )
                        (reparse-symbol indented_block_body) [26494 26841]))                  
                :type "class")
                nil [24772 26841])
            ("SpanSelector" type
               (:documentation "
    Select a min/max range of the x or y axes for a matplotlib Axes

    Example usage::

        ax = subplot(111)
        ax.plot(x,y)

        def onselect(vmin, vmax):
            print vmin, vmax
        span = SpanSelector(ax, onselect, 'horizontal')

    *onmove_callback* is an optional callback that is called on mouse
      move within the span range

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a span selector in *ax*.  When a selection is made, clear
        the span and call *onselect* with::

            onselect(vmin, vmax)

        and clear the span.

        *direction* must be 'horizontal' or 'vertical'

        If *minspan* is not *None*, ignore events smaller than *minspan*

        The span rectangle is drawn with *rectprops*; default::
          rectprops = dict(facecolor='red', alpha=0.5)

        Set the visible attribute to *False* if you want to turn off
        the functionality of the span selector
        \"\"\"" code nil (reparse-symbol indented_block_body) [27382 27944])
                            ("if" code nil (reparse-symbol indented_block_body) [27953 28032])
                            ("assert" code nil (reparse-symbol indented_block_body) [28041 28139])
                            ("self" variable nil (reparse-symbol indented_block_body) [28148 28174])
                            ("self" variable nil (reparse-symbol indented_block_body) [28184 28198])
                            ("self" variable nil (reparse-symbol indented_block_body) [28207 28225])
                            ("self" variable nil (reparse-symbol indented_block_body) [28234 28253])
                            ("self" variable nil (reparse-symbol indented_block_body) [28262 28274])
                            ("self" variable nil (reparse-symbol indented_block_body) [28284 28300])
                            ("self" variable nil (reparse-symbol indented_block_body) [28309 28331])
                            ("self" variable nil (reparse-symbol indented_block_body) [28340 28358])
                            ("self" variable nil (reparse-symbol indented_block_body) [28368 28394])
                            ("self" variable nil (reparse-symbol indented_block_body) [28403 28427])
                            ("self" variable nil (reparse-symbol indented_block_body) [28436 28474])
                            ("self" variable nil (reparse-symbol indented_block_body) [28483 28505])
                            ("self" variable nil (reparse-symbol indented_block_body) [28514 28536])
                            ("self" variable nil (reparse-symbol indented_block_body) [28589 28612])
                            ("self" variable nil (reparse-symbol indented_block_body) [28621 28639])
                            ("self" code nil (reparse-symbol indented_block_body) [28649 28666]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27258 27262])
                            ("ax" variable nil (reparse-symbol function_parameters) [27264 27266])
                            ("onselect" variable nil (reparse-symbol function_parameters) [27268 27276])
                            ("direction" variable nil (reparse-symbol function_parameters) [27278 27287])
                            ("minspan" variable nil (reparse-symbol function_parameters) [27289 27296])
                            ("useblit" variable nil (reparse-symbol function_parameters) [27303 27310])
                            ("rectprops" variable nil (reparse-symbol function_parameters) [27335 27344])
                            ("onmove_callback" variable nil (reparse-symbol function_parameters) [27351 27366]))                          
                        :documentation "
        Create a span selector in *ax*.  When a selection is made, clear
        the span and call *onselect* with::

            onselect(vmin, vmax)

        and clear the span.

        *direction* must be 'horizontal' or 'vertical'

        If *minspan* is not *None*, ignore events smaller than *minspan*

        The span rectangle is drawn with *rectprops*; default::
          rectprops = dict(facecolor='red', alpha=0.5)

        Set the visible attribute to *False* if you want to turn off
        the functionality of the span selector
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27245 28667])
                    ("new_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28686 28690])
                            ("ax" variable nil (reparse-symbol function_parameters) [28691 28693]))                          )
                        (reparse-symbol indented_block_body) [28673 29801])
                    ("update_background" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29828 29832])
                            ("event" variable nil (reparse-symbol function_parameters) [29834 29839]))                          )
                        (reparse-symbol indented_block_body) [29806 29982])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29999 30003])
                            ("event" variable nil (reparse-symbol function_parameters) [30005 30010]))                          )
                        (reparse-symbol indented_block_body) [29988 30144])
                    ("press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30159 30163])
                            ("event" variable nil (reparse-symbol function_parameters) [30165 30170]))                          )
                        (reparse-symbol indented_block_body) [30149 30473])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30491 30495])
                            ("event" variable nil (reparse-symbol function_parameters) [30497 30502]))                          )
                        (reparse-symbol indented_block_body) [30479 31123])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31139 31143]))                          
                        :documentation "
        Draw using newfangled blit or oldfangled draw depending
        on *useblit*
        ")
                        (reparse-symbol indented_block_body) [31128 31542])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31558 31562])
                            ("event" variable nil (reparse-symbol function_parameters) [31564 31569]))                          )
                        (reparse-symbol indented_block_body) [31547 32503]))                  
                :type "class")
                nil [26842 32503])
            ("HorizontalSpanSelector" type
               (:superclasses ("SpanSelector")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("warnings" include nil (reparse-symbol indented_block_body) [32640 32655])
                            ("warnings" code nil (reparse-symbol indented_block_body) [32664 32726])
                            ("SpanSelector" code nil (reparse-symbol indented_block_body) [32735 32800]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32601 32605])
                            ("ax" variable nil (reparse-symbol function_parameters) [32607 32609])
                            ("onselect" variable nil (reparse-symbol function_parameters) [32611 32619])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [32621 32629]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32588 32801]))                  
                :type "class")
                nil [32540 32801])
            ("RectangleSelector" type
               (:documentation "
    Select a min/max range of the x axes for a matplotlib Axes

    Example usage::

        from matplotlib.widgets import  RectangleSelector
        from pylab import *

        def onselect(eclick, erelease):
          'eclick and erelease are matplotlib events at press and release'
          print ' startposition : (%f, %f)' % (eclick.xdata, eclick.ydata)
          print ' endposition   : (%f, %f)' % (erelease.xdata, erelease.ydata)
          print ' used button   : ', eclick.button

        def toggle_selector(event):
            print ' Key pressed.'
            if event.key in ['Q', 'q'] and toggle_selector.RS.active:
                print ' RectangleSelector deactivated.'
                toggle_selector.RS.set_active(False)
            if event.key in ['A', 'a'] and not toggle_selector.RS.active:
                print ' RectangleSelector activated.'
                toggle_selector.RS.set_active(True)

        x = arange(100)/(99.0)
        y = sin(x)
        fig = figure
        ax = subplot(111)
        ax.plot(x,y)

        toggle_selector.RS = RectangleSelector(ax, onselect, drawtype='line')
        connect('key_press_event', toggle_selector)
        show()
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a selector in *ax*.  When a selection is made, clear
        the span and call onselect with::

          onselect(pos_1, pos_2)

        and clear the drawn box/line. The ``pos_1`` and ``pos_2`` are
        arrays of length 2 containing the x- and y-coordinate.

        If *minspanx* is not *None* then events smaller than *minspanx*
        in x direction are ignored (it's the same for y).

        The rectangle is drawn with *rectprops*; default::

          rectprops = dict(facecolor='red', edgecolor = 'black',
                           alpha=0.5, fill=False)

        The line is drawn with *lineprops*; default::

          lineprops = dict(color='black', linestyle='-',
                           linewidth = 2, alpha=0.5)

        Use *drawtype* if you want the mouse to draw a line,
        a box or nothing between click and actual position by setting

        ``drawtype = 'line'``, ``drawtype='box'`` or ``drawtype = 'none'``.

        *spancoords* is one of 'data' or 'pixels'.  If 'data', *minspanx*
        and *minspanx* will be interpreted in the same coordinates as
        the x and y axis. If 'pixels', they are in pixels.

        *button* is a list of integers indicating which mouse buttons should
        be used for rectangle selection.  You can also specify a single
        integer if only a single button is desired.  Default is *None*,
        which does not limit which button can be used.

        Note, typically:
         1 = left mouse button
         2 = center mouse button (scroll wheel)
         3 = right mouse button
        \"\"\"" code nil (reparse-symbol indented_block_body) [34254 35847])
                            ("self" variable nil (reparse-symbol indented_block_body) [35856 35868])
                            ("self" variable nil (reparse-symbol indented_block_body) [35877 35896])
                            ("self" variable nil (reparse-symbol indented_block_body) [35905 35935])
                            ("self" code nil (reparse-symbol indented_block_body) [35944 36003])
                            ("self" code nil (reparse-symbol indented_block_body) [36012 36069])
                            ("self" code nil (reparse-symbol indented_block_body) [36078 36139])
                            ("self" code nil (reparse-symbol indented_block_body) [36148 36209])
                            ("self" variable nil (reparse-symbol indented_block_body) [36219 36237])
                            ("self" variable nil (reparse-symbol indented_block_body) [36297 36316])
                            ("self" variable nil (reparse-symbol indented_block_body) [36325 36347])
                            ("if" code nil (reparse-symbol indented_block_body) [36357 36524])
                            ("if" code nil (reparse-symbol indented_block_body) [36533 36882])
                            ("if" code nil (reparse-symbol indented_block_body) [36890 37229])
                            ("self" variable nil (reparse-symbol indented_block_body) [37238 37262])
                            ("self" variable nil (reparse-symbol indented_block_body) [37271 37293])
                            ("self" variable nil (reparse-symbol indented_block_body) [37302 37326])
                            ("self" variable nil (reparse-symbol indented_block_body) [37335 37359])
                            ("if" code nil (reparse-symbol indented_block_body) [37369 37534])
                            ("assert" code nil (reparse-symbol indented_block_body) [37543 37583])
                            ("self" variable nil (reparse-symbol indented_block_body) [37593 37621])
                            ("self" variable nil (reparse-symbol indented_block_body) [37630 37654])
                            ("self" variable nil (reparse-symbol indented_block_body) [37717 37739])
                            ("self" variable nil (reparse-symbol indented_block_body) [37800 37824]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34048 34052])
                            ("ax" variable nil (reparse-symbol function_parameters) [34054 34056])
                            ("onselect" variable nil (reparse-symbol function_parameters) [34058 34066])
                            ("drawtype" variable nil (reparse-symbol function_parameters) [34068 34076])
                            ("minspanx" variable nil (reparse-symbol function_parameters) [34101 34109])
                            ("minspany" variable nil (reparse-symbol function_parameters) [34116 34124])
                            ("useblit" variable nil (reparse-symbol function_parameters) [34131 34138])
                            ("lineprops" variable nil (reparse-symbol function_parameters) [34163 34172])
                            ("rectprops" variable nil (reparse-symbol function_parameters) [34179 34188])
                            ("spancoords" variable nil (reparse-symbol function_parameters) [34195 34205])
                            ("button" variable nil (reparse-symbol function_parameters) [34231 34237]))                          
                        :documentation "
        Create a selector in *ax*.  When a selection is made, clear
        the span and call onselect with::

          onselect(pos_1, pos_2)

        and clear the drawn box/line. The ``pos_1`` and ``pos_2`` are
        arrays of length 2 containing the x- and y-coordinate.

        If *minspanx* is not *None* then events smaller than *minspanx*
        in x direction are ignored (it's the same for y).

        The rectangle is drawn with *rectprops*; default::

          rectprops = dict(facecolor='red', edgecolor = 'black',
                           alpha=0.5, fill=False)

        The line is drawn with *lineprops*; default::

          lineprops = dict(color='black', linestyle='-',
                           linewidth = 2, alpha=0.5)

        Use *drawtype* if you want the mouse to draw a line,
        a box or nothing between click and actual position by setting

        ``drawtype = 'line'``, ``drawtype='box'`` or ``drawtype = 'none'``.

        *spancoords* is one of 'data' or 'pixels'.  If 'data', *minspanx*
        and *minspanx* will be interpreted in the same coordinates as
        the x and y axis. If 'pixels', they are in pixels.

        *button* is a list of integers indicating which mouse buttons should
        be used for rectangle selection.  You can also specify a single
        integer if only a single button is desired.  Default is *None*,
        which does not limit which button can be used.

        Note, typically:
         1 = left mouse button
         2 = center mouse button (scroll wheel)
         3 = right mouse button
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34035 37825])
                    ("update_background" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37852 37856])
                            ("event" variable nil (reparse-symbol function_parameters) [37858 37863]))                          )
                        (reparse-symbol indented_block_body) [37830 38006])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38023 38027])
                            ("event" variable nil (reparse-symbol function_parameters) [38029 38034]))                          )
                        (reparse-symbol indented_block_body) [38012 38875])
                    ("press" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38890 38894])
                            ("event" variable nil (reparse-symbol function_parameters) [38896 38901]))                          )
                        (reparse-symbol indented_block_body) [38880 39233])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39251 39255])
                            ("event" variable nil (reparse-symbol function_parameters) [39257 39262]))                          )
                        (reparse-symbol indented_block_body) [39239 41186])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41202 41206]))                          )
                        (reparse-symbol indented_block_body) [41191 41575])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41592 41596])
                            ("event" variable nil (reparse-symbol function_parameters) [41598 41603]))                          )
                        (reparse-symbol indented_block_body) [41581 42699])
                    ("set_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42719 42723])
                            ("active" variable nil (reparse-symbol function_parameters) [42725 42731]))                          
                        :documentation "
        Use this to activate / deactivate the RectangleSelector
        from your program with an boolean parameter *active*.
        ")
                        (reparse-symbol indented_block_body) [42704 42913])
                    ("get_active" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42933 42937]))                          
                        :documentation " Get status of active mode (boolean variable)")
                        (reparse-symbol indented_block_body) [42918 43027]))                  
                :type "class")
                nil [32803 43027])
            ("Lasso" type
               (:superclasses ("Widget")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [43118 43132])
                            ("self" variable nil (reparse-symbol indented_block_body) [43141 43164])
                            ("self" variable nil (reparse-symbol indented_block_body) [43173 43205])
                            ("self" variable nil (reparse-symbol indented_block_body) [43214 43236])
                            ("if" code nil (reparse-symbol indented_block_body) [43245 43330])
                            ("x, y" code nil (reparse-symbol indented_block_body) [43339 43348])
                            ("self" variable nil (reparse-symbol indented_block_body) [43357 43377])
                            ("self" variable nil (reparse-symbol indented_block_body) [43386 43450])
                            ("self" code nil (reparse-symbol indented_block_body) [43459 43488])
                            ("self" variable nil (reparse-symbol indented_block_body) [43497 43521])
                            ("self" variable nil (reparse-symbol indented_block_body) [43530 43544])
                            ("self" code nil (reparse-symbol indented_block_body) [43553 43634])
                            ("self" code nil (reparse-symbol indented_block_body) [43643 43720]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43066 43070])
                            ("ax" variable nil (reparse-symbol function_parameters) [43072 43074])
                            ("xy" variable nil (reparse-symbol function_parameters) [43076 43078])
                            ("callback" variable nil (reparse-symbol function_parameters) [43080 43088])
                            ("useblit" variable nil (reparse-symbol function_parameters) [43095 43102]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43053 43721])
                    ("onrelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43740 43744])
                            ("event" variable nil (reparse-symbol function_parameters) [43746 43751]))                          )
                        (reparse-symbol indented_block_body) [43726 44069])
                    ("onmove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44085 44089])
                            ("event" variable nil (reparse-symbol function_parameters) [44091 44096]))                          )
                        (reparse-symbol indented_block_body) [44074 44539]))                  
                :type "class")
                nil [43028 44539]))          
      :file "widgets.py"
      :pointmax 44539
      :fsize 44538
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Tick locating and formatting
============================

This module contains classes to support completely configurable tick
locating and formatting.  Although the locators know nothing about
major or minor ticks, they are used by the Axis class to support major
and minor tick locating and formatting.  Generic tick locators and
formatters are provided, as well as domain specific custom ones..


Tick locating
-------------

The Locator class is the base class for all tick locators.  The
locators handle autoscaling of the view limits based on the data
limits, and the choosing of tick locations.  A useful semi-automatic
tick locator is MultipleLocator.  You initialize this with a base, eg
10, and it picks axis limits and ticks that are multiples of your
base.

The Locator subclasses defined here are

:class:`NullLocator`
    No ticks

:class:`FixedLocator`
    Tick locations are fixed

:class:`IndexLocator`
    locator for index plots (eg. where x = range(len(y)))

:class:`LinearLocator`
    evenly spaced ticks from min to max

:class:`LogLocator`
    logarithmically ticks from min to max

:class:`MultipleLocator`
    ticks and range are a multiple of base;
                  either integer or float
:class:`OldAutoLocator`
    choose a MultipleLocator and dyamically reassign it for
    intelligent ticking during navigation

:class:`MaxNLocator`
    finds up to a max number of ticks at nice  locations

:class:`AutoLocator`
    :class:`MaxNLocator` with simple defaults. This is the default
    tick locator for most plotting.

:class:`AutoMinorLocator`
    locator for minor ticks when the axis is linear and the
    major ticks are uniformly spaced.  It subdivides the major
    tick interval into a specified number of minor intervals,
    defaulting to 4 or 5 depending on the major interval.


There are a number of locators specialized for date locations - see
the dates module

You can define your own locator by deriving from Locator.  You must
override the __call__ method, which returns a sequence of locations,
and you will probably want to override the autoscale method to set the
view limits from the data limits.

If you want to override the default locator, use one of the above or a
custom locator and pass it to the x or y axis instance.  The relevant
methods are::

  ax.xaxis.set_major_locator( xmajorLocator )
  ax.xaxis.set_minor_locator( xminorLocator )
  ax.yaxis.set_major_locator( ymajorLocator )
  ax.yaxis.set_minor_locator( yminorLocator )

The default minor locator is the NullLocator, eg no minor ticks on by
default.

Tick formatting
---------------

Tick formatting is controlled by classes derived from Formatter.  The
formatter operates on a single tick value and returns a string to the
axis.

:class:`NullFormatter`
    no labels on the ticks

:class:`IndexFormatter`
    set the strings from a list of labels

:class:`FixedFormatter`
    set the strings manually for the labels

:class:`FuncFormatter`
    user defined function sets the labels

:class:`FormatStrFormatter`
    use a sprintf format string

:class:`ScalarFormatter`
    default formatter for scalars; autopick the fmt string

:class:`LogFormatter`
    formatter for log axes


You can derive your own formatter from the Formatter base class by
simply overriding the ``__call__`` method.  The formatter class has access
to the axis view and data limits.

To control the major and minor tick label formats, use one of the
following methods::

  ax.xaxis.set_major_formatter( xmajorFormatter )
  ax.xaxis.set_minor_formatter( xminorFormatter )
  ax.yaxis.set_major_formatter( ymajorFormatter )
  ax.yaxis.set_minor_formatter( yminorFormatter )

See :ref:`pylab_examples-major_minor_demo1` for an example of setting
major an minor ticks.  See the :mod:`matplotlib.dates` module for
more information and examples of using date locators and formatters.
\"\"\"" code nil nil [1 3878])
            ("__future__" include nil nil [3881 3912])
            ("decimal" include nil nil [3913 3927])
            ("locale" include nil nil [3928 3941])
            ("math" include nil nil [3942 3953])
            ("numpy" include nil nil [3954 3972])
            ("matplotlib" include nil nil [3973 4004])
            ("matplotlib" include nil nil [4005 4033])
            ("matplotlib" include nil nil [4034 4082])
            ("TickHelper" type
               (:members 
                  ( ("axis" variable nil (reparse-symbol indented_block_body) [4108 4119])
                    ("DummyAxis" type
                       (:members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [4181 4219])
                                    ("self" variable nil (reparse-symbol indented_block_body) [4232 4270]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4162 4166]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [4149 4271])
                            ("get_view_interval" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4302 4306]))                                  )
                                (reparse-symbol indented_block_body) [4280 4351])
                            ("set_view_interval" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4382 4386])
                                    ("vmin" variable nil (reparse-symbol function_parameters) [4388 4392])
                                    ("vmax" variable nil (reparse-symbol function_parameters) [4394 4398]))                                  )
                                (reparse-symbol indented_block_body) [4360 4449])
                            ("get_data_interval" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4480 4484]))                                  )
                                (reparse-symbol indented_block_body) [4458 4529])
                            ("set_data_interval" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [4560 4564])
                                    ("vmin" variable nil (reparse-symbol function_parameters) [4566 4570])
                                    ("vmax" variable nil (reparse-symbol function_parameters) [4572 4576]))                                  )
                                (reparse-symbol indented_block_body) [4538 4627]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [4124 4627])
                    ("set_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4646 4650])
                            ("axis" variable nil (reparse-symbol function_parameters) [4652 4656]))                          )
                        (reparse-symbol indented_block_body) [4633 4684])
                    ("create_dummy_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4711 4715]))                          )
                        (reparse-symbol indented_block_body) [4689 4789])
                    ("set_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4816 4820])
                            ("vmin" variable nil (reparse-symbol function_parameters) [4822 4826])
                            ("vmax" variable nil (reparse-symbol function_parameters) [4828 4832]))                          )
                        (reparse-symbol indented_block_body) [4794 4883])
                    ("set_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4910 4914])
                            ("vmin" variable nil (reparse-symbol function_parameters) [4916 4920])
                            ("vmax" variable nil (reparse-symbol function_parameters) [4922 4926]))                          )
                        (reparse-symbol indented_block_body) [4888 4977])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4997 5001])
                            ("vmin" variable nil (reparse-symbol function_parameters) [5003 5007])
                            ("vmax" variable nil (reparse-symbol function_parameters) [5009 5013]))                          )
                        (reparse-symbol indented_block_body) [4982 5102]))                  
                :type "class")
                nil [4086 5102])
            ("Formatter" type
               (:documentation "
    Convert the tick location to a string
    "
                :superclasses ("TickHelper")
                :members 
                  ( ("locs" variable nil (reparse-symbol indented_block_body) [5277 5286])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5304 5308])
                            ("x" variable nil (reparse-symbol function_parameters) [5310 5311])
                            ("pos" variable nil (reparse-symbol function_parameters) [5313 5316]))                          )
                        (reparse-symbol indented_block_body) [5291 5473])
                    ("format_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5494 5498])
                            ("value" variable nil (reparse-symbol function_parameters) [5499 5504]))                          )
                        (reparse-symbol indented_block_body) [5478 5543])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5570 5574])
                            ("value" variable nil (reparse-symbol function_parameters) [5575 5580]))                          )
                        (reparse-symbol indented_block_body) [5548 5662])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5682 5686]))                          )
                        (reparse-symbol indented_block_body) [5667 5707])
                    ("set_locs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5725 5729])
                            ("locs" variable nil (reparse-symbol function_parameters) [5731 5735]))                          )
                        (reparse-symbol indented_block_body) [5712 5763])
                    ("fix_minus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5782 5786])
                            ("s" variable nil (reparse-symbol function_parameters) [5788 5789]))                          
                        :documentation "
        some classes may want to replace a hyphen for minus with the
        proper unicode symbol as described `here
        <http://sourceforge.net/tracker/index.php?func=detail&aid=1962574&group_id=80706&atid=560720>`_.
        The default is to do nothing

        Note, if you use this method, eg in :meth`format_data` or
        call, you probably don't want to use it for
        :meth:`format_data_short` since the toolbar uses this for
        interactive coord reporting and I doubt we can expect GUIs
        across platforms will handle the unicode correctly.  So for
        now the classes that override :meth:`fix_minus` should have an
        explicit :meth:`format_data_short` method
        ")
                        (reparse-symbol indented_block_body) [5768 6534]))                  
                :type "class")
                nil [5104 6534])
            ("IndexFormatter" type
               (:documentation "
    format the position x to the nearest i-th label where i=int(x+0.5)
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6695 6715])
                            ("self" variable nil (reparse-symbol indented_block_body) [6724 6744]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6672 6676])
                            ("labels" variable nil (reparse-symbol function_parameters) [6678 6684]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6659 6745])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6763 6767])
                            ("x" variable nil (reparse-symbol function_parameters) [6769 6770])
                            ("pos" variable nil (reparse-symbol function_parameters) [6772 6775]))                          )
                        (reparse-symbol indented_block_body) [6750 7029]))                  
                :type "class")
                nil [6535 7029])
            ("NullFormatter" type
               (:superclasses ("Formatter")
                :members 
                  ( ("'Always return the empty string'" code nil (reparse-symbol indented_block_body) [7067 7099])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7117 7121])
                            ("x" variable nil (reparse-symbol function_parameters) [7123 7124])
                            ("pos" variable nil (reparse-symbol function_parameters) [7126 7129]))                          )
                        (reparse-symbol indented_block_body) [7104 7218]))                  
                :type "class")
                nil [7031 7218])
            ("FixedFormatter" type
               (:superclasses ("Formatter")
                :members 
                  ( ("'Return fixed strings for tick labels'" code nil (reparse-symbol indented_block_body) [7256 7294])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *seq* is a sequence of strings.  For positions ``i < len(seq)`` return
        *seq[i]* regardless of *x*.  Otherwise return ''
        \"\"\"" code nil (reparse-symbol indented_block_body) [7332 7483])
                            ("self" variable nil (reparse-symbol indented_block_body) [7492 7506])
                            ("self" variable nil (reparse-symbol indented_block_body) [7515 7538]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7312 7316])
                            ("seq" variable nil (reparse-symbol function_parameters) [7318 7321]))                          
                        :documentation "
        *seq* is a sequence of strings.  For positions ``i < len(seq)`` return
        *seq[i]* regardless of *x*.  Otherwise return ''
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7299 7539])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7557 7561])
                            ("x" variable nil (reparse-symbol function_parameters) [7563 7564])
                            ("pos" variable nil (reparse-symbol function_parameters) [7566 7569]))                          )
                        (reparse-symbol indented_block_body) [7544 7731])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7751 7755]))                          )
                        (reparse-symbol indented_block_body) [7736 7792])
                    ("set_offset_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7819 7823])
                            ("ofs" variable nil (reparse-symbol function_parameters) [7825 7828]))                          )
                        (reparse-symbol indented_block_body) [7797 7864]))                  
                :type "class")
                nil [7219 7864])
            ("FuncFormatter" type
               (:documentation "
    User defined function for formatting
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7992 8008]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7971 7975])
                            ("func" variable nil (reparse-symbol function_parameters) [7977 7981]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7958 8009])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8027 8031])
                            ("x" variable nil (reparse-symbol function_parameters) [8033 8034])
                            ("pos" variable nil (reparse-symbol function_parameters) [8036 8039]))                          )
                        (reparse-symbol indented_block_body) [8014 8143]))                  
                :type "class")
                nil [7865 8143])
            ("FormatStrFormatter" type
               (:documentation "
    Use a format string to format the tick
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8278 8292]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8258 8262])
                            ("fmt" variable nil (reparse-symbol function_parameters) [8264 8267]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8245 8293])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8311 8315])
                            ("x" variable nil (reparse-symbol function_parameters) [8317 8318])
                            ("pos" variable nil (reparse-symbol function_parameters) [8320 8323]))                          )
                        (reparse-symbol indented_block_body) [8298 8422]))                  
                :type "class")
                nil [8145 8422])
            ("OldScalarFormatter" type
               (:documentation "
    Tick location is a plain old number.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8535 8539])
                            ("x" variable nil (reparse-symbol function_parameters) [8541 8542])
                            ("pos" variable nil (reparse-symbol function_parameters) [8544 8547]))                          )
                        (reparse-symbol indented_block_body) [8522 8735])
                    ("pprint_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8755 8759])
                            ("x" variable nil (reparse-symbol function_parameters) [8761 8762])
                            ("d" variable nil (reparse-symbol function_parameters) [8764 8765]))                          )
                        (reparse-symbol indented_block_body) [8740 9486]))                  
                :type "class")
                nil [8423 9486])
            ("ScalarFormatter" type
               (:documentation "
    Tick location is a plain old number.  If useOffset==True and the data range
    is much smaller than the data average, then an offset will be determined
    such that the tick labels are meaningful. Scientific notation is used for
    data < 10^-n or data >= 10^m, where n and m are the power limits set using
    set_powerlimits((n,m)). The defaults for these are controlled by the
    axes.formatter.limits rc parameter.

    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" code nil (reparse-symbol indented_block_body) [10251 10280])
                            ("self" variable nil (reparse-symbol indented_block_body) [10289 10327])
                            ("self" variable nil (reparse-symbol indented_block_body) [10336 10367])
                            ("self" variable nil (reparse-symbol indented_block_body) [10376 10401])
                            ("self" variable nil (reparse-symbol indented_block_body) [10410 10426])
                            ("self" variable nil (reparse-symbol indented_block_body) [10435 10458])
                            ("self" variable nil (reparse-symbol indented_block_body) [10467 10520])
                            ("if" code nil (reparse-symbol indented_block_body) [10529 10673]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9984 9988])
                            ("useOffset" variable nil (reparse-symbol function_parameters) [9990 9999])
                            ("useMathText" variable nil (reparse-symbol function_parameters) [10006 10017])
                            ("useLocale" variable nil (reparse-symbol function_parameters) [10025 10034]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9971 10673])
                    ("get_useOffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10696 10700]))                          )
                        (reparse-symbol indented_block_body) [10678 10734])
                    ("set_useOffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10757 10761])
                            ("val" variable nil (reparse-symbol function_parameters) [10763 10766]))                          )
                        (reparse-symbol indented_block_body) [10739 10944])
                    ("useOffset" variable nil (reparse-symbol indented_block_body) [10949 11009])
                    ("get_useLocale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11033 11037]))                          )
                        (reparse-symbol indented_block_body) [11015 11071])
                    ("set_useLocale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11094 11098])
                            ("val" variable nil (reparse-symbol function_parameters) [11100 11103]))                          )
                        (reparse-symbol indented_block_body) [11076 11246])
                    ("useLocale" variable nil (reparse-symbol indented_block_body) [11251 11311])
                    ("fix_minus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11335 11339])
                            ("s" variable nil (reparse-symbol function_parameters) [11341 11342]))                          )
                        (reparse-symbol indented_block_body) [11321 11524])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11542 11546])
                            ("x" variable nil (reparse-symbol function_parameters) [11548 11549])
                            ("pos" variable nil (reparse-symbol function_parameters) [11551 11554]))                          )
                        (reparse-symbol indented_block_body) [11529 11763])
                    ("set_scientific" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11787 11791])
                            ("b" variable nil (reparse-symbol function_parameters) [11793 11794]))                          )
                        (reparse-symbol indented_block_body) [11768 11948])
                    ("set_powerlimits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11973 11977])
                            ("lims" variable nil (reparse-symbol function_parameters) [11979 11983]))                          )
                        (reparse-symbol indented_block_body) [11953 12391])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12418 12422])
                            ("value" variable nil (reparse-symbol function_parameters) [12423 12428]))                          )
                        (reparse-symbol indented_block_body) [12396 12634])
                    ("format_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12655 12659])
                            ("value" variable nil (reparse-symbol function_parameters) [12660 12665]))                          )
                        (reparse-symbol indented_block_body) [12639 12935])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12956 12960]))                          
                        :documentation "Return scientific notation, plus offset")
                        (reparse-symbol indented_block_body) [12941 14081])
                    ("set_locs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14099 14103])
                            ("locs" variable nil (reparse-symbol function_parameters) [14105 14109]))                          )
                        (reparse-symbol indented_block_body) [14086 14436])
                    ("_set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14457 14461])
                            ("range" variable nil (reparse-symbol function_parameters) [14463 14468]))                          )
                        (reparse-symbol indented_block_body) [14441 15192])
                    ("_set_orderOfMagnitude" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15223 15227])
                            ("range" variable nil (reparse-symbol function_parameters) [15228 15233]))                          )
                        (reparse-symbol indented_block_body) [15197 15981])
                    ("_set_format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16002 16006]))                          )
                        (reparse-symbol indented_block_body) [15986 16627])
                    ("pprint_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16647 16651])
                            ("x" variable nil (reparse-symbol function_parameters) [16653 16654]))                          )
                        (reparse-symbol indented_block_body) [16632 16892])
                    ("_formatSciNotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16920 16924])
                            ("s" variable nil (reparse-symbol function_parameters) [16926 16927]))                          )
                        (reparse-symbol indented_block_body) [16897 18044]))                  
                :type "class")
                nil [9488 18044])
            ("LogFormatter" type
               (:documentation "
    Format values for log axis;

    if attribute *decadeOnly* is True, only the decades will be labelled.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *base* is used to locate the decade tick,
        which will be the only one to be labeled if *labelOnlyBase*
        is ``False``
        \"\"\"" code nil (reparse-symbol indented_block_body) [18265 18419])
                            ("self" code nil (reparse-symbol indented_block_body) [18428 18449])
                            ("self" variable nil (reparse-symbol indented_block_body) [18458 18492])
                            ("self" variable nil (reparse-symbol indented_block_body) [18501 18523]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18217 18221])
                            ("base" variable nil (reparse-symbol function_parameters) [18223 18227])
                            ("labelOnlyBase" variable nil (reparse-symbol function_parameters) [18234 18247]))                          
                        :documentation "
        *base* is used to locate the decade tick,
        which will be the only one to be labeled if *labelOnlyBase*
        is ``False``
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18204 18524])
                    ("base" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18538 18542])
                            ("base" variable nil (reparse-symbol function_parameters) [18544 18548]))                          )
                        (reparse-symbol indented_block_body) [18529 18687])
                    ("label_minor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18708 18712])
                            ("labelOnlyBase" variable nil (reparse-symbol function_parameters) [18714 18727]))                          )
                        (reparse-symbol indented_block_body) [18692 18818])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18837 18841])
                            ("x" variable nil (reparse-symbol function_parameters) [18843 18844])
                            ("pos" variable nil (reparse-symbol function_parameters) [18846 18849]))                          )
                        (reparse-symbol indented_block_body) [18824 19463])
                    ("format_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19484 19488])
                            ("value" variable nil (reparse-symbol function_parameters) [19490 19495]))                          )
                        (reparse-symbol indented_block_body) [19468 19671])
                    ("format_data_short" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19698 19702])
                            ("value" variable nil (reparse-symbol function_parameters) [19703 19708]))                          )
                        (reparse-symbol indented_block_body) [19676 19809])
                    ("pprint_val" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19829 19833])
                            ("x" variable nil (reparse-symbol function_parameters) [19835 19836])
                            ("d" variable nil (reparse-symbol function_parameters) [19838 19839]))                          )
                        (reparse-symbol indented_block_body) [19814 20566]))                  
                :type "class")
                nil [18046 20566])
            ("LogFormatterExponent" type
               (:documentation "
    Format values for log axis; using ``exponent = log_base(value)``
    "
                :superclasses ("LogFormatter")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20712 20716])
                            ("x" variable nil (reparse-symbol function_parameters) [20718 20719])
                            ("pos" variable nil (reparse-symbol function_parameters) [20721 20724]))                          )
                        (reparse-symbol indented_block_body) [20699 21505]))                  
                :type "class")
                nil [20567 21505])
            ("LogFormatterMathtext" type
               (:documentation "
    Format values for log axis; using ``exponent = log_base(value)``
    "
                :superclasses ("LogFormatter")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21652 21656])
                            ("x" variable nil (reparse-symbol function_parameters) [21658 21659])
                            ("pos" variable nil (reparse-symbol function_parameters) [21661 21664]))                          )
                        (reparse-symbol indented_block_body) [21639 22704]))                  
                :type "class")
                nil [21507 22704])
            ("EngFormatter" type
               (:documentation "
    Formats axis values using engineering prefixes to represent powers of 1000,
    plus a specified unit, eg. 10 MHz instead of 1e7.
    "
                :superclasses ("Formatter")
                :members 
                  ( ("ENG_PREFIXES" variable nil (reparse-symbol indented_block_body) [22925 23277])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [23333 23349])
                            ("self" variable nil (reparse-symbol indented_block_body) [23358 23378]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23296 23300])
                            ("unit" variable nil (reparse-symbol function_parameters) [23302 23306])
                            ("places" variable nil (reparse-symbol function_parameters) [23311 23317]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23283 23379])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23397 23401])
                            ("x" variable nil (reparse-symbol function_parameters) [23403 23404])
                            ("pos" variable nil (reparse-symbol function_parameters) [23406 23409]))                          )
                        (reparse-symbol indented_block_body) [23384 23503])
                    ("format_eng" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23523 23527])
                            ("num" variable nil (reparse-symbol function_parameters) [23529 23532]))                          
                        :documentation " Formats a number in engineering notation, appending a letter
        representing the power of 1000 of the original number. Some examples:

        >>> format_eng(0)       for self.places = 0
        '0'

        >>> format_eng(1000000) for self.places = 1
        '1.0 M'

        >>> format_eng(\"-1e-6\") for self.places = 2
        u'-1.00 \\u03bc'

        @param num: the value to represent
        @type num: either a numeric value or a string that can be converted to
                   a numeric value (as per decimal.Decimal constructor)

        @return: engineering formatted string
        ")
                        (reparse-symbol indented_block_body) [23508 24928]))                  
                :type "class")
                nil [22705 24928])
            ("Locator" type
               (:documentation "
    Determine the tick locations;

    Note, you should not use the same locator between different :class:`~matplotlib.axis.Axis`
    because the locator stores references to the Axis data and view
    limits
    "
                :superclasses ("TickHelper")
                :members 
                  ( ("MAXTICKS" variable nil (reparse-symbol indented_block_body) [25535 25550])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25568 25572]))                          )
                        (reparse-symbol indented_block_body) [25555 25678])
                    ("raise_if_exceeds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25704 25708])
                            ("locs" variable nil (reparse-symbol function_parameters) [25710 25714]))                          )
                        (reparse-symbol indented_block_body) [25683 26004])
                    ("view_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26025 26029])
                            ("vmin" variable nil (reparse-symbol function_parameters) [26031 26035])
                            ("vmax" variable nil (reparse-symbol function_parameters) [26037 26041]))                          
                        :documentation "
        select a scale for the range from vmin to vmax

        Normally This will be overridden.
        ")
                        (reparse-symbol indented_block_body) [26009 26217])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26236 26240]))                          )
                        (reparse-symbol indented_block_body) [26222 26343])
                    ("pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26356 26360])
                            ("numsteps" variable nil (reparse-symbol function_parameters) [26362 26370]))                          )
                        (reparse-symbol indented_block_body) [26348 26861])
                    ("zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26876 26880])
                            ("direction" variable nil (reparse-symbol function_parameters) [26882 26891]))                          )
                        (reparse-symbol indented_block_body) [26867 27240])
                    ("refresh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27257 27261]))                          )
                        (reparse-symbol indented_block_body) [27245 27337]))                  
                :type "class")
                nil [24929 27337])
            ("IndexLocator" type
               (:documentation "
    Place a tick on every multiple of some base number of points
    plotted, eg on every 5th point.  It is assumed that you are doing
    index plotting; ie the axis is 0, len(data).  This is mainly
    useful for x ticks.
    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("'place ticks on the i-th data points where (i-offset)%base==0'" code nil (reparse-symbol indented_block_body) [27654 27716])
                            ("self" variable nil (reparse-symbol indented_block_body) [27725 27742])
                            ("self" variable nil (reparse-symbol indented_block_body) [27751 27771]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27625 27629])
                            ("base" variable nil (reparse-symbol function_parameters) [27631 27635])
                            ("offset" variable nil (reparse-symbol function_parameters) [27637 27643]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27612 27772])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27790 27794]))                          )
                        (reparse-symbol indented_block_body) [27777 27993]))                  
                :type "class")
                nil [27339 27993])
            ("FixedLocator" type
               (:documentation "
    Tick locations are fixed.  If nbins is not None,
    the array of possible positions will be subsampled to
    keep the number of ticks <= nbins +1.
    The subsampling will be done so as to include the smallest
    absolute value; for example, if zero is included in the
    array of possibilities, then it is guaranteed to be one of
    the chosen ticks.
    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [28452 28480])
                            ("self" variable nil (reparse-symbol indented_block_body) [28489 28507])
                            ("if" code nil (reparse-symbol indented_block_body) [28516 28587]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28419 28423])
                            ("locs" variable nil (reparse-symbol function_parameters) [28425 28429])
                            ("nbins" variable nil (reparse-symbol function_parameters) [28431 28436]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28406 28587])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28605 28609]))                          )
                        (reparse-symbol indented_block_body) [28592 29036]))                  
                :type "class")
                nil [27995 29036])
            ("NullLocator" type
               (:documentation "
    No ticks
    "
                :superclasses ("Locator")
                :members 
                  ( ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29115 29119]))                          )
                        (reparse-symbol indented_block_body) [29102 29184]))                  
                :type "class")
                nil [29040 29184])
            ("LinearLocator" type
               (:documentation "
    Determine the tick locations

    The first time this function is called it will try to set the
    number of ticks to make a nice tick partitioning.  Thereafter the
    number of ticks will be fixed so that interactive navigation will
    be nice
    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Use presets to set locs based on lom.  A dict mapping vmin, vmax->locs
        \"\"\"" code nil (reparse-symbol indented_block_body) [29548 29642])
                            ("self" variable nil (reparse-symbol indented_block_body) [29651 29675])
                            ("if" code nil (reparse-symbol indented_block_body) [29684 29783]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29502 29506])
                            ("numticks" variable nil (reparse-symbol function_parameters) [29508 29516])
                            ("presets" variable nil (reparse-symbol function_parameters) [29525 29532]))                          
                        :documentation "
        Use presets to set locs based on lom.  A dict mapping vmin, vmax->locs
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29489 29783])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29801 29805]))                          )
                        (reparse-symbol indented_block_body) [29788 30340])
                    ("_set_numticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30364 30368]))                          )
                        (reparse-symbol indented_block_body) [30346 30443])
                    ("view_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30464 30468])
                            ("vmin" variable nil (reparse-symbol function_parameters) [30470 30474])
                            ("vmax" variable nil (reparse-symbol function_parameters) [30476 30480]))                          )
                        (reparse-symbol indented_block_body) [30448 30952]))                  
                :type "class")
                nil [29185 30952])
            ("closeto" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [30966 30967])
                ("y" variable nil (reparse-symbol function_parameters) [30968 30969]))              ) nil [30954 31030])
            ("Base" type
               (:members 
                  ( ("'this solution has some hacks to deal with floating point inaccuracies'" code nil (reparse-symbol indented_block_body) [31047 31118])
                    ("__init__" function
                       (:suite 
                          ( ("assert" code nil (reparse-symbol indented_block_body) [31157 31171])
                            ("self" variable nil (reparse-symbol indented_block_body) [31180 31197]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31136 31140])
                            ("base" variable nil (reparse-symbol function_parameters) [31142 31146]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31123 31198])
                    ("lt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31210 31214])
                            ("x" variable nil (reparse-symbol function_parameters) [31216 31217]))                          )
                        (reparse-symbol indented_block_body) [31203 31427])
                    ("le" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31439 31443])
                            ("x" variable nil (reparse-symbol function_parameters) [31445 31446]))                          )
                        (reparse-symbol indented_block_body) [31432 31710])
                    ("gt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31722 31726])
                            ("x" variable nil (reparse-symbol function_parameters) [31728 31729]))                          )
                        (reparse-symbol indented_block_body) [31715 31968])
                    ("ge" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31980 31984])
                            ("x" variable nil (reparse-symbol function_parameters) [31986 31987]))                          )
                        (reparse-symbol indented_block_body) [31973 32199])
                    ("get_base" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32217 32221]))                          )
                        (reparse-symbol indented_block_body) [32204 32250]))                  
                :type "class")
                nil [31031 32250])
            ("MultipleLocator" type
               (:documentation "
    Set a tick on every integer that is multiple of base in the
    view interval
    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [32424 32447]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32399 32403])
                            ("base" variable nil (reparse-symbol function_parameters) [32405 32409]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32386 32448])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32466 32470]))                          )
                        (reparse-symbol indented_block_body) [32453 32830])
                    ("view_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32851 32855])
                            ("dmin" variable nil (reparse-symbol function_parameters) [32857 32861])
                            ("dmax" variable nil (reparse-symbol function_parameters) [32863 32867]))                          
                        :documentation "
        Set the view limits to the nearest multiples of base that
        contain the data
        ")
                        (reparse-symbol indented_block_body) [32835 33172]))                  
                :type "class")
                nil [32251 33172])
            ("scale_range" function (:arguments 
              ( ("vmin" variable nil (reparse-symbol function_parameters) [33189 33193])
                ("vmax" variable nil (reparse-symbol function_parameters) [33195 33199])
                ("n" variable nil (reparse-symbol function_parameters) [33201 33202])
                ("threshold" variable nil (reparse-symbol function_parameters) [33208 33217]))              ) nil [33173 33692])
            ("MaxNLocator" type
               (:documentation "
    Select no more than N intervals at nice locations.
    "
                :superclasses ("Locator")
                :members 
                  ( ("default_params" variable nil (reparse-symbol indented_block_body) [33798 34032])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Keyword args:

        *nbins*
            Maximum number of intervals; one less than max number of ticks.

        *steps*
            Sequence of nice numbers starting with 1 and ending with 10;
            e.g., [1, 2, 4, 5, 10]

        *integer*
            If True, ticks will take only integer values.

        *symmetric*
            If True, autoscaling will result in a range symmetric
            about zero.

        *prune*
            ['lower' | 'upper' | 'both' | None]
            Remove edge ticks -- useful for stacked or ganged plots
            where the upper tick of one axes overlaps with the lower
            tick of the axes above it.
            If prune=='lower', the smallest tick will
            be removed.  If prune=='upper', the largest tick will be
            removed.  If prune=='both', the largest and smallest ticks
            will be removed.  If prune==None, no ticks will be removed.

        \"\"\"" code nil (reparse-symbol indented_block_body) [34082 35033])
                            ("if" code nil (reparse-symbol indented_block_body) [35222 35411])
                            ("self" code nil (reparse-symbol indented_block_body) [35419 35457])
                            ("self" code nil (reparse-symbol indented_block_body) [35466 35491]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34050 34054])
                            ("args" variable nil (reparse-symbol function_parameters) [34056 34061])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34063 34071]))                          
                        :documentation "
        Keyword args:

        *nbins*
            Maximum number of intervals; one less than max number of ticks.

        *steps*
            Sequence of nice numbers starting with 1 and ending with 10;
            e.g., [1, 2, 4, 5, 10]

        *integer*
            If True, ticks will take only integer values.

        *symmetric*
            If True, autoscaling will result in a range symmetric
            about zero.

        *prune*
            ['lower' | 'upper' | 'both' | None]
            Remove edge ticks -- useful for stacked or ganged plots
            where the upper tick of one axes overlaps with the lower
            tick of the axes above it.
            If prune=='lower', the smallest tick will
            be removed.  If prune=='upper', the largest tick will be
            removed.  If prune=='both', the largest and smallest ticks
            will be removed.  If prune==None, no ticks will be removed.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34037 35492])
                    ("set_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35512 35516])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35518 35526]))                          )
                        (reparse-symbol indented_block_body) [35497 36633])
                    ("bin_boundaries" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36657 36661])
                            ("vmin" variable nil (reparse-symbol function_parameters) [36663 36667])
                            ("vmax" variable nil (reparse-symbol function_parameters) [36669 36673]))                          )
                        (reparse-symbol indented_block_body) [36638 37458])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37477 37481]))                          )
                        (reparse-symbol indented_block_body) [37464 37927])
                    ("view_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37948 37952])
                            ("dmin" variable nil (reparse-symbol function_parameters) [37954 37958])
                            ("dmax" variable nil (reparse-symbol function_parameters) [37960 37964]))                          )
                        (reparse-symbol indented_block_body) [37932 38233]))                  
                :type "class")
                nil [33695 38233])
            ("decade_down" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [38251 38252])
                ("base" variable nil (reparse-symbol function_parameters) [38254 38258]))              ) nil [38235 38406])
            ("decade_up" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [38421 38422])
                ("base" variable nil (reparse-symbol function_parameters) [38424 38428]))              ) nil [38407 38574])
            ("nearest_long" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [38592 38593]))              ) nil [38575 38685])
            ("is_decade" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [38700 38701])
                ("base" variable nil (reparse-symbol function_parameters) [38703 38707]))              ) nil [38686 38869])
            ("is_close_to_int" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [38890 38891]))              ) nil [38870 38986])
            ("LogLocator" type
               (:documentation "
    Determine the tick locations for log axes
    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        place ticks on the location= base**i*subs[j]
        \"\"\"" code nil (reparse-symbol indented_block_body) [39143 39211])
                            ("self" code nil (reparse-symbol indented_block_body) [39220 39235])
                            ("self" code nil (reparse-symbol indented_block_body) [39244 39259])
                            ("self" variable nil (reparse-symbol indented_block_body) [39268 39286])
                            ("self" variable nil (reparse-symbol indented_block_body) [39295 39317]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39094 39098])
                            ("base" variable nil (reparse-symbol function_parameters) [39100 39104])
                            ("subs" variable nil (reparse-symbol function_parameters) [39111 39115])
                            ("numdecs" variable nil (reparse-symbol function_parameters) [39123 39130]))                          
                        :documentation "
        place ticks on the location= base**i*subs[j]
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39081 39318])
                    ("base" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39332 39336])
                            ("base" variable nil (reparse-symbol function_parameters) [39337 39341]))                          
                        :documentation "
        set the base of the log scaling (major tick every base**i, i integer)
        ")
                        (reparse-symbol indented_block_body) [39323 39474])
                    ("subs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39488 39492])
                            ("subs" variable nil (reparse-symbol function_parameters) [39493 39497]))                          
                        :documentation "
        set the minor ticks the log scaling every base**i*subs[j]
        ")
                        (reparse-symbol indented_block_body) [39479 39716])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39734 39738]))                          )
                        (reparse-symbol indented_block_body) [39721 41602])
                    ("view_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41623 41627])
                            ("vmin" variable nil (reparse-symbol function_parameters) [41629 41633])
                            ("vmax" variable nil (reparse-symbol function_parameters) [41635 41639]))                          )
                        (reparse-symbol indented_block_body) [41607 42567]))                  
                :type "class")
                nil [38987 42567])
            ("SymmetricalLogLocator" type
               (:documentation "
    Determine the tick locations for log axes
    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        place ticks on the location= base**i*subs[j]
        \"\"\"" code nil (reparse-symbol indented_block_body) [42724 42792])
                            ("self" variable nil (reparse-symbol indented_block_body) [42801 42828])
                            ("self" variable nil (reparse-symbol indented_block_body) [42837 42854])
                            ("self" variable nil (reparse-symbol indented_block_body) [42863 42881]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42686 42690])
                            ("transform" variable nil (reparse-symbol function_parameters) [42692 42701])
                            ("subs" variable nil (reparse-symbol function_parameters) [42703 42707]))                          
                        :documentation "
        place ticks on the location= base**i*subs[j]
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42673 42882])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42900 42904]))                          )
                        (reparse-symbol indented_block_body) [42887 46171])
                    ("view_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46192 46196])
                            ("vmin" variable nil (reparse-symbol function_parameters) [46198 46202])
                            ("vmax" variable nil (reparse-symbol function_parameters) [46204 46208]))                          )
                        (reparse-symbol indented_block_body) [46176 47019]))                  
                :type "class")
                nil [42568 47019])
            ("AutoLocator" type
               (:superclasses ("MaxNLocator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("MaxNLocator" code nil (reparse-symbol indented_block_body) [47084 47140]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47069 47073]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47056 47141]))                  
                :type "class")
                nil [47020 47141])
            ("AutoMinorLocator" type
               (:documentation "
    Dynamically find minor tick positions based on the positions of
    major ticks. Assumes the scale is linear and major ticks are
    evenly spaced.
    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *n* is the number of subdivisions of the interval between
        major ticks; e.g., n=2 will place a single minor tick midway
        between major ticks.

        If *n* is omitted or None, it will be set to 5 or 4.
        \"\"\"" code nil (reparse-symbol indented_block_body) [47383 47624])
                            ("self" variable nil (reparse-symbol indented_block_body) [47633 47647]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47360 47364])
                            ("n" variable nil (reparse-symbol function_parameters) [47366 47367]))                          
                        :documentation "
        *n* is the number of subdivisions of the interval between
        major ticks; e.g., n=2 will place a single minor tick midway
        between major ticks.

        If *n* is omitted or None, it will be set to 5 or 4.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47347 47648])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47666 47670]))                          )
                        (reparse-symbol indented_block_body) [47653 48724]))                  
                :type "class")
                nil [47142 48724])
            ("OldAutoLocator" type
               (:documentation "
    On autoscale this class picks the best MultipleLocator to set the
    view limits and the tick locs.

    "
                :superclasses ("Locator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [48911 48942]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48896 48900]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48883 48943])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48961 48965]))                          )
                        (reparse-symbol indented_block_body) [48948 49089])
                    ("refresh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49106 49110]))                          )
                        (reparse-symbol indented_block_body) [49094 49369])
                    ("view_limits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49390 49394])
                            ("vmin" variable nil (reparse-symbol function_parameters) [49396 49400])
                            ("vmax" variable nil (reparse-symbol function_parameters) [49402 49406]))                          )
                        (reparse-symbol indented_block_body) [49374 49588])
                    ("get_locator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49609 49613])
                            ("d" variable nil (reparse-symbol function_parameters) [49615 49616]))                          )
                        (reparse-symbol indented_block_body) [49593 50285]))                  
                :type "class")
                nil [48726 50285])
            ("__all__" variable nil nil [50288 50707]))          
      :file "ticker.py"
      :pointmax 50708
      :fsize 50707
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
:mod:`~matplotlib.gridspec` is a module which specifies the location
of the subplot in the figure.

    ``GridSpec``
        specifies the geometry of the grid that a subplot will be
        placed. The number of rows and number of columns of the grid
        need to be set. Optionally, the subplot layout parameters
        (e.g., left, right, etc.) can be tuned.

    ``SubplotSpec``
        specifies the location of the subplot in the given *GridSpec*.


\"\"\"" code nil nil [1 468])
            ("__future__" include nil nil [470 501])
            ("matplotlib" include nil nil [503 520])
            ("rcParams" variable nil nil [521 551])
            ("matplotlib.transforms" include nil nil [553 596])
            ("numpy" include nil nil [598 616])
            ("GridSpecBase" type
               (:documentation "
    A base class of GridSpec that specifies the geometry of the grid
    that a subplot will be placed.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The number of rows and number of columns of the grid need to
        be set. Optionally, the ratio of heights and widths of rows and
        columns can be specified.
        \"\"\"" code nil (reparse-symbol indented_block_body) [869 1059])
                            ("self, self" code nil (reparse-symbol indented_block_body) [1098 1138])
                            ("self" code nil (reparse-symbol indented_block_body) [1148 1185])
                            ("self" code nil (reparse-symbol indented_block_body) [1194 1229]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [784 788])
                            ("nrows" variable nil (reparse-symbol function_parameters) [790 795])
                            ("ncols" variable nil (reparse-symbol function_parameters) [797 802])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [821 834])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [841 853]))                          
                        :documentation "
        The number of rows and number of columns of the grid need to
        be set. Optionally, the ratio of heights and widths of rows and
        columns can be specified.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [771 1230])
                    ("get_geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1252 1256]))                          )
                        (reparse-symbol indented_block_body) [1235 1346])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1374 1378])
                            ("fig" variable nil (reparse-symbol function_parameters) [1380 1383]))                          )
                        (reparse-symbol indented_block_body) [1351 1404])
                    ("new_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1429 1433])
                            ("loc" variable nil (reparse-symbol function_parameters) [1435 1438])
                            ("rowspan" variable nil (reparse-symbol function_parameters) [1440 1447])
                            ("colspan" variable nil (reparse-symbol function_parameters) [1451 1458]))                          
                        :documentation "
        create and return a SuplotSpec instance.
        ")
                        (reparse-symbol indented_block_body) [1409 1653])
                    ("set_width_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1680 1684])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [1686 1698]))                          )
                        (reparse-symbol indented_block_body) [1659 1747])
                    ("get_width_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1773 1777]))                          )
                        (reparse-symbol indented_block_body) [1752 1818])
                    ("set_height_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1845 1849])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [1851 1864]))                          )
                        (reparse-symbol indented_block_body) [1823 1915])
                    ("get_height_ratios" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1942 1946]))                          )
                        (reparse-symbol indented_block_body) [1920 1988])
                    ("get_grid_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2017 2021])
                            ("fig" variable nil (reparse-symbol function_parameters) [2023 2026]))                          
                        :documentation "
        return lists of bottom and top position of rows, left and
        right positions of columns.
        ")
                        (reparse-symbol indented_block_body) [1994 3933])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3954 3958])
                            ("key" variable nil (reparse-symbol function_parameters) [3960 3963]))                          
                        :documentation "
        create and return a SuplotSpec instance.
        ")
                        (reparse-symbol indented_block_body) [3938 5403]))                  
                :type "class")
                nil [618 5403])
            ("GridSpec" type
               (:documentation "
    A class that specifies the geometry of the grid that a subplot
    will be placed. The location of grid is determined by similar way
    as the SubplotParams.
    "
                :superclasses ("GridSpecBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The number of rows and number of columns of the
        grid need to be set. Optionally, the subplot layout parameters
        (e.g., left, right, etc.) can be tuned.
        \"\"\"" code nil (reparse-symbol indented_block_body) [5823 6013])
                            ("self" variable nil (reparse-symbol indented_block_body) [6052 6066])
                            ("self" variable nil (reparse-symbol indented_block_body) [6075 6093])
                            ("self" variable nil (reparse-symbol indented_block_body) [6102 6118])
                            ("self" variable nil (reparse-symbol indented_block_body) [6127 6139])
                            ("self" variable nil (reparse-symbol indented_block_body) [6148 6166])
                            ("self" variable nil (reparse-symbol indented_block_body) [6175 6193])
                            ("GridSpecBase" code nil (reparse-symbol indented_block_body) [6203 6360]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5632 5636])
                            ("nrows" variable nil (reparse-symbol function_parameters) [5638 5643])
                            ("ncols" variable nil (reparse-symbol function_parameters) [5645 5650])
                            ("left" variable nil (reparse-symbol function_parameters) [5669 5673])
                            ("bottom" variable nil (reparse-symbol function_parameters) [5680 5686])
                            ("right" variable nil (reparse-symbol function_parameters) [5693 5698])
                            ("top" variable nil (reparse-symbol function_parameters) [5705 5708])
                            ("wspace" variable nil (reparse-symbol function_parameters) [5732 5738])
                            ("hspace" variable nil (reparse-symbol function_parameters) [5745 5751])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [5775 5787])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [5794 5807]))                          
                        :documentation "
        The number of rows and number of columns of the
        grid need to be set. Optionally, the subplot layout parameters
        (e.g., left, right, etc.) can be tuned.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5619 6361])
                    ("_AllowedKeys" variable nil (reparse-symbol indented_block_body) [6459 6528])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6545 6549])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6551 6559]))                          
                        :documentation "
        Update the current values.  If any kwarg is None, default to
        the current value, if set, otherwise to rc.
        ")
                        (reparse-symbol indented_block_body) [6534 7778])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7808 7812])
                            ("fig" variable nil (reparse-symbol function_parameters) [7814 7817]))                          
                        :documentation "
        return a dictionary of subplot layout parameters. The default
        parameters are from rcParams unless a figure attribute is set.
        ")
                        (reparse-symbol indented_block_body) [7785 8457])
                    ("locally_modified_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8498 8502]))                          )
                        (reparse-symbol indented_block_body) [8462 8571])
                    ("tight_layout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8594 8598])
                            ("fig" variable nil (reparse-symbol function_parameters) [8600 8603])
                            ("renderer" variable nil (reparse-symbol function_parameters) [8605 8613])
                            ("pad" variable nil (reparse-symbol function_parameters) [8620 8623])
                            ("h_pad" variable nil (reparse-symbol function_parameters) [8629 8634])
                            ("w_pad" variable nil (reparse-symbol function_parameters) [8641 8646])
                            ("rect" variable nil (reparse-symbol function_parameters) [8653 8657]))                          
                        :documentation "
        Adjust subplot parameters to give specified padding.

        Parameters:
        
        pad : float
            padding between the figure edge and the edges of subplots, as a fraction of the font-size.
        h_pad, w_pad : float
            padding (height/width) between edges of adjacent subplots.
            Defaults to `pad_inches`.
        ")
                        (reparse-symbol indented_block_body) [8577 11606]))                  
                :type "class")
                nil [5405 11606])
            ("GridSpecFromSubplotSpec" type
               (:documentation "
    GridSpec whose subplot layout parameters are inherited from the
    location specified by a given SubplotSpec.
    "
                :superclasses ("GridSpecBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The number of rows and number of columns of the grid need to
        be set. An instance of SubplotSpec is also needed to be set
        from which the layout parameters will be inherited. The wspace
        and hspace of the layout can be optionally specified or the
        default values (from the figure or rcParams) will be used.
        \"\"\"" code nil (reparse-symbol indented_block_body) [11960 12318])
                            ("self" variable nil (reparse-symbol indented_block_body) [12327 12346])
                            ("self" variable nil (reparse-symbol indented_block_body) [12355 12374])
                            ("self" variable nil (reparse-symbol indented_block_body) [12384 12417])
                            ("GridSpecBase" code nil (reparse-symbol indented_block_body) [12427 12584]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11801 11805])
                            ("nrows" variable nil (reparse-symbol function_parameters) [11807 11812])
                            ("ncols" variable nil (reparse-symbol function_parameters) [11814 11819])
                            ("subplot_spec" variable nil (reparse-symbol function_parameters) [11838 11850])
                            ("wspace" variable nil (reparse-symbol function_parameters) [11869 11875])
                            ("hspace" variable nil (reparse-symbol function_parameters) [11882 11888])
                            ("height_ratios" variable nil (reparse-symbol function_parameters) [11912 11925])
                            ("width_ratios" variable nil (reparse-symbol function_parameters) [11932 11944]))                          
                        :documentation "
        The number of rows and number of columns of the grid need to
        be set. An instance of SubplotSpec is also needed to be set
        from which the layout parameters will be inherited. The wspace
        and hspace of the layout can be optionally specified or the
        default values (from the figure or rcParams) will be used.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11788 12585])
                    ("get_subplot_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12614 12618])
                            ("fig" variable nil (reparse-symbol function_parameters) [12620 12623]))                          
                        :documentation "
        return a dictionary of subplot layout parameters.
        ")
                        (reparse-symbol indented_block_body) [12591 13530])
                    ("get_topmost_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13564 13568]))                          )
                        (reparse-symbol indented_block_body) [13536 13706]))                  
                :type "class")
                nil [11608 13706])
            ("SubplotSpec" type
               (:documentation "
    specifies the location of the subplot in the given *GridSpec*.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The subplot will occupy the num1-th cell of the given
        gridspec.  If num2 is provided, the subplot will span between
        num1-th cell and num2-th cell.

        The index stars from 0.
        \"\"\"" code nil (reparse-symbol indented_block_body) [13878 14097])
                            ("rows, cols" code nil (reparse-symbol indented_block_body) [14107 14143])
                            ("total" code nil (reparse-symbol indented_block_body) [14152 14169])
                            ("self" variable nil (reparse-symbol indented_block_body) [14179 14204])
                            ("self" variable nil (reparse-symbol indented_block_body) [14213 14229])
                            ("self" variable nil (reparse-symbol indented_block_body) [14238 14254]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13836 13840])
                            ("gridspec" variable nil (reparse-symbol function_parameters) [13842 13850])
                            ("num1" variable nil (reparse-symbol function_parameters) [13852 13856])
                            ("num2" variable nil (reparse-symbol function_parameters) [13858 13862]))                          
                        :documentation "
        The subplot will occupy the num1-th cell of the given
        gridspec.  If num2 is provided, the subplot will span between
        num1-th cell and num2-th cell.

        The index stars from 0.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13823 14255])
                    ("get_gridspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14277 14281]))                          )
                        (reparse-symbol indented_block_body) [14260 14314])
                    ("get_geometry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14337 14341]))                          
                        :documentation "
        get the subplot geometry, eg 2,2,3. Unlike SuplorParams,
        index is 0-based
        ")
                        (reparse-symbol indented_block_body) [14320 14562])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14585 14589])
                            ("fig" variable nil (reparse-symbol function_parameters) [14591 14594])
                            ("return_all" variable nil (reparse-symbol function_parameters) [14596 14606]))                          
                        :documentation "
        update the subplot position from fig.subplotpars
        ")
                        (reparse-symbol indented_block_body) [14568 15789])
                    ("get_topmost_subplotspec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15823 15827]))                          )
                        (reparse-symbol indented_block_body) [15795 16093]))                  
                :type "class")
                nil [13708 16093]))          
      :file "gridspec.py"
      :pointmax 16093
      :fsize 16092
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("'''
Colorbar toolkit with two classes and a function:

    :class:`ColorbarBase`
        the base class with full colorbar drawing functionality.
        It can be used as-is to make a colorbar for a given colormap;
        a mappable object (e.g., image) is not needed.

    :class:`Colorbar`
        the derived class for use with images or contour plots.

    :func:`make_axes`
        a function for resizing an axes and adding a second axes
        suitable for a colorbar

The :meth:`~matplotlib.figure.Figure.colorbar` method uses :func:`make_axes`
and :class:`Colorbar`; the :func:`~matplotlib.pyplot.colorbar` function
is a thin wrapper over :meth:`~matplotlib.figure.Figure.colorbar`.

'''" code nil nil [1 700])
            ("warnings" include nil nil [701 716])
            ("numpy" include nil nil [718 736])
            ("matplotlib" include nil nil [737 761])
            ("matplotlib.colors" include nil nil [762 796])
            ("matplotlib.cm" include nil nil [797 823])
            ("matplotlib" include nil nil [824 856])
            ("matplotlib.ticker" include nil nil [857 891])
            ("matplotlib.cbook" include nil nil [892 924])
            ("matplotlib.lines" include nil nil [925 957])
            ("matplotlib.patches" include nil nil [958 994])
            ("matplotlib.collections" include nil nil [995 1039])
            ("matplotlib.contour" include nil nil [1040 1076])
            ("matplotlib.artist" include nil nil [1077 1112])
            ("matplotlib.gridspec" include nil nil [1114 1152])
            ("make_axes_kw_doc" variable nil nil [1155 2048])
            ("colormap_kw_doc" variable nil nil [2050 4194])
            ("colorbar_doc" code nil nil [4196 6349])
            ("docstring" code nil nil [6351 6402])
            ("ColorbarBase" type
               (:superclasses ("cm.ScalarMappable")
                :members 
                  ( ("'''
    Draw a colorbar in an existing axes.

    This is a base class for the :class:`Colorbar` class, which is the
    basis for the :func:`~matplotlib.pyplot.colorbar` function and the
    :meth:`~matplotlib.figure.Figure.colorbar` method, which are the
    usual ways of creating a colorbar.

    It is also useful by itself for showing a colormap.  If the *cmap*
    kwarg is given but *boundaries* and *values* are left as None,
    then the colormap will be displayed on a 0-1 scale. To show the
    under- and over-value colors, specify the *norm* as::

        colors.Normalize(clip=False)

    To show the colors versus index instead of on the 0-1 scale,
    use::

        norm=colors.NoNorm.

    Useful attributes:

        :attr:`ax`
            the Axes instance in which the colorbar is drawn

        :attr:`lines`
            a LineCollection if lines were drawn, otherwise None

        :attr:`dividers`
            a LineCollection if *drawedges* is True, otherwise None

    Useful public methods are :meth:`set_label` and :meth:`add_lines`.

    '''" code nil (reparse-symbol indented_block_body) [6448 7519])
                    ("_slice_dict" variable nil (reparse-symbol indented_block_body) [7524 7690])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8261 8273])
                            ("self" code nil (reparse-symbol indented_block_body) [8282 8298])
                            ("if" code nil (reparse-symbol indented_block_body) [8307 8345])
                            ("if" code nil (reparse-symbol indented_block_body) [8353 8396])
                            ("self" variable nil (reparse-symbol indented_block_body) [8404 8422])
                            ("cm" code nil (reparse-symbol indented_block_body) [8431 8485])
                            ("self" variable nil (reparse-symbol indented_block_body) [8494 8514])
                            ("self" variable nil (reparse-symbol indented_block_body) [8523 8551])
                            ("self" variable nil (reparse-symbol indented_block_body) [8560 8580])
                            ("self" variable nil (reparse-symbol indented_block_body) [8589 8628])
                            ("self" variable nil (reparse-symbol indented_block_body) [8637 8659])
                            ("self" variable nil (reparse-symbol indented_block_body) [8668 8698])
                            ("self" variable nil (reparse-symbol indented_block_body) [8707 8733])
                            ("self" variable nil (reparse-symbol indented_block_body) [8742 8762])
                            ("self" variable nil (reparse-symbol indented_block_body) [8771 8789])
                            ("self" variable nil (reparse-symbol indented_block_body) [8798 8815])
                            ("self" variable nil (reparse-symbol indented_block_body) [8824 8843])
                            ("self" variable nil (reparse-symbol indented_block_body) [8852 8869])
                            ("self" variable nil (reparse-symbol indented_block_body) [8878 8898])
                            ("self" code nil (reparse-symbol indented_block_body) [8907 8925])
                            ("if" code nil (reparse-symbol indented_block_body) [8934 9112])
                            ("if" code nil (reparse-symbol indented_block_body) [9120 9516])
                            ("self" code nil (reparse-symbol indented_block_body) [9599 9617])
                            ("self" code nil (reparse-symbol indented_block_body) [9626 9641]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7709 7713])
                            ("ax" variable nil (reparse-symbol function_parameters) [7715 7717])
                            ("cmap" variable nil (reparse-symbol function_parameters) [7719 7723])
                            ("norm" variable nil (reparse-symbol function_parameters) [7757 7761])
                            ("alpha" variable nil (reparse-symbol function_parameters) [7795 7800])
                            ("values" variable nil (reparse-symbol function_parameters) [7834 7840])
                            ("boundaries" variable nil (reparse-symbol function_parameters) [7874 7884])
                            ("orientation" variable nil (reparse-symbol function_parameters) [7918 7929])
                            ("extend" variable nil (reparse-symbol function_parameters) [7969 7975])
                            ("spacing" variable nil (reparse-symbol function_parameters) [8014 8021])
                            ("ticks" variable nil (reparse-symbol function_parameters) [8087 8092])
                            ("format" variable nil (reparse-symbol function_parameters) [8126 8132])
                            ("drawedges" variable nil (reparse-symbol function_parameters) [8166 8175])
                            ("filled" variable nil (reparse-symbol function_parameters) [8210 8216]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7696 9642])
                    ("_patch_ax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9661 9665]))                          )
                        (reparse-symbol indented_block_body) [9647 9845])
                    ("draw_all" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9863 9867]))                          )
                        (reparse-symbol indented_block_body) [9850 10219])
                    ("config_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10240 10244]))                          )
                        (reparse-symbol indented_block_body) [10224 10570])
                    ("update_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10592 10596]))                          
                        :documentation "
        Force the update of the ticks and ticklabels. This must be
        called whenever the tick locator and/or tick formatter changes.
        ")
                        (reparse-symbol indented_block_body) [10575 11213])
                    ("set_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11232 11236])
                            ("ticks" variable nil (reparse-symbol function_parameters) [11238 11243])
                            ("update_ticks" variable nil (reparse-symbol function_parameters) [11245 11257]))                          
                        :documentation "
        set tick locations. Tick locations are updated immediately unless update_ticks is
        *False*. To manually update the ticks, call *update_ticks* method explicitly.
        ")
                        (reparse-symbol indented_block_body) [11218 11676])
                    ("set_ticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11700 11704])
                            ("ticklabels" variable nil (reparse-symbol function_parameters) [11706 11716])
                            ("update_ticks" variable nil (reparse-symbol function_parameters) [11718 11730]))                          
                        :documentation "
        set tick labels. Tick labels are updated immediately unless update_ticks is
        *False*. To manually update the ticks, call *update_ticks* method explicitly.
        ")
                        (reparse-symbol indented_block_body) [11681 12196])
                    ("_config_axes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12219 12223])
                            ("X" variable nil (reparse-symbol function_parameters) [12225 12226])
                            ("Y" variable nil (reparse-symbol function_parameters) [12228 12229]))                          )
                        (reparse-symbol indented_block_body) [12202 13206])
                    ("_set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13227 13231]))                          )
                        (reparse-symbol indented_block_body) [13212 13413])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13432 13436])
                            ("label" variable nil (reparse-symbol function_parameters) [13438 13443])
                            ("kw" variable nil (reparse-symbol function_parameters) [13445 13449]))                          )
                        (reparse-symbol indented_block_body) [13418 13601])
                    ("_outline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13620 13624])
                            ("X" variable nil (reparse-symbol function_parameters) [13626 13627])
                            ("Y" variable nil (reparse-symbol function_parameters) [13629 13630]))                          )
                        (reparse-symbol indented_block_body) [13607 14124])
                    ("_edges" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14140 14144])
                            ("X" variable nil (reparse-symbol function_parameters) [14146 14147])
                            ("Y" variable nil (reparse-symbol function_parameters) [14149 14150]))                          )
                        (reparse-symbol indented_block_body) [14129 14559])
                    ("_add_solids" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14580 14584])
                            ("X" variable nil (reparse-symbol function_parameters) [14586 14587])
                            ("Y" variable nil (reparse-symbol function_parameters) [14589 14590])
                            ("C" variable nil (reparse-symbol function_parameters) [14592 14593]))                          )
                        (reparse-symbol indented_block_body) [14564 15903])
                    ("add_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15922 15926])
                            ("levels" variable nil (reparse-symbol function_parameters) [15928 15934])
                            ("colors" variable nil (reparse-symbol function_parameters) [15936 15942])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [15944 15954]))                          )
                        (reparse-symbol indented_block_body) [15908 16614])
                    ("_ticker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16632 16636]))                          )
                        (reparse-symbol indented_block_body) [16620 18396])
                    ("_process_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18421 18425])
                            ("b" variable nil (reparse-symbol function_parameters) [18427 18428]))                          )
                        (reparse-symbol indented_block_body) [18401 21276])
                    ("_find_range" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21297 21301]))                          )
                        (reparse-symbol indented_block_body) [21281 21549])
                    ("_central_N" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21569 21573]))                          )
                        (reparse-symbol indented_block_body) [21554 21811])
                    ("_extended_N" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21832 21836]))                          )
                        (reparse-symbol indented_block_body) [21816 22116])
                    ("_uniform_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22136 22140])
                            ("N" variable nil (reparse-symbol function_parameters) [22142 22143]))                          )
                        (reparse-symbol indented_block_body) [22121 22769])
                    ("_proportional_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22794 22798]))                          )
                        (reparse-symbol indented_block_body) [22774 23474])
                    ("_mesh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23489 23493]))                          )
                        (reparse-symbol indented_block_body) [23479 24128])
                    ("_locate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24145 24149])
                            ("x" variable nil (reparse-symbol function_parameters) [24151 24152]))                          )
                        (reparse-symbol indented_block_body) [24133 25479])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25498 25502])
                            ("alpha" variable nil (reparse-symbol function_parameters) [25504 25509]))                          )
                        (reparse-symbol indented_block_body) [25484 25539]))                  
                :type "class")
                nil [6405 25539])
            ("Colorbar" type
               (:documentation "
    This class connects a :class:`ColorbarBase` to a
    :class:`~matplotlib.cm.ScalarMappable` such as a
    :class:`~matplotlib.image.AxesImage` generated via
    :meth:`~matplotlib.axes.Axes.imshow`.

    It is not intended to be instantiated directly; instead,
    use :meth:`~matplotlib.figure.Figure.colorbar` or
    :func:`~matplotlib.pyplot.colorbar` to make your colorbar.

    "
                :superclasses ("ColorbarBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("mappable" code nil (reparse-symbol indented_block_body) [26021 26046])
                            ("self" variable nil (reparse-symbol indented_block_body) [26351 26375])
                            ("kw" variable nil (reparse-symbol indented_block_body) [26384 26410])
                            ("kw" variable nil (reparse-symbol indented_block_body) [26419 26445])
                            ("if" code nil (reparse-symbol indented_block_body) [26455 27126]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25986 25990])
                            ("ax" variable nil (reparse-symbol function_parameters) [25992 25994])
                            ("mappable" variable nil (reparse-symbol function_parameters) [25996 26004])
                            ("kw" variable nil (reparse-symbol function_parameters) [26006 26010]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25973 27126])
                    ("add_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27146 27150])
                            ("CS" variable nil (reparse-symbol function_parameters) [27152 27154]))                          )
                        (reparse-symbol indented_block_body) [27132 28066])
                    ("update_normal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28089 28093])
                            ("mappable" variable nil (reparse-symbol function_parameters) [28095 28103]))                          )
                        (reparse-symbol indented_block_body) [28071 28514])
                    ("update_bruteforce" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28542 28546])
                            ("mappable" variable nil (reparse-symbol function_parameters) [28548 28556]))                          )
                        (reparse-symbol indented_block_body) [28520 29662]))                  
                :type "class")
                nil [25540 29662])
            ("" code nil nil [30047 30065])
            ("make_axes" function (:arguments 
              ( ("parent" variable nil (reparse-symbol function_parameters) [30080 30086])
                ("kw" variable nil (reparse-symbol function_parameters) [30088 30092]))              ) nil [30066 31572])
            ("" code nil nil [31597 31615])
            ("make_axes_gridspec" function (:arguments 
              ( ("parent" variable nil (reparse-symbol function_parameters) [31639 31645])
                ("kw" variable nil (reparse-symbol function_parameters) [31647 31651]))              ) nil [31616 34548]))          
      :file "colorbar.py"
      :pointmax 34548
      :fsize 34547
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Contains a class for managing paths (polylines).
\"\"\"" code nil nil [1 57])
            ("math" include nil nil [59 70])
            ("weakref" include nil nil [71 110])
            ("numpy" include nil nil [112 130])
            ("numpy" include nil nil [131 151])
            ("matplotlib._path" include nil nil [153 362])
            ("matplotlib.cbook" include nil nil [363 428])
            ("matplotlib" include nil nil [429 460])
            ("Path" type
               (:documentation "
    :class:`Path` represents a series of possibly disconnected,
    possibly closed, line and curve segments.

    The underlying storage is made up of two parallel numpy arrays:
      - *vertices*: an Nx2 float array of vertices
      - *codes*: an N-length uint8 array of vertex types

    These two arrays always have the same length in the first
    dimension.  For example, to represent a cubic curve, you must
    provide three vertices as well as three codes ``CURVE3``.

    The code types are:

       - ``STOP``   :  1 vertex (ignored)
           A marker for the end of the entire path (currently not
           required and ignored)

       - ``MOVETO`` :  1 vertex
            Pick up the pen and move to the given vertex.

       - ``LINETO`` :  1 vertex
            Draw a line from the current position to the given vertex.

       - ``CURVE3`` :  1 control point, 1 endpoint
          Draw a quadratic Bezier curve from the current position,
          with the given control point, to the given end point.

       - ``CURVE4`` :  2 control points, 1 endpoint
          Draw a cubic Bezier curve from the current position, with
          the given control points, to the given end point.

       - ``CLOSEPOLY`` : 1 vertex (ignored)
          Draw a line segment to the start point of the current
          polyline.

    Users of Path objects should not access the vertices and codes
    arrays directly.  Instead, they should use :meth:`iter_segments`
    to get the vertex/code pairs.  This is important, since many
    :class:`Path` objects, as an optimization, do not store a *codes*
    at all, but have a default one provided for them by
    :meth:`iter_segments`.

    .. note::

        The vertices and codes arrays should be treated as
        immutable -- there are a number of optimizations and assumptions
        made up front in the constructor that will not change when the
        data changes.

    "
                :superclasses ("object")
                :members 
                  ( ("STOP" variable nil (reparse-symbol indented_block_body) [2450 2463])
                    ("MOVETO" variable nil (reparse-symbol indented_block_body) [2482 2495])
                    ("LINETO" variable nil (reparse-symbol indented_block_body) [2514 2527])
                    ("CURVE3" variable nil (reparse-symbol indented_block_body) [2546 2559])
                    ("CURVE4" variable nil (reparse-symbol indented_block_body) [2580 2593])
                    ("CLOSEPOLY" variable nil (reparse-symbol indented_block_body) [2614 2630])
                    ("NUM_VERTICES" variable nil (reparse-symbol indented_block_body) [2647 2770])
                    ("code_type" variable nil (reparse-symbol indented_block_body) [2776 2796])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new path with the given vertices and codes.

        *vertices* is an Nx2 numpy float array, masked array or Python
        sequence.

        *codes* is an N-length numpy array or Python sequence of type
        :attr:`matplotlib.path.Path.code_type`.

        These two arrays must have the same length in the first
        dimension.

        If *codes* is None, *vertices* will be treated as a series of
        line segments.

        If *vertices* contains masked values, they will be converted
        to NaNs which are then handled correctly by the Agg
        PathIterator and other consumers of path data, such as
        :meth:`iter_segments`.

        *interpolation_steps* is used as a hint to certain projections,
        such as Polar, that this path should be linearly interpolated
        immediately before drawing.  This attribute is primarily an
        implementation detail and is not intended for public use.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2890 3854])
                            ("if" code nil (reparse-symbol indented_block_body) [3863 4028])
                            ("if" code nil (reparse-symbol indented_block_body) [4037 4468])
                            ("assert" code nil (reparse-symbol indented_block_body) [4477 4502])
                            ("assert" code nil (reparse-symbol indented_block_body) [4511 4540])
                            ("self" variable nil (reparse-symbol indented_block_body) [4550 4744])
                            ("self" variable nil (reparse-symbol indented_block_body) [4753 4814])
                            ("self" code nil (reparse-symbol indented_block_body) [4823 4875])
                            ("self" variable nil (reparse-symbol indented_block_body) [4884 4902])
                            ("self" variable nil (reparse-symbol indented_block_body) [4911 4935])
                            ("self" variable nil (reparse-symbol indented_block_body) [4944 4992]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2815 2819])
                            ("vertices" variable nil (reparse-symbol function_parameters) [2821 2829])
                            ("codes" variable nil (reparse-symbol function_parameters) [2831 2836])
                            ("_interpolation_steps" variable nil (reparse-symbol function_parameters) [2843 2863])
                            ("closed" variable nil (reparse-symbol function_parameters) [2867 2873]))                          
                        :documentation "
        Create a new path with the given vertices and codes.

        *vertices* is an Nx2 numpy float array, masked array or Python
        sequence.

        *codes* is an N-length numpy array or Python sequence of type
        :attr:`matplotlib.path.Path.code_type`.

        These two arrays must have the same length in the first
        dimension.

        If *codes* is None, *vertices* will be treated as a series of
        line segments.

        If *vertices* contains masked values, they will be converted
        to NaNs which are then handled correctly by the Agg
        PathIterator and other consumers of path data, such as
        :meth:`iter_segments`.

        *interpolation_steps* is used as a hint to certain projections,
        such as Polar, that this path should be linearly interpolated
        immediately before drawing.  This attribute is primarily an
        implementation detail and is not intended for public use.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2802 4993])
                    ("make_compound_path_from_polys" function
                       (:documentation "
        (static method) Make a compound path object to draw a number
        of polygons with equal numbers of sides XY is a (numpolys x
        numsides x 2) numpy array of vertices.  Return object is a
        :class:`Path`

        .. plot:: mpl_examples/api/histogram_path_demo.py

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5049 5052])
                            ("XY" variable nil (reparse-symbol function_parameters) [5054 5056]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4998 5998])
                    ("make_compound_path" function
                       (:documentation "
        (staticmethod) Make a compound path from a list of Path
        objects.  Only polygons (not curves) are supported.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6043 6046])
                            ("args" variable nil (reparse-symbol function_parameters) [6048 6053]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6003 6634])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6652 6656]))                          )
                        (reparse-symbol indented_block_body) [6639 6719])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6736 6740]))                          )
                        (reparse-symbol indented_block_body) [6724 6777])
                    ("iter_segments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6800 6804])
                            ("transform" variable nil (reparse-symbol function_parameters) [6806 6815])
                            ("remove_nans" variable nil (reparse-symbol function_parameters) [6822 6833])
                            ("clip" variable nil (reparse-symbol function_parameters) [6840 6844])
                            ("snap" variable nil (reparse-symbol function_parameters) [6873 6877])
                            ("stroke_width" variable nil (reparse-symbol function_parameters) [6885 6897])
                            ("simplify" variable nil (reparse-symbol function_parameters) [6903 6911])
                            ("curves" variable nil (reparse-symbol function_parameters) [6940 6946]))                          
                        :documentation "
        Iterates over all of the curve segments in the path.  Each
        iteration returns a 2-tuple (*vertices*, *code*), where
        *vertices* is a sequence of 1 - 3 coordinate pairs, and *code* is
        one of the :class:`Path` codes.

        Additionally, this method can provide a number of standard
        cleanups and conversions to the path.

        *transform*: if not None, the given affine transformation will
         be applied to the path.

        *remove_nans*: if True, will remove all NaNs from the path and
         insert MOVETO commands to skip over them.

        *clip*: if not None, must be a four-tuple (x1, y1, x2, y2)
         defining a rectangle in which to clip the path.

        *snap*: if None, auto-snap to pixels, to reduce
         fuzziness of rectilinear lines.  If True, force snapping, and
         if False, don't snap.

        *stroke_width*: the width of the stroke being drawn.  Needed
         as a hint for the snapping algorithm.

        *simplify*: if True, perform simplification, to remove
         vertices that do not affect the appearance of the path.  If
         False, perform no simplification.  If None, use the
         should_simplify member variable.

        *curves*: If True, curve segments will be returned as curve
         segments.  If False, all curves will be converted to line
         segments.
        ")
                        (reparse-symbol indented_block_body) [6782 9198])
                    ("transformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9219 9223])
                            ("transform" variable nil (reparse-symbol function_parameters) [9225 9234]))                          
                        :documentation "
        Return a transformed copy of the path.

        .. seealso::

            :class:`matplotlib.transforms.TransformedPath`
                A specialized path class that will cache the
                transformed result and automatically update when the
                transform changes.
        ")
                        (reparse-symbol indented_block_body) [9203 9670])
                    ("contains_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9694 9698])
                            ("point" variable nil (reparse-symbol function_parameters) [9700 9705])
                            ("transform" variable nil (reparse-symbol function_parameters) [9707 9716])
                            ("radius" variable nil (reparse-symbol function_parameters) [9723 9729]))                          
                        :documentation "
        Returns *True* if the path contains the given point.

        If *transform* is not *None*, the path will be transformed
        before performing the test.
        ")
                        (reparse-symbol indented_block_body) [9675 10100])
                    ("contains_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10123 10127])
                            ("path" variable nil (reparse-symbol function_parameters) [10129 10133])
                            ("transform" variable nil (reparse-symbol function_parameters) [10135 10144]))                          
                        :documentation "
        Returns *True* if this path completely contains the given path.

        If *transform* is not *None*, the path will be transformed
        before performing the test.
        ")
                        (reparse-symbol indented_block_body) [10105 10486])
                    ("get_extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10507 10511])
                            ("transform" variable nil (reparse-symbol function_parameters) [10513 10522]))                          
                        :documentation "
        Returns the extents (*xmin*, *ymin*, *xmax*, *ymax*) of the
        path.

        Unlike computing the extents on the *vertices* alone, this
        algorithm will take into account the curves and deal with
        control points appropriately.
        ")
                        (reparse-symbol indented_block_body) [10491 11120])
                    ("intersects_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11145 11149])
                            ("other" variable nil (reparse-symbol function_parameters) [11151 11156])
                            ("filled" variable nil (reparse-symbol function_parameters) [11158 11164]))                          
                        :documentation "
        Returns *True* if this path intersects another given path.

        *filled*, when True, treats the paths as if they were filled.
        That is, if one path completely encloses the other,
        :meth:`intersects_path` will return True.
        ")
                        (reparse-symbol indented_block_body) [11125 11501])
                    ("intersects_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11526 11530])
                            ("bbox" variable nil (reparse-symbol function_parameters) [11532 11536])
                            ("filled" variable nil (reparse-symbol function_parameters) [11538 11544]))                          
                        :documentation "
        Returns *True* if this path intersects a given
        :class:`~matplotlib.transforms.Bbox`.

        *filled*, when True, treats the path as if it was filled.
        That is, if one path completely encloses the other,
        :meth:`intersects_path` will return True.
        ")
                        (reparse-symbol indented_block_body) [11506 12070])
                    ("interpolated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12092 12096])
                            ("steps" variable nil (reparse-symbol function_parameters) [12098 12103]))                          
                        :documentation "
        Returns a new path resampled to length N x steps.  Does not
        currently handle interpolating curves.
        ")
                        (reparse-symbol indented_block_body) [12075 12623])
                    ("to_polygons" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12644 12648])
                            ("transform" variable nil (reparse-symbol function_parameters) [12650 12659])
                            ("width" variable nil (reparse-symbol function_parameters) [12666 12671])
                            ("height" variable nil (reparse-symbol function_parameters) [12675 12681]))                          
                        :documentation "
        Convert this path to a list of polygons.  Each polygon is an
        Nx2 array of vertices.  In other words, each polygon has no
        ``MOVETO`` instructions or curves.  This is useful for
        displaying in backends that do not support compound paths or
        Bezier curves, such as GDK.

        If *width* and *height* are both non-zero then the lines will
        be simplified so that vertices outside of (0, 0), (width,
        height) will be clipped.
        ")
                        (reparse-symbol indented_block_body) [12628 13719])
                    ("_unit_rectangle" variable nil (reparse-symbol indented_block_body) [13724 13746])
                    ("unit_rectangle" function
                       (:documentation "
        (staticmethod) Returns a :class:`Path` of the unit rectangle
        from (0, 0) to (1, 1).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [13787 13790]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13751 14195])
                    ("_unit_regular_polygons" variable nil (reparse-symbol indented_block_body) [14200 14246])
                    ("unit_regular_polygon" function
                       (:documentation "
        (staticmethod) Returns a :class:`Path` for a unit regular
        polygon with the given *numVertices* and radius of 1.0,
        centered at (0, 0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [14294 14297])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [14299 14310]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14252 15285])
                    ("_unit_regular_stars" variable nil (reparse-symbol indented_block_body) [15290 15333])
                    ("unit_regular_star" function
                       (:documentation "
        (staticmethod) Returns a :class:`Path` for a unit regular star
        with the given numVertices and radius of 1.0, centered at (0,
        0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [15378 15381])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [15383 15394])
                            ("innerCircle" variable nil (reparse-symbol function_parameters) [15396 15407]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15339 16442])
                    ("unit_regular_asterisk" function
                       (:documentation "
        (staticmethod) Returns a :class:`Path` for a unit regular
        asterisk with the given numVertices and radius of 1.0,
        centered at (0, 0).
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [16490 16493])
                            ("numVertices" variable nil (reparse-symbol function_parameters) [16495 16506]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16447 16745])
                    ("_unit_circle" variable nil (reparse-symbol indented_block_body) [16750 16769])
                    ("unit_circle" function
                       (:documentation "
        (staticmethod) Returns a :class:`Path` of the unit circle.
        The circle is approximated using cubic Bezier curves.  This
        uses 8 splines around the circle using the approach presented
        here:

          Lancaster, Don.  `Approximating a Circle or an Ellipse Using Four
          Bezier Cubic Splines <http://www.tinaja.com/glib/ellipse4.pdf>`_.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [16808 16811]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16775 18680])
                    ("_unit_circle_righthalf" variable nil (reparse-symbol indented_block_body) [18685 18714])
                    ("unit_circle_righthalf" function
                       (:documentation "
        (staticmethod) Returns a :class:`Path` of the right half
        of a unit circle. The circle is approximated using cubic Bezier
        curves.  This uses 4 splines around the circle using the approach
        presented here:

          Lancaster, Don.  `Approximating a Circle or an Ellipse Using Four
          Bezier Cubic Splines <http://www.tinaja.com/glib/ellipse4.pdf>`_.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [18763 18766]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18720 20181])
                    ("arc" function
                       (:documentation "
        (staticmethod) Returns an arc on the unit circle from angle
        *theta1* to angle *theta2* (in degrees).

        If *n* is provided, it is the number of spline segments to make.
        If *n* is not provided, the number of spline segments is
        determined based on the delta between *theta1* and *theta2*.

           Masionobe, L.  2003.  `Drawing an elliptical arc using
           polylines, quadratic or cubic Bezier curves
           <http://www.spaceroots.org/documents/ellipse/index.html>`_.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [20211 20214])
                            ("theta1" variable nil (reparse-symbol function_parameters) [20216 20222])
                            ("theta2" variable nil (reparse-symbol function_parameters) [20224 20230])
                            ("n" variable nil (reparse-symbol function_parameters) [20232 20233])
                            ("is_wedge" variable nil (reparse-symbol function_parameters) [20240 20248]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20186 22923])
                    ("wedge" function
                       (:documentation "
        (staticmethod) Returns a wedge of the unit circle from angle
        *theta1* to angle *theta2* (in degrees).

        If *n* is provided, it is the number of spline segments to make.
        If *n* is not provided, the number of spline segments is
        determined based on the delta between *theta1* and *theta2*.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [22955 22958])
                            ("theta1" variable nil (reparse-symbol function_parameters) [22960 22966])
                            ("theta2" variable nil (reparse-symbol function_parameters) [22968 22974])
                            ("n" variable nil (reparse-symbol function_parameters) [22976 22977]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22928 23383])
                    ("_hatch_dict" variable nil (reparse-symbol indented_block_body) [23388 23412])
                    ("hatch" function
                       (:documentation "
        Given a hatch specifier, *hatchpattern*, generates a Path that
        can be used in a repeated hatching pattern.  *density* is the
        number of lines per unit square.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [23445 23448])
                            ("hatchpattern" variable nil (reparse-symbol function_parameters) [23450 23462])
                            ("density" variable nil (reparse-symbol function_parameters) [23464 23471]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23418 24060]))                  
                :type "class")
                nil [462 24060])
            ("_get_path_collection_extents" variable nil nil [24061 24119])
            ("get_path_collection_extents" function
               (:documentation "
    Given a sequence of :class:`Path` objects, returns the bounding
    box that encapsulates all of them.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [24152 24157]))                  )
                nil [24120 24454]))          
      :file "path.py"
      :pointmax 24454
      :fsize 24453
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The legend module defines the Legend class, which is responsible for
drawing legends associated with axes and/or figures.

The Legend class can be considered as a container of legend handles
and legend texts. Creation of corresponding legend handles from the
plot elements in the axes or figures (e.g., lines, patches, etc.) are
specified by the handler map, which defines the mapping between the
plot elements and the legend handlers to be used (the default legend
handlers are defined in the :mod:`~matplotlib.legend_handler` module). Note
that not all kinds of artist are supported by the legend yet (See
:ref:`plotting-guide-legend` for more information).
\"\"\"" code nil nil [1 668])
            ("__future__" include nil nil [669 700])
            ("warnings" include nil nil [701 716])
            ("numpy" include nil nil [718 736])
            ("matplotlib" include nil nil [738 769])
            ("matplotlib.artist" include nil nil [770 827])
            ("matplotlib.cbook" include nil nil [828 903])
            ("matplotlib.font_manager" include nil nil [904 954])
            ("matplotlib.lines" include nil nil [955 990])
            ("matplotlib.patches" include nil nil [991 1062])
            ("matplotlib.collections" include nil nil [1063 1176])
            ("matplotlib.transforms" include nil nil [1177 1278])
            ("matplotlib.offsetbox" include nil nil [1280 1372])
            ("matplotlib.container" include nil nil [1374 1453])
            ("legend_handler" include nil nil [1454 1475])
            ("DraggableLegend" type
               (:superclasses ("DraggableOffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        update : If \"loc\", update *loc* parameter of
                 legend upon finalizing. If \"bbox\", update
                 *bbox_to_anchor* parameter.
        \"\"\"" code nil (reparse-symbol indented_block_body) [1591 1763])
                            ("self" variable nil (reparse-symbol indented_block_body) [1772 1790])
                            ("if" code nil (reparse-symbol indented_block_body) [1800 1959])
                            ("DraggableOffsetBox" code nil (reparse-symbol indented_block_body) [1968 2084]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1538 1542])
                            ("legend" variable nil (reparse-symbol function_parameters) [1544 1550])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [1552 1560])
                            ("update" variable nil (reparse-symbol function_parameters) [1568 1574]))                          
                        :documentation "
        update : If \"loc\", update *loc* parameter of
                 legend upon finalizing. If \"bbox\", update
                 *bbox_to_anchor* parameter.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1525 2085])
                    ("artist_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2108 2112])
                            ("legend" variable nil (reparse-symbol function_parameters) [2114 2120])
                            ("evt" variable nil (reparse-symbol function_parameters) [2122 2125]))                          )
                        (reparse-symbol indented_block_body) [2090 2169])
                    ("finalize_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2194 2198]))                          )
                        (reparse-symbol indented_block_body) [2174 2523])
                    ("_update_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2544 2548])
                            ("loc_in_canvas" variable nil (reparse-symbol function_parameters) [2550 2563]))                          )
                        (reparse-symbol indented_block_body) [2528 3023])
                    ("_update_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3056 3060])
                            ("loc_in_canvas" variable nil (reparse-symbol function_parameters) [3062 3075]))                          )
                        (reparse-symbol indented_block_body) [3029 3228]))                  
                :type "class")
                nil [1478 3228])
            ("Legend" type
               (:documentation "
    Place a legend on the axes at location loc.  Labels are a
    sequence of strings and loc can be a string or an integer
    specifying the legend location

    The location codes are::

      'best'         : 0, (only implemented for axis legends)
      'upper right'  : 1,
      'upper left'   : 2,
      'lower left'   : 3,
      'lower right'  : 4,
      'right'        : 5,
      'center left'  : 6,
      'center right' : 7,
      'lower center' : 8,
      'upper center' : 9,
      'center'       : 10,

    loc can be a tuple of the noramilzed coordinate values with
    respect its parent.

    "
                :superclasses ("Artist")
                :members 
                  ( ("codes" variable nil (reparse-symbol indented_block_body) [3877 4287])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [4294 4304])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4321 4325]))                          )
                        (reparse-symbol indented_block_body) [4309 4352])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        - *parent* : the artist that contains the legend
        - *handles* : a list of artists (lines, patches) to be added to the legend
        - *labels* : a list of strings to label the legend

        Optional keyword arguments:

        ================   ==================================================================
        Keyword            Description
        ================   ==================================================================
        loc                a location code
        prop               the font property
        markerscale        the relative size of legend markers vs. original
        numpoints          the number of points in the legend for line
        scatterpoints      the number of points in the legend for scatter plot
        scatteryoffsets    a list of yoffsets for scatter symbols in legend
        frameon            if True, draw a frame around the legend. If None, use rc
        fancybox           if True, draw a frame with a round fancybox.  If None, use rc
        shadow             if True, draw a shadow behind legend
        ncol               number of columns
        borderpad          the fractional whitespace inside the legend border
        labelspacing       the vertical space between the legend entries
        handlelength       the length of the legend handles
        handleheight       the length of the legend handles
        handletextpad      the pad between the legend handle and text
        borderaxespad      the pad between the axes and legend border
        columnspacing      the spacing between columns
        title              the legend title
        bbox_to_anchor     the bbox that the legend will be anchored.
        bbox_transform     the transform for the bbox. transAxes if None.
        ================   ==================================================================


The pad and spacing parameters are measured in font-size units.  E.g.,
a fontsize of 10 points and a handlelength=5 implies a handlelength of
50 points.  Values from rcParams will be used if None.

Users can specify any arbitrary location for the legend using the
*bbox_to_anchor* keyword argument. bbox_to_anchor can be an instance
of BboxBase(or its derivatives) or a tuple of 2 or 4 floats.
See :meth:`set_bbox_to_anchor` for more detail.

The legend location can be specified by setting *loc* with a tuple of
2 floats, which is interpreted as the lower-left corner of the legend
in the normalized axes coordinate.
        \"\"\"" code nil (reparse-symbol indented_block_body) [6376 8895])
                            ("matplotlib.axes" include nil (reparse-symbol indented_block_body) [8904 8936])
                            ("matplotlib.figure" include nil (reparse-symbol indented_block_body) [8990 9026])
                            ("Artist" code nil (reparse-symbol indented_block_body) [9077 9098])
                            ("if" code nil (reparse-symbol indented_block_body) [9108 9418])
                            ("self" variable nil (reparse-symbol indented_block_body) [9427 9474])
                            ("propnames" variable nil (reparse-symbol indented_block_body) [9484 9601])
                            ("self" variable nil (reparse-symbol indented_block_body) [9611 9626])
                            ("self" variable nil (reparse-symbol indented_block_body) [9635 9658])
                            ("self" variable nil (reparse-symbol indented_block_body) [9667 9696])
                            ("self" variable nil (reparse-symbol indented_block_body) [9707 9738])
                            ("localdict" variable nil (reparse-symbol indented_block_body) [9748 9768])
                            ("for" code nil (reparse-symbol indented_block_body) [9778 9987])
                            ("deprecated_kwds" variable nil (reparse-symbol indented_block_body) [10040 10300])
                            ("bbox" variable nil (reparse-symbol indented_block_body) [10465 10483])
                            ("axessize_fontsize" code nil (reparse-symbol indented_block_body) [10492 10555])
                            ("for" code nil (reparse-symbol indented_block_body) [10565 11179])
                            ("del" code nil (reparse-symbol indented_block_body) [11188 11201])
                            ("handles" variable nil (reparse-symbol indented_block_body) [11211 11234])
                            ("if" code nil (reparse-symbol indented_block_body) [11243 11283])
                            ("self" variable nil (reparse-symbol indented_block_body) [11291 11308])
                            ("if" code nil (reparse-symbol indented_block_body) [11318 11418])
                            ("if" code nil (reparse-symbol indented_block_body) [11488 11663])
                            ("reps" code nil (reparse-symbol indented_block_body) [11671 11735])
                            ("self" variable nil (reparse-symbol indented_block_body) [11744 11825])
                            ("self" variable nil (reparse-symbol indented_block_body) [11989 12012])
                            ("if" code nil (reparse-symbol indented_block_body) [12022 12356])
                            ("self" variable nil (reparse-symbol indented_block_body) [12364 12384])
                            ("if" code nil (reparse-symbol indented_block_body) [12394 12541])
                            ("if" code nil (reparse-symbol indented_block_body) [12549 13241])
                            ("if" code nil (reparse-symbol indented_block_body) [13249 13466])
                            ("self" variable nil (reparse-symbol indented_block_body) [13475 13492])
                            ("self" code nil (reparse-symbol indented_block_body) [13501 13556])
                            ("self" variable nil (reparse-symbol indented_block_body) [13707 13968])
                            ("if" code nil (reparse-symbol indented_block_body) [14141 14213])
                            ("if" code nil (reparse-symbol indented_block_body) [14222 14433])
                            ("self" code nil (reparse-symbol indented_block_body) [14442 14482])
                            ("self" variable nil (reparse-symbol indented_block_body) [14492 14517])
                            ("if" code nil (reparse-symbol indented_block_body) [14526 14603])
                            ("self" code nil (reparse-symbol indented_block_body) [14646 14684])
                            ("self" variable nil (reparse-symbol indented_block_body) [14694 14709])
                            ("self" code nil (reparse-symbol indented_block_body) [14719 14740])
                            ("self" variable nil (reparse-symbol indented_block_body) [14750 14793])
                            ("self" variable nil (reparse-symbol indented_block_body) [14803 14825]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4370 4374])
                            ("parent" variable nil (reparse-symbol function_parameters) [4376 4382])
                            ("handles" variable nil (reparse-symbol function_parameters) [4384 4391])
                            ("labels" variable nil (reparse-symbol function_parameters) [4393 4399])
                            ("loc" variable nil (reparse-symbol function_parameters) [4418 4421])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [4447 4456])
                            ("markerscale" variable nil (reparse-symbol function_parameters) [4528 4539])
                            ("scatterpoints" variable nil (reparse-symbol function_parameters) [4618 4631])
                            ("scatteryoffsets" variable nil (reparse-symbol function_parameters) [4683 4698])
                            ("prop" variable nil (reparse-symbol function_parameters) [4722 4726])
                            ("pad" variable nil (reparse-symbol function_parameters) [4859 4862])
                            ("labelsep" variable nil (reparse-symbol function_parameters) [4926 4934])
                            ("handlelen" variable nil (reparse-symbol function_parameters) [4996 5005])
                            ("handletextsep" variable nil (reparse-symbol function_parameters) [5066 5079])
                            ("axespad" variable nil (reparse-symbol function_parameters) [5137 5144])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [5281 5290])
                            ("labelspacing" variable nil (reparse-symbol function_parameters) [5362 5374])
                            ("handlelength" variable nil (reparse-symbol function_parameters) [5445 5457])
                            ("handleheight" variable nil (reparse-symbol function_parameters) [5516 5528])
                            ("handletextpad" variable nil (reparse-symbol function_parameters) [5587 5600])
                            ("borderaxespad" variable nil (reparse-symbol function_parameters) [5669 5682])
                            ("columnspacing" variable nil (reparse-symbol function_parameters) [5751 5764])
                            ("ncol" variable nil (reparse-symbol function_parameters) [5815 5819])
                            ("mode" variable nil (reparse-symbol function_parameters) [5860 5864])
                            ("fancybox" variable nil (reparse-symbol function_parameters) [5951 5959])
                            ("shadow" variable nil (reparse-symbol function_parameters) [6044 6050])
                            ("title" variable nil (reparse-symbol function_parameters) [6076 6081])
                            ("bbox_to_anchor" variable nil (reparse-symbol function_parameters) [6136 6150])
                            ("bbox_transform" variable nil (reparse-symbol function_parameters) [6217 6231])
                            ("frameon" variable nil (reparse-symbol function_parameters) [6282 6289])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [6328 6339]))                          
                        :documentation "
        - *parent* : the artist that contains the legend
        - *handles* : a list of artists (lines, patches) to be added to the legend
        - *labels* : a list of strings to label the legend

        Optional keyword arguments:

        ================   ==================================================================
        Keyword            Description
        ================   ==================================================================
        loc                a location code
        prop               the font property
        markerscale        the relative size of legend markers vs. original
        numpoints          the number of points in the legend for line
        scatterpoints      the number of points in the legend for scatter plot
        scatteryoffsets    a list of yoffsets for scatter symbols in legend
        frameon            if True, draw a frame around the legend. If None, use rc
        fancybox           if True, draw a frame with a round fancybox.  If None, use rc
        shadow             if True, draw a shadow behind legend
        ncol               number of columns
        borderpad          the fractional whitespace inside the legend border
        labelspacing       the vertical space between the legend entries
        handlelength       the length of the legend handles
        handleheight       the length of the legend handles
        handletextpad      the pad between the legend handle and text
        borderaxespad      the pad between the axes and legend border
        columnspacing      the spacing between columns
        title              the legend title
        bbox_to_anchor     the bbox that the legend will be anchored.
        bbox_transform     the transform for the bbox. transAxes if None.
        ================   ==================================================================


The pad and spacing parameters are measured in font-size units.  E.g.,
a fontsize of 10 points and a handlelength=5 implies a handlelength of
50 points.  Values from rcParams will be used if None.

Users can specify any arbitrary location for the legend using the
*bbox_to_anchor* keyword argument. bbox_to_anchor can be an instance
of BboxBase(or its derivatives) or a tuple of 2 or 4 floats.
See :meth:`set_bbox_to_anchor` for more detail.

The legend location can be specified by setting *loc* with a tuple of
2 floats, which is interpreted as the lower-left corner of the legend
in the normalized axes coordinate.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4357 14826])
                    ("_set_artist_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14853 14857])
                            ("a" variable nil (reparse-symbol function_parameters) [14859 14860]))                          
                        :documentation "
        set the boilerplate props for artists added to axes
        ")
                        (reparse-symbol indented_block_body) [14831 15085])
                    ("_set_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15104 15108])
                            ("loc" variable nil (reparse-symbol function_parameters) [15110 15113]))                          )
                        (reparse-symbol indented_block_body) [15091 15665])
                    ("_get_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15683 15687]))                          )
                        (reparse-symbol indented_block_body) [15670 15720])
                    ("_loc" variable nil (reparse-symbol indented_block_body) [15725 15760])
                    ("_findoffset_best" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15787 15791])
                            ("width" variable nil (reparse-symbol function_parameters) [15793 15798])
                            ("height" variable nil (reparse-symbol function_parameters) [15800 15806])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [15808 15816])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [15818 15826])
                            ("renderer" variable nil (reparse-symbol function_parameters) [15828 15836]))                          )
                        (reparse-symbol indented_block_body) [15766 16014])
                    ("_findoffset_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16039 16043])
                            ("width" variable nil (reparse-symbol function_parameters) [16045 16050])
                            ("height" variable nil (reparse-symbol function_parameters) [16052 16058])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [16060 16068])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [16070 16078])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16080 16088]))                          )
                        (reparse-symbol indented_block_body) [16019 16638])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16677 16681])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16683 16691]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16643 17761])
                    ("_approx_text_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17791 17795])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17797 17805]))                          
                        :documentation "
        Return the approximate height of the text. This is used to place
        the legend handle.
        ")
                        (reparse-symbol indented_block_body) [17767 18075])
                    ("_default_handler_map" variable nil (reparse-symbol indented_block_body) [18190 18844])
                    ("get_default_handler_map" function
                       (:documentation "
        A class method that returns the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19003 19006]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18958 19134])
                    ("set_default_handler_map" function
                       (:documentation "
        A class method to set the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19184 19187])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [19189 19200]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19139 19329])
                    ("update_default_handler_map" function
                       (:documentation "
        A class method to update the default handler map.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19382 19385])
                            ("handler_map" variable nil (reparse-symbol function_parameters) [19387 19398]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [19334 19536])
                    ("get_legend_handler_map" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19568 19572]))                          
                        :documentation "
        return the handler map.
        ")
                        (reparse-symbol indented_block_body) [19541 19884])
                    ("get_legend_handler" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("legend_handler_map" variable nil (reparse-symbol function_parameters) [19930 19948])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [19950 19961]))                          
                        :documentation "
        return a legend handler from *legend_handler_map* that
        corresponds to *orig_handler*.

        *legend_handler_map* should be a dictionary object (that is
        returned by the get_legend_handler_map method).

        It first checks if the *orig_handle* itself is a key in the
        *legend_hanler_map* and return the associated value.
        Otherwise, it checks for each of the classes in its
        method-resolution-order. If no matching key is found, it
        returns None.
        ")
                        (reparse-symbol indented_block_body) [19889 20935])
                    ("_init_legend_box" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20962 20966])
                            ("handles" variable nil (reparse-symbol function_parameters) [20968 20975])
                            ("labels" variable nil (reparse-symbol function_parameters) [20977 20983]))                          
                        :documentation "
        Initialize the legend_box. The legend_box is an instance of
        the OffsetBox, which is packed with legend handles and
        texts. Once packed, their location is calculated during the
        drawing time.
        ")
                        (reparse-symbol indented_block_body) [20941 26519])
                    ("_auto_legend_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26547 26551]))                          
                        :documentation "
        Returns list of vertices and extents covered by the plot.

        Returns a two long list.

        First element is a list of (x, y) vertices (in
        display-coordinates) covered by all the lines and line
        collections, in the legend's handles.

        Second element is a list of bounding boxes for all the patches in
        the legend's handles.
        ")
                        (reparse-symbol indented_block_body) [26525 27803])
                    ("draw_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27823 27827])
                            ("b" variable nil (reparse-symbol function_parameters) [27829 27830]))                          )
                        (reparse-symbol indented_block_body) [27808 27909])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27931 27935]))                          )
                        (reparse-symbol indented_block_body) [27914 28352])
                    ("get_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28371 28375]))                          )
                        (reparse-symbol indented_block_body) [28357 28475])
                    ("get_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28494 28498]))                          )
                        (reparse-symbol indented_block_body) [28480 28637])
                    ("get_patches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28658 28662]))                          )
                        (reparse-symbol indented_block_body) [28642 28815])
                    ("get_texts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28834 28838]))                          )
                        (reparse-symbol indented_block_body) [28820 28948])
                    ("set_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28967 28971])
                            ("title" variable nil (reparse-symbol function_parameters) [28973 28978]))                          )
                        (reparse-symbol indented_block_body) [28953 29205])
                    ("get_title" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29224 29228]))                          )
                        (reparse-symbol indented_block_body) [29210 29327])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29354 29358])
                            ("args" variable nil (reparse-symbol function_parameters) [29360 29365])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29367 29375]))                          )
                        (reparse-symbol indented_block_body) [29332 29490])
                    ("get_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29513 29517]))                          
                        :documentation "
        Get whether the legend box patch is drawn
        ")
                        (reparse-symbol indented_block_body) [29496 29625])
                    ("set_frame_on" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29647 29651])
                            ("b" variable nil (reparse-symbol function_parameters) [29653 29654]))                          
                        :documentation "
        Set whether the legend box patch is drawn

        ACCEPTS: [ *True* | *False* ]
        ")
                        (reparse-symbol indented_block_body) [29630 29798])
                    ("get_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29826 29830]))                          
                        :documentation "
        return the bbox that the legend will be anchored
        ")
                        (reparse-symbol indented_block_body) [29803 30045])
                    ("set_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30074 30078])
                            ("bbox" variable nil (reparse-symbol function_parameters) [30080 30084])
                            ("transform" variable nil (reparse-symbol function_parameters) [30086 30095]))                          
                        :documentation "
        set the bbox that the legend will be anchored.

        *bbox* can be a BboxBase instance, a tuple of [left, bottom,
        width, height] in the given transform (normalized axes
        coordinate if None), or a tuple of [left, bottom] where the
        width and height will be assumed to be zero.
        ")
                        (reparse-symbol indented_block_body) [30051 31120])
                    ("_get_anchored_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31150 31154])
                            ("loc" variable nil (reparse-symbol function_parameters) [31156 31159])
                            ("bbox" variable nil (reparse-symbol function_parameters) [31161 31165])
                            ("parentbbox" variable nil (reparse-symbol function_parameters) [31167 31177])
                            ("renderer" variable nil (reparse-symbol function_parameters) [31179 31187]))                          
                        :documentation "
        Place the *bbox* inside the *parentbbox* according to a given
        location code. Return the (x,y) coordinate of the bbox.

        - loc: a location code in range(1, 11).
          This corresponds to the possible values for self._loc, excluding \"best\".

        - bbox: bbox to be placed, display coodinate units.
        - parentbbox: a parent box which will contain the bbox. In
            display coordinates.
        ")
                        (reparse-symbol indented_block_body) [31127 32341])
                    ("_find_best_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32371 32375])
                            ("width" variable nil (reparse-symbol function_parameters) [32377 32382])
                            ("height" variable nil (reparse-symbol function_parameters) [32384 32390])
                            ("renderer" variable nil (reparse-symbol function_parameters) [32392 32400])
                            ("consider" variable nil (reparse-symbol function_parameters) [32402 32410]))                          
                        :documentation "
        Determine the best location to place the legend.

        `consider` is a list of (x, y) pairs to consider as a potential
        lower-left corner of the legend. All are display coords.
        ")
                        (reparse-symbol indented_block_body) [32347 34052])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34070 34074])
                            ("event" variable nil (reparse-symbol function_parameters) [34076 34081]))                          )
                        (reparse-symbol indented_block_body) [34057 34132])
                    ("draggable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34151 34155])
                            ("state" variable nil (reparse-symbol function_parameters) [34157 34162])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [34169 34177])
                            ("update" variable nil (reparse-symbol function_parameters) [34185 34191]))                          
                        :documentation "
        Set the draggable state -- if state is

          * None : toggle the current state

          * True : turn draggable on

          * False : turn draggable off

        If draggable is on, you can drag the legend on the canvas with
        the mouse.  The DraggableLegend helper instance is returned if
        draggable is on.

        The update parameter control which parameter of the legend changes
        when dragged. If update is \"loc\", the *loc* paramter of the legend
        is changed. If \"bbox\", the *bbox_to_anchor* parameter is changed.
        ")
                        (reparse-symbol indented_block_body) [34137 35252]))                  
                :type "class")
                nil [3230 35252]))          
      :file "legend.py"
      :pointmax 35252
      :fsize 35251
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
matplotlib includes a framework for arbitrary geometric
transformations that is used determine the final position of all
elements drawn on the canvas.

Transforms are composed into trees of :class:`TransformNode` objects
whose actual value depends on their children.  When the contents of
children change, their parents are automatically invalidated.  The
next time an invalidated transform is accessed, it is recomputed to
reflect those changes.  This invalidation/caching approach prevents
unnecessary recomputations of transforms, and contributes to better
interactive performance.

For example, here is a graph of the transform tree used to plot data
to the graph:

.. image:: ../_static/transforms.png

The framework can be used for both affine and non-affine
transformations.  However, for speed, we want use the backend
renderers to perform affine transformations whenever possible.
Therefore, it is possible to perform just the affine or non-affine
part of a transformation on a set of data.  The affine is always
assumed to occur after the non-affine.  For any transform::

  full transform == non-affine part + affine part

The backends are not expected to handle non-affine transformations
themselves.
\"\"\"" code nil nil [1 1221])
            ("numpy" include nil nil [1223 1241])
            ("numpy" include nil nil [1242 1262])
            ("matplotlib._path" include nil nil [1263 1308])
            ("numpy.linalg" include nil nil [1309 1337])
            ("weakref" include nil nil [1339 1376])
            ("warnings" include nil nil [1377 1392])
            ("try" code nil nil [1393 1456])
            ("cbook" include nil nil [1457 1469])
            ("path" include nil nil [1470 1491])
            ("_path" include nil nil [1492 1560])
            ("DEBUG" variable nil nil [1562 1575])
            ("if" code nil nil [1576 1606])
            ("MaskedArray" variable nil nil [1607 1635])
            ("TransformNode" type
               (:documentation "
    :class:`TransformNode` is the base class for anything that
    participates in the transform tree and needs to invalidate its
    parents or be invalidated.  This includes classes that are not
    really transforms, such as bounding boxes, since some transforms
    depend on bounding boxes to compute their values.
    "
                :superclasses ("object")
                :members 
                  ( ("_gid" variable nil (reparse-symbol indented_block_body) [2006 2014])
                    ("INVALID_NON_AFFINE" variable nil (reparse-symbol indented_block_body) [2174 2196])
                    ("INVALID_AFFINE" variable nil (reparse-symbol indented_block_body) [2201 2223])
                    ("INVALID" code nil (reparse-symbol indented_block_body) [2228 2284])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [2394 2411])
                    ("is_bbox" variable nil (reparse-symbol indented_block_body) [2416 2433])
                    ("pass_through" variable nil (reparse-symbol indented_block_body) [2553 2573])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Creates a new :class:`TransformNode`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [2607 2668])
                            ("self" variable nil (reparse-symbol indented_block_body) [2838 2873])
                            ("self" variable nil (reparse-symbol indented_block_body) [2991 3008]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2592 2596]))                          
                        :documentation "
        Creates a new :class:`TransformNode`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2579 3009])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3027 3031])
                            ("args" variable nil (reparse-symbol function_parameters) [3033 3038]))                          )
                        (reparse-symbol indented_block_body) [3014 3184])
                    ("__deepcopy__" variable nil (reparse-symbol indented_block_body) [3188 3211])
                    ("invalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3232 3236]))                          
                        :documentation "
        Invalidate this :class:`TransformNode` and all of its
        ancestors.  Should be called any time the transform changes.
        ")
                        (reparse-symbol indented_block_body) [3217 4216])
                    ("set_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4238 4242])
                            ("children" variable nil (reparse-symbol function_parameters) [4244 4253]))                          
                        :documentation "
        Set the children of the transform, to let the invalidation
        system know which transforms can invalidate this transform.
        Should be called from the constructor of any transforms that
        depend on other transforms.
        ")
                        (reparse-symbol indented_block_body) [4221 4591])
                    ("if" code nil (reparse-symbol indented_block_body) [4596 4819])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4835 4839]))                          
                        :documentation "
        Returns a frozen copy of this transform node.  The frozen copy
        will not update when its children change.  Useful for storing
        a previously known state of a transform where
        ``copy.deepcopy()`` might normally be used.
        ")
                        (reparse-symbol indented_block_body) [4824 5133])
                    ("if" code nil (reparse-symbol indented_block_body) [5138 7015]))                  
                :type "class")
                nil [1637 7015])
            ("BboxBase" type
               (:documentation "
    This is the base class of all bounding boxes, and provides
    read-only access to its data.  A mutable bounding box is provided
    by the :class:`Bbox` class.

    The canonical representation is as two points, with no
    restrictions on their ordering.  Convenience properties are
    provided to get the left, bottom, right and top edges and width
    and height, but these are not stored explicitly.
    "
                :superclasses ("TransformNode")
                :members 
                  ( ("is_bbox" variable nil (reparse-symbol indented_block_body) [7478 7492])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [7497 7513])
                    ("if" code nil (reparse-symbol indented_block_body) [7633 8002])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8018 8022]))                          )
                        (reparse-symbol indented_block_body) [8007 8071])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [8075 8113])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8133 8137])
                            ("args" variable nil (reparse-symbol function_parameters) [8139 8144])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [8146 8154]))                          )
                        (reparse-symbol indented_block_body) [8119 8190])
                    ("is_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8207 8211]))                          
                        :documentation "
        Returns True if the :class:`Bbox` is the unit bounding box
        from (0, 0) to (1, 1).
        ")
                        (reparse-symbol indented_block_body) [8195 8405])
                    ("_get_x0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8422 8426]))                          )
                        (reparse-symbol indented_block_body) [8410 8468])
                    ("x0" variable nil (reparse-symbol indented_block_body) [8472 8735])
                    ("_get_y0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8753 8757]))                          )
                        (reparse-symbol indented_block_body) [8741 8799])
                    ("y0" variable nil (reparse-symbol indented_block_body) [8803 9066])
                    ("_get_x1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9084 9088]))                          )
                        (reparse-symbol indented_block_body) [9072 9130])
                    ("x1" variable nil (reparse-symbol indented_block_body) [9134 9401])
                    ("_get_y1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9419 9423]))                          )
                        (reparse-symbol indented_block_body) [9407 9465])
                    ("y1" variable nil (reparse-symbol indented_block_body) [9469 9736])
                    ("_get_p0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9754 9758]))                          )
                        (reparse-symbol indented_block_body) [9742 9797])
                    ("p0" variable nil (reparse-symbol indented_block_body) [9801 10046])
                    ("_get_p1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10064 10068]))                          )
                        (reparse-symbol indented_block_body) [10052 10107])
                    ("p1" variable nil (reparse-symbol indented_block_body) [10111 10355])
                    ("_get_xmin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10375 10379]))                          )
                        (reparse-symbol indented_block_body) [10361 10426])
                    ("xmin" variable nil (reparse-symbol indented_block_body) [10430 10546])
                    ("_get_ymin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10566 10570]))                          )
                        (reparse-symbol indented_block_body) [10552 10617])
                    ("ymin" variable nil (reparse-symbol indented_block_body) [10621 10739])
                    ("_get_xmax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10759 10763]))                          )
                        (reparse-symbol indented_block_body) [10745 10810])
                    ("xmax" variable nil (reparse-symbol indented_block_body) [10814 10931])
                    ("_get_ymax" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10951 10955]))                          )
                        (reparse-symbol indented_block_body) [10937 11002])
                    ("ymax" variable nil (reparse-symbol indented_block_body) [11006 11121])
                    ("_get_min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11140 11144]))                          )
                        (reparse-symbol indented_block_body) [11127 11239])
                    ("min" variable nil (reparse-symbol indented_block_body) [11243 11373])
                    ("_get_max" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11392 11396]))                          )
                        (reparse-symbol indented_block_body) [11379 11491])
                    ("max" variable nil (reparse-symbol indented_block_body) [11495 11615])
                    ("_get_intervalx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11640 11644]))                          )
                        (reparse-symbol indented_block_body) [11621 11686])
                    ("intervalx" variable nil (reparse-symbol indented_block_body) [11690 11914])
                    ("_get_intervaly" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11939 11943]))                          )
                        (reparse-symbol indented_block_body) [11920 11985])
                    ("intervaly" variable nil (reparse-symbol indented_block_body) [11989 12214])
                    ("_get_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12235 12239]))                          )
                        (reparse-symbol indented_block_body) [12220 12320])
                    ("width" variable nil (reparse-symbol indented_block_body) [12324 12478])
                    ("_get_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12500 12504]))                          )
                        (reparse-symbol indented_block_body) [12484 12585])
                    ("height" variable nil (reparse-symbol indented_block_body) [12589 12746])
                    ("_get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12766 12770]))                          )
                        (reparse-symbol indented_block_body) [12752 12845])
                    ("size" variable nil (reparse-symbol indented_block_body) [12849 13035])
                    ("_get_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13057 13061]))                          )
                        (reparse-symbol indented_block_body) [13041 13159])
                    ("bounds" variable nil (reparse-symbol indented_block_body) [13163 13305])
                    ("_get_extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13328 13332]))                          )
                        (reparse-symbol indented_block_body) [13311 13385])
                    ("extents" variable nil (reparse-symbol indented_block_body) [13389 13518])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13539 13543]))                          )
                        (reparse-symbol indented_block_body) [13524 13583])
                    ("containsx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13602 13606])
                            ("x" variable nil (reparse-symbol function_parameters) [13608 13609]))                          
                        :documentation "
        Returns True if *x* is between or equal to :attr:`x0` and
        :attr:`x1`.
        ")
                        (reparse-symbol indented_block_body) [13588 13865])
                    ("containsy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13884 13888])
                            ("y" variable nil (reparse-symbol function_parameters) [13890 13891]))                          
                        :documentation "
        Returns True if *y* is between or equal to :attr:`y0` and
        :attr:`y1`.
        ")
                        (reparse-symbol indented_block_body) [13870 14147])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14165 14169])
                            ("x" variable nil (reparse-symbol function_parameters) [14171 14172])
                            ("y" variable nil (reparse-symbol function_parameters) [14174 14175]))                          
                        :documentation "
        Returns *True* if (*x*, *y*) is a coordinate inside the
        bounding box or on its edge.
        ")
                        (reparse-symbol indented_block_body) [14152 14358])
                    ("overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14376 14380])
                            ("other" variable nil (reparse-symbol function_parameters) [14382 14387]))                          
                        :documentation "
        Returns True if this bounding box overlaps with the given
        bounding box *other*.
        ")
                        (reparse-symbol indented_block_body) [14363 14965])
                    ("fully_containsx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14990 14994])
                            ("x" variable nil (reparse-symbol function_parameters) [14996 14997]))                          
                        :documentation "
        Returns True if *x* is between but not equal to :attr:`x0` and
        :attr:`x1`.
        ")
                        (reparse-symbol indented_block_body) [14970 15254])
                    ("fully_containsy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15279 15283])
                            ("y" variable nil (reparse-symbol function_parameters) [15285 15286]))                          
                        :documentation "
        Returns True if *y* is between but not equal to :attr:`y0` and
        :attr:`y1`.
        ")
                        (reparse-symbol indented_block_body) [15259 15543])
                    ("fully_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15567 15571])
                            ("x" variable nil (reparse-symbol function_parameters) [15573 15574])
                            ("y" variable nil (reparse-symbol function_parameters) [15576 15577]))                          
                        :documentation "
        Returns True if (*x*, *y*) is a coordinate inside the bounding
        box, but not on its edge.
        ")
                        (reparse-symbol indented_block_body) [15548 15790])
                    ("fully_overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15814 15818])
                            ("other" variable nil (reparse-symbol function_parameters) [15820 15825]))                          
                        :documentation "
        Returns True if this bounding box overlaps with the given
        bounding box *other*, but not on its edge alone.
        ")
                        (reparse-symbol indented_block_body) [15795 16434])
                    ("transformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16455 16459])
                            ("transform" variable nil (reparse-symbol function_parameters) [16461 16470]))                          
                        :documentation "
        Return a new :class:`Bbox` object, statically transformed by
        the given transform.
        ")
                        (reparse-symbol indented_block_body) [16439 16655])
                    ("inverse_transformed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16684 16688])
                            ("transform" variable nil (reparse-symbol function_parameters) [16690 16699]))                          
                        :documentation "
        Return a new :class:`Bbox` object, statically transformed by
        the inverse of the given transform.
        ")
                        (reparse-symbol indented_block_body) [16660 16910])
                    ("coefs" variable nil (reparse-symbol indented_block_body) [16915 17176])
                    ("anchored" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17194 17198])
                            ("c" variable nil (reparse-symbol function_parameters) [17200 17201])
                            ("container" variable nil (reparse-symbol function_parameters) [17203 17212]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, shifted to position *c*
        within a container.

        *c*: may be either:

          * a sequence (*cx*, *cy*) where *cx* and *cy* range from 0
            to 1, where 0 is left or bottom and 1 is right or top

          * a string:
            - 'C' for centered
            - 'S' for bottom-center
            - 'SE' for bottom-left
            - 'E' for left
            - etc.

        Optional argument *container* is the box within which the
        :class:`Bbox` is positioned; it defaults to the initial
        :class:`Bbox`.
        ")
                        (reparse-symbol indented_block_body) [17181 18187])
                    ("shrunk" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18203 18207])
                            ("mx" variable nil (reparse-symbol function_parameters) [18209 18211])
                            ("my" variable nil (reparse-symbol function_parameters) [18213 18215]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, shrunk by the factor *mx*
        in the *x* direction and the factor *my* in the *y* direction.
        The lower left corner of the box remains unchanged.  Normally
        *mx* and *my* will be less than 1, but this is not enforced.
        ")
                        (reparse-symbol indented_block_body) [18192 18642])
                    ("shrunk_to_aspect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18668 18672])
                            ("box_aspect" variable nil (reparse-symbol function_parameters) [18674 18684])
                            ("container" variable nil (reparse-symbol function_parameters) [18686 18695])
                            ("fig_aspect" variable nil (reparse-symbol function_parameters) [18704 18714]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, shrunk so that it is as
        large as it can be while having the desired aspect ratio,
        *box_aspect*.  If the box coordinates are relative---that
        is, fractions of a larger box such as a figure---then the
        physical aspect ratio of that figure is specified with
        *fig_aspect*, so that *box_aspect* can also be given as a
        ratio of the absolute dimensions, not the relative dimensions.
        ")
                        (reparse-symbol indented_block_body) [18647 19586])
                    ("splitx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19602 19606])
                            ("args" variable nil (reparse-symbol function_parameters) [19608 19613]))                          
                        :documentation "
        e.g., ``bbox.splitx(f1, f2, ...)``

        Returns a list of new :class:`Bbox` objects formed by
        splitting the original one with vertical lines at fractional
        positions *f1*, *f2*, ...
        ")
                        (reparse-symbol indented_block_body) [19591 20109])
                    ("splity" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20125 20129])
                            ("args" variable nil (reparse-symbol function_parameters) [20131 20136]))                          
                        :documentation "
        e.g., ``bbox.splitx(f1, f2, ...)``

        Returns a list of new :class:`Bbox` objects formed by
        splitting the original one with horizontal lines at fractional
        positions *f1*, *f2*, ...
        ")
                        (reparse-symbol indented_block_body) [20114 20634])
                    ("count_contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20658 20662])
                            ("vertices" variable nil (reparse-symbol function_parameters) [20664 20672]))                          
                        :documentation "
        Count the number of vertices contained in the :class:`Bbox`.

        *vertices* is a Nx2 Numpy array.
        ")
                        (reparse-symbol indented_block_body) [20639 21205])
                    ("count_overlaps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21229 21233])
                            ("bboxes" variable nil (reparse-symbol function_parameters) [21235 21241]))                          
                        :documentation "
        Count the number of bounding boxes that overlap this one.

        bboxes is a sequence of :class:`BboxBase` objects
        ")
                        (reparse-symbol indented_block_body) [21210 21452])
                    ("expanded" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21470 21474])
                            ("sw" variable nil (reparse-symbol function_parameters) [21476 21478])
                            ("sh" variable nil (reparse-symbol function_parameters) [21480 21482]))                          
                        :documentation "
        Return a new :class:`Bbox` which is this :class:`Bbox`
        expanded around its center by the given factors *sw* and
        *sh*.
        ")
                        (reparse-symbol indented_block_body) [21457 21896])
                    ("padded" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21912 21916])
                            ("p" variable nil (reparse-symbol function_parameters) [21918 21919]))                          
                        :documentation "
        Return a new :class:`Bbox` that is padded on all four sides by
        the given value.
        ")
                        (reparse-symbol indented_block_body) [21901 22126])
                    ("translated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22146 22150])
                            ("tx" variable nil (reparse-symbol function_parameters) [22152 22154])
                            ("ty" variable nil (reparse-symbol function_parameters) [22156 22158]))                          
                        :documentation "
        Return a copy of the :class:`Bbox`, statically translated by
        *tx* and *ty*.
        ")
                        (reparse-symbol indented_block_body) [22131 22322])
                    ("corners" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22339 22343]))                          
                        :documentation "
        Return an array of points which are the four corners of this
        rectangle.  For example, if this :class:`Bbox` is defined by
        the points (*a*, *b*) and (*c*, *d*), :meth:`corners` returns
        (*a*, *b*), (*a*, *d*), (*c*, *b*) and (*c*, *d*).
        ")
                        (reparse-symbol indented_block_body) [22327 22744])
                    ("rotated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22761 22765])
                            ("radians" variable nil (reparse-symbol function_parameters) [22767 22774]))                          
                        :documentation "
        Return a new bounding box that bounds a rotated version of
        this bounding box by the given radians.  The new bounding box
        is still aligned with the axes, of course.
        ")
                        (reparse-symbol indented_block_body) [22749 23204])
                    ("union" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("bboxes" variable nil (reparse-symbol function_parameters) [23237 23243]))                          
                        :documentation "
        Return a :class:`Bbox` that contains all of the given bboxes.
        ")
                        (reparse-symbol indented_block_body) [23209 23836]))                  
                :type "class")
                nil [7017 23836])
            ("Bbox" type
               (:documentation "
    A mutable bounding box.
    "
                :superclasses ("BboxBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *points*: a 2x2 numpy array of the form [[x0, y0], [x1, y1]]

        If you need to create a :class:`Bbox` object from another form
        of data, consider the static methods :meth:`unit`,
        :meth:`from_bounds` and :meth:`from_extents`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [23945 24214])
                            ("BboxBase" code nil (reparse-symbol indented_block_body) [24223 24246])
                            ("self" variable nil (reparse-symbol indented_block_body) [24255 24299])
                            ("self" variable nil (reparse-symbol indented_block_body) [24308 24355])
                            ("self" variable nil (reparse-symbol indented_block_body) [24364 24383])
                            ("self" variable nil (reparse-symbol indented_block_body) [24563 24602]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23922 23926])
                            ("points" variable nil (reparse-symbol function_parameters) [23928 23934]))                          
                        :documentation "
        *points*: a 2x2 numpy array of the form [[x0, y0], [x1, y1]]

        If you need to create a :class:`Bbox` object from another form
        of data, consider the static methods :meth:`unit`,
        :meth:`from_bounds` and :meth:`from_extents`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23909 24603])
                    ("if" code nil (reparse-symbol indented_block_body) [24607 24861])
                    ("_unit_values" variable nil (reparse-symbol indented_block_body) [24866 24926])
                    ("unit" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        (staticmethod) Create a new unit :class:`Bbox` from (0, 0) to
        (1, 1).
        ")
                        (reparse-symbol indented_block_body) [24931 25117])
                    ("from_bounds" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("x0" variable nil (reparse-symbol function_parameters) [25156 25158])
                            ("y0" variable nil (reparse-symbol function_parameters) [25160 25162])
                            ("width" variable nil (reparse-symbol function_parameters) [25164 25169])
                            ("height" variable nil (reparse-symbol function_parameters) [25171 25177]))                          
                        :documentation "
        (staticmethod) Create a new :class:`Bbox` from *x0*, *y0*,
        *width* and *height*.

        *width* and *height* may be negative.
        ")
                        (reparse-symbol indented_block_body) [25122 25414])
                    ("from_extents" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [25454 25459]))                          
                        :documentation "
        (staticmethod) Create a new Bbox from *left*, *bottom*,
        *right* and *top*.

        The *y*-axis increases upwards.
        ")
                        (reparse-symbol indented_block_body) [25419 25709])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25727 25731]))                          )
                        (reparse-symbol indented_block_body) [25714 25781])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [25785 25803])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25820 25824])
                            ("value" variable nil (reparse-symbol function_parameters) [25826 25831]))                          
                        :documentation "
        Set whether the existing bounds of the box should be ignored
        by subsequent calls to :meth:`update_from_data` or
        :meth:`update_from_data_xy`.

        *value*:

           - When True, subsequent calls to :meth:`update_from_data`
             will ignore the existing bounds of the :class:`Bbox`.

           - When False, subsequent calls to :meth:`update_from_data`
             will include the existing bounds of the :class:`Bbox`.
        ")
                        (reparse-symbol indented_block_body) [25809 26346])
                    ("update_from_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26372 26376])
                            ("x" variable nil (reparse-symbol function_parameters) [26378 26379])
                            ("y" variable nil (reparse-symbol function_parameters) [26381 26382])
                            ("ignore" variable nil (reparse-symbol function_parameters) [26384 26390]))                          
                        :documentation "
        Update the bounds of the :class:`Bbox` based on the passed in
        data.  After updating, the bounds will have positive *width*
        and *height*; *x0* and *y0* will be the minimal values.

        *x*: a numpy array of *x*-values

        *y*: a numpy array of *y*-values

        *ignore*:
           - when True, ignore the existing bounds of the :class:`Bbox`.
           - when False, include the existing bounds of the :class:`Bbox`.
           - when None, use the last value passed to :meth:`ignore`.
        ")
                        (reparse-symbol indented_block_body) [26351 27191])
                    ("update_from_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27217 27221])
                            ("path" variable nil (reparse-symbol function_parameters) [27223 27227])
                            ("ignore" variable nil (reparse-symbol function_parameters) [27229 27235])
                            ("updatex" variable nil (reparse-symbol function_parameters) [27242 27249])
                            ("updatey" variable nil (reparse-symbol function_parameters) [27256 27263]))                          
                        :documentation "
        Update the bounds of the :class:`Bbox` based on the passed in
        data.  After updating, the bounds will have positive *width*
        and *height*; *x0* and *y0* will be the minimal values.

        *path*: a :class:`~matplotlib.path.Path` instance

        *ignore*:
           - when True, ignore the existing bounds of the :class:`Bbox`.
           - when False, include the existing bounds of the :class:`Bbox`.
           - when None, use the last value passed to :meth:`ignore`.

        *updatex*: when True, update the x values

        *updatey*: when True, update the y values
        ")
                        (reparse-symbol indented_block_body) [27196 28411])
                    ("update_from_data_xy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28441 28445])
                            ("xy" variable nil (reparse-symbol function_parameters) [28447 28449])
                            ("ignore" variable nil (reparse-symbol function_parameters) [28451 28457])
                            ("updatex" variable nil (reparse-symbol function_parameters) [28464 28471])
                            ("updatey" variable nil (reparse-symbol function_parameters) [28478 28485]))                          
                        :documentation "
        Update the bounds of the :class:`Bbox` based on the passed in
        data.  After updating, the bounds will have positive *width*
        and *height*; *x0* and *y0* will be the minimal values.

        *xy*: a numpy array of 2D points

        *ignore*:
           - when True, ignore the existing bounds of the :class:`Bbox`.
           - when False, include the existing bounds of the :class:`Bbox`.
           - when None, use the last value passed to :meth:`ignore`.

        *updatex*: when True, update the x values

        *updatey*: when True, update the y values
        ")
                        (reparse-symbol indented_block_body) [28417 29290])
                    ("_set_x0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29307 29311])
                            ("val" variable nil (reparse-symbol function_parameters) [29313 29316]))                          )
                        (reparse-symbol indented_block_body) [29295 29378])
                    ("x0" variable nil (reparse-symbol indented_block_body) [29382 29422])
                    ("_set_y0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29440 29444])
                            ("val" variable nil (reparse-symbol function_parameters) [29446 29449]))                          )
                        (reparse-symbol indented_block_body) [29428 29511])
                    ("y0" variable nil (reparse-symbol indented_block_body) [29515 29555])
                    ("_set_x1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29573 29577])
                            ("val" variable nil (reparse-symbol function_parameters) [29579 29582]))                          )
                        (reparse-symbol indented_block_body) [29561 29644])
                    ("x1" variable nil (reparse-symbol indented_block_body) [29648 29688])
                    ("_set_y1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29706 29710])
                            ("val" variable nil (reparse-symbol function_parameters) [29712 29715]))                          )
                        (reparse-symbol indented_block_body) [29694 29777])
                    ("y1" variable nil (reparse-symbol indented_block_body) [29781 29821])
                    ("_set_p0" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29839 29843])
                            ("val" variable nil (reparse-symbol function_parameters) [29845 29848]))                          )
                        (reparse-symbol indented_block_body) [29827 29907])
                    ("p0" variable nil (reparse-symbol indented_block_body) [29911 29951])
                    ("_set_p1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29969 29973])
                            ("val" variable nil (reparse-symbol function_parameters) [29975 29978]))                          )
                        (reparse-symbol indented_block_body) [29957 30037])
                    ("p1" variable nil (reparse-symbol indented_block_body) [30041 30081])
                    ("_set_intervalx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30106 30110])
                            ("interval" variable nil (reparse-symbol function_parameters) [30112 30120]))                          )
                        (reparse-symbol indented_block_body) [30087 30187])
                    ("intervalx" variable nil (reparse-symbol indented_block_body) [30191 30252])
                    ("_set_intervaly" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30277 30281])
                            ("interval" variable nil (reparse-symbol function_parameters) [30283 30291]))                          )
                        (reparse-symbol indented_block_body) [30258 30358])
                    ("intervaly" variable nil (reparse-symbol indented_block_body) [30362 30423])
                    ("_set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30445 30449])
                            ("bounds" variable nil (reparse-symbol function_parameters) [30451 30457]))                          )
                        (reparse-symbol indented_block_body) [30429 30654])
                    ("bounds" variable nil (reparse-symbol indented_block_body) [30658 30710])
                    ("_get_minpos" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30732 30736]))                          )
                        (reparse-symbol indented_block_body) [30716 30767])
                    ("minpos" variable nil (reparse-symbol indented_block_body) [30771 30801])
                    ("_get_minposx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30824 30828]))                          )
                        (reparse-symbol indented_block_body) [30807 30862])
                    ("minposx" variable nil (reparse-symbol indented_block_body) [30866 30898])
                    ("_get_minposy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30921 30925]))                          )
                        (reparse-symbol indented_block_body) [30904 30959])
                    ("minposy" variable nil (reparse-symbol indented_block_body) [30963 30995])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31016 31020]))                          
                        :documentation "
        Get the points of the bounding box directly as a numpy array
        of the form: [[x0, y0], [x1, y1]].
        ")
                        (reparse-symbol indented_block_body) [31001 31213])
                    ("set_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31233 31237])
                            ("points" variable nil (reparse-symbol function_parameters) [31239 31245]))                          
                        :documentation "
        Set the points of the bounding box directly from a numpy array
        of the form: [[x0, y0], [x1, y1]].  No error checking is
        performed, as this method is mainly for internal use.
        ")
                        (reparse-symbol indented_block_body) [31218 31577])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31590 31594])
                            ("other" variable nil (reparse-symbol function_parameters) [31596 31601]))                          
                        :documentation "
        Set this bounding box from the \"frozen\" bounds of another
        :class:`Bbox`.
        ")
                        (reparse-symbol indented_block_body) [31582 31848])
                    ("mutated" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31865 31869]))                          )
                        (reparse-symbol indented_block_body) [31853 31979])
                    ("mutatedx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31997 32001]))                          )
                        (reparse-symbol indented_block_body) [31984 32186])
                    ("mutatedy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32203 32207]))                          )
                        (reparse-symbol indented_block_body) [32190 32392]))                  
                :type "class")
                nil [23838 32392])
            ("TransformedBbox" type
               (:documentation "
    A :class:`Bbox` that is automatically transformed by a given
    transform.  When either the child bounding box or transform
    changes, the bounds of this bbox will update accordingly.
    "
                :superclasses ("BboxBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *bbox*: a child :class:`Bbox`

        *transform*: a 2D :class:`Transform`
        \"\"\"" code nil (reparse-symbol indented_block_body) [32685 32784])
                            ("assert" code nil (reparse-symbol indented_block_body) [32793 32812])
                            ("assert" code nil (reparse-symbol indented_block_body) [32821 32860])
                            ("assert" code nil (reparse-symbol indented_block_body) [32869 32901])
                            ("assert" code nil (reparse-symbol indented_block_body) [32910 32943])
                            ("BboxBase" code nil (reparse-symbol indented_block_body) [32953 32976])
                            ("self" variable nil (reparse-symbol indented_block_body) [32985 33002])
                            ("self" variable nil (reparse-symbol indented_block_body) [33011 33038])
                            ("self" code nil (reparse-symbol indented_block_body) [33047 33081])
                            ("self" variable nil (reparse-symbol indented_block_body) [33090 33109]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32653 32657])
                            ("bbox" variable nil (reparse-symbol function_parameters) [32659 32663])
                            ("transform" variable nil (reparse-symbol function_parameters) [32665 32674]))                          
                        :documentation "
        *bbox*: a child :class:`Bbox`

        *transform*: a 2D :class:`Transform`
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32640 33110])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33128 33132]))                          )
                        (reparse-symbol indented_block_body) [33115 33208])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [33212 33230])
                    ("get_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33251 33255]))                          )
                        (reparse-symbol indented_block_body) [33236 33495])
                    ("get_points" variable nil (reparse-symbol indented_block_body) [33499 33543])
                    ("if" code nil (reparse-symbol indented_block_body) [33549 33720]))                  
                :type "class")
                nil [32396 33720])
            ("Transform" type
               (:documentation "
    The base class of all :class:`TransformNode` instances that
    actually perform a transformation.

    All non-affine transformations should be subclasses of this class.
    New affine transformations should be subclasses of
    :class:`Affine2D`.

    Subclasses of this class should override the following members (at
    minimum):

      - :attr:`input_dims`
      - :attr:`output_dims`
      - :meth:`transform`
      - :attr:`is_separable`
      - :attr:`has_inverse`
      - :meth:`inverted` (if :meth:`has_inverse` can return True)

    If the transform needs to do something non-standard with
    :class:`matplotlib.path.Path` objects, such as adding curves
    where there were once line segments, it should override:

      - :meth:`transform_path`
    "
                :superclasses ("TransformNode")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [34669 34686])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [34691 34709])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [34782 34801])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [34878 34898])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35030 35034])
                            ("other" variable nil (reparse-symbol function_parameters) [35036 35041]))                          
                        :documentation "
        Composes two transforms together such that *self* is followed
        by *other*.
        ")
                        (reparse-symbol indented_block_body) [35018 35358])
                    ("__radd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35376 35380])
                            ("other" variable nil (reparse-symbol function_parameters) [35382 35387]))                          
                        :documentation "
        Composes two transforms together such that *self* is followed
        by *other*.
        ")
                        (reparse-symbol indented_block_body) [35363 35704])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35723 35727])
                            ("args" variable nil (reparse-symbol function_parameters) [35729 35734])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [35736 35744]))                          
                        :documentation "
        Used by C/C++ -based backends to get at the array matrix data.
        ")
                        (reparse-symbol indented_block_body) [35709 35876])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35895 35899])
                            ("values" variable nil (reparse-symbol function_parameters) [35901 35907]))                          
                        :documentation "
        Performs the transformation on the given array of values.

        Accepts a numpy array of shape (N x :attr:`input_dims`) and
        returns a numpy array of shape (N x :attr:`output_dims`).
        ")
                        (reparse-symbol indented_block_body) [35881 36171])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36197 36201])
                            ("values" variable nil (reparse-symbol function_parameters) [36203 36209]))                          
                        :documentation "
        Performs only the affine part of this transformation on the
        given array of values.

        ``transform(values)`` is always equivalent to
        ``transform_affine(transform_non_affine(values))``.

        In non-affine transformations, this is generally a no-op.  In
        affine transformations, this is equivalent to
        ``transform(values)``.

        Accepts a numpy array of shape (N x :attr:`input_dims`) and
        returns a numpy array of shape (N x :attr:`output_dims`).
        ")
                        (reparse-symbol indented_block_body) [36176 36763])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36793 36797])
                            ("values" variable nil (reparse-symbol function_parameters) [36799 36805]))                          
                        :documentation "
        Performs only the non-affine part of the transformation.

        ``transform(values)`` is always equivalent to
        ``transform_affine(transform_non_affine(values))``.

        In non-affine transformations, this is generally equivalent to
        ``transform(values)``.  In affine transformations, this is
        always a no-op.

        Accepts a numpy array of shape (N x :attr:`input_dims`) and
        returns a numpy array of shape (N x :attr:`output_dims`).
        ")
                        (reparse-symbol indented_block_body) [36768 37348])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37368 37372]))                          
                        :documentation "
        Get the affine part of this transform.
        ")
                        (reparse-symbol indented_block_body) [37353 37481])
                    ("transform_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37506 37510])
                            ("point" variable nil (reparse-symbol function_parameters) [37512 37517]))                          
                        :documentation "
        A convenience function that returns the transformed copy of a
        single point.

        The point is given as a sequence of length :attr:`input_dims`.
        The transformed point is returned as a sequence of length
        :attr:`output_dims`.
        ")
                        (reparse-symbol indented_block_body) [37486 37902])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37926 37930])
                            ("path" variable nil (reparse-symbol function_parameters) [37932 37936]))                          
                        :documentation "
        Returns a transformed copy of path.

        *path*: a :class:`~matplotlib.path.Path` instance.

        In some cases, this transform may insert curves into the path
        that began as line segments.
        ")
                        (reparse-symbol indented_block_body) [37907 38285])
                    ("transform_path_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38316 38320])
                            ("path" variable nil (reparse-symbol function_parameters) [38322 38326]))                          
                        :documentation "
        Returns a copy of path, transformed only by the affine part of
        this transform.

        *path*: a :class:`~matplotlib.path.Path` instance.

        ``transform_path(path)`` is equivalent to
        ``transform_path_affine(transform_path_non_affine(values))``.
        ")
                        (reparse-symbol indented_block_body) [38290 38649])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38684 38688])
                            ("path" variable nil (reparse-symbol function_parameters) [38690 38694]))                          
                        :documentation "
        Returns a copy of path, transformed only by the non-affine
        part of this transform.

        *path*: a :class:`~matplotlib.path.Path` instance.

        ``transform_path(path)`` is equivalent to
        ``transform_path_affine(transform_path_non_affine(values))``.
        ")
                        (reparse-symbol indented_block_body) [38654 39122])
                    ("transform_angles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39148 39152])
                            ("angles" variable nil (reparse-symbol function_parameters) [39154 39160])
                            ("pts" variable nil (reparse-symbol function_parameters) [39162 39165])
                            ("radians" variable nil (reparse-symbol function_parameters) [39167 39174])
                            ("pushoff" variable nil (reparse-symbol function_parameters) [39182 39189]))                          
                        :documentation "
        Performs transformation on a set of angles anchored at
        specific locations.

        The *angles* must be a column vector (i.e., numpy array).

        The *pts* must be a two-column numpy array of x,y positions
        (angle transforms currently only work in 2D).  This array must
        have the same number of rows as *angles*.

        *radians* indicates whether or not input angles are given in
         radians (True) or degrees (False; the default).

        *pushoff* is the distance to move away from *pts* for
         determining transformed angles (see discussion of method
         below).

        The transformed angles are returned in an array with the same
        size as *angles*.

        The generic version of this method uses a very generic
        algorithm that transforms *pts*, as well as locations very
        close to *pts*, to find the angle in the transformed system.
        ")
                        (reparse-symbol indented_block_body) [39127 41086])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41104 41108]))                          
                        :documentation "
        Return the corresponding inverse transformation.

        The return value of this method should be treated as
        temporary.  An update to *self* does not cause a corresponding
        update to its inverted copy.

        ``x === self.inverted().transform(self.transform(x))``
        ")
                        (reparse-symbol indented_block_body) [41091 41462]))                  
                :type "class")
                nil [33721 41462])
            ("TransformWrapper" type
               (:documentation "
    A helper class that holds a single child transform and acts
    equivalently to it.

    This is useful if a node of the transform tree must be replaced at
    run time with a transform of a different type.  This class allows
    that replacement to correctly trigger invalidation.

    Note that :class:`TransformWrapper` instances must have the same
    input and output dimensions during their entire lifetime, so the
    child transform may only be replaced with another child transform
    of the same dimensions.
    "
                :superclasses ("Transform")
                :members 
                  ( ("pass_through" variable nil (reparse-symbol indented_block_body) [42042 42061])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [42066 42083])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *child*: A class:`Transform` instance.  This child may later
        be replaced with :meth:`set`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [42124 42246])
                            ("assert" code nil (reparse-symbol indented_block_body) [42255 42290])
                            ("Transform" code nil (reparse-symbol indented_block_body) [42300 42324])
                            ("self" variable nil (reparse-symbol indented_block_body) [42333 42367])
                            ("self" variable nil (reparse-symbol indented_block_body) [42376 42412])
                            ("self" code nil (reparse-symbol indented_block_body) [42421 42437])
                            ("self" variable nil (reparse-symbol indented_block_body) [42446 42463]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42102 42106])
                            ("child" variable nil (reparse-symbol function_parameters) [42108 42113]))                          
                        :documentation "
        *child*: A class:`Transform` instance.  This child may later
        be replaced with :meth:`set`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42089 42464])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42482 42486]))                          )
                        (reparse-symbol indented_block_body) [42469 42541])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [42545 42563])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42580 42584]))                          )
                        (reparse-symbol indented_block_body) [42569 42623])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [42627 42668])
                    ("_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42683 42687])
                            ("child" variable nil (reparse-symbol function_parameters) [42689 42694]))                          )
                        (reparse-symbol indented_block_body) [42674 43266])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43279 43283])
                            ("child" variable nil (reparse-symbol function_parameters) [43285 43290]))                          
                        :documentation "
        Replace the current child of this transform with another one.

        The new child must have the same number of input and output
        dimensions as the current child.
        ")
                        (reparse-symbol indented_block_body) [43271 43706])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43733 43737]))                          )
                        (reparse-symbol indented_block_body) [43711 43780])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [43784 43826])
                    ("_get_has_inverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43853 43857]))                          )
                        (reparse-symbol indented_block_body) [43832 43899])
                    ("has_inverse" variable nil (reparse-symbol indented_block_body) [43903 43943]))                  
                :type "class")
                nil [41464 43944])
            ("AffineBase" type
               (:documentation "
    The base class of all affine transformations of any number of
    dimensions.
    "
                :superclasses ("Transform")
                :members 
                  ( ("is_affine" variable nil (reparse-symbol indented_block_body) [44077 44093])
                    ("__init__" function
                       (:suite 
                          ( ("Transform" code nil (reparse-symbol indented_block_body) [44127 44151])
                            ("self" variable nil (reparse-symbol indented_block_body) [44160 44181]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44112 44116]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44099 44182])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44201 44205])
                            ("args" variable nil (reparse-symbol function_parameters) [44207 44212])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44214 44222]))                          )
                        (reparse-symbol indented_block_body) [44187 44258])
                    ("_concat" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("a" variable nil (reparse-symbol function_parameters) [44293 44294])
                            ("b" variable nil (reparse-symbol function_parameters) [44296 44297]))                          
                        :documentation "
        Concatenates two transformation matrices (represented as numpy
        arrays) together.
        ")
                        (reparse-symbol indented_block_body) [44263 44449])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44469 44473]))                          
                        :documentation "
        Get the underlying transformation matrix as a numpy array.
        ")
                        (reparse-symbol indented_block_body) [44454 44603])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44633 44637])
                            ("points" variable nil (reparse-symbol function_parameters) [44639 44645]))                          )
                        (reparse-symbol indented_block_body) [44608 44670])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [44674 44743])
                    ("transform_path_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44775 44779])
                            ("path" variable nil (reparse-symbol function_parameters) [44781 44785]))                          )
                        (reparse-symbol indented_block_body) [44749 44829])
                    ("transform_path_affine" variable nil (reparse-symbol indented_block_body) [44833 44904])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44940 44944])
                            ("path" variable nil (reparse-symbol function_parameters) [44946 44950]))                          )
                        (reparse-symbol indented_block_body) [44910 44973])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [44977 45056])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45077 45081]))                          )
                        (reparse-symbol indented_block_body) [45062 45104])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [45108 45157]))                  
                :type "class")
                nil [43946 45158])
            ("Affine2DBase" type
               (:documentation "
    The base class of all 2D affine transformations.

    2D affine transformations are performed using a 3x3 numpy array::

        a c e
        b d f
        0 0 1

    This class provides the read-only interface.  For a mutable 2D
    affine transformation, use :class:`Affine2D`.

    Subclasses of this class will generally only need to override a
    constructor and :meth:`get_matrix` that generates a custom 3x3 matrix.
    "
                :superclasses ("AffineBase")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [45642 45656])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [45661 45676])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45693 45697]))                          )
                        (reparse-symbol indented_block_body) [45682 45750])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [45754 45796])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45824 45828]))                          )
                        (reparse-symbol indented_block_body) [45802 45916])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [45920 45962])
                    ("__array__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45982 45986])
                            ("args" variable nil (reparse-symbol function_parameters) [45988 45993])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [45995 46003]))                          )
                        (reparse-symbol indented_block_body) [45968 46039])
                    ("to_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46058 46062]))                          
                        :documentation "
        Return the values of the matrix as a sequence (a,b,c,d,e,f)
        ")
                        (reparse-symbol indented_block_body) [46044 46244])
                    ("matrix_from_values" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("a" variable nil (reparse-symbol function_parameters) [46290 46291])
                            ("b" variable nil (reparse-symbol function_parameters) [46293 46294])
                            ("c" variable nil (reparse-symbol function_parameters) [46296 46297])
                            ("d" variable nil (reparse-symbol function_parameters) [46299 46300])
                            ("e" variable nil (reparse-symbol function_parameters) [46302 46303])
                            ("f" variable nil (reparse-symbol function_parameters) [46305 46306]))                          
                        :documentation "
        (staticmethod) Create a new transformation matrix as a 3x3
        numpy array of the form::

          a c e
          b d f
          0 0 1
        ")
                        (reparse-symbol indented_block_body) [46249 46559])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46578 46582])
                            ("points" variable nil (reparse-symbol function_parameters) [46584 46590]))                          )
                        (reparse-symbol indented_block_body) [46564 46839])
                    ("transform_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46864 46868])
                            ("point" variable nil (reparse-symbol function_parameters) [46870 46875]))                          )
                        (reparse-symbol indented_block_body) [46844 46954])
                    ("transform_point" variable nil (reparse-symbol indented_block_body) [46958 47018])
                    ("if" code nil (reparse-symbol indented_block_body) [47024 47642])
                    ("transform" variable nil (reparse-symbol indented_block_body) [47646 47694])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [47700 47728])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [47733 47795])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47814 47818]))                          )
                        (reparse-symbol indented_block_body) [47801 48017])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [48021 48067]))                  
                :type "class")
                nil [45160 48068])
            ("Affine2D" type
               (:documentation "
    A mutable 2D affine transformation.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize an Affine transform from a 3x3 numpy float array::

          a c e
          b d f
          0 0 1

        If *matrix* is None, initialize with the identity transform.
        \"\"\"" code nil (reparse-symbol indented_block_body) [48204 48408])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [48417 48444])
                            ("if" code nil (reparse-symbol indented_block_body) [48453 48621])
                            ("self" variable nil (reparse-symbol indented_block_body) [48629 48647])
                            ("self" variable nil (reparse-symbol indented_block_body) [48656 48673]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48174 48178])
                            ("matrix" variable nil (reparse-symbol function_parameters) [48180 48186]))                          
                        :documentation "
        Initialize an Affine transform from a 3x3 numpy float array::

          a c e
          b d f
          0 0 1

        If *matrix* is None, initialize with the identity transform.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [48161 48674])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48692 48696]))                          )
                        (reparse-symbol indented_block_body) [48679 48747])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [48751 48769])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48787 48791])
                            ("other" variable nil (reparse-symbol function_parameters) [48793 48798]))                          )
                        (reparse-symbol indented_block_body) [48775 48946])
                    ("from_values" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("a" variable nil (reparse-symbol function_parameters) [48985 48986])
                            ("b" variable nil (reparse-symbol function_parameters) [48988 48989])
                            ("c" variable nil (reparse-symbol function_parameters) [48991 48992])
                            ("d" variable nil (reparse-symbol function_parameters) [48994 48995])
                            ("e" variable nil (reparse-symbol function_parameters) [48997 48998])
                            ("f" variable nil (reparse-symbol function_parameters) [49000 49001]))                          
                        :documentation "
        (staticmethod) Create a new Affine2D instance from the given
        values::

          a c e
          b d f
          0 0 1

        ")
                        (reparse-symbol indented_block_body) [48951 49285])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49305 49309]))                          
                        :documentation "
        Get the underlying transformation matrix as a 3x3 numpy array::

          a c e
          b d f
          0 0 1

        ")
                        (reparse-symbol indented_block_body) [49290 49509])
                    ("set_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49529 49533])
                            ("mtx" variable nil (reparse-symbol function_parameters) [49535 49538]))                          
                        :documentation "
        Set the underlying transformation matrix from a 3x3 numpy array::

          a c e
          b d f
          0 0 1

        ")
                        (reparse-symbol indented_block_body) [49514 49739])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49752 49756])
                            ("other" variable nil (reparse-symbol function_parameters) [49758 49763]))                          
                        :documentation "
        Set this transformation from the frozen copy of another
        :class:`Affine2DBase` object.
        ")
                        (reparse-symbol indented_block_body) [49744 50004])
                    ("identity" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        (staticmethod) Return a new :class:`Affine2D` object that is
        the identity transform.

        Unless this transform will be mutated later on, consider using
        the faster :class:`IdentityTransform` class instead.
        ")
                        (reparse-symbol indented_block_body) [50009 50341])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50356 50360]))                          
                        :documentation "
        Reset the underlying matrix to the identity transform.
        ")
                        (reparse-symbol indented_block_body) [50346 50531])
                    ("rotate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50547 50551])
                            ("theta" variable nil (reparse-symbol function_parameters) [50553 50558]))                          
                        :documentation "
        Add a rotation (in radians) to this transform in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [50536 51079])
                    ("rotate_deg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51099 51103])
                            ("degrees" variable nil (reparse-symbol function_parameters) [51105 51112]))                          
                        :documentation "
        Add a rotation (in degrees) to this transform in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [51084 51420])
                    ("rotate_around" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51443 51447])
                            ("x" variable nil (reparse-symbol function_parameters) [51449 51450])
                            ("y" variable nil (reparse-symbol function_parameters) [51452 51453])
                            ("theta" variable nil (reparse-symbol function_parameters) [51455 51460]))                          
                        :documentation "
        Add a rotation (in radians) around the point (x, y) in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [51425 51795])
                    ("rotate_deg_around" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51822 51826])
                            ("x" variable nil (reparse-symbol function_parameters) [51828 51829])
                            ("y" variable nil (reparse-symbol function_parameters) [51831 51832])
                            ("degrees" variable nil (reparse-symbol function_parameters) [51834 51841]))                          
                        :documentation "
        Add a rotation (in degrees) around the point (x, y) in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [51800 52182])
                    ("translate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52201 52205])
                            ("tx" variable nil (reparse-symbol function_parameters) [52207 52209])
                            ("ty" variable nil (reparse-symbol function_parameters) [52211 52213]))                          
                        :documentation "
        Adds a translation in place.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [52187 52666])
                    ("scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52681 52685])
                            ("sx" variable nil (reparse-symbol function_parameters) [52687 52689])
                            ("sy" variable nil (reparse-symbol function_parameters) [52691 52693]))                          
                        :documentation "
        Adds a scale in place.

        If *sy* is None, the same scale is applied in both the *x*- and
        *y*-directions.

        Returns *self*, so this method can easily be chained with more
        calls to :meth:`rotate`, :meth:`rotate_deg`, :meth:`translate`
        and :meth:`scale`.
        ")
                        (reparse-symbol indented_block_body) [52671 53277])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53304 53308]))                          )
                        (reparse-symbol indented_block_body) [53282 53396])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [53400 53442]))                  
                :type "class")
                nil [48070 53443])
            ("IdentityTransform" type
               (:documentation "
    A special class that does on thing, the identity transform, in a
    fast way.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("_mtx" variable nil (reparse-symbol indented_block_body) [53587 53608])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53625 53629]))                          )
                        (reparse-symbol indented_block_body) [53614 53652])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [53656 53700])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53719 53723]))                          )
                        (reparse-symbol indented_block_body) [53706 53763])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [53767 53785])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53806 53810]))                          )
                        (reparse-symbol indented_block_body) [53791 53838])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [53842 53894])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53914 53918])
                            ("points" variable nil (reparse-symbol function_parameters) [53920 53926]))                          )
                        (reparse-symbol indented_block_body) [53900 53951])
                    ("transform" variable nil (reparse-symbol indented_block_body) [53955 54005])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [54011 54039])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [54044 54108])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [54114 54146])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [54151 54223])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54248 54252])
                            ("path" variable nil (reparse-symbol function_parameters) [54254 54258]))                          )
                        (reparse-symbol indented_block_body) [54229 54281])
                    ("transform_path" variable nil (reparse-symbol indented_block_body) [54285 54345])
                    ("transform_path_affine" variable nil (reparse-symbol indented_block_body) [54351 54389])
                    ("transform_path_affine" variable nil (reparse-symbol indented_block_body) [54394 54468])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [54474 54516])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [54521 54603])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54624 54628]))                          )
                        (reparse-symbol indented_block_body) [54609 54651])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [54655 54707])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [54713 54734])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [54739 54787]))                  
                :type "class")
                nil [53445 54788])
            ("BlendedGenericTransform" type
               (:documentation "
    A \"blended\" transform uses one transform for the *x*-direction, and
    another transform for the *y*-direction.

    This \"generic\" version can handle any given child transform in the
    *x*- and *y*-directions.
    "
                :superclasses ("Transform")
                :members 
                  ( ("input_dims" variable nil (reparse-symbol indented_block_body) [55070 55084])
                    ("output_dims" variable nil (reparse-symbol indented_block_body) [55089 55104])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [55109 55128])
                    ("pass_through" variable nil (reparse-symbol indented_block_body) [55133 55152])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [55212 55603])
                            ("Transform" code nil (reparse-symbol indented_block_body) [55653 55677])
                            ("self" variable nil (reparse-symbol indented_block_body) [55686 55707])
                            ("self" variable nil (reparse-symbol indented_block_body) [55716 55737])
                            ("self" code nil (reparse-symbol indented_block_body) [55746 55789])
                            ("self" variable nil (reparse-symbol indented_block_body) [55798 55817]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55171 55175])
                            ("x_transform" variable nil (reparse-symbol function_parameters) [55177 55188])
                            ("y_transform" variable nil (reparse-symbol function_parameters) [55190 55201]))                          
                        :documentation "
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [55158 55818])
                    ("_get_is_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55842 55846]))                          )
                        (reparse-symbol indented_block_body) [55823 55904])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [55908 55944])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55961 55965]))                          )
                        (reparse-symbol indented_block_body) [55950 56045])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [56049 56090])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56109 56113]))                          )
                        (reparse-symbol indented_block_body) [56096 56185])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [56189 56207])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56227 56231])
                            ("points" variable nil (reparse-symbol function_parameters) [56233 56239]))                          )
                        (reparse-symbol indented_block_body) [56213 56988])
                    ("transform" variable nil (reparse-symbol indented_block_body) [56992 57039])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57066 57070])
                            ("points" variable nil (reparse-symbol function_parameters) [57072 57078]))                          )
                        (reparse-symbol indented_block_body) [57045 57132])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [57136 57197])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57228 57232])
                            ("points" variable nil (reparse-symbol function_parameters) [57234 57240]))                          )
                        (reparse-symbol indented_block_body) [57203 57359])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [57363 57432])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57451 57455]))                          )
                        (reparse-symbol indented_block_body) [57438 57537])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [57541 57586])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57607 57611]))                          )
                        (reparse-symbol indented_block_body) [57592 58398])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [58402 58451]))                  
                :type "class")
                nil [54790 58452])
            ("BlendedAffine2D" type
               (:documentation "
    A \"blended\" transform uses one transform for the *x*-direction, and
    another transform for the *y*-direction.

    This version is an optimization for the case where both child
    transforms are of type :class:`Affine2DBase`.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [58745 58764])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        Both *x_transform* and *y_transform* must be 2D affine
        transforms.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [58824 59299])
                            ("assert" code nil (reparse-symbol indented_block_body) [59308 59336])
                            ("assert" code nil (reparse-symbol indented_block_body) [59345 59373])
                            ("assert" code nil (reparse-symbol indented_block_body) [59382 59413])
                            ("assert" code nil (reparse-symbol indented_block_body) [59422 59453])
                            ("Transform" code nil (reparse-symbol indented_block_body) [59463 59487])
                            ("self" variable nil (reparse-symbol indented_block_body) [59496 59517])
                            ("self" variable nil (reparse-symbol indented_block_body) [59526 59547])
                            ("self" code nil (reparse-symbol indented_block_body) [59556 59599])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [59609 59636])
                            ("self" variable nil (reparse-symbol indented_block_body) [59645 59661]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58783 58787])
                            ("x_transform" variable nil (reparse-symbol function_parameters) [58789 58800])
                            ("y_transform" variable nil (reparse-symbol function_parameters) [58802 58813]))                          
                        :documentation "
        Create a new \"blended\" transform using *x_transform* to
        transform the *x*-axis and *y_transform* to transform the
        *y*-axis.

        Both *x_transform* and *y_transform* must be 2D affine
        transforms.

        You will generally not call this constructor directly but use
        the :func:`blended_transform_factory` function instead, which
        can determine automatically which kind of blended transform to
        create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [58770 59662])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59680 59684]))                          )
                        (reparse-symbol indented_block_body) [59667 59748])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [59752 59770])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59791 59795]))                          )
                        (reparse-symbol indented_block_body) [59776 60356])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [60360 60412]))                  
                :type "class")
                nil [58454 60413])
            ("blended_transform_factory" function
               (:documentation "
    Create a new \"blended\" transform using *x_transform* to transform
    the *x*-axis and *y_transform* to transform the *y*-axis.

    A faster version of the blended transform is returned for the case
    where both child transforms are affine.
    "
                :arguments 
                  ( ("x_transform" variable nil (reparse-symbol function_parameters) [60445 60456])
                    ("y_transform" variable nil (reparse-symbol function_parameters) [60458 60469]))                  )
                nil [60415 60952])
            ("CompositeGenericTransform" type
               (:documentation "
    A composite transform formed by applying transform *a* then
    transform *b*.

    This \"generic\" version can handle any two arbitrary
    transformations.
    "
                :superclasses ("Transform")
                :members 
                  ( ("pass_through" variable nil (reparse-symbol indented_block_body) [61179 61198])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [61238 61608])
                            ("assert" code nil (reparse-symbol indented_block_body) [61617 61653])
                            ("self" variable nil (reparse-symbol indented_block_body) [61662 61692])
                            ("self" variable nil (reparse-symbol indented_block_body) [61701 61733])
                            ("Transform" code nil (reparse-symbol indented_block_body) [61743 61767])
                            ("self" variable nil (reparse-symbol indented_block_body) [61776 61787])
                            ("self" variable nil (reparse-symbol indented_block_body) [61796 61807])
                            ("self" code nil (reparse-symbol indented_block_body) [61816 61839]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61217 61221])
                            ("a" variable nil (reparse-symbol function_parameters) [61223 61224])
                            ("b" variable nil (reparse-symbol function_parameters) [61226 61227]))                          
                        :documentation "
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [61204 61840])
                    ("frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61856 61860]))                          )
                        (reparse-symbol indented_block_body) [61845 62089])
                    ("frozen" variable nil (reparse-symbol indented_block_body) [62093 62134])
                    ("_get_is_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62159 62163]))                          )
                        (reparse-symbol indented_block_body) [62140 62221])
                    ("is_affine" variable nil (reparse-symbol indented_block_body) [62225 62261])
                    ("_get_is_separable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62289 62293]))                          )
                        (reparse-symbol indented_block_body) [62267 62357])
                    ("is_separable" variable nil (reparse-symbol indented_block_body) [62361 62403])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62422 62426]))                          )
                        (reparse-symbol indented_block_body) [62409 62501])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [62505 62523])
                    ("transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62543 62547])
                            ("points" variable nil (reparse-symbol function_parameters) [62549 62555]))                          )
                        (reparse-symbol indented_block_body) [62529 62631])
                    ("transform" variable nil (reparse-symbol indented_block_body) [62635 62682])
                    ("transform_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62709 62713])
                            ("points" variable nil (reparse-symbol function_parameters) [62715 62721]))                          )
                        (reparse-symbol indented_block_body) [62688 62775])
                    ("transform_affine" variable nil (reparse-symbol indented_block_body) [62779 62840])
                    ("transform_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62871 62875])
                            ("points" variable nil (reparse-symbol function_parameters) [62877 62883]))                          )
                        (reparse-symbol indented_block_body) [62846 63048])
                    ("transform_non_affine" variable nil (reparse-symbol indented_block_body) [63052 63121])
                    ("transform_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63146 63150])
                            ("path" variable nil (reparse-symbol function_parameters) [63152 63156]))                          )
                        (reparse-symbol indented_block_body) [63127 63240])
                    ("transform_path" variable nil (reparse-symbol indented_block_body) [63244 63301])
                    ("transform_path_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63333 63337])
                            ("path" variable nil (reparse-symbol function_parameters) [63339 63343]))                          )
                        (reparse-symbol indented_block_body) [63307 63434])
                    ("transform_path_affine" variable nil (reparse-symbol indented_block_body) [63438 63509])
                    ("transform_path_non_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63545 63549])
                            ("path" variable nil (reparse-symbol function_parameters) [63551 63555]))                          )
                        (reparse-symbol indented_block_body) [63515 63726])
                    ("transform_path_non_affine" variable nil (reparse-symbol indented_block_body) [63730 63809])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63830 63834]))                          )
                        (reparse-symbol indented_block_body) [63815 64085])
                    ("get_affine" variable nil (reparse-symbol indented_block_body) [64089 64138])
                    ("inverted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64157 64161]))                          )
                        (reparse-symbol indented_block_body) [64144 64245])
                    ("inverted" variable nil (reparse-symbol indented_block_body) [64249 64294]))                  
                :type "class")
                nil [60954 64295])
            ("CompositeAffine2D" type
               (:documentation "
    A composite transform formed by applying transform *a* then transform *b*.

    This version is an optimization that handles the case where both *a*
    and *b* are 2D affines.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        Both *a* and *b* must be instances of :class:`Affine2DBase`.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        \"\"\"" code nil (reparse-symbol indented_block_body) [64571 65011])
                            ("assert" code nil (reparse-symbol indented_block_body) [65020 65056])
                            ("self" variable nil (reparse-symbol indented_block_body) [65065 65095])
                            ("self" variable nil (reparse-symbol indented_block_body) [65104 65136])
                            ("assert" code nil (reparse-symbol indented_block_body) [65145 65163])
                            ("assert" code nil (reparse-symbol indented_block_body) [65172 65190])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [65200 65227])
                            ("self" variable nil (reparse-symbol indented_block_body) [65236 65247])
                            ("self" variable nil (reparse-symbol indented_block_body) [65256 65267])
                            ("self" code nil (reparse-symbol indented_block_body) [65276 65299])
                            ("self" variable nil (reparse-symbol indented_block_body) [65308 65324]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64550 64554])
                            ("a" variable nil (reparse-symbol function_parameters) [64556 64557])
                            ("b" variable nil (reparse-symbol function_parameters) [64559 64560]))                          
                        :documentation "
        Create a new composite transform that is the result of
        applying transform *a* then transform *b*.

        Both *a* and *b* must be instances of :class:`Affine2DBase`.

        You will generally not call this constructor directly but use
        the :func:`composite_transform_factory` function instead,
        which can automatically choose the best kind of composite
        transform instance to create.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [64537 65325])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65343 65347]))                          )
                        (reparse-symbol indented_block_body) [65330 65414])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [65418 65436])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65457 65461]))                          )
                        (reparse-symbol indented_block_body) [65442 65687])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [65691 65743]))                  
                :type "class")
                nil [64297 65744])
            ("composite_transform_factory" function
               (:documentation "
    Create a new composite transform that is the result of applying
    transform a then transform b.

    Shortcut versions of the blended transform are provided for the
    case where both child transforms are affine, or one or the other
    is the identity transform.

    Composite transforms may also be created using the '+' operator,
    e.g.::

      c = a + b
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [65778 65779])
                    ("b" variable nil (reparse-symbol function_parameters) [65781 65782]))                  )
                nil [65746 66436])
            ("BboxTransform" type
               (:documentation "
    :class:`BboxTransform` linearly transforms points from one
    :class:`Bbox` to another :class:`Bbox`.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [66600 66619])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new :class:`BboxTransform` that linearly transforms
        points from *boxin* to *boxout*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [66668 66793])
                            ("assert" code nil (reparse-symbol indented_block_body) [66802 66822])
                            ("assert" code nil (reparse-symbol indented_block_body) [66831 66852])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [66862 66889])
                            ("self" variable nil (reparse-symbol indented_block_body) [66898 66917])
                            ("self" variable nil (reparse-symbol indented_block_body) [66926 66947])
                            ("self" code nil (reparse-symbol indented_block_body) [66956 66988])
                            ("self" variable nil (reparse-symbol indented_block_body) [66997 67013])
                            ("self" variable nil (reparse-symbol indented_block_body) [67022 67043]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66638 66642])
                            ("boxin" variable nil (reparse-symbol function_parameters) [66644 66649])
                            ("boxout" variable nil (reparse-symbol function_parameters) [66651 66657]))                          
                        :documentation "
        Create a new :class:`BboxTransform` that linearly transforms
        points from *boxin* to *boxout*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [66625 67044])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67062 67066]))                          )
                        (reparse-symbol indented_block_body) [67049 67138])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [67142 67160])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67181 67185]))                          )
                        (reparse-symbol indented_block_body) [67166 67885])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [67889 67941]))                  
                :type "class")
                nil [66438 67942])
            ("BboxTransformTo" type
               (:documentation "
    :class:`BboxTransformTo` is a transformation that linearly
    transforms points from the unit bounding box to a given
    :class:`Bbox`.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [68143 68162])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new :class:`BboxTransformTo` that linearly transforms
        points from the unit bounding box to *boxout*.
        \"\"\"" code nil (reparse-symbol indented_block_body) [68204 68345])
                            ("assert" code nil (reparse-symbol indented_block_body) [68354 68375])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [68385 68412])
                            ("self" variable nil (reparse-symbol indented_block_body) [68421 68442])
                            ("self" code nil (reparse-symbol indented_block_body) [68451 68476])
                            ("self" variable nil (reparse-symbol indented_block_body) [68485 68501])
                            ("self" variable nil (reparse-symbol indented_block_body) [68510 68531]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68181 68185])
                            ("boxout" variable nil (reparse-symbol function_parameters) [68187 68193]))                          
                        :documentation "
        Create a new :class:`BboxTransformTo` that linearly transforms
        points from the unit bounding box to *boxout*.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [68168 68532])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68550 68554]))                          )
                        (reparse-symbol indented_block_body) [68537 68611])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [68615 68633])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68654 68658]))                          )
                        (reparse-symbol indented_block_body) [68639 69171])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [69175 69227]))                  
                :type "class")
                nil [67944 69228])
            ("BboxTransformToMaxOnly" type
               (:documentation "
    :class:`BboxTransformTo` is a transformation that linearly
    transforms points from the unit bounding box to a given
    :class:`Bbox` with a fixed upper left of (0, 0).
    "
                :superclasses ("BboxTransformTo")
                :members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69486 69490]))                          )
                        (reparse-symbol indented_block_body) [69473 69554])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [69558 69576])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69597 69601]))                          )
                        (reparse-symbol indented_block_body) [69582 70093])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [70097 70149]))                  
                :type "class")
                nil [69230 70150])
            ("BboxTransformFrom" type
               (:documentation "
    :class:`BboxTransformFrom` linearly transforms points from a given
    :class:`Bbox` to the unit bounding box.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("is_separable" variable nil (reparse-symbol indented_block_body) [70326 70345])
                    ("__init__" function
                       (:suite 
                          ( ("assert" code nil (reparse-symbol indented_block_body) [70386 70406])
                            ("Affine2DBase" code nil (reparse-symbol indented_block_body) [70416 70443])
                            ("self" variable nil (reparse-symbol indented_block_body) [70452 70471])
                            ("self" code nil (reparse-symbol indented_block_body) [70480 70504])
                            ("self" variable nil (reparse-symbol indented_block_body) [70513 70529])
                            ("self" variable nil (reparse-symbol indented_block_body) [70538 70559]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70364 70368])
                            ("boxin" variable nil (reparse-symbol function_parameters) [70370 70375]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [70351 70560])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70578 70582]))                          )
                        (reparse-symbol indented_block_body) [70565 70640])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [70644 70662])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70683 70687]))                          )
                        (reparse-symbol indented_block_body) [70668 71304])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [71308 71360]))                  
                :type "class")
                nil [70152 71361])
            ("ScaledTranslation" type
               (:documentation "
    A transformation that translates by *xt* and *yt*, after *xt* and *yt*
    have been transformad by the given transform *scale_trans*.
    "
                :superclasses ("Affine2DBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Affine2DBase" code nil (reparse-symbol indented_block_body) [71610 71637])
                            ("self" variable nil (reparse-symbol indented_block_body) [71646 71664])
                            ("self" variable nil (reparse-symbol indented_block_body) [71673 71704])
                            ("self" code nil (reparse-symbol indented_block_body) [71713 71743])
                            ("self" variable nil (reparse-symbol indented_block_body) [71752 71768])
                            ("self" variable nil (reparse-symbol indented_block_body) [71777 71798]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71574 71578])
                            ("xt" variable nil (reparse-symbol function_parameters) [71580 71582])
                            ("yt" variable nil (reparse-symbol function_parameters) [71584 71586])
                            ("scale_trans" variable nil (reparse-symbol function_parameters) [71588 71599]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [71561 71799])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71817 71821]))                          )
                        (reparse-symbol indented_block_body) [71804 71876])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [71880 71898])
                    ("get_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71919 71923]))                          )
                        (reparse-symbol indented_block_body) [71904 72304])
                    ("get_matrix" variable nil (reparse-symbol indented_block_body) [72308 72360]))                  
                :type "class")
                nil [71363 72361])
            ("TransformedPath" type
               (:documentation "
    A :class:`TransformedPath` caches a non-affine transformed copy of
    the :class:`~matplotlib.path.Path`.  This cached copy is
    automatically updated when the non-affine part of the transform
    changes.

    .. note::

        Paths are considered immutable by this class. Any update to the
        path's vertices/codes will not trigger a transform recomputation.

    "
                :superclasses ("TransformNode")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new :class:`TransformedPath` from the given
        :class:`~matplotlib.path.Path` and :class:`Transform`.
        \"\"\"" code nil (reparse-symbol indented_block_body) [72842 72981])
                            ("assert" code nil (reparse-symbol indented_block_body) [72990 73029])
                            ("TransformNode" code nil (reparse-symbol indented_block_body) [73038 73066])
                            ("self" variable nil (reparse-symbol indented_block_body) [73076 73093])
                            ("self" variable nil (reparse-symbol indented_block_body) [73102 73129])
                            ("self" code nil (reparse-symbol indented_block_body) [73138 73166])
                            ("self" variable nil (reparse-symbol indented_block_body) [73175 73204])
                            ("self" variable nil (reparse-symbol indented_block_body) [73213 73244]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72810 72814])
                            ("path" variable nil (reparse-symbol function_parameters) [72816 72820])
                            ("transform" variable nil (reparse-symbol function_parameters) [72822 72831]))                          
                        :documentation "
        Create a new :class:`TransformedPath` from the given
        :class:`~matplotlib.path.Path` and :class:`Transform`.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [72797 73245])
                    ("_revalidate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73266 73270]))                          )
                        (reparse-symbol indented_block_body) [73250 73718])
                    ("get_transformed_points_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73761 73765]))                          
                        :documentation "
        Return a copy of the child path, with the non-affine part of
        the transform already applied, along with the affine part of
        the path necessary to complete the transformation.  Unlike
        :meth:`get_transformed_path_and_affine`, no interpolation will
        be performed.
        ")
                        (reparse-symbol indented_block_body) [73723 74176])
                    ("get_transformed_path_and_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74217 74221]))                          
                        :documentation "
        Return a copy of the child path, with the non-affine part of
        the transform already applied, along with the affine part of
        the path necessary to complete the transformation.
        ")
                        (reparse-symbol indented_block_body) [74181 74529])
                    ("get_fully_transformed_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74565 74569]))                          
                        :documentation "
        Return a fully-transformed copy of the child path.
        ")
                        (reparse-symbol indented_block_body) [74534 74996])
                    ("get_affine" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75016 75020]))                          )
                        (reparse-symbol indented_block_body) [75001 75067]))                  
                :type "class")
                nil [72363 75067])
            ("nonsingular" function (:arguments 
              ( ("vmin" variable nil (reparse-symbol function_parameters) [75085 75089])
                ("vmax" variable nil (reparse-symbol function_parameters) [75091 75095])
                ("expander" variable nil (reparse-symbol function_parameters) [75097 75105])
                ("tiny" variable nil (reparse-symbol function_parameters) [75113 75117])
                ("increasing" variable nil (reparse-symbol function_parameters) [75125 75135]))              ) nil [75069 76085])
            ("interval_contains" function (:arguments 
              ( ("interval" variable nil (reparse-symbol function_parameters) [76109 76117])
                ("val" variable nil (reparse-symbol function_parameters) [76119 76122]))              ) nil [76087 76240])
            ("interval_contains_open" function (:arguments 
              ( ("interval" variable nil (reparse-symbol function_parameters) [76268 76276])
                ("val" variable nil (reparse-symbol function_parameters) [76278 76281]))              ) nil [76241 76395])
            ("offset_copy" function (:arguments 
              ( ("trans" variable nil (reparse-symbol function_parameters) [76412 76417])
                ("fig" variable nil (reparse-symbol function_parameters) [76419 76422])
                ("x" variable nil (reparse-symbol function_parameters) [76429 76430])
                ("y" variable nil (reparse-symbol function_parameters) [76436 76437])
                ("units" variable nil (reparse-symbol function_parameters) [76443 76448]))              ) nil [76396 77125]))          
      :file "transforms.py"
      :pointmax 77126
      :fsize 77125
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This provides several classes used for blocking interaction with figure windows:

:class:`BlockingInput`
    creates a callable object to retrieve events in a blocking way for interactive sessions

:class:`BlockingKeyMouseInput`
    creates a callable object to retrieve key or mouse clicks in a blocking way for interactive sessions.
    Note: Subclass of BlockingInput. Used by waitforbuttonpress

:class:`BlockingMouseInput`
    creates a callable object to retrieve mouse clicks in a blocking way for interactive sessions.
    Note: Subclass of BlockingInput.  Used by ginput

:class:`BlockingContourLabeler`
    creates a callable object to retrieve mouse clicks in a blocking way that will then be used to place labels on a ContourSet
    Note: Subclass of BlockingMouseInput.  Used by clabel
\"\"\"" code nil nil [1 807])
            ("matplotlib" include nil nil [809 845])
            ("matplotlib.cbook" include nil nil [846 897])
            ("matplotlib.lines" include nil nil [898 931])
            ("BlockingInput" type
               (:documentation "
    Class that creates a callable object to retrieve events in a
    blocking way.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1113 1127])
                            ("assert" code nil (reparse-symbol indented_block_body) [1136 1222])
                            ("self" variable nil (reparse-symbol indented_block_body) [1231 1259]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1078 1082])
                            ("fig" variable nil (reparse-symbol function_parameters) [1084 1087])
                            ("eventslist" variable nil (reparse-symbol function_parameters) [1089 1099]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1065 1260])
                    ("on_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1278 1282])
                            ("event" variable nil (reparse-symbol function_parameters) [1284 1289]))                          
                        :documentation "
        Event handler that will be passed to the current figure to
        retrieve events.
        ")
                        (reparse-symbol indented_block_body) [1265 1868])
                    ("post_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1888 1892]))                          
                        :documentation "For baseclass, do nothing but collect events")
                        (reparse-symbol indented_block_body) [1873 1967])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1984 1988]))                          
                        :documentation "Disconnect all callbacks")
                        (reparse-symbol indented_block_body) [1972 2138])
                    ("add_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2157 2161])
                            ("event" variable nil (reparse-symbol function_parameters) [2162 2167]))                          
                        :documentation "For base class, this just appends an event to events.")
                        (reparse-symbol indented_block_body) [2143 2272])
                    ("pop_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2291 2295])
                            ("index" variable nil (reparse-symbol function_parameters) [2296 2301]))                          
                        :documentation "
        This removes an event from the event list.  Defaults to
        removing last event, but an index can be supplied.  Note that
        this does not check that there are events, much like the
        normal pop method.  If not events exist, this will throw an
        exception.
        ")
                        (reparse-symbol indented_block_body) [2277 2648])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2661 2665])
                            ("index" variable nil (reparse-symbol function_parameters) [2666 2671]))                          )
                        (reparse-symbol indented_block_body) [2653 2707])
                    ("pop" variable nil (reparse-symbol indented_block_body) [2711 2740])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2759 2763])
                            ("n" variable nil (reparse-symbol function_parameters) [2765 2766])
                            ("timeout" variable nil (reparse-symbol function_parameters) [2770 2777]))                          
                        :documentation "
        Blocking call to retrieve n events
        ")
                        (reparse-symbol indented_block_body) [2746 3530]))                  
                :type "class")
                nil [933 3530])
            ("BlockingMouseInput" type
               (:documentation "
    Class that creates a callable object to retrieve mouse clicks in a
    blocking way.

    This class will also retrieve keyboard clicks and treat them like
    appropriate mouse clicks (delete and backspace are like mouse button 3,
    enter is like mouse button 2 and all others are like mouse button 1).
    "
                :superclasses ("BlockingInput")
                :members 
                  ( ("button_add" variable nil (reparse-symbol indented_block_body) [3903 3920])
                    ("button_pop" variable nil (reparse-symbol indented_block_body) [3925 3942])
                    ("button_stop" variable nil (reparse-symbol indented_block_body) [3947 3964])
                    ("__init__" function
                       (:suite 
                          ( ("BlockingInput" code nil (reparse-symbol indented_block_body) [4043 4209])
                            ("self" variable nil (reparse-symbol indented_block_body) [4218 4245])
                            ("self" variable nil (reparse-symbol indented_block_body) [4254 4281])
                            ("self" variable nil (reparse-symbol indented_block_body) [4290 4318]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3983 3987])
                            ("fig" variable nil (reparse-symbol function_parameters) [3989 3992])
                            ("mouse_add" variable nil (reparse-symbol function_parameters) [3994 4003])
                            ("mouse_pop" variable nil (reparse-symbol function_parameters) [4007 4016])
                            ("mouse_stop" variable nil (reparse-symbol function_parameters) [4020 4030]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3970 4319])
                    ("post_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4341 4345]))                          
                        :documentation "
        This will be called to process events
        ")
                        (reparse-symbol indented_block_body) [4326 4598])
                    ("mouse_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4619 4623]))                          )
                        (reparse-symbol indented_block_body) [4603 4946])
                    ("key_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4965 4969]))                          )
                        (reparse-symbol indented_block_body) [4951 5569])
                    ("mouse_event_add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5595 5599])
                            ("event" variable nil (reparse-symbol function_parameters) [5601 5606]))                          
                        :documentation "
        Will be called for any event involving a button other than
        button 2 or 3.  This will add a click if it is inside axes.
        ")
                        (reparse-symbol indented_block_body) [5574 5928])
                    ("mouse_event_stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5955 5959])
                            ("event" variable nil (reparse-symbol function_parameters) [5961 5966]))                          
                        :documentation "
        Will be called for any event involving button 2.
        Button 2 ends blocking input.
        ")
                        (reparse-symbol indented_block_body) [5933 6454])
                    ("mouse_event_pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6480 6484])
                            ("event" variable nil (reparse-symbol function_parameters) [6486 6491]))                          
                        :documentation "
        Will be called for any event involving button 3.
        Button 3 removes the last click.
        ")
                        (reparse-symbol indented_block_body) [6459 6801])
                    ("add_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6820 6824])
                            ("event" variable nil (reparse-symbol function_parameters) [6825 6830]))                          
                        :documentation "
        This add the coordinates of an event to the list of clicks
        ")
                        (reparse-symbol indented_block_body) [6806 7385])
                    ("pop_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7406 7410])
                            ("event" variable nil (reparse-symbol function_parameters) [7411 7416])
                            ("index" variable nil (reparse-symbol function_parameters) [7417 7422]))                          
                        :documentation "
        This removes a click from the list of clicks.  Defaults to
        removing the last click.
        ")
                        (reparse-symbol indented_block_body) [7392 7717])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7943 7947])
                            ("event" variable nil (reparse-symbol function_parameters) [7948 7953])
                            ("index" variable nil (reparse-symbol function_parameters) [7954 7959]))                          
                        :documentation "
        This removes a click and the associated event from the object.
        Defaults to removing the last click, but any index can be
        supplied.
        ")
                        (reparse-symbol indented_block_body) [7935 8218])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8235 8239])
                            ("event" variable nil (reparse-symbol function_parameters) [8240 8245]))                          )
                        (reparse-symbol indented_block_body) [8223 8523])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8541 8545])
                            ("n" variable nil (reparse-symbol function_parameters) [8547 8548])
                            ("timeout" variable nil (reparse-symbol function_parameters) [8552 8559])
                            ("show_clicks" variable nil (reparse-symbol function_parameters) [8564 8575]))                          
                        :documentation "
        Blocking call to retrieve n coordinate pairs through mouse
        clicks.
        ")
                        (reparse-symbol indented_block_body) [8528 8874]))                  
                :type "class")
                nil [3531 8874])
            ("BlockingContourLabeler" type
               (:documentation "
    Class that creates a callable object that uses mouse clicks or key
    clicks on a figure window to place contour labels.
    "
                :superclasses ("BlockingMouseInput")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9104 9116])
                            ("BlockingMouseInput" code nil (reparse-symbol indented_block_body) [9125 9177]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9086 9090])
                            ("cs" variable nil (reparse-symbol function_parameters) [9091 9093]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9073 9178])
                    ("add_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9197 9201])
                            ("event" variable nil (reparse-symbol function_parameters) [9203 9208]))                          )
                        (reparse-symbol indented_block_body) [9183 9239])
                    ("pop_click" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9258 9262])
                            ("event" variable nil (reparse-symbol function_parameters) [9264 9269])
                            ("index" variable nil (reparse-symbol function_parameters) [9271 9276]))                          )
                        (reparse-symbol indented_block_body) [9244 9310])
                    ("button1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9327 9331])
                            ("event" variable nil (reparse-symbol function_parameters) [9332 9337]))                          
                        :documentation "
        This will be called if an event involving a button other than
        2 or 3 occcurs.  This will add a label to a contour.
        ")
                        (reparse-symbol indented_block_body) [9315 11316])
                    ("button3" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11333 11337])
                            ("event" variable nil (reparse-symbol function_parameters) [11338 11343]))                          
                        :documentation "
        This will be called if button 3 is clicked.  This will remove
        a label if not in inline mode.  Unfortunately, if one is doing
        inline labels, then there is currently no way to fix the
        broken contour - once humpty-dumpty is broken, he can't be put
        back together.  In inline mode, this does nothing.
        ")
                        (reparse-symbol indented_block_body) [11321 11838])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11856 11860])
                            ("inline" variable nil (reparse-symbol function_parameters) [11861 11867])
                            ("inline_spacing" variable nil (reparse-symbol function_parameters) [11868 11882])
                            ("n" variable nil (reparse-symbol function_parameters) [11885 11886])
                            ("timeout" variable nil (reparse-symbol function_parameters) [11890 11897]))                          )
                        (reparse-symbol indented_block_body) [11843 12091]))                  
                :type "class")
                nil [8875 12091])
            ("BlockingKeyMouseInput" type
               (:documentation "
    Class that creates a callable object to retrieve a single mouse or
    keyboard click
    "
                :superclasses ("BlockingInput")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("BlockingInput" code nil (reparse-symbol indented_block_body) [12279 12370]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12259 12263])
                            ("fig" variable nil (reparse-symbol function_parameters) [12265 12268]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12246 12371])
                    ("post_event" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12391 12395]))                          
                        :documentation "
        Determines if it is a key event
        ")
                        (reparse-symbol indented_block_body) [12376 12582])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12600 12604])
                            ("timeout" variable nil (reparse-symbol function_parameters) [12606 12613]))                          
                        :documentation "
        Blocking call to retrieve a single mouse or key click
        Returns True if key click, False if mouse, or None if timeout
        ")
                        (reparse-symbol indented_block_body) [12587 12895]))                  
                :type "class")
                nil [12092 12895]))          
      :file "blocking_input.py"
      :pointmax 12896
      :fsize 12895
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Manage figures for pyplot interface.
\"\"\"" code nil nil [1 45])
            ("gc" include nil nil [47 61])
            ("sys" include nil nil [47 61])
            ("atexit" include nil nil [63 76])
            ("traceback" include nil nil [77 93])
            ("error_msg" function (:arguments 
              ( ("msg" variable nil (reparse-symbol function_parameters) [110 113]))              ) nil [96 144])
            ("Gcf" type
               (:documentation "
    Manage a set of integer-numbered figures.

    This class is never instantiated; it consists of two class
    attributes (a list and a dictionary), and a set of static
    methods that operate on those attributes, accessing them
    directly as class attributes.

    Attributes:

        *figs*:
          dictionary of the form {*num*: *manager*, ...}

        *_activeQue*:
          list of *managers*, with active one at the end

    "
                :superclasses ("object")
                :members 
                  ( ("_activeQue" variable nil (reparse-symbol indented_block_body) [623 638])
                    ("figs" variable nil (reparse-symbol indented_block_body) [643 652])
                    ("get_fig_manager" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("num" variable nil (reparse-symbol function_parameters) [696 699]))                          
                        :documentation "
        If figure manager *num* exists, make it the active
        figure and return the manager; otherwise return *None*.
        ")
                        (reparse-symbol indented_block_body) [658 982])
                    ("destroy" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("num" variable nil (reparse-symbol function_parameters) [1017 1020]))                          
                        :documentation "
        Try to remove all traces of figure *num*.

        In the interactive backends, this is bound to the
        window \"destroy\" and \"delete\" events.
        ")
                        (reparse-symbol indented_block_body) [987 1737])
                    ("destroy_fig" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("fig" variable nil (reparse-symbol function_parameters) [1776 1779]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1742 1947])
                    ("destroy_all" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1952 2195])
                    ("has_fignum" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("num" variable nil (reparse-symbol function_parameters) [2233 2236]))                          
                        :documentation "
        Return *True* if figure *num* exists.
        ")
                        (reparse-symbol indented_block_body) [2200 2340])
                    ("get_all_fig_managers" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        Return a list of figure managers.
        ")
                        (reparse-symbol indented_block_body) [2345 2490])
                    ("get_num_fig_managers" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        Return the number of figures being managed.
        ")
                        (reparse-symbol indented_block_body) [2495 2655])
                    ("get_active" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :documentation "
        Return the manager of the active figure, or *None*.
        ")
                        (reparse-symbol indented_block_body) [2660 2879])
                    ("set_active" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("manager" variable nil (reparse-symbol function_parameters) [2917 2924]))                          
                        :documentation "
        Make the figure corresponding to *manager* the active one.
        ")
                        (reparse-symbol indented_block_body) [2884 3239]))                  
                :type "class")
                nil [145 3239])
            ("atexit" code nil nil [3240 3272]))          
      :file "_pylab_helpers.py"
      :pointmax 3276
      :fsize 3275
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module is to support *bbox_inches* option in savefig command.
\"\"\"" code nil nil [1 75])
            ("warnings" include nil nil [77 92])
            ("matplotlib.transforms" include nil nil [93 158])
            ("adjust_bbox" function
               (:documentation "
    Temporarily adjust the figure so that only the specified area
    (bbox_inches) is saved.

    It modifies fig.bbox, fig.bbox_inches,
    fig.transFigure._boxout, and fig.patch.  While the figure size
    changes, the scale of the original figure is conserved.  A
    function which restores the original values are returned.
    "
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [178 181])
                    ("format" variable nil (reparse-symbol function_parameters) [183 189])
                    ("bbox_inches" variable nil (reparse-symbol function_parameters) [191 202]))                  )
                nil [162 1621])
            ("adjust_bbox_png" function
               (:documentation "
    adjust_bbox for png (Agg) format
    "
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [1643 1646])
                    ("bbox_inches" variable nil (reparse-symbol function_parameters) [1648 1659]))                  )
                nil [1623 2401])
            ("adjust_bbox_pdf" function
               (:documentation "
    adjust_bbox for pdf & eps format
    "
                :arguments 
                  ( ("fig" variable nil (reparse-symbol function_parameters) [2423 2426])
                    ("bbox_inches" variable nil (reparse-symbol function_parameters) [2428 2439]))                  )
                nil [2403 3148])
            ("process_figure_for_rasterizing" function
               (:documentation "
    This need to be called when figure dpi changes during the drawing
    (e.g., rasterizing). It recovers the bbox and re-adjust it with
    the new dpi.
    "
                :arguments 
                  ( ("figure" variable nil (reparse-symbol function_parameters) [3185 3191])
                    ("bbox_inches_restore" variable nil (reparse-symbol function_parameters) [3228 3247])
                    ("mode" variable nil (reparse-symbol function_parameters) [3249 3253]))                  )
                nil [3150 3598])
            ("_adjust_bbox_handler_d" variable nil nil [3600 3627])
            ("for" code nil nil [3628 3742])
            ("for" code nil nil [3742 3840]))          
      :file "tight_bbox.py"
      :pointmax 3840
      :fsize 3839
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("urllib" include nil nil [26 39])
            ("matplotlib.path" include nil nil [40 72])
            ("matplotlib.font_manager" include nil nil [73 119])
            ("matplotlib.ft2font" include nil nil [121 212])
            ("matplotlib.mathtext" include nil nil [214 260])
            ("matplotlib.dviread" include nil nil [262 298])
            ("numpy" include nil nil [300 318])
            ("warnings" include nil nil [320 335])
            ("TextToPath" type
               (:documentation "
    A class that convert a given text to a path using ttf fonts.
    "
                :superclasses ("object")
                :members 
                  ( ("FONT_SCALE" variable nil (reparse-symbol indented_block_body) [449 466])
                    ("DPI" variable nil (reparse-symbol indented_block_body) [471 479])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialization
        \"\"\"" code nil (reparse-symbol indented_block_body) [513 551])
                            ("self" variable nil (reparse-symbol indented_block_body) [560 605])
                            ("self" variable nil (reparse-symbol indented_block_body) [614 638])
                            ("matplotlib.cbook" include nil (reparse-symbol indented_block_body) [648 684])
                            ("self" variable nil (reparse-symbol indented_block_body) [693 721])
                            ("self" variable nil (reparse-symbol indented_block_body) [731 754])
                            ("self" variable nil (reparse-symbol indented_block_body) [764 800]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [498 502]))                          
                        :documentation "
        Initialization
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [485 801])
                    ("_get_adobe_standard_encoding" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [840 844]))                          )
                        (reparse-symbol indented_block_body) [807 1005])
                    ("_get_font" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1024 1028])
                            ("prop" variable nil (reparse-symbol function_parameters) [1030 1034]))                          
                        :documentation "
        find a ttf font.
        ")
                        (reparse-symbol indented_block_body) [1010 1235])
                    ("_get_hinting_flag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1262 1266]))                          )
                        (reparse-symbol indented_block_body) [1240 1300])
                    ("_get_char_id" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1322 1326])
                            ("font" variable nil (reparse-symbol function_parameters) [1328 1332])
                            ("ccode" variable nil (reparse-symbol function_parameters) [1334 1339]))                          
                        :documentation "
        Return a unique id for the given font and character-code set.
        ")
                        (reparse-symbol indented_block_body) [1305 1563])
                    ("_get_char_id_ps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1588 1592])
                            ("font" variable nil (reparse-symbol function_parameters) [1594 1598])
                            ("ccode" variable nil (reparse-symbol function_parameters) [1600 1605]))                          
                        :documentation "
        Return a unique id for the given font and character-code set (for tex).
        ")
                        (reparse-symbol indented_block_body) [1568 1839])
                    ("glyph_to_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1863 1867])
                            ("font" variable nil (reparse-symbol function_parameters) [1869 1873])
                            ("currx" variable nil (reparse-symbol function_parameters) [1875 1880]))                          
                        :documentation "
        convert the ft2font glyph to vertices and codes.
        ")
                        (reparse-symbol indented_block_body) [1845 2091])
                    ("get_text_width_height_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2130 2134])
                            ("s" variable nil (reparse-symbol function_parameters) [2136 2137])
                            ("prop" variable nil (reparse-symbol function_parameters) [2139 2143])
                            ("ismath" variable nil (reparse-symbol function_parameters) [2145 2151]))                          )
                        (reparse-symbol indented_block_body) [2096 3130])
                    ("get_text_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3153 3157])
                            ("prop" variable nil (reparse-symbol function_parameters) [3159 3163])
                            ("s" variable nil (reparse-symbol function_parameters) [3165 3166])
                            ("ismath" variable nil (reparse-symbol function_parameters) [3168 3174])
                            ("usetex" variable nil (reparse-symbol function_parameters) [3182 3188]))                          
                        :documentation "
        convert text *s* to path (a tuple of vertices and codes for matplotlib.math.Path).

        *prop*
          font property

        *s*
          text to be converted

        *usetex*
          If True, use matplotlib usetex mode.

        *ismath*
          If True, use mathtext parser. Effective only if usetex == False.


        ")
                        (reparse-symbol indented_block_body) [3135 4379])
                    ("get_glyphs_with_font" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4410 4414])
                            ("font" variable nil (reparse-symbol function_parameters) [4416 4420])
                            ("s" variable nil (reparse-symbol function_parameters) [4422 4423])
                            ("glyph_map" variable nil (reparse-symbol function_parameters) [4425 4434])
                            ("return_new_glyphs_only" variable nil (reparse-symbol function_parameters) [4470 4492]))                          
                        :documentation "
        convert the string *s* to vertices and codes using the
        provided ttf font.
        ")
                        (reparse-symbol indented_block_body) [4385 6026])
                    ("get_glyphs_mathtext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6055 6059])
                            ("prop" variable nil (reparse-symbol function_parameters) [6061 6065])
                            ("s" variable nil (reparse-symbol function_parameters) [6067 6068])
                            ("glyph_map" variable nil (reparse-symbol function_parameters) [6070 6079])
                            ("return_new_glyphs_only" variable nil (reparse-symbol function_parameters) [6114 6136]))                          
                        :documentation "
        convert the string *s* to vertices and codes by parsing it with mathtext.
        ")
                        (reparse-symbol indented_block_body) [6031 7699])
                    ("get_texmanager" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7723 7727]))                          
                        :documentation "
        return the :class:`matplotlib.texmanager.TexManager` instance
        ")
                        (reparse-symbol indented_block_body) [7704 7994])
                    ("get_glyphs_tex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8018 8022])
                            ("prop" variable nil (reparse-symbol function_parameters) [8024 8028])
                            ("s" variable nil (reparse-symbol function_parameters) [8030 8031])
                            ("glyph_map" variable nil (reparse-symbol function_parameters) [8033 8042])
                            ("return_new_glyphs_only" variable nil (reparse-symbol function_parameters) [8072 8094]))                          
                        :documentation "
        convert the string *s* to vertices and codes using matplotlib's usetex mode.
        ")
                        (reparse-symbol indented_block_body) [7999 11987]))                  
                :type "class")
                nil [337 11987])
            ("matplotlib.font_manager" include nil nil [11993 12043])
            ("matplotlib" include nil nil [12044 12075])
            ("matplotlib.transforms" include nil nil [12076 12118])
            ("text_to_path" variable nil nil [12120 12147])
            ("TextPath" type
               (:documentation "
    Create a path from the text.
    "
                :superclasses ("Path")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a path from the text. No support for TeX yet. Note that
        it simply is a path, not an artist. You need to use the
        PathPatch (or other artists) to draw this path onto the
        canvas.

        xy : position of the text.
        s : text
        size : font size
        prop : font property
        \"\"\"" code nil (reparse-symbol indented_block_body) [12369 12706])
                            ("if" code nil (reparse-symbol indented_block_body) [12717 12770])
                            ("if" code nil (reparse-symbol indented_block_body) [12779 12841])
                            ("self" variable nil (reparse-symbol indented_block_body) [12851 12864])
                            ("self" code nil (reparse-symbol indented_block_body) [12873 12892])
                            ("self" variable nil (reparse-symbol indented_block_body) [12902 12930])
                            ("self, self" code nil (reparse-symbol indented_block_body) [12940 13022])
                            ("self" variable nil (reparse-symbol indented_block_body) [13032 13060])
                            ("self" variable nil (reparse-symbol indented_block_body) [13069 13130])
                            ("self" variable nil (reparse-symbol indented_block_body) [13139 13165])
                            ("self" variable nil (reparse-symbol indented_block_body) [13174 13222]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12238 12242])
                            ("xy" variable nil (reparse-symbol function_parameters) [12244 12246])
                            ("s" variable nil (reparse-symbol function_parameters) [12248 12249])
                            ("size" variable nil (reparse-symbol function_parameters) [12251 12255])
                            ("prop" variable nil (reparse-symbol function_parameters) [12262 12266])
                            ("_interpolation_steps" variable nil (reparse-symbol function_parameters) [12290 12310])
                            ("usetex" variable nil (reparse-symbol function_parameters) [12314 12320])
                            ("kl" variable nil (reparse-symbol function_parameters) [12345 12348])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12350 12358]))                          
                        :documentation "
        Create a path from the text. No support for TeX yet. Note that
        it simply is a path, not an artist. You need to use the
        PathPatch (or other artists) to draw this path onto the
        canvas.

        xy : position of the text.
        s : text
        size : font size
        prop : font property
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12225 13223])
                    ("set_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13242 13246])
                            ("size" variable nil (reparse-symbol function_parameters) [13248 13252]))                          
                        :documentation "
        set the size of the text
        ")
                        (reparse-symbol indented_block_body) [13229 13367])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13385 13389]))                          
                        :documentation "
        get the size of the text
        ")
                        (reparse-symbol indented_block_body) [13372 13475])
                    ("_get_vertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13498 13502]))                          
                        :documentation "
        Return the cached path after updating it if necessary.
        ")
                        (reparse-symbol indented_block_body) [13480 13661])
                    ("_get_codes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13681 13685]))                          
                        :documentation "
        Return the codes
        ")
                        (reparse-symbol indented_block_body) [13666 13764])
                    ("vertices" variable nil (reparse-symbol indented_block_body) [13769 13803])
                    ("codes" variable nil (reparse-symbol indented_block_body) [13808 13836])
                    ("_revalidate_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13863 13867]))                          
                        :documentation "
        update the path if necessary.

        The path for the text is initially create with the font size
        of FONT_SCALE, and this path is rescaled to other size when
        necessary.

        ")
                        (reparse-symbol indented_block_body) [13842 14428])
                    ("is_math_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14451 14455])
                            ("s" variable nil (reparse-symbol function_parameters) [14457 14458]))                          
                        :documentation "
        Returns True if the given string *s* contains any mathtext.
        ")
                        (reparse-symbol indented_block_body) [14434 15007])
                    ("text_get_vertices_codes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15040 15044])
                            ("prop" variable nil (reparse-symbol function_parameters) [15046 15050])
                            ("s" variable nil (reparse-symbol function_parameters) [15052 15053])
                            ("usetex" variable nil (reparse-symbol function_parameters) [15055 15061]))                          
                        :documentation "
        convert the string *s* to vertices and codes using the
        provided font property *prop*. Mostly copied from
        backend_svg.py.
        ")
                        (reparse-symbol indented_block_body) [15012 15513]))                  
                :type "class")
                nil [12149 15513]))          
      :file "textpath.py"
      :pointmax 15517
      :fsize 15516
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for parsing and generating fontconfig patterns.

See the `fontconfig pattern specification
<http://www.fontconfig.org/fontconfig-user.html>`_ for more
information.
\"\"\"" code nil nil [1 181])
            ("re" include nil nil [761 770])
            ("matplotlib.pyparsing" include nil nil [771 883])
            ("family_punc" variable nil nil [885 908])
            ("family_unescape" variable nil nil [909 968])
            ("family_escape" variable nil nil [969 1024])
            ("value_punc" variable nil nil [1026 1048])
            ("value_unescape" variable nil nil [1049 1106])
            ("value_escape" variable nil nil [1107 1160])
            ("FontconfigPatternParser" type
               (:documentation "A simple pyparsing-based parser for fontconfig-style patterns.

    See the `fontconfig pattern specification
    <http://www.fontconfig.org/fontconfig-user.html>`_ for more
    information.
    "
                :members 
                  ( ("_constants" variable nil (reparse-symbol indented_block_body) [1404 2640])
                    ("__init__" function
                       (:suite 
                          ( ("family" variable nil (reparse-symbol indented_block_body) [2674 2826])
                            ("size" variable nil (reparse-symbol indented_block_body) [2835 2937])
                            ("name" variable nil (reparse-symbol indented_block_body) [2946 3028])
                            ("value" variable nil (reparse-symbol indented_block_body) [3037 3186])
                            ("families" variable nil (reparse-symbol indented_block_body) [3196 3372])
                            ("point_sizes" variable nil (reparse-symbol indented_block_body) [3382 3557])
                            ("property" variable nil (reparse-symbol indented_block_body) [3567 3888])
                            ("pattern" variable nil (reparse-symbol indented_block_body) [3898 4222])
                            ("self" variable nil (reparse-symbol indented_block_body) [4232 4254])
                            ("self" variable nil (reparse-symbol indented_block_body) [4263 4299]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2659 2663]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2646 4300])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4315 4319])
                            ("pattern" variable nil (reparse-symbol function_parameters) [4321 4328]))                          
                        :documentation "
        Parse the given fontconfig *pattern* and return a dictionary
        of key/value pairs useful for initializing a
        :class:`font_manager.FontProperties` object.
        ")
                        (reparse-symbol indented_block_body) [4305 4805])
                    ("_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4822 4826])
                            ("s" variable nil (reparse-symbol function_parameters) [4828 4829])
                            ("loc" variable nil (reparse-symbol function_parameters) [4831 4834])
                            ("tokens" variable nil (reparse-symbol function_parameters) [4836 4842]))                          )
                        (reparse-symbol indented_block_body) [4810 4901])
                    ("_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4916 4920])
                            ("s" variable nil (reparse-symbol function_parameters) [4922 4923])
                            ("loc" variable nil (reparse-symbol function_parameters) [4925 4928])
                            ("tokens" variable nil (reparse-symbol function_parameters) [4930 4936]))                          )
                        (reparse-symbol indented_block_body) [4906 4973])
                    ("_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4988 4992])
                            ("s" variable nil (reparse-symbol function_parameters) [4994 4995])
                            ("loc" variable nil (reparse-symbol function_parameters) [4997 5000])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5002 5008]))                          )
                        (reparse-symbol indented_block_body) [4978 5043])
                    ("_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5059 5063])
                            ("s" variable nil (reparse-symbol function_parameters) [5065 5066])
                            ("loc" variable nil (reparse-symbol function_parameters) [5068 5071])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5073 5079]))                          )
                        (reparse-symbol indented_block_body) [5048 5137])
                    ("_families" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5156 5160])
                            ("s" variable nil (reparse-symbol function_parameters) [5162 5163])
                            ("loc" variable nil (reparse-symbol function_parameters) [5165 5168])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5170 5176]))                          )
                        (reparse-symbol indented_block_body) [5142 5259])
                    ("_point_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5281 5285])
                            ("s" variable nil (reparse-symbol function_parameters) [5287 5288])
                            ("loc" variable nil (reparse-symbol function_parameters) [5290 5293])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5295 5301]))                          )
                        (reparse-symbol indented_block_body) [5264 5382])
                    ("_property" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5401 5405])
                            ("s" variable nil (reparse-symbol function_parameters) [5407 5408])
                            ("loc" variable nil (reparse-symbol function_parameters) [5410 5413])
                            ("tokens" variable nil (reparse-symbol function_parameters) [5415 5421]))                          )
                        (reparse-symbol indented_block_body) [5387 5767]))                  
                :type "class")
                nil [1162 5767])
            ("parse_fontconfig_pattern" variable nil nil [5768 5826])
            ("generate_fontconfig_pattern" function
               (:documentation "
    Given a dictionary of key/value pairs, generates a fontconfig
    pattern string.
    "
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [5860 5861]))                  )
                nil [5828 6430]))          
      :file "fontconfig_pattern.py"
      :pointmax 6430
      :fsize 6429
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Classes for the ticks and x and y axis
\"\"\"" code nil nil [1 47])
            ("__future__" include nil nil [48 79])
            ("matplotlib" include nil nil [81 113])
            ("matplotlib.artist" include nil nil [114 148])
            ("matplotlib.artist" include nil nil [149 198])
            ("matplotlib.cbook" include nil nil [199 231])
            ("matplotlib.font_manager" include nil nil [232 278])
            ("matplotlib.lines" include nil nil [279 312])
            ("matplotlib.patches" include nil nil [313 350])
            ("matplotlib.scale" include nil nil [351 384])
            ("matplotlib.text" include nil nil [385 416])
            ("matplotlib.ticker" include nil nil [417 452])
            ("matplotlib.transforms" include nil nil [453 496])
            ("matplotlib.units" include nil nil [497 530])
            ("numpy" include nil nil [531 549])
            ("GRIDLINE_INTERPOLATION_STEPS" variable nil nil [551 585])
            ("Tick" type
               (:documentation "
    Abstract base class for the axis ticks, grid lines and labels

    1 refers to the bottom of the plot for xticks and the left for yticks
    2 refers to the top of the plot for xticks and the right for yticks

    Publicly accessible attributes:

      :attr:`tick1line`
          a Line2D instance

      :attr:`tick2line`
          a Line2D instance

      :attr:`gridline`
          a Line2D instance

      :attr:`label1`
          a Text instance

      :attr:`label2`
          a Text instance

      :attr:`gridOn`
          a boolean which determines whether to draw the tickline

      :attr:`tick1On`
          a boolean which determines whether to draw the 1st tickline

      :attr:`tick2On`
          a boolean which determines whether to draw the 2nd tickline

      :attr:`label1On`
          a boolean which determines whether to draw tick label

      :attr:`label2On`
          a boolean which determines whether to draw tick label

    "
                :superclasses ("artist.Artist")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        bbox is the Bound2D bounding box in display coords of the Axes
        loc is the tick location in data coords
        size is the tick size in points
        \"\"\"" code nil (reparse-symbol indented_block_body) [2145 2319])
                            ("artist" code nil (reparse-symbol indented_block_body) [2328 2356])
                            ("if" code nil (reparse-symbol indented_block_body) [2366 2428])
                            ("self" code nil (reparse-symbol indented_block_body) [2437 2465])
                            ("self" variable nil (reparse-symbol indented_block_body) [2474 2490])
                            ("name" variable nil (reparse-symbol indented_block_body) [2500 2528])
                            ("self" variable nil (reparse-symbol indented_block_body) [2537 2554])
                            ("self" variable nil (reparse-symbol indented_block_body) [2564 2579])
                            ("if" code nil (reparse-symbol indented_block_body) [2589 2754])
                            ("self" variable nil (reparse-symbol indented_block_body) [2762 2779])
                            ("if" code nil (reparse-symbol indented_block_body) [2789 2959])
                            ("self" variable nil (reparse-symbol indented_block_body) [2967 2986])
                            ("if" code nil (reparse-symbol indented_block_body) [2996 3062])
                            ("self" variable nil (reparse-symbol indented_block_body) [3070 3089])
                            ("if" code nil (reparse-symbol indented_block_body) [3099 3259])
                            ("self" variable nil (reparse-symbol indented_block_body) [3267 3287])
                            ("if" code nil (reparse-symbol indented_block_body) [3297 3373])
                            ("self" variable nil (reparse-symbol indented_block_body) [3381 3410])
                            ("if" code nil (reparse-symbol indented_block_body) [3420 3498])
                            ("self" variable nil (reparse-symbol indented_block_body) [3506 3533])
                            ("if" code nil (reparse-symbol indented_block_body) [3543 3701])
                            ("self" variable nil (reparse-symbol indented_block_body) [3709 3730])
                            ("self" code nil (reparse-symbol indented_block_body) [3740 3767])
                            ("self" variable nil (reparse-symbol indented_block_body) [3777 3815])
                            ("self" variable nil (reparse-symbol indented_block_body) [3824 3862])
                            ("self" variable nil (reparse-symbol indented_block_body) [3871 3907])
                            ("self" variable nil (reparse-symbol indented_block_body) [3917 3948])
                            ("self" variable nil (reparse-symbol indented_block_body) [3957 3981])
                            ("self" variable nil (reparse-symbol indented_block_body) [4005 4036])
                            ("self" variable nil (reparse-symbol indented_block_body) [4046 4066])
                            ("self" variable nil (reparse-symbol indented_block_body) [4075 4097])
                            ("self" variable nil (reparse-symbol indented_block_body) [4106 4128])
                            ("self" variable nil (reparse-symbol indented_block_body) [4137 4161])
                            ("self" variable nil (reparse-symbol indented_block_body) [4170 4194])
                            ("self" code nil (reparse-symbol indented_block_body) [4204 4229]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1602 1606])
                            ("axes" variable nil (reparse-symbol function_parameters) [1608 1612])
                            ("loc" variable nil (reparse-symbol function_parameters) [1614 1617])
                            ("label" variable nil (reparse-symbol function_parameters) [1619 1624])
                            ("size" variable nil (reparse-symbol function_parameters) [1644 1648])
                            ("width" variable nil (reparse-symbol function_parameters) [1684 1689])
                            ("color" variable nil (reparse-symbol function_parameters) [1715 1720])
                            ("tickdir" variable nil (reparse-symbol function_parameters) [1746 1753])
                            ("pad" variable nil (reparse-symbol function_parameters) [1779 1782])
                            ("labelsize" variable nil (reparse-symbol function_parameters) [1808 1817])
                            ("labelcolor" variable nil (reparse-symbol function_parameters) [1843 1853])
                            ("zorder" variable nil (reparse-symbol function_parameters) [1879 1885])
                            ("gridOn" variable nil (reparse-symbol function_parameters) [1912 1918])
                            ("tick1On" variable nil (reparse-symbol function_parameters) [1968 1975])
                            ("tick2On" variable nil (reparse-symbol function_parameters) [2001 2008])
                            ("label1On" variable nil (reparse-symbol function_parameters) [2034 2042])
                            ("label2On" variable nil (reparse-symbol function_parameters) [2068 2076])
                            ("major" variable nil (reparse-symbol function_parameters) [2103 2108]))                          
                        :documentation "
        bbox is the Bound2D bounding box in display coords of the Axes
        loc is the tick location in data coords
        size is the tick size in points
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1589 4230])
                    ("apply_tickdir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4253 4257])
                            ("tickdir" variable nil (reparse-symbol function_parameters) [4259 4266]))                          
                        :documentation "
        Calculate self._pad and self._tickmarkers
        ")
                        (reparse-symbol indented_block_body) [4235 4356])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4379 4383]))                          )
                        (reparse-symbol indented_block_body) [4362 4503])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4526 4530])
                            ("clippath" variable nil (reparse-symbol function_parameters) [4532 4540])
                            ("transform" variable nil (reparse-symbol function_parameters) [4542 4551]))                          )
                        (reparse-symbol indented_block_body) [4508 4797])
                    ("set_clip_path" variable nil (reparse-symbol indented_block_body) [4801 4860])
                    ("get_pad_pixels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4885 4889]))                          )
                        (reparse-symbol indented_block_body) [4866 4947])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4965 4969])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [4971 4981]))                          
                        :documentation "
        Test whether the mouse event occurred in the Tick marks.

        This function always returns false.  It is more useful to test if the
        axis as a whole contains the mouse rather than the set of tick marks.
        ")
                        (reparse-symbol indented_block_body) [4952 5330])
                    ("set_pad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5347 5351])
                            ("val" variable nil (reparse-symbol function_parameters) [5353 5356]))                          
                        :documentation "
        Set the tick label pad in points

        ACCEPTS: float
        ")
                        (reparse-symbol indented_block_body) [5335 5484])
                    ("get_pad" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5501 5505]))                          )
                        (reparse-symbol indented_block_body) [5489 5594])
                    ("_get_text1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5614 5618]))                          )
                        (reparse-symbol indented_block_body) [5599 5676])
                    ("_get_text2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5696 5700]))                          )
                        (reparse-symbol indented_block_body) [5681 5758])
                    ("_get_tick1line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5782 5786]))                          )
                        (reparse-symbol indented_block_body) [5763 5854])
                    ("_get_tick2line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5878 5882]))                          )
                        (reparse-symbol indented_block_body) [5859 5950])
                    ("_get_gridline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5973 5977]))                          )
                        (reparse-symbol indented_block_body) [5955 6054])
                    ("get_loc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6072 6076]))                          )
                        (reparse-symbol indented_block_body) [6060 6165])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6204 6208])
                            ("renderer" variable nil (reparse-symbol function_parameters) [6210 6218]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6170 6818])
                    ("set_label1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6838 6842])
                            ("s" variable nil (reparse-symbol function_parameters) [6844 6845]))                          
                        :documentation "
        Set the text of ticklabel

        ACCEPTS: str
        ")
                        (reparse-symbol indented_block_body) [6823 6960])
                    ("set_label" variable nil (reparse-symbol indented_block_body) [6964 6986])
                    ("set_label2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7007 7011])
                            ("s" variable nil (reparse-symbol function_parameters) [7013 7014]))                          
                        :documentation "
        Set the text of ticklabel2

        ACCEPTS: str
        ")
                        (reparse-symbol indented_block_body) [6992 7130])
                    ("_set_artist_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7157 7161])
                            ("a" variable nil (reparse-symbol function_parameters) [7163 7164]))                          )
                        (reparse-symbol indented_block_body) [7135 7201])
                    ("get_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7301 7305]))                          )
                        (reparse-symbol indented_block_body) [7279 7445])
                    ("_apply_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7468 7472])
                            ("kw" variable nil (reparse-symbol function_parameters) [7474 7478]))                          )
                        (reparse-symbol indented_block_body) [7450 9250]))                  
                :type "class")
                nil [587 9250])
            ("XTick" type
               (:documentation "
    Contains all the Artists needed to make an x tick - the tick line,
    the label text and the grid line
    "
                :superclasses ("Tick")
                :members 
                  ( ("__name__" variable nil (reparse-symbol indented_block_body) [9400 9418])
                    ("_get_text1_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9449 9453]))                          )
                        (reparse-symbol indented_block_body) [9424 9518])
                    ("_get_text2_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9548 9552]))                          )
                        (reparse-symbol indented_block_body) [9523 9617])
                    ("apply_tickdir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9640 9644])
                            ("tickdir" variable nil (reparse-symbol function_parameters) [9646 9653]))                          )
                        (reparse-symbol indented_block_body) [9622 10046])
                    ("_get_text1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10067 10071]))                          )
                        (reparse-symbol indented_block_body) [10052 10679])
                    ("_get_text2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10700 10704]))                          )
                        (reparse-symbol indented_block_body) [10685 11209])
                    ("_get_tick1line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11233 11237]))                          )
                        (reparse-symbol indented_block_body) [11214 11776])
                    ("_get_tick2line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11800 11804]))                          )
                        (reparse-symbol indented_block_body) [11781 12373])
                    ("_get_gridline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12396 12400]))                          )
                        (reparse-symbol indented_block_body) [12378 12928])
                    ("update_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12953 12957])
                            ("loc" variable nil (reparse-symbol function_parameters) [12959 12962]))                          )
                        (reparse-symbol indented_block_body) [12933 13779])
                    ("get_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13806 13810]))                          )
                        (reparse-symbol indented_block_body) [13784 13921]))                  
                :type "class")
                nil [9253 13921])
            ("YTick" type
               (:documentation "
    Contains all the Artists needed to make a Y tick - the tick line,
    the label text and the grid line
    "
                :superclasses ("Tick")
                :members 
                  ( ("__name__" variable nil (reparse-symbol indented_block_body) [14069 14087])
                    ("_get_text1_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14118 14122]))                          )
                        (reparse-symbol indented_block_body) [14093 14187])
                    ("_get_text2_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14217 14221]))                          )
                        (reparse-symbol indented_block_body) [14192 14286])
                    ("apply_tickdir" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14309 14313])
                            ("tickdir" variable nil (reparse-symbol function_parameters) [14315 14322]))                          )
                        (reparse-symbol indented_block_body) [14291 14721])
                    ("_get_text1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14808 14812]))                          )
                        (reparse-symbol indented_block_body) [14793 15336])
                    ("_get_text2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15356 15360]))                          )
                        (reparse-symbol indented_block_body) [15341 15836])
                    ("_get_tick1line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15860 15864]))                          )
                        (reparse-symbol indented_block_body) [15841 16400])
                    ("_get_tick2line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16424 16428]))                          )
                        (reparse-symbol indented_block_body) [16405 16963])
                    ("_get_gridline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16986 16990]))                          )
                        (reparse-symbol indented_block_body) [16968 17516])
                    ("update_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17542 17546])
                            ("loc" variable nil (reparse-symbol function_parameters) [17548 17551]))                          )
                        (reparse-symbol indented_block_body) [17522 18370])
                    ("get_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18398 18402]))                          )
                        (reparse-symbol indented_block_body) [18376 18513]))                  
                :type "class")
                nil [13923 18513])
            ("Ticker" type
               (:members 
                  ( ("locator" variable nil (reparse-symbol indented_block_body) [18533 18547])
                    ("formatter" variable nil (reparse-symbol indented_block_body) [18552 18568]))                  
                :type "class")
                nil [18515 18569])
            ("Axis" type
               (:documentation "
    Public attributes

    * :attr:`axes.transData` - transform data coords to display coords
    * :attr:`axes.transAxes` - transform axis coords to display coords
    * :attr:`labelpad` - number of points between the axis and its label
    "
                :superclasses ("artist.Artist")
                :members 
                  ( ("OFFSETTEXTPAD" variable nil (reparse-symbol indented_block_body) [18858 18875])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18893 18897]))                          )
                        (reparse-symbol indented_block_body) [18881 19015])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Init the axis with the parent Axes instance
        \"\"\"" code nil (reparse-symbol indented_block_body) [19069 19136])
                            ("artist" code nil (reparse-symbol indented_block_body) [19145 19173])
                            ("self" code nil (reparse-symbol indented_block_body) [19182 19210])
                            ("self" variable nil (reparse-symbol indented_block_body) [19451 19479])
                            ("self" variable nil (reparse-symbol indented_block_body) [19488 19516])
                            ("self" variable nil (reparse-symbol indented_block_body) [19525 19553])
                            ("self" variable nil (reparse-symbol indented_block_body) [19562 19590])
                            ("self" variable nil (reparse-symbol indented_block_body) [19599 19626])
                            ("self" variable nil (reparse-symbol indented_block_body) [19636 19652])
                            ("self" variable nil (reparse-symbol indented_block_body) [19661 19682])
                            ("self" variable nil (reparse-symbol indented_block_body) [19691 19712])
                            ("self" variable nil (reparse-symbol indented_block_body) [19721 19762])
                            ("self" variable nil (reparse-symbol indented_block_body) [19913 19938])
                            ("self" variable nil (reparse-symbol indented_block_body) [19947 19973])
                            ("self" variable nil (reparse-symbol indented_block_body) [19983 20013])
                            ("self" variable nil (reparse-symbol indented_block_body) [20022 20039])
                            ("self" variable nil (reparse-symbol indented_block_body) [20048 20089])
                            ("self" variable nil (reparse-symbol indented_block_body) [20098 20118])
                            ("self" variable nil (reparse-symbol indented_block_body) [20127 20147])
                            ("self" variable nil (reparse-symbol indented_block_body) [20156 20184])
                            ("self" variable nil (reparse-symbol indented_block_body) [20247 20275])
                            ("self" variable nil (reparse-symbol indented_block_body) [20284 20312])
                            ("self" code nil (reparse-symbol indented_block_body) [20322 20332])
                            ("self" code nil (reparse-symbol indented_block_body) [20341 20365]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19033 19037])
                            ("axes" variable nil (reparse-symbol function_parameters) [19039 19043])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [19045 19055]))                          
                        :documentation "
        Init the axis with the parent Axes instance
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19020 20366])
                    ("set_label_coords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20393 20397])
                            ("x" variable nil (reparse-symbol function_parameters) [20399 20400])
                            ("y" variable nil (reparse-symbol function_parameters) [20402 20403])
                            ("transform" variable nil (reparse-symbol function_parameters) [20405 20414]))                          
                        :documentation "
        Set the coordinates of the label.  By default, the x
        coordinate of the y label is determined by the tick label
        bounding boxes, but this can lead to poor alignment of
        multiple ylabels if there are multiple axes.  Ditto for the y
        coodinate of the x label.

        You can also specify the coordinate system of the label with
        the transform.  If None, the default coordinate system will be
        the axes coordinate system (0,0) is (left,bottom), (0.5, 0.5)
        is middle, etc

        ")
                        (reparse-symbol indented_block_body) [20372 21170])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21193 21197]))                          )
                        (reparse-symbol indented_block_body) [21175 21243])
                    ("get_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21262 21266]))                          )
                        (reparse-symbol indented_block_body) [21248 21301])
                    ("set_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21320 21324])
                            ("value" variable nil (reparse-symbol function_parameters) [21326 21331])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [21333 21341]))                          )
                        (reparse-symbol indented_block_body) [21306 21621])
                    ("limit_range_for_scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21652 21656])
                            ("vmin" variable nil (reparse-symbol function_parameters) [21658 21662])
                            ("vmax" variable nil (reparse-symbol function_parameters) [21664 21668]))                          )
                        (reparse-symbol indented_block_body) [21626 21751])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21773 21777]))                          )
                        (reparse-symbol indented_block_body) [21756 22014])
                    ("cla" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22027 22031]))                          )
                        (reparse-symbol indented_block_body) [22019 23216])
                    ("reset_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23237 23241]))                          )
                        (reparse-symbol indented_block_body) [23221 23667])
                    ("set_tick_params" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23692 23696])
                            ("which" variable nil (reparse-symbol function_parameters) [23698 23703])
                            ("reset" variable nil (reparse-symbol function_parameters) [23713 23718])
                            ("kw" variable nil (reparse-symbol function_parameters) [23726 23730]))                          
                        :documentation "
        Set appearance parameters for ticks and ticklabels.

        For documentation of keyword arguments, see
        :meth:`matplotlib.axes.Axes.tick_params`.
        ")
                        (reparse-symbol indented_block_body) [23672 24675])
                    ("_translate_tick_kw" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("kw" variable nil (reparse-symbol function_parameters) [24721 24723])
                            ("to_init_kw" variable nil (reparse-symbol function_parameters) [24725 24735]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24680 27230])
                    ("set_clip_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27253 27257])
                            ("clippath" variable nil (reparse-symbol function_parameters) [27259 27267])
                            ("transform" variable nil (reparse-symbol function_parameters) [27269 27278]))                          )
                        (reparse-symbol indented_block_body) [27235 27546])
                    ("get_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27573 27577]))                          )
                        (reparse-symbol indented_block_body) [27551 27704])
                    ("set_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27731 27735])
                            ("vmin" variable nil (reparse-symbol function_parameters) [27737 27741])
                            ("vmax" variable nil (reparse-symbol function_parameters) [27743 27747])
                            ("ignore" variable nil (reparse-symbol function_parameters) [27749 27755]))                          )
                        (reparse-symbol indented_block_body) [27709 27823])
                    ("get_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27850 27854]))                          )
                        (reparse-symbol indented_block_body) [27828 27981])
                    ("set_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28008 28012]))                          )
                        (reparse-symbol indented_block_body) [27986 28109])
                    ("set_default_intervals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28140 28144]))                          )
                        (reparse-symbol indented_block_body) [28114 28772])
                    ("_set_artist_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28799 28803])
                            ("a" variable nil (reparse-symbol function_parameters) [28805 28806]))                          )
                        (reparse-symbol indented_block_body) [28777 28872])
                    ("iter_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28892 28896]))                          
                        :documentation "
        Iterate through all of the major and minor ticks.
        ")
                        (reparse-symbol indented_block_body) [28877 29678])
                    ("get_ticklabel_extents" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29709 29713])
                            ("renderer" variable nil (reparse-symbol function_parameters) [29715 29723]))                          
                        :documentation "
        Get the extents of the tick labels on either side
        of the axes.
        ")
                        (reparse-symbol indented_block_body) [29683 30334])
                    ("set_smart_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30360 30364])
                            ("value" variable nil (reparse-symbol function_parameters) [30365 30370]))                          
                        :documentation "set the axis to have smart bounds")
                        (reparse-symbol indented_block_body) [30339 30456])
                    ("get_smart_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30482 30486]))                          
                        :documentation "get whether the axis has smart bounds")
                        (reparse-symbol indented_block_body) [30461 30575])
                    ("_update_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30598 30602])
                            ("renderer" variable nil (reparse-symbol function_parameters) [30604 30612]))                          
                        :documentation "
        Update ticks (position and labels) using the current data
        interval of the axes. Returns a list of ticks that will be
        drawn.
        ")
                        (reparse-symbol indented_block_body) [30580 32994])
                    ("_get_tick_bboxes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33020 33024])
                            ("ticks" variable nil (reparse-symbol function_parameters) [33026 33031])
                            ("renderer" variable nil (reparse-symbol function_parameters) [33033 33041]))                          
                        :documentation "
        Given the list of ticks, return two lists of bboxes. One for
        tick lable1's and another for tick label2's.
        ")
                        (reparse-symbol indented_block_body) [32999 33666])
                    ("get_tightbbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33689 33693])
                            ("renderer" variable nil (reparse-symbol function_parameters) [33695 33703]))                          
                        :documentation "
        Return a bounding box that encloses the axis. It only accounts
        tick labels, axis label, and offsetText.
        ")
                        (reparse-symbol indented_block_body) [33671 34686])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34726 34730])
                            ("renderer" variable nil (reparse-symbol function_parameters) [34732 34740])
                            ("args" variable nil (reparse-symbol function_parameters) [34742 34747])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34749 34757]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [34692 35931])
                    ("_get_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35951 35955]))                          )
                        (reparse-symbol indented_block_body) [35936 36017])
                    ("_get_offset_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36043 36047]))                          )
                        (reparse-symbol indented_block_body) [36022 36109])
                    ("get_gridlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36132 36136]))                          )
                        (reparse-symbol indented_block_body) [36114 36326])
                    ("get_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36345 36349]))                          )
                        (reparse-symbol indented_block_body) [36331 36429])
                    ("get_offset_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36454 36458]))                          )
                        (reparse-symbol indented_block_body) [36434 36548])
                    ("get_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36572 36576]))                          )
                        (reparse-symbol indented_block_body) [36553 36668])
                    ("get_majorticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36697 36701]))                          )
                        (reparse-symbol indented_block_body) [36673 37018])
                    ("get_minorticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37047 37051]))                          )
                        (reparse-symbol indented_block_body) [37023 37368])
                    ("get_ticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37392 37396])
                            ("minor" variable nil (reparse-symbol function_parameters) [37398 37403]))                          )
                        (reparse-symbol indented_block_body) [37373 37575])
                    ("get_majorticklines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37603 37607]))                          )
                        (reparse-symbol indented_block_body) [37580 37905])
                    ("get_minorticklines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37933 37937]))                          )
                        (reparse-symbol indented_block_body) [37910 38235])
                    ("get_ticklines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38258 38262])
                            ("minor" variable nil (reparse-symbol function_parameters) [38264 38269]))                          )
                        (reparse-symbol indented_block_body) [38240 38444])
                    ("get_majorticklocs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38471 38475]))                          )
                        (reparse-symbol indented_block_body) [38449 38590])
                    ("get_minorticklocs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38617 38621]))                          )
                        (reparse-symbol indented_block_body) [38595 38736])
                    ("get_ticklocs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38758 38762])
                            ("minor" variable nil (reparse-symbol function_parameters) [38764 38769]))                          )
                        (reparse-symbol indented_block_body) [38741 38942])
                    ("_get_tick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38961 38965])
                            ("major" variable nil (reparse-symbol function_parameters) [38967 38972]))                          )
                        (reparse-symbol indented_block_body) [38947 39077])
                    ("_copy_tick_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39103 39107])
                            ("src" variable nil (reparse-symbol function_parameters) [39109 39112])
                            ("dest" variable nil (reparse-symbol function_parameters) [39114 39118]))                          )
                        (reparse-symbol indented_block_body) [39082 39602])
                    ("get_label_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39626 39630]))                          )
                        (reparse-symbol indented_block_body) [39607 39706])
                    ("get_major_locator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39733 39737]))                          )
                        (reparse-symbol indented_block_body) [39711 39820])
                    ("get_minor_locator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39847 39851]))                          )
                        (reparse-symbol indented_block_body) [39825 39934])
                    ("get_major_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39963 39967]))                          )
                        (reparse-symbol indented_block_body) [39939 40054])
                    ("get_minor_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40083 40087]))                          )
                        (reparse-symbol indented_block_body) [40059 40174])
                    ("get_major_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40199 40203])
                            ("numticks" variable nil (reparse-symbol function_parameters) [40205 40213]))                          )
                        (reparse-symbol indented_block_body) [40179 41050])
                    ("get_minor_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41076 41080])
                            ("numticks" variable nil (reparse-symbol function_parameters) [41082 41090]))                          )
                        (reparse-symbol indented_block_body) [41056 41935])
                    ("grid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41950 41954])
                            ("b" variable nil (reparse-symbol function_parameters) [41956 41957])
                            ("which" variable nil (reparse-symbol function_parameters) [41964 41969])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [41979 41987]))                          
                        :documentation "
        Set the axis grid on or off; b is a boolean. Use *which* =
        'major' | 'minor' | 'both' to set the grid for major or minor ticks.

        If *b* is *None* and len(kwargs)==0, toggle the grid state.  If
        *kwargs* are supplied, it is assumed you want the grid on and *b*
        will be set to True.

        *kwargs* are used to set the line properties of the grids, eg,

          xax.grid(color='r', linestyle='-', linewidth=2)
        ")
                        (reparse-symbol indented_block_body) [41941 43466])
                    ("update_units" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43488 43492])
                            ("data" variable nil (reparse-symbol function_parameters) [43494 43498]))                          
                        :documentation "
        introspect *data* for units converter and update the
        axis.converter instance if necessary. Return *True*
        if *data* is registered for unit conversion.
        ")
                        (reparse-symbol indented_block_body) [43471 44192])
                    ("_update_axisinfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44218 44222]))                          
                        :documentation "
        check the axis converter for the stored units to see if the
        axis info needs to be updated
        ")
                        (reparse-symbol indented_block_body) [44197 45450])
                    ("have_units" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45470 45474]))                          )
                        (reparse-symbol indented_block_body) [45455 45545])
                    ("convert_units" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45568 45572])
                            ("x" variable nil (reparse-symbol function_parameters) [45574 45575]))                          )
                        (reparse-symbol indented_block_body) [45550 46051])
                    ("set_units" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46070 46074])
                            ("u" variable nil (reparse-symbol function_parameters) [46076 46077]))                          
                        :documentation "
        set the units for axis

        ACCEPTS: a units tag
        ")
                        (reparse-symbol indented_block_body) [46056 46623])
                    ("get_units" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46642 46646]))                          )
                        (reparse-symbol indented_block_body) [46628 46711])
                    ("set_label_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46735 46739])
                            ("label" variable nil (reparse-symbol function_parameters) [46741 46746])
                            ("fontdict" variable nil (reparse-symbol function_parameters) [46748 46756])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [46765 46773]))                          
                        :documentation "  Sets the text value of the axis label

        ACCEPTS: A string value for the label
        ")
                        (reparse-symbol indented_block_body) [46716 47079])
                    ("set_major_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47108 47112])
                            ("formatter" variable nil (reparse-symbol function_parameters) [47114 47123]))                          
                        :documentation "
        Set the formatter of the major ticker

        ACCEPTS: A :class:`~matplotlib.ticker.Formatter` instance
        ")
                        (reparse-symbol indented_block_body) [47084 47375])
                    ("set_minor_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47405 47409])
                            ("formatter" variable nil (reparse-symbol function_parameters) [47411 47420]))                          
                        :documentation "
        Set the formatter of the minor ticker

        ACCEPTS: A :class:`~matplotlib.ticker.Formatter` instance
        ")
                        (reparse-symbol indented_block_body) [47381 47672])
                    ("set_major_locator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47700 47704])
                            ("locator" variable nil (reparse-symbol function_parameters) [47706 47713]))                          
                        :documentation "
        Set the locator of the major ticker

        ACCEPTS: a :class:`~matplotlib.ticker.Locator` instance
        ")
                        (reparse-symbol indented_block_body) [47678 47955])
                    ("set_minor_locator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47983 47987])
                            ("locator" variable nil (reparse-symbol function_parameters) [47989 47996]))                          
                        :documentation "
        Set the locator of the minor ticker

        ACCEPTS: a :class:`~matplotlib.ticker.Locator` instance
        ")
                        (reparse-symbol indented_block_body) [47961 48238])
                    ("set_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48262 48266])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [48268 48278]))                          
                        :documentation "
        Set the depth of the axis used by the picker

        ACCEPTS: a distance in points
        ")
                        (reparse-symbol indented_block_body) [48243 48434])
                    ("set_ticklabels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48459 48463])
                            ("ticklabels" variable nil (reparse-symbol function_parameters) [48465 48475])
                            ("args" variable nil (reparse-symbol function_parameters) [48477 48482])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [48484 48492]))                          
                        :documentation "
        Set the text values of the tick labels. Return a list of Text
        instances.  Use *kwarg* *minor=True* to select minor ticks.
        All other kwargs are used to update the text object properties.
        As for get_ticklabels, label1 (left or bottom) is
        affected for a given tick only if its label1On attribute
        is True, and similarly for label2.  The list of returned
        label text objects consists of all such label1 objects followed
        by all such label2 objects.

        The input *ticklabels* is assumed to match the set of
        tick locations, regardless of the state of label1On and
        label2On.

        ACCEPTS: sequence of strings
        ")
                        (reparse-symbol indented_block_body) [48440 50069])
                    ("set_ticks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50088 50092])
                            ("ticks" variable nil (reparse-symbol function_parameters) [50094 50099])
                            ("minor" variable nil (reparse-symbol function_parameters) [50101 50106]))                          
                        :documentation "
        Set the locations of the tick marks from sequence ticks

        ACCEPTS: sequence of floats
        ")
                        (reparse-symbol indented_block_body) [50074 50880])
                    ("_update_label_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50912 50916])
                            ("bboxes" variable nil (reparse-symbol function_parameters) [50918 50924])
                            ("bboxes2" variable nil (reparse-symbol function_parameters) [50926 50933]))                          
                        :documentation "
        Update the label position based on the sequence of bounding
        boxes of all the ticklabels
        ")
                        (reparse-symbol indented_block_body) [50885 51123])
                    ("_update_offset_text_postion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51160 51164])
                            ("bboxes" variable nil (reparse-symbol function_parameters) [51166 51172])
                            ("bboxes2" variable nil (reparse-symbol function_parameters) [51174 51181]))                          
                        :documentation "
        Update the label position based on the sequence of bounding
        boxes of all the ticklabels
        ")
                        (reparse-symbol indented_block_body) [51128 51371])
                    ("pan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51384 51388])
                            ("numsteps" variable nil (reparse-symbol function_parameters) [51390 51398]))                          )
                        (reparse-symbol indented_block_body) [51376 51497])
                    ("zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51511 51515])
                            ("direction" variable nil (reparse-symbol function_parameters) [51517 51526]))                          )
                        (reparse-symbol indented_block_body) [51502 51647])
                    ("axis_date" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51667 51671])
                            ("tz" variable nil (reparse-symbol function_parameters) [51673 51675]))                          
                        :documentation "
        Sets up x-axis ticks and labels that treat the x data as dates.
        *tz* is a :class:`tzinfo` instance or a timezone string.
        This timezone is used to create date labels.
        ")
                        (reparse-symbol indented_block_body) [51653 52300]))                  
                :type "class")
                nil [18572 52300])
            ("XAxis" type
               (:superclasses ("Axis")
                :members 
                  ( ("__name__" variable nil (reparse-symbol indented_block_body) [52325 52343])
                    ("axis_name" variable nil (reparse-symbol indented_block_body) [52348 52363])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52382 52386])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [52387 52397]))                          
                        :documentation "Test whether the mouse event occured in the x axis.
        ")
                        (reparse-symbol indented_block_body) [52369 53054])
                    ("_get_tick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53073 53077])
                            ("major" variable nil (reparse-symbol function_parameters) [53079 53084]))                          )
                        (reparse-symbol indented_block_body) [53059 53266])
                    ("_get_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53286 53290]))                          )
                        (reparse-symbol indented_block_body) [53271 54013])
                    ("_get_offset_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54039 54043]))                          )
                        (reparse-symbol indented_block_body) [54018 54694])
                    ("get_label_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54722 54726]))                          
                        :documentation "
        Return the label position (top or bottom)
        ")
                        (reparse-symbol indented_block_body) [54699 54838])
                    ("set_label_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54866 54870])
                            ("position" variable nil (reparse-symbol function_parameters) [54872 54880]))                          
                        :documentation "
        Set the label position (top or bottom)

        ACCEPTS: [ 'top' | 'bottom' ]
        ")
                        (reparse-symbol indented_block_body) [54843 55240])
                    ("_update_label_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55272 55276])
                            ("bboxes" variable nil (reparse-symbol function_parameters) [55278 55284])
                            ("bboxes2" variable nil (reparse-symbol function_parameters) [55286 55293]))                          
                        :documentation "
        Update the label position based on the sequence of bounding
        boxes of all the ticklabels
        ")
                        (reparse-symbol indented_block_body) [55245 56098])
                    ("_update_offset_text_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56136 56140])
                            ("bboxes" variable nil (reparse-symbol function_parameters) [56142 56148])
                            ("bboxes2" variable nil (reparse-symbol function_parameters) [56150 56157]))                          
                        :documentation "
        Update the offset_text position based on the sequence of bounding
        boxes of all the ticklabels
        ")
                        (reparse-symbol indented_block_body) [56103 56591])
                    ("get_text_heights" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56617 56621])
                            ("renderer" variable nil (reparse-symbol function_parameters) [56623 56631]))                          
                        :documentation "
        Returns the amount of space one should reserve for text
        above and below the axes.  Returns a tuple (above, below)
        ")
                        (reparse-symbol indented_block_body) [56596 57384])
                    ("set_ticks_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57412 57416])
                            ("position" variable nil (reparse-symbol function_parameters) [57418 57426]))                          
                        :documentation "
        Set the ticks position (top, bottom, both, default or none)
        both sets the ticks to appear on both positions, but does not
        change the tick labels.  'default' resets the tick positions to
        the default: ticks on both positions, labels at bottom.  'none'
        can be used if you don't want any ticks. 'none' and 'both'
        affect only the ticks, not the labels.

        ACCEPTS: [ 'top' | 'bottom' | 'both' | 'default' | 'none' ]
        ")
                        (reparse-symbol indented_block_body) [57389 58784])
                    ("tick_top" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58802 58806]))                          )
                        (reparse-symbol indented_block_body) [58789 58880])
                    ("tick_bottom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58901 58905]))                          )
                        (reparse-symbol indented_block_body) [58885 58985])
                    ("get_ticks_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59013 59017]))                          
                        :documentation "
        Return the ticks position (top, bottom, default or unknown)
        ")
                        (reparse-symbol indented_block_body) [58990 59913])
                    ("get_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59940 59944]))                          )
                        (reparse-symbol indented_block_body) [59918 60055])
                    ("set_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60082 60086])
                            ("vmin" variable nil (reparse-symbol function_parameters) [60088 60092])
                            ("vmax" variable nil (reparse-symbol function_parameters) [60094 60098])
                            ("ignore" variable nil (reparse-symbol function_parameters) [60100 60106]))                          
                        :documentation "
        If *ignore* is *False*, the order of vmin, vmax
        does not matter; the original axis orientation will
        be preserved. In addition, the view limits can be
        expanded, but will not be reduced.  This method is
        for mpl internal use; for normal use, see
        :meth:`~matplotlib.axes.Axes.set_xlim`.

        ")
                        (reparse-symbol indented_block_body) [60060 60933])
                    ("get_minpos" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60953 60957]))                          )
                        (reparse-symbol indented_block_body) [60938 61001])
                    ("get_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61028 61032]))                          )
                        (reparse-symbol indented_block_body) [61006 61143])
                    ("set_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61170 61174])
                            ("vmin" variable nil (reparse-symbol function_parameters) [61176 61180])
                            ("vmax" variable nil (reparse-symbol function_parameters) [61182 61186])
                            ("ignore" variable nil (reparse-symbol function_parameters) [61188 61194]))                          )
                        (reparse-symbol indented_block_body) [61148 61449])
                    ("set_default_intervals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61481 61485]))                          )
                        (reparse-symbol indented_block_body) [61455 62291]))                  
                :type "class")
                nil [52302 62291])
            ("YAxis" type
               (:superclasses ("Axis")
                :members 
                  ( ("__name__" variable nil (reparse-symbol indented_block_body) [62317 62335])
                    ("axis_name" variable nil (reparse-symbol indented_block_body) [62340 62355])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62374 62378])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [62379 62389]))                          
                        :documentation "Test whether the mouse event occurred in the y axis.

        Returns *True* | *False*
        ")
                        (reparse-symbol indented_block_body) [62361 63081])
                    ("_get_tick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63100 63104])
                            ("major" variable nil (reparse-symbol function_parameters) [63106 63111]))                          )
                        (reparse-symbol indented_block_body) [63086 63293])
                    ("_get_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63314 63318]))                          )
                        (reparse-symbol indented_block_body) [63299 64096])
                    ("_get_offset_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64122 64126]))                          )
                        (reparse-symbol indented_block_body) [64101 64784])
                    ("get_label_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64812 64816]))                          
                        :documentation "
        Return the label position (left or right)
        ")
                        (reparse-symbol indented_block_body) [64789 64928])
                    ("set_label_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64956 64960])
                            ("position" variable nil (reparse-symbol function_parameters) [64962 64970]))                          
                        :documentation "
        Set the label position (left or right)

        ACCEPTS: [ 'left' | 'right' ]
        ")
                        (reparse-symbol indented_block_body) [64933 65334])
                    ("_update_label_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65366 65370])
                            ("bboxes" variable nil (reparse-symbol function_parameters) [65372 65378])
                            ("bboxes2" variable nil (reparse-symbol function_parameters) [65380 65387]))                          
                        :documentation "
        Update the label position based on the sequence of bounding
        boxes of all the ticklabels
        ")
                        (reparse-symbol indented_block_body) [65339 66186])
                    ("_update_offset_text_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66224 66228])
                            ("bboxes" variable nil (reparse-symbol function_parameters) [66230 66236])
                            ("bboxes2" variable nil (reparse-symbol function_parameters) [66238 66245]))                          
                        :documentation "
        Update the offset_text position based on the sequence of bounding
        boxes of all the ticklabels
        ")
                        (reparse-symbol indented_block_body) [66191 66548])
                    ("set_offset_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66577 66581])
                            ("position" variable nil (reparse-symbol function_parameters) [66583 66591]))                          )
                        (reparse-symbol indented_block_body) [66553 66840])
                    ("get_text_widths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66865 66869])
                            ("renderer" variable nil (reparse-symbol function_parameters) [66871 66879]))                          )
                        (reparse-symbol indented_block_body) [66845 67469])
                    ("set_ticks_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67497 67501])
                            ("position" variable nil (reparse-symbol function_parameters) [67503 67511]))                          
                        :documentation "
        Set the ticks position (left, right, both, default or none)
        'both' sets the ticks to appear on both positions, but does not
        change the tick labels.  'default' resets the tick positions to
        the default: ticks on both positions, labels at left.  'none'
        can be used if you don't want any ticks. 'none' and 'both'
        affect only the ticks, not the labels.

        ACCEPTS: [ 'left' | 'right' | 'both' | 'default' | 'none' ]
        ")
                        (reparse-symbol indented_block_body) [67474 68869])
                    ("tick_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68889 68893]))                          )
                        (reparse-symbol indented_block_body) [68874 68971])
                    ("tick_left" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68990 68994]))                          )
                        (reparse-symbol indented_block_body) [68976 69070])
                    ("get_ticks_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69098 69102]))                          
                        :documentation "
        Return the ticks position (left, right, both or unknown)
        ")
                        (reparse-symbol indented_block_body) [69075 69995])
                    ("get_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70022 70026]))                          )
                        (reparse-symbol indented_block_body) [70000 70137])
                    ("set_view_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70164 70168])
                            ("vmin" variable nil (reparse-symbol function_parameters) [70170 70174])
                            ("vmax" variable nil (reparse-symbol function_parameters) [70176 70180])
                            ("ignore" variable nil (reparse-symbol function_parameters) [70182 70188]))                          
                        :documentation "
        If *ignore* is *False*, the order of vmin, vmax
        does not matter; the original axis orientation will
        be preserved. In addition, the view limits can be
        expanded, but will not be reduced.  This method is
        for mpl internal use; for normal use, see
        :meth:`~matplotlib.axes.Axes.set_ylim`.

        ")
                        (reparse-symbol indented_block_body) [70142 71015])
                    ("get_minpos" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71035 71039]))                          )
                        (reparse-symbol indented_block_body) [71020 71083])
                    ("get_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71110 71114]))                          )
                        (reparse-symbol indented_block_body) [71088 71225])
                    ("set_data_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71252 71256])
                            ("vmin" variable nil (reparse-symbol function_parameters) [71258 71262])
                            ("vmax" variable nil (reparse-symbol function_parameters) [71264 71268])
                            ("ignore" variable nil (reparse-symbol function_parameters) [71270 71276]))                          )
                        (reparse-symbol indented_block_body) [71230 71531])
                    ("set_default_intervals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71562 71566]))                          )
                        (reparse-symbol indented_block_body) [71536 72372]))                  
                :type "class")
                nil [62294 72372]))          
      :file "axis.py"
      :pointmax 72372
      :fsize 72371
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Classes for the efficient drawing of large collections of objects that
share most properties, e.g. a large number of line segments or
polygons.

The classes are not meant to be as flexible as their single element
counterparts (e.g. you may not be able to select all line styles) but
they are meant to be fast for common use cases (e.g. a large set of solid
line segemnts)
\"\"\"" code nil nil [1 380])
            ("warnings" include nil nil [381 396])
            ("numpy" include nil nil [397 415])
            ("numpy.ma" include nil nil [416 437])
            ("matplotlib" include nil nil [438 462])
            ("matplotlib.cbook" include nil nil [463 495])
            ("matplotlib.colors" include nil nil [496 531])
            ("matplotlib.cm" include nil nil [532 558])
            ("matplotlib" include nil nil [559 591])
            ("matplotlib.transforms" include nil nil [592 634])
            ("matplotlib.artist" include nil nil [635 669])
            ("matplotlib.artist" include nil nil [670 719])
            ("matplotlib.backend_bases" include nil nil [720 768])
            ("matplotlib.path" include nil nil [769 800])
            ("matplotlib.mlab" include nil nil [801 831])
            ("Collection" type
               (:documentation "
    Base class for Collections.  Must be subclassed to be usable.

    All properties in a collection must be sequences or scalars;
    if scalars, they will be converted to sequences.  The
    property of the ith element of the collection is::

      prop[i % len(props)]

    Keyword arguments and default values:

        * *edgecolors*: None
        * *facecolors*: None
        * *linewidths*: None
        * *antialiaseds*: None
        * *offsets*: None
        * *transOffset*: transforms.IdentityTransform()
        * *norm*: None (optional for
          :class:`matplotlib.cm.ScalarMappable`)
        * *cmap*: None (optional for
          :class:`matplotlib.cm.ScalarMappable`)

    *offsets* and *transOffset* are used to translate the patch after
    rendering (default no offsets).

    If any of *edgecolors*, *facecolors*, *linewidths*, *antialiaseds*
    are None, they default to their :data:`matplotlib.rcParams` patch
    setting, in sequence form.

    The use of :class:`~matplotlib.cm.ScalarMappable` is optional.  If
    the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not None
    (ie a call to set_array has been made), at draw time a call to
    scalar mappable will be made to set the face colors.
    "
                :superclasses ("artist.Artist" "cm.ScalarMappable")
                :members 
                  ( ("_offsets" variable nil (reparse-symbol indented_block_body) [2139 2173])
                    ("_offsets" variable nil (reparse-symbol indented_block_body) [2214 2237])
                    ("_transOffset" variable nil (reparse-symbol indented_block_body) [2242 2287])
                    ("_transforms" variable nil (reparse-symbol indented_block_body) [2292 2308])
                    ("zorder" variable nil (reparse-symbol indented_block_body) [2314 2324])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a Collection

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [2814 2881])
                            ("artist" code nil (reparse-symbol indented_block_body) [2890 2918])
                            ("cm" code nil (reparse-symbol indented_block_body) [2927 2971])
                            ("self" code nil (reparse-symbol indented_block_body) [2981 3011])
                            ("self" code nil (reparse-symbol indented_block_body) [3020 3050])
                            ("self" code nil (reparse-symbol indented_block_body) [3059 3089])
                            ("self" code nil (reparse-symbol indented_block_body) [3098 3128])
                            ("self" code nil (reparse-symbol indented_block_body) [3137 3171])
                            ("self" code nil (reparse-symbol indented_block_body) [3180 3211])
                            ("self" code nil (reparse-symbol indented_block_body) [3220 3239])
                            ("self" variable nil (reparse-symbol indented_block_body) [3250 3278])
                            ("self" variable nil (reparse-symbol indented_block_body) [3287 3326])
                            ("self" variable nil (reparse-symbol indented_block_body) [3370 3398])
                            ("if" code nil (reparse-symbol indented_block_body) [3407 3732])
                            ("self" code nil (reparse-symbol indented_block_body) [3741 3760])
                            ("self" variable nil (reparse-symbol indented_block_body) [3769 3787]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2342 2346])
                            ("edgecolors" variable nil (reparse-symbol function_parameters) [2365 2375])
                            ("facecolors" variable nil (reparse-symbol function_parameters) [2399 2409])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [2433 2443])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [2467 2477])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [2504 2516])
                            ("offsets" variable nil (reparse-symbol function_parameters) [2542 2549])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [2575 2586])
                            ("norm" variable nil (reparse-symbol function_parameters) [2612 2616])
                            ("cmap" variable nil (reparse-symbol function_parameters) [2673 2677])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [2712 2722])
                            ("urls" variable nil (reparse-symbol function_parameters) [2747 2751])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2777 2785]))                          
                        :documentation "
        Create a Collection

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2329 3788])
                    ("_get_value" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("val" variable nil (reparse-symbol function_parameters) [3826 3829]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3793 4227])
                    ("_get_bool" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("val" variable nil (reparse-symbol function_parameters) [4264 4267]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [4232 4506])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4525 4529]))                          )
                        (reparse-symbol indented_block_body) [4511 4559])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4578 4582]))                          )
                        (reparse-symbol indented_block_body) [4564 4619])
                    ("get_transforms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4643 4647]))                          )
                        (reparse-symbol indented_block_body) [4624 4682])
                    ("get_datalim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4703 4707])
                            ("transData" variable nil (reparse-symbol function_parameters) [4709 4718]))                          )
                        (reparse-symbol indented_block_body) [4687 5697])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5724 5728])
                            ("renderer" variable nil (reparse-symbol function_parameters) [5730 5738]))                          )
                        (reparse-symbol indented_block_body) [5702 5929])
                    ("_prepare_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5954 5958]))                          
                        :documentation "Point prep for drawing and hit testing")
                        (reparse-symbol indented_block_body) [5934 7457])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7496 7500])
                            ("renderer" variable nil (reparse-symbol function_parameters) [7502 7510]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7462 8158])
                    ("set_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8182 8186])
                            ("pr" variable nil (reparse-symbol function_parameters) [8188 8190]))                          )
                        (reparse-symbol indented_block_body) [8163 8223])
                    ("get_pickradius" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8247 8251]))                          )
                        (reparse-symbol indented_block_body) [8228 8286])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8304 8308])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [8310 8320]))                          
                        :documentation "
        Test whether the mouse event occurred in the collection.

        Returns True | False, ``dict(ind=itemlist)``, where every
        item in itemlist contains the event.
        ")
                        (reparse-symbol indented_block_body) [8291 9647])
                    ("set_urls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9666 9670])
                            ("urls" variable nil (reparse-symbol function_parameters) [9672 9676]))                          )
                        (reparse-symbol indented_block_body) [9653 9781])
                    ("get_urls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9799 9803]))                          )
                        (reparse-symbol indented_block_body) [9786 9824])
                    ("set_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9845 9849])
                            ("offsets" variable nil (reparse-symbol function_parameters) [9851 9858]))                          
                        :documentation "
        Set the offsets for the collection.  *offsets* can be a scalar
        or a sequence.

        ACCEPTS: float or sequence of floats
        ")
                        (reparse-symbol indented_block_body) [9829 10337])
                    ("get_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10358 10362]))                          
                        :documentation "
        Return the offsets for the collection.
        ")
                        (reparse-symbol indented_block_body) [10342 10646])
                    ("set_linewidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10669 10673])
                            ("lw" variable nil (reparse-symbol function_parameters) [10675 10677]))                          
                        :documentation "
        Set the linewidth(s) for the collection.  *lw* can be a scalar
        or a sequence; if it is a sequence the patches will cycle
        through the sequence

        ACCEPTS: float or sequence of floats
        ")
                        (reparse-symbol indented_block_body) [10651 11023])
                    ("set_linewidths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11047 11051])
                            ("lw" variable nil (reparse-symbol function_parameters) [11053 11055]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [11028 11134])
                    ("set_lw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11150 11154])
                            ("lw" variable nil (reparse-symbol function_parameters) [11156 11158]))                          
                        :documentation "alias for set_linewidth")
                        (reparse-symbol indented_block_body) [11139 11237])
                    ("set_linestyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11260 11264])
                            ("ls" variable nil (reparse-symbol function_parameters) [11266 11268]))                          
                        :documentation "
        Set the linestyle(s) for the collection.

        ACCEPTS: ['solid' | 'dashed', 'dashdot', 'dotted' |
        (offset, on-off-dash-seq) ]
        ")
                        (reparse-symbol indented_block_body) [11242 12828])
                    ("set_linestyles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12852 12856])
                            ("ls" variable nil (reparse-symbol function_parameters) [12858 12860]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [12833 12939])
                    ("set_dashes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12959 12963])
                            ("ls" variable nil (reparse-symbol function_parameters) [12965 12967]))                          
                        :documentation "alias for set_linestyle")
                        (reparse-symbol indented_block_body) [12944 13046])
                    ("set_antialiased" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13071 13075])
                            ("aa" variable nil (reparse-symbol function_parameters) [13077 13079]))                          
                        :documentation "
        Set the antialiasing state for rendering.

        ACCEPTS: Boolean or sequence of booleans
        ")
                        (reparse-symbol indented_block_body) [13051 13328])
                    ("set_antialiaseds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13354 13358])
                            ("aa" variable nil (reparse-symbol function_parameters) [13360 13362]))                          
                        :documentation "alias for set_antialiased")
                        (reparse-symbol indented_block_body) [13333 13445])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13464 13468])
                            ("c" variable nil (reparse-symbol function_parameters) [13470 13471]))                          
                        :documentation "
        Set both the edgecolor and the facecolor.

        ACCEPTS: matplotlib color arg or sequence of rgba tuples

        .. seealso::

            :meth:`set_facecolor`, :meth:`set_edgecolor`
               For setting the edge or face color individually.
        ")
                        (reparse-symbol indented_block_body) [13450 13818])
                    ("set_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13841 13845])
                            ("c" variable nil (reparse-symbol function_parameters) [13847 13848]))                          
                        :documentation "
        Set the facecolor(s) of the collection.  *c* can be a
        matplotlib color arg (all patches have same color), or a
        sequence of rgba tuples; if it is a sequence the patches will
        cycle through the sequence.

        If *c* is 'none', the patch will not be filled.

        ACCEPTS: matplotlib color arg or sequence of rgba tuples
        ")
                        (reparse-symbol indented_block_body) [13823 14575])
                    ("set_facecolors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14599 14603])
                            ("c" variable nil (reparse-symbol function_parameters) [14605 14606]))                          
                        :documentation "alias for set_facecolor")
                        (reparse-symbol indented_block_body) [14580 14684])
                    ("get_facecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14707 14711]))                          )
                        (reparse-symbol indented_block_body) [14689 14746])
                    ("get_facecolors" variable nil (reparse-symbol indented_block_body) [14750 14780])
                    ("get_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14804 14808]))                          )
                        (reparse-symbol indented_block_body) [14786 14941])
                    ("get_edgecolors" variable nil (reparse-symbol indented_block_body) [14945 14975])
                    ("set_edgecolor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14999 15003])
                            ("c" variable nil (reparse-symbol function_parameters) [15005 15006]))                          
                        :documentation "
        Set the edgecolor(s) of the collection. *c* can be a
        matplotlib color arg (all patches have same color), or a
        sequence of rgba tuples; if it is a sequence the patches will
        cycle through the sequence.

        If *c* is 'face', the edge color will always be the same as
        the face color.  If it is 'none', the patch boundary will not
        be drawn.

        ACCEPTS: matplotlib color arg or sequence of rgba tuples
        ")
                        (reparse-symbol indented_block_body) [14981 16059])
                    ("set_edgecolors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16084 16088])
                            ("c" variable nil (reparse-symbol function_parameters) [16090 16091]))                          
                        :documentation "alias for set_edgecolor")
                        (reparse-symbol indented_block_body) [16065 16169])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16188 16192])
                            ("alpha" variable nil (reparse-symbol function_parameters) [16194 16199]))                          
                        :documentation "
        Set the alpha tranparencies of the collection.  *alpha* must be
        a float or *None*.

        ACCEPTS: float or None
        ")
                        (reparse-symbol indented_block_body) [16174 17055])
                    ("get_linewidths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17079 17083]))                          )
                        (reparse-symbol indented_block_body) [17060 17118])
                    ("get_linewidth" variable nil (reparse-symbol indented_block_body) [17122 17152])
                    ("get_linestyles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17177 17181]))                          )
                        (reparse-symbol indented_block_body) [17158 17216])
                    ("get_dashes" variable nil (reparse-symbol indented_block_body) [17220 17263])
                    ("update_scalarmappable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17295 17299]))                          
                        :documentation "
        If the scalar mappable array is not none, update colors
        from scalar data
        ")
                        (reparse-symbol indented_block_body) [17269 17815])
                    ("update_from" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17836 17840])
                            ("other" variable nil (reparse-symbol function_parameters) [17842 17847]))                          )
                        (reparse-symbol indented_block_body) [17820 18474]))                  
                :type "class")
                nil [833 18474])
            ("docstring" code nil nil [18741 19480])
            ("PathCollection" type
               (:documentation "
    This is the most basic :class:`Collection` subclass.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *paths* is a sequence of :class:`matplotlib.path.Path`
        instances.

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [19680 19801])
                            ("Collection" code nil (reparse-symbol indented_block_body) [19811 19846])
                            ("self" code nil (reparse-symbol indented_block_body) [19855 19876])
                            ("self" variable nil (reparse-symbol indented_block_body) [19885 19904]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19636 19640])
                            ("paths" variable nil (reparse-symbol function_parameters) [19642 19647])
                            ("sizes" variable nil (reparse-symbol function_parameters) [19649 19654])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19661 19669]))                          
                        :documentation "
        *paths* is a sequence of :class:`matplotlib.path.Path`
        instances.

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19593 19905])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19924 19928])
                            ("paths" variable nil (reparse-symbol function_parameters) [19930 19935]))                          )
                        (reparse-symbol indented_block_body) [19910 19966])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19985 19989]))                          )
                        (reparse-symbol indented_block_body) [19971 20019])
                    ("get_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20038 20042]))                          )
                        (reparse-symbol indented_block_body) [20024 20072])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20111 20115])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20117 20125]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [20077 20386]))                  
                :type "class")
                nil [19482 20386])
            ("PolyCollection" type
               (:superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *verts* is a sequence of ( *verts0*, *verts1*, ...) where
        *verts_i* is a sequence of *xy* tuples of vertices, or an
        equivalent :mod:`numpy` array of shape (*nv*, 2).

        *sizes* is *None* (default) or a sequence of floats that
        scale the corresponding *verts_i*.  The scaling is applied
        before the Artist master transform; if the latter is an identity
        transform, then the overall scaling is such that if
        *verts_i* specify a unit square, then *sizes_i* is the area
        of that square in points^2.
        If len(*sizes*) < *nv*, the additional values will be
        taken cyclically from the array.

        *closed*, when *True*, will explicitly close the polygon.

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [20529 21298])
                            ("Collection" code nil (reparse-symbol indented_block_body) [21307 21341])
                            ("self" variable nil (reparse-symbol indented_block_body) [21350 21369])
                            ("self" code nil (reparse-symbol indented_block_body) [21378 21407]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20468 20472])
                            ("verts" variable nil (reparse-symbol function_parameters) [20474 20479])
                            ("sizes" variable nil (reparse-symbol function_parameters) [20481 20486])
                            ("closed" variable nil (reparse-symbol function_parameters) [20495 20501])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20510 20518]))                          
                        :documentation "
        *verts* is a sequence of ( *verts0*, *verts1*, ...) where
        *verts_i* is a sequence of *xy* tuples of vertices, or an
        equivalent :mod:`numpy` array of shape (*nv*, 2).

        *sizes* is *None* (default) or a sequence of floats that
        scale the corresponding *verts_i*.  The scaling is applied
        before the Artist master transform; if the latter is an identity
        transform, then the overall scaling is such that if
        *verts_i* specify a unit square, then *sizes_i* is the area
        of that square in points^2.
        If len(*sizes*) < *nv*, the additional values will be
        taken cyclically from the array.

        *closed*, when *True*, will explicitly close the polygon.

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20425 21408])
                    ("set_verts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21427 21431])
                            ("verts" variable nil (reparse-symbol function_parameters) [21433 21438])
                            ("closed" variable nil (reparse-symbol function_parameters) [21440 21446]))                          )
                        (reparse-symbol indented_block_body) [21413 22496])
                    ("set_paths" variable nil (reparse-symbol indented_block_body) [22501 22522])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22562 22566])
                            ("renderer" variable nil (reparse-symbol function_parameters) [22568 22576]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22528 22837]))                  
                :type "class")
                nil [20387 22837])
            ("BrokenBarHCollection" type
               (:documentation "
    A collection of horizontal bars spanning *yrange* with a sequence of
    *xranges*.
    "
                :superclasses ("PolyCollection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *xranges*
            sequence of (*xmin*, *xwidth*)

        *yrange*
            *ymin*, *ywidth*

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [23076 23223])
                            ("ymin, ywidth" code nil (reparse-symbol indented_block_body) [23232 23253])
                            ("ymax" code nil (reparse-symbol indented_block_body) [23262 23282])
                            ("verts" variable nil (reparse-symbol indented_block_body) [23291 23414])
                            ("PolyCollection" code nil (reparse-symbol indented_block_body) [23423 23469]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23034 23038])
                            ("xranges" variable nil (reparse-symbol function_parameters) [23040 23047])
                            ("yrange" variable nil (reparse-symbol function_parameters) [23049 23055])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23057 23065]))                          
                        :documentation "
        *xranges*
            sequence of (*xmin*, *xwidth*)

        *yrange*
            *ymin*, *ywidth*

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22991 23470])
                    ("span_where" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("x" variable nil (reparse-symbol function_parameters) [23509 23510])
                            ("ymin" variable nil (reparse-symbol function_parameters) [23512 23516])
                            ("ymax" variable nil (reparse-symbol function_parameters) [23518 23522])
                            ("where" variable nil (reparse-symbol function_parameters) [23524 23529])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23531 23539]))                          
                        :documentation "
        Create a BrokenBarHCollection to plot horizontal bars from
        over the regions in *x* where *where* is True.  The bars range
        on the y-axis from *ymin* to *ymax*

        A :class:`BrokenBarHCollection` is returned.  *kwargs* are
        passed on to the collection.
        ")
                        (reparse-symbol indented_block_body) [23476 24192]))                  
                :type "class")
                nil [22839 24192])
            ("RegularPolyCollection" type
               (:documentation "Draw a collection of regular polygons with *numsides*."
                :superclasses ("Collection")
                :members 
                  ( ("_path_generator" variable nil (reparse-symbol indented_block_body) [24303 24352])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *numsides*
            the number of sides of the polygon

        *rotation*
            the rotation of the polygon in radians

        *sizes*
            gives the area of the circle circumscribing the
            regular polygon in points^2

        %(Collection)s

        Example: see :file:`examples/dynamic_collection.py` for
        complete example::

            offsets = np.random.rand(20,2)
            facecolors = [cm.jet(x) for x in np.random.rand(20)]
            black = (0,0,0,1)

            collection = RegularPolyCollection(
                numsides=5, # a pentagon
                rotation=0, sizes=(50,),
                facecolors = facecolors,
                edgecolors = (black,),
                linewidths = (1,),
                offsets = offsets,
                transOffset = ax.transData,
                )
        \"\"\"" code nil (reparse-symbol indented_block_body) [24533 25400])
                            ("Collection" code nil (reparse-symbol indented_block_body) [25409 25443])
                            ("self" variable nil (reparse-symbol indented_block_body) [25452 25471])
                            ("self" variable nil (reparse-symbol indented_block_body) [25480 25505])
                            ("self" variable nil (reparse-symbol indented_block_body) [25514 25560])
                            ("self" variable nil (reparse-symbol indented_block_body) [25569 25594])
                            ("self" code nil (reparse-symbol indented_block_body) [25603 25653]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24401 24405])
                            ("numsides" variable nil (reparse-symbol function_parameters) [24424 24432])
                            ("rotation" variable nil (reparse-symbol function_parameters) [24451 24459])
                            ("sizes" variable nil (reparse-symbol function_parameters) [24483 24488])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [24514 24522]))                          
                        :documentation "
        *numsides*
            the number of sides of the polygon

        *rotation*
            the rotation of the polygon in radians

        *sizes*
            gives the area of the circle circumscribing the
            regular polygon in points^2

        %(Collection)s

        Example: see :file:`examples/dynamic_collection.py` for
        complete example::

            offsets = np.random.rand(20,2)
            facecolors = [cm.jet(x) for x in np.random.rand(20)]
            black = (0,0,0,1)

            collection = RegularPolyCollection(
                numsides=5, # a pentagon
                rotation=0, sizes=(50,),
                facecolors = facecolors,
                edgecolors = (black,),
                linewidths = (1,),
                offsets = offsets,
                transOffset = ax.transData,
                )
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24358 25654])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25693 25697])
                            ("renderer" variable nil (reparse-symbol function_parameters) [25699 25707]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25659 25957])
                    ("get_numsides" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25979 25983]))                          )
                        (reparse-symbol indented_block_body) [25962 26016])
                    ("get_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26038 26042]))                          )
                        (reparse-symbol indented_block_body) [26021 26075])
                    ("get_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26094 26098]))                          )
                        (reparse-symbol indented_block_body) [26080 26128]))                  
                :type "class")
                nil [24193 26128])
            ("StarPolygonCollection" type
               (:documentation "
    Draw a collection of regular stars with *numsides* points."
                :superclasses ("RegularPolyCollection")
                :members 
                  ( ("_path_generator" variable nil (reparse-symbol indented_block_body) [26261 26307]))                  
                :type "class")
                nil [26130 26308])
            ("AsteriskPolygonCollection" type
               (:documentation "
    Draw a collection of regular asterisks with *numsides* points."
                :superclasses ("RegularPolyCollection")
                :members 
                  ( ("_path_generator" variable nil (reparse-symbol indented_block_body) [26449 26499]))                  
                :type "class")
                nil [26310 26500])
            ("LineCollection" type
               (:documentation "
    All parameters must be sequences or scalars; if scalars, they will
    be converted to sequences.  The property of the ith line
    segment is::

       prop[i % len(props)]

    i.e., the properties cycle if the ``len`` of props is less than the
    number of segments.
    "
                :superclasses ("Collection")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [26831 26841])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *segments*
            a sequence of (*line0*, *line1*, *line2*), where::

                linen = (x0, y0), (x1, y1), ... (xm, ym)

            or the equivalent numpy array with two columns. Each line
            can be a different length.

        *colors*
            must be a sequence of RGBA tuples (eg arbitrary color
            strings, etc, not allowed).

        *antialiaseds*
            must be a sequence of ones or zeros

        *linestyles* [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]
            a string or dash tuple. The dash tuple is::

                (offset, onoffseq),

            where *onoffseq* is an even length tuple of on and off ink
            in points.

        If *linewidths*, *colors*, or *antialiaseds* is None, they
        default to their rcParams setting, in sequence form.

        If *offsets* and *transOffset* are not None, then
        *offsets* are transformed by *transOffset* and applied after
        the segments have been transformed to display coordinates.

        If *offsets* is not None but *transOffset* is None, then the
        *offsets* are added to the segments before any transformation.
        In this case, a single offset can be specified as::

            offsets=(xo,yo)

        and this value will be added cumulatively to each successive
        segment, so as to produce a set of successively offset curves.

        *norm*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)
        *cmap*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)

        *pickradius* is the tolerance for mouse clicks picking a line.
        The default is 5 pt.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` array
        :attr:`~matplotlib.cm.ScalarMappable._A` is not None (ie a call to
        :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at
        draw time a call to scalar mappable will be made to set the colors.
        \"\"\"" code nil (reparse-symbol indented_block_body) [27266 29308])
                            ("if" code nil (reparse-symbol indented_block_body) [29317 29373])
                            ("if" code nil (reparse-symbol indented_block_body) [29381 29452])
                            ("if" code nil (reparse-symbol indented_block_body) [29460 29537])
                            ("self" code nil (reparse-symbol indented_block_body) [29545 29576])
                            ("colors" variable nil (reparse-symbol indented_block_body) [29586 29639])
                            ("Collection" code nil (reparse-symbol indented_block_body) [29649 30027])
                            ("self" code nil (reparse-symbol indented_block_body) [30037 30064]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26859 26863])
                            ("segments" variable nil (reparse-symbol function_parameters) [26865 26873])
                            ("linewidths" variable nil (reparse-symbol function_parameters) [26911 26921])
                            ("colors" variable nil (reparse-symbol function_parameters) [26950 26956])
                            ("antialiaseds" variable nil (reparse-symbol function_parameters) [26988 27000])
                            ("linestyles" variable nil (reparse-symbol function_parameters) [27027 27037])
                            ("offsets" variable nil (reparse-symbol function_parameters) [27066 27073])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [27099 27110])
                            ("norm" variable nil (reparse-symbol function_parameters) [27136 27140])
                            ("cmap" variable nil (reparse-symbol function_parameters) [27166 27170])
                            ("pickradius" variable nil (reparse-symbol function_parameters) [27196 27206])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [27229 27237]))                          
                        :documentation "
        *segments*
            a sequence of (*line0*, *line1*, *line2*), where::

                linen = (x0, y0), (x1, y1), ... (xm, ym)

            or the equivalent numpy array with two columns. Each line
            can be a different length.

        *colors*
            must be a sequence of RGBA tuples (eg arbitrary color
            strings, etc, not allowed).

        *antialiaseds*
            must be a sequence of ones or zeros

        *linestyles* [ 'solid' | 'dashed' | 'dashdot' | 'dotted' ]
            a string or dash tuple. The dash tuple is::

                (offset, onoffseq),

            where *onoffseq* is an even length tuple of on and off ink
            in points.

        If *linewidths*, *colors*, or *antialiaseds* is None, they
        default to their rcParams setting, in sequence form.

        If *offsets* and *transOffset* are not None, then
        *offsets* are transformed by *transOffset* and applied after
        the segments have been transformed to display coordinates.

        If *offsets* is not None but *transOffset* is None, then the
        *offsets* are added to the segments before any transformation.
        In this case, a single offset can be specified as::

            offsets=(xo,yo)

        and this value will be added cumulatively to each successive
        segment, so as to produce a set of successively offset curves.

        *norm*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)
        *cmap*
            None (optional for :class:`matplotlib.cm.ScalarMappable`)

        *pickradius* is the tolerance for mouse clicks picking a line.
        The default is 5 pt.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` array
        :attr:`~matplotlib.cm.ScalarMappable._A` is not None (ie a call to
        :meth:`~matplotlib.cm.ScalarMappable.set_array` has been made), at
        draw time a call to scalar mappable will be made to set the colors.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26846 30065])
                    ("set_segments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30087 30091])
                            ("segments" variable nil (reparse-symbol function_parameters) [30093 30101]))                          )
                        (reparse-symbol indented_block_body) [30070 30482])
                    ("set_verts" variable nil (reparse-symbol indented_block_body) [30487 30511])
                    ("set_paths" variable nil (reparse-symbol indented_block_body) [30556 30580])
                    ("_add_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30603 30607])
                            ("segs" variable nil (reparse-symbol function_parameters) [30609 30613]))                          )
                        (reparse-symbol indented_block_body) [30586 30972])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30991 30995])
                            ("c" variable nil (reparse-symbol function_parameters) [30997 30998]))                          
                        :documentation "
        Set the color(s) of the line collection.  *c* can be a
        matplotlib color arg (all patches have same color), or a
        sequence or rgba tuples; if it is a sequence the patches will
        cycle through the sequence.

        ACCEPTS: matplotlib color arg or sequence of rgba tuples
        ")
                        (reparse-symbol indented_block_body) [30977 31355])
                    ("color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31370 31374])
                            ("c" variable nil (reparse-symbol function_parameters) [31376 31377]))                          
                        :documentation "
        Set the color(s) of the line collection.  *c* can be a
        matplotlib color arg (all patches have same color), or a
        sequence or rgba tuples; if it is a sequence the patches will
        cycle through the sequence

        ACCEPTS: matplotlib color arg or sequence of rgba tuples
        ")
                        (reparse-symbol indented_block_body) [31360 31816])
                    ("get_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31835 31839]))                          )
                        (reparse-symbol indented_block_body) [31821 31874])
                    ("get_colors" variable nil (reparse-symbol indented_block_body) [31878 31900]))                  
                :type "class")
                nil [26502 31940])
            ("CircleCollection" type
               (:documentation "
    A collection of circles, drawn using splines.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *sizes*
            Gives the area of the circle in points^2

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [32122 32230])
                            ("Collection" code nil (reparse-symbol indented_block_body) [32239 32273])
                            ("self" variable nil (reparse-symbol indented_block_body) [32282 32301])
                            ("self" code nil (reparse-symbol indented_block_body) [32310 32360])
                            ("self" variable nil (reparse-symbol indented_block_body) [32369 32409]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32090 32094])
                            ("sizes" variable nil (reparse-symbol function_parameters) [32096 32101])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [32103 32111]))                          
                        :documentation "
        *sizes*
            Gives the area of the circle in points^2

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32047 32410])
                    ("get_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32429 32433]))                          )
                        (reparse-symbol indented_block_body) [32415 32497])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32536 32540])
                            ("renderer" variable nil (reparse-symbol function_parameters) [32542 32550]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [32502 32867]))                  
                :type "class")
                nil [31941 32867])
            ("EllipseCollection" type
               (:documentation "
    A collection of ellipses, drawn using splines.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *widths*: sequence
            lengths of first axes (e.g., major axis lengths)

        *heights*: sequence
            lengths of second axes

        *angles*: sequence
            angles of first axes, degrees CCW from the X-axis

        *units*: ['points' | 'inches' | 'dots' | 'width' | 'height'
        | 'x' | 'y' | 'xy']

            units in which majors and minors are given; 'width' and
            'height' refer to the dimensions of the axes, while 'x'
            and 'y' refer to the *offsets* data units. 'xy' differs
            from all others in that the angle as plotted varies with
            the aspect ratio, and equals the specified angle only when
            the aspect ratio is unity.  Hence it behaves the same as
            the :class:`~matplotlib.patches.Ellipse` with
            axes.transData as its transform.

        Additional kwargs inherited from the base :class:`Collection`:

        %(Collection)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [33086 34053])
                            ("Collection" code nil (reparse-symbol indented_block_body) [34062 34096])
                            ("self" code nil (reparse-symbol indented_block_body) [34105 34152])
                            ("self" code nil (reparse-symbol indented_block_body) [34161 34210])
                            ("self" code nil (reparse-symbol indented_block_body) [34219 34275])
                            ("self" variable nil (reparse-symbol indented_block_body) [34284 34303])
                            ("self" code nil (reparse-symbol indented_block_body) [34312 34362])
                            ("self" variable nil (reparse-symbol indented_block_body) [34371 34392])
                            ("self" variable nil (reparse-symbol indented_block_body) [34401 34441]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33020 33024])
                            ("widths" variable nil (reparse-symbol function_parameters) [33026 33032])
                            ("heights" variable nil (reparse-symbol function_parameters) [33034 33041])
                            ("angles" variable nil (reparse-symbol function_parameters) [33043 33049])
                            ("units" variable nil (reparse-symbol function_parameters) [33051 33056])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33067 33075]))                          
                        :documentation "
        *widths*: sequence
            lengths of first axes (e.g., major axis lengths)

        *heights*: sequence
            lengths of second axes

        *angles*: sequence
            angles of first axes, degrees CCW from the X-axis

        *units*: ['points' | 'inches' | 'dots' | 'width' | 'height'
        | 'x' | 'y' | 'xy']

            units in which majors and minors are given; 'width' and
            'height' refer to the dimensions of the axes, while 'x'
            and 'y' refer to the *offsets* data units. 'xy' differs
            from all others in that the angle as plotted varies with
            the aspect ratio, and equals the specified angle only when
            the aspect ratio is unity.  Hence it behaves the same as
            the :class:`~matplotlib.patches.Ellipse` with
            axes.transData as its transform.

        Additional kwargs inherited from the base :class:`Collection`:

        %(Collection)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32977 34442])
                    ("_set_transforms" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34467 34471]))                          
                        :documentation "
        Calculate transforms immediately before drawing.
        ")
                        (reparse-symbol indented_block_body) [34447 35644])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35683 35687])
                            ("renderer" variable nil (reparse-symbol function_parameters) [35689 35697]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [35649 35771]))                  
                :type "class")
                nil [32869 35771])
            ("PatchCollection" type
               (:documentation "
    A generic collection of patches.

    This makes it easier to assign a color map to a heterogeneous
    collection of patches.

    This also may improve plotting speed, since PatchCollection will
    draw faster than a large number of patches.
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *patches*
            a sequence of Patch objects.  This list may include
            a heterogeneous assortment of different patch types.

        *match_original*
            If True, use the colors and linewidths of the original
            patches.  If False, new colors may be assigned by
            providing the standard collection arguments, facecolor,
            edgecolor, linewidths, norm or cmap.

        If any of *edgecolors*, *facecolors*, *linewidths*,
        *antialiaseds* are None, they default to their
        :data:`matplotlib.rcParams` patch setting, in sequence form.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not
        None (ie a call to set_array has been made), at draw time a
        call to scalar mappable will be made to set the face colors.
        \"\"\"" code nil (reparse-symbol indented_block_body) [36146 37045])
                            ("if" code nil (reparse-symbol indented_block_body) [37055 37887])
                            ("self" code nil (reparse-symbol indented_block_body) [37896 37919]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36090 36094])
                            ("patches" variable nil (reparse-symbol function_parameters) [36096 36103])
                            ("match_original" variable nil (reparse-symbol function_parameters) [36105 36119])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36127 36135]))                          
                        :documentation "
        *patches*
            a sequence of Patch objects.  This list may include
            a heterogeneous assortment of different patch types.

        *match_original*
            If True, use the colors and linewidths of the original
            patches.  If False, new colors may be assigned by
            providing the standard collection arguments, facecolor,
            edgecolor, linewidths, norm or cmap.

        If any of *edgecolors*, *facecolors*, *linewidths*,
        *antialiaseds* are None, they default to their
        :data:`matplotlib.rcParams` patch setting, in sequence form.

        The use of :class:`~matplotlib.cm.ScalarMappable` is optional.
        If the :class:`~matplotlib.cm.ScalarMappable` matrix _A is not
        None (ie a call to set_array has been made), at draw time a
        call to scalar mappable will be made to set the face colors.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36077 37920])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37939 37943])
                            ("patches" variable nil (reparse-symbol function_parameters) [37945 37952]))                          )
                        (reparse-symbol indented_block_body) [37925 38089]))                  
                :type "class")
                nil [35772 38089])
            ("QuadMesh" type
               (:documentation "
    Class for the efficient drawing of a quadrilateral mesh.

    A quadrilateral mesh consists of a grid of vertices. The
    dimensions of this array are (*meshWidth* + 1, *meshHeight* +
    1). Each vertex in the mesh has a different set of \"mesh
    coordinates\" representing its position in the topology of the
    mesh. For any values (*m*, *n*) such that 0 <= *m* <= *meshWidth*
    and 0 <= *n* <= *meshHeight*, the vertices at mesh coordinates
    (*m*, *n*), (*m*, *n* + 1), (*m* + 1, *n* + 1), and (*m* + 1, *n*)
    form one of the quadrilaterals in the mesh. There are thus
    (*meshWidth* * *meshHeight*) quadrilaterals in the mesh.  The mesh
    need not be regular and the polygons need not be convex.

    A quadrilateral mesh is represented by a (2 x ((*meshWidth* + 1) *
    (*meshHeight* + 1))) numpy array *coordinates*, where each row is
    the *x* and *y* coordinates of one of the vertices.  To define the
    function that maps from a data point to its corresponding color,
    use the :meth:`set_cmap` method.  Each of these arrays is indexed in
    row-major order by the mesh coordinates of the vertex (or the mesh
    coordinates of the lower left vertex, in the case of the
    colors).

    For example, the first entry in *coordinates* is the
    coordinates of the vertex at mesh coordinates (0, 0), then the one
    at (0, 1), then at (0, 2) .. (0, meshWidth), (1, 0), (1, 1), and
    so on.

    *shading* may be 'flat', 'faceted' or 'gouraud'
    "
                :superclasses ("Collection")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Collection" code nil (reparse-symbol indented_block_body) [39756 39791])
                            ("self" variable nil (reparse-symbol indented_block_body) [39800 39827])
                            ("self" variable nil (reparse-symbol indented_block_body) [39836 39865])
                            ("self" variable nil (reparse-symbol indented_block_body) [39874 39905])
                            ("self" variable nil (reparse-symbol indented_block_body) [39914 39941])
                            ("self" variable nil (reparse-symbol indented_block_body) [39950 39981])
                            ("self" variable nil (reparse-symbol indented_block_body) [39990 40013])
                            ("self" variable nil (reparse-symbol indented_block_body) [40023 40058])
                            ("self" code nil (reparse-symbol indented_block_body) [40067 40176])
                            ("self" variable nil (reparse-symbol indented_block_body) [40258 40339])
                            ("self" variable nil (reparse-symbol indented_block_body) [40348 40406]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39633 39637])
                            ("meshWidth" variable nil (reparse-symbol function_parameters) [39639 39648])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [39650 39660])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [39662 39673])
                            ("showedges" variable nil (reparse-symbol function_parameters) [39675 39684])
                            ("antialiased" variable nil (reparse-symbol function_parameters) [39703 39714])
                            ("shading" variable nil (reparse-symbol function_parameters) [39721 39728])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39737 39745]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39620 40407])
                    ("get_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40426 40430]))                          )
                        (reparse-symbol indented_block_body) [40412 40521])
                    ("set_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40540 40544]))                          )
                        (reparse-symbol indented_block_body) [40526 40663])
                    ("convert_mesh_to_paths" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("meshWidth" variable nil (reparse-symbol function_parameters) [40712 40721])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [40723 40733])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [40735 40746]))                          
                        :documentation "
        Converts a given mesh into a sequence of
        :class:`matplotlib.path.Path` objects for easier rendering by
        backends that do not directly support quadmeshes.

        This function is primarily of use to backend implementers.
        ")
                        (reparse-symbol indented_block_body) [40668 41507])
                    ("convert_mesh_to_triangles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41542 41546])
                            ("meshWidth" variable nil (reparse-symbol function_parameters) [41548 41557])
                            ("meshHeight" variable nil (reparse-symbol function_parameters) [41559 41569])
                            ("coordinates" variable nil (reparse-symbol function_parameters) [41571 41582]))                          
                        :documentation "
        Converts a given mesh into a sequence of triangles, each point
        with its own color.  This is useful for experiments using
        `draw_qouraud_triangle`.
        ")
                        (reparse-symbol indented_block_body) [41512 42915])
                    ("get_datalim" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42936 42940])
                            ("transData" variable nil (reparse-symbol function_parameters) [42942 42951]))                          )
                        (reparse-symbol indented_block_body) [42920 42980])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43019 43023])
                            ("renderer" variable nil (reparse-symbol function_parameters) [43025 43033]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [42985 44910]))                  
                :type "class")
                nil [38091 44910])
            ("patchstr" variable nil nil [44914 44949])
            ("for" code nil nil [44950 45211])
            ("docstring" code nil nil [45211 45282]))          
      :file "collections.py"
      :pointmax 45283
      :fsize 45282
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
These are  classes to support contour plotting and
labelling for the axes class
\"\"\"" code nil nil [1 88])
            ("__future__" include nil nil [89 120])
            ("warnings" include nil nil [121 136])
            ("matplotlib" include nil nil [137 161])
            ("numpy" include nil nil [162 180])
            ("numpy" include nil nil [181 201])
            ("matplotlib._cntr" include nil nil [202 234])
            ("matplotlib.path" include nil nil [235 266])
            ("matplotlib.ticker" include nil nil [267 301])
            ("matplotlib.cm" include nil nil [302 328])
            ("matplotlib.colors" include nil nil [329 363])
            ("matplotlib.collections" include nil nil [364 408])
            ("matplotlib.font_manager" include nil nil [409 455])
            ("matplotlib.text" include nil nil [456 486])
            ("matplotlib.cbook" include nil nil [487 519])
            ("matplotlib.mlab" include nil nil [520 550])
            ("matplotlib.mathtext" include nil nil [551 589])
            ("matplotlib.texmanager" include nil nil [590 632])
            ("matplotlib.blocking_input" include nil nil [699 759])
            ("ClabelText" type
               (:documentation "
    Unlike the ordinary text, the get_rotation returns an updated
    angle in the pixel coordinate assuming that the input rotation is
    an angle in data coordinate (or whatever transform set).
    "
                :superclasses ("text.Text")
                :members 
                  ( ("get_rotation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1403 1407]))                          )
                        (reparse-symbol indented_block_body) [1386 1683]))                  
                :type "class")
                nil [1140 1683])
            ("ContourLabeler" type
               (:members 
                  ( ("'''Mixin to provide labelling capability to ContourSet'''" code nil (reparse-symbol indented_block_body) [1711 1768])
                    ("clabel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1785 1789])
                            ("args" variable nil (reparse-symbol function_parameters) [1791 1796])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1798 1806]))                          
                        :documentation "
        Call signature::

          clabel(cs, **kwargs)

        adds labels to line contours in *cs*, where *cs* is a
        :class:`~matplotlib.contour.ContourSet` object returned by
        contour.

        ::

          clabel(cs, v, **kwargs)

        only labels contours listed in *v*.

        Optional keyword arguments:

          *fontsize*:
            See http://matplotlib.sf.net/fonts.html

          *colors*:
            - if *None*, the color of each label matches the color of
              the corresponding contour

            - if one string color, e.g. *colors* = 'r' or *colors* =
              'red', all labels will be plotted in this color

            - if a tuple of matplotlib color args (string, float, rgb, etc),
              different labels will be plotted in different colors in the order
              specified

          *inline*:
            controls whether the underlying contour is removed or
            not. Default is *True*.

          *inline_spacing*:
            space in pixels to leave on each side of label when
            placing inline.  Defaults to 5.  This spacing will be
            exact for labels at locations where the contour is
            straight, less so for labels on curved contours.

          *fmt*:
            a format string for the label. Default is '%1.3f'
            Alternatively, this can be a dictionary matching contour
            levels with arbitrary strings to use for each contour level
            (i.e., fmt[level]=string), or it can be any callable, such
            as a :class:`~matplotlib.ticker.Formatter` instance, that
            returns a string when called with a numeric contour level.

          *manual*:
            if *True*, contour labels will be placed manually using
            mouse clicks.  Click the first button near a contour to
            add a label, click the second button (or potentially both
            mouse buttons at once) to finish adding labels.  The third
            button can be used to remove the last label added, but
            only if labels are not inline.  Alternatively, the keyboard
            can be used to select label locations (enter to end label
            placement, delete or backspace act like the third mouse button,
            and any other key will select a label location).

          *rightside_up*:
            if *True* (default), label rotations will always be plus
            or minus 90 degrees from level.

          *use_clabeltext*:
            if *True* (default is False), ClabelText class (instead of
            matplotlib.Text) is used to create labels. ClabelText
            recalculates rotation angles of texts during the drawing time,
            therefore this can be used if aspect of the axes changes.

        .. plot:: mpl_examples/pylab_examples/contour_demo.py
        ")
                        (reparse-symbol indented_block_body) [1774 8639])
                    ("print_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8661 8665])
                            ("linecontour" variable nil (reparse-symbol function_parameters) [8667 8678])
                            ("labelwidth" variable nil (reparse-symbol function_parameters) [8680 8690]))                          )
                        (reparse-symbol indented_block_body) [8645 9169])
                    ("too_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9188 9192])
                            ("x" variable nil (reparse-symbol function_parameters) [9194 9195])
                            ("y" variable nil (reparse-symbol function_parameters) [9197 9198])
                            ("lw" variable nil (reparse-symbol function_parameters) [9200 9202]))                          )
                        (reparse-symbol indented_block_body) [9174 9440])
                    ("get_label_coords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9466 9470])
                            ("distances" variable nil (reparse-symbol function_parameters) [9472 9481])
                            ("XX" variable nil (reparse-symbol function_parameters) [9483 9485])
                            ("YY" variable nil (reparse-symbol function_parameters) [9487 9489])
                            ("ysize" variable nil (reparse-symbol function_parameters) [9491 9496])
                            ("lw" variable nil (reparse-symbol function_parameters) [9498 9500]))                          
                        :documentation "
        Return x, y, and the index of a label location.

        Labels are plotted at a location with the smallest
        deviation of the contour from a straight line
        unless there is another label nearby, in which case
        the next best place on the contour is picked up.
        If all such candidates are rejected, the beginning
        of the contour is chosen.
        ")
                        (reparse-symbol indented_block_body) [9445 10243])
                    ("get_label_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10268 10272])
                            ("lev" variable nil (reparse-symbol function_parameters) [10274 10277])
                            ("fmt" variable nil (reparse-symbol function_parameters) [10279 10282])
                            ("fsize" variable nil (reparse-symbol function_parameters) [10284 10289]))                          
                        :documentation "
        Return the width of the label in points.
        ")
                        (reparse-symbol indented_block_body) [10248 11149])
                    ("get_real_label_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11180 11184])
                            ("lev" variable nil (reparse-symbol function_parameters) [11186 11189])
                            ("fmt" variable nil (reparse-symbol function_parameters) [11191 11194])
                            ("fsize" variable nil (reparse-symbol function_parameters) [11196 11201]))                          
                        :documentation "
        This computes actual onscreen label width.
        This uses some black magic to determine onscreen extent of non-drawn
        label.  This magic may not be very robust.

        This method is not being used, and may be modified or removed.
        ")
                        (reparse-symbol indented_block_body) [11154 12180])
                    ("set_label_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12205 12209])
                            ("label" variable nil (reparse-symbol function_parameters) [12211 12216])
                            ("text" variable nil (reparse-symbol function_parameters) [12218 12222])
                            ("color" variable nil (reparse-symbol function_parameters) [12224 12229]))                          )
                        (reparse-symbol indented_block_body) [12185 12446])
                    ("get_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12464 12468])
                            ("lev" variable nil (reparse-symbol function_parameters) [12470 12473])
                            ("fmt" variable nil (reparse-symbol function_parameters) [12475 12478]))                          )
                        (reparse-symbol indented_block_body) [12451 12774])
                    ("locate_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12796 12800])
                            ("linecontour" variable nil (reparse-symbol function_parameters) [12802 12813])
                            ("labelwidth" variable nil (reparse-symbol function_parameters) [12815 12825]))                          
                        :documentation "
        Find a good place to plot a label (relatively flat
        part of the contour).
        ")
                        (reparse-symbol indented_block_body) [12779 14070])
                    ("calc_label_rot_and_inline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14106 14110])
                            ("slc" variable nil (reparse-symbol function_parameters) [14112 14115])
                            ("ind" variable nil (reparse-symbol function_parameters) [14117 14120])
                            ("lw" variable nil (reparse-symbol function_parameters) [14122 14124])
                            ("lc" variable nil (reparse-symbol function_parameters) [14126 14128])
                            ("spacing" variable nil (reparse-symbol function_parameters) [14135 14142]))                          
                        :documentation "
        This function calculates the appropriate label rotation given
        the linecontour coordinates in screen units, the index of the
        label location and the label width.

        It will also break contour and calculate inlining if *lc* is
        not empty (lc defaults to the empty list if None).  *spacing*
        is the space around the label in pixels to leave empty.

        Do both of these tasks at once to avoid calling mlab.path_length
        multiple times, which is relatively costly.

        The method used here involves calculating the path length
        along the contour in pixel coordinates and then looking
        approximately label width / 2 away from central point to
        determine rotation and then to break contour if desired.
        ")
                        (reparse-symbol indented_block_body) [14075 18064])
                    ("_get_label_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18089 18093])
                            ("x" variable nil (reparse-symbol function_parameters) [18094 18095])
                            ("y" variable nil (reparse-symbol function_parameters) [18096 18097])
                            ("rotation" variable nil (reparse-symbol function_parameters) [18098 18106]))                          )
                        (reparse-symbol indented_block_body) [18069 18347])
                    ("_get_label_clabeltext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18378 18382])
                            ("x" variable nil (reparse-symbol function_parameters) [18383 18384])
                            ("y" variable nil (reparse-symbol function_parameters) [18385 18386])
                            ("rotation" variable nil (reparse-symbol function_parameters) [18387 18395]))                          )
                        (reparse-symbol indented_block_body) [18352 19055])
                    ("_add_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19075 19079])
                            ("t" variable nil (reparse-symbol function_parameters) [19081 19082])
                            ("x" variable nil (reparse-symbol function_parameters) [19084 19085])
                            ("y" variable nil (reparse-symbol function_parameters) [19087 19088])
                            ("lev" variable nil (reparse-symbol function_parameters) [19090 19093])
                            ("cvalue" variable nil (reparse-symbol function_parameters) [19095 19101]))                          )
                        (reparse-symbol indented_block_body) [19060 19484])
                    ("add_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19503 19507])
                            ("x" variable nil (reparse-symbol function_parameters) [19508 19509])
                            ("y" variable nil (reparse-symbol function_parameters) [19510 19511])
                            ("rotation" variable nil (reparse-symbol function_parameters) [19512 19520])
                            ("lev" variable nil (reparse-symbol function_parameters) [19521 19524])
                            ("cvalue" variable nil (reparse-symbol function_parameters) [19525 19531]))                          
                        :documentation "
        Add contour label using :class:`~matplotlib.text.Text` class.
        ")
                        (reparse-symbol indented_block_body) [19489 19722])
                    ("add_label_clabeltext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19752 19756])
                            ("x" variable nil (reparse-symbol function_parameters) [19757 19758])
                            ("y" variable nil (reparse-symbol function_parameters) [19759 19760])
                            ("rotation" variable nil (reparse-symbol function_parameters) [19761 19769])
                            ("lev" variable nil (reparse-symbol function_parameters) [19770 19773])
                            ("cvalue" variable nil (reparse-symbol function_parameters) [19774 19780]))                          
                        :documentation "
        Add contour label using :class:`ClabelText` class.
        ")
                        (reparse-symbol indented_block_body) [19727 20200])
                    ("pop_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20221 20225])
                            ("index" variable nil (reparse-symbol function_parameters) [20226 20231]))                          )
                        (reparse-symbol indented_block_body) [20207 20409])
                    ("labels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20425 20429])
                            ("inline" variable nil (reparse-symbol function_parameters) [20431 20437])
                            ("inline_spacing" variable nil (reparse-symbol function_parameters) [20439 20453]))                          )
                        (reparse-symbol indented_block_body) [20414 22694]))                  
                :type "class")
                nil [1685 22694])
            ("ContourSet" type
               (:documentation "
    Store a set of contour lines or filled regions.

    User-callable method: clabel

    Useful attributes:
      ax:
        The axes object in which the contours are drawn

      collections:
        a silent_list of LineCollections or PolyCollections

      levels:
        contour levels

      layers:
        same as levels for line contours; half-way between
        levels for filled contours.  See _process_colors method.
    "
                :superclasses ("cm.ScalarMappable" "ContourLabeler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Draw contour lines or filled regions, depending on
        whether keyword arg 'filled' is *False* (default) or *True*.

        The first three arguments must be:

          *ax*: axes object.

          *levels*: [level0, level1, ..., leveln]
            A list of floating point numbers indicating the contour
            levels.

          *allsegs*: [level0segs, level1segs, ...]
            List of all the polygon segments for all the *levels*.
            For contour lines ``len(allsegs) == len(levels)``, and for
            filled contour regions ``len(allsegs) = len(levels)-1``.

            level0segs = [polygon0, polygon1, ...]

            polygon0 = array_like [[x0,y0], [x1,y1], ...]

          *allkinds*: *None* or [level0kinds, level1kinds, ...]
            Optional list of all the polygon vertex kinds (code types), as
            described and used in Path.   This is used to allow multiply-
            connected paths such as holes within filled polygons.
            If not *None*, len(allkinds) == len(allsegs).

            level0kinds = [polygon0kinds, ...]

            polygon0kinds = [vertexcode0, vertexcode1, ...]

            If *allkinds* is not *None*, usually all polygons for a particular
            contour level are grouped together so that

            level0segs = [polygon0] and level0kinds = [polygon0kinds].

        Keyword arguments are as described in
        :class:`~matplotlib.contour.QuadContourSet` object.

        **Examples:**

        .. plot:: mpl_examples/misc/contour_manual.py
        \"\"\"" code nil (reparse-symbol indented_block_body) [23250 24815])
                            ("self" variable nil (reparse-symbol indented_block_body) [24824 24836])
                            ("self" variable nil (reparse-symbol indented_block_body) [24845 24885])
                            ("self" variable nil (reparse-symbol indented_block_body) [24894 24935])
                            ("self" variable nil (reparse-symbol indented_block_body) [24944 24992])
                            ("self" variable nil (reparse-symbol indented_block_body) [25001 25049])
                            ("self" variable nil (reparse-symbol indented_block_body) [25059 25097])
                            ("self" variable nil (reparse-symbol indented_block_body) [25106 25146])
                            ("self" variable nil (reparse-symbol indented_block_body) [25155 25195])
                            ("cmap" variable nil (reparse-symbol indented_block_body) [25204 25235])
                            ("self" variable nil (reparse-symbol indented_block_body) [25244 25284])
                            ("norm" variable nil (reparse-symbol indented_block_body) [25293 25324])
                            ("self" variable nil (reparse-symbol indented_block_body) [25333 25378])
                            ("self" variable nil (reparse-symbol indented_block_body) [25387 25437])
                            ("if" code nil (reparse-symbol indented_block_body) [25446 25562])
                            ("self" variable nil (reparse-symbol indented_block_body) [25799 25836])
                            ("self" variable nil (reparse-symbol indented_block_body) [25845 25887])
                            ("if" code nil (reparse-symbol indented_block_body) [25896 26275])
                            ("if" code nil (reparse-symbol indented_block_body) [26284 26407])
                            ("if" code nil (reparse-symbol indented_block_body) [26415 26473])
                            ("if" code nil (reparse-symbol indented_block_body) [26481 26544])
                            ("if" code nil (reparse-symbol indented_block_body) [26552 26668])
                            ("if" code nil (reparse-symbol indented_block_body) [26676 26746])
                            ("self" code nil (reparse-symbol indented_block_body) [26755 26790])
                            ("self" code nil (reparse-symbol indented_block_body) [26799 26821])
                            ("if" code nil (reparse-symbol indented_block_body) [26831 27020])
                            ("if" code nil (reparse-symbol indented_block_body) [27028 27216])
                            ("self" variable nil (reparse-symbol indented_block_body) [27271 27291])
                            ("self" variable nil (reparse-symbol indented_block_body) [27300 27322])
                            ("kw" variable nil (reparse-symbol indented_block_body) [27332 27351])
                            ("if" code nil (reparse-symbol indented_block_body) [27360 27411])
                            ("cm" code nil (reparse-symbol indented_block_body) [27419 27457])
                            ("self" code nil (reparse-symbol indented_block_body) [27484 27506])
                            ("self, self" code nil (reparse-symbol indented_block_body) [27516 27578])
                            ("if" code nil (reparse-symbol indented_block_body) [27588 29607])
                            ("self" code nil (reparse-symbol indented_block_body) [29615 29629]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23214 23218])
                            ("ax" variable nil (reparse-symbol function_parameters) [23220 23222])
                            ("args" variable nil (reparse-symbol function_parameters) [23224 23229])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23231 23239]))                          
                        :documentation "
        Draw contour lines or filled regions, depending on
        whether keyword arg 'filled' is *False* (default) or *True*.

        The first three arguments must be:

          *ax*: axes object.

          *levels*: [level0, level1, ..., leveln]
            A list of floating point numbers indicating the contour
            levels.

          *allsegs*: [level0segs, level1segs, ...]
            List of all the polygon segments for all the *levels*.
            For contour lines ``len(allsegs) == len(levels)``, and for
            filled contour regions ``len(allsegs) = len(levels)-1``.

            level0segs = [polygon0, polygon1, ...]

            polygon0 = array_like [[x0,y0], [x1,y1], ...]

          *allkinds*: *None* or [level0kinds, level1kinds, ...]
            Optional list of all the polygon vertex kinds (code types), as
            described and used in Path.   This is used to allow multiply-
            connected paths such as holes within filled polygons.
            If not *None*, len(allkinds) == len(allsegs).

            level0kinds = [polygon0kinds, ...]

            polygon0kinds = [vertexcode0, vertexcode1, ...]

            If *allkinds* is not *None*, usually all polygons for a particular
            contour level are grouped together so that

            level0segs = [polygon0] and level0kinds = [polygon0kinds].

        Keyword arguments are as described in
        :class:`~matplotlib.contour.QuadContourSet` object.

        **Examples:**

        .. plot:: mpl_examples/misc/contour_manual.py
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23201 29647])
                    ("_process_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29670 29674])
                            ("args" variable nil (reparse-symbol function_parameters) [29676 29681])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [29683 29691]))                          
                        :documentation "
        Process *args* and *kwargs*; override in derived classes.

        Must set self.levels, self.zmin and self.zmax, and update axes
        limits.
        ")
                        (reparse-symbol indented_block_body) [29652 31247])
                    ("_get_allsegs_and_allkinds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31282 31286]))                          
                        :documentation "
        Override in derived classes to create and return allsegs and allkinds.
        allkinds can be None.
        ")
                        (reparse-symbol indented_block_body) [31252 31465])
                    ("_get_lowers_and_uppers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31497 31501]))                          
                        :documentation "
        Return (lowers,uppers) for filled contours.
        ")
                        (reparse-symbol indented_block_body) [31470 31965])
                    ("_make_paths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31986 31990])
                            ("segs" variable nil (reparse-symbol function_parameters) [31992 31996])
                            ("kinds" variable nil (reparse-symbol function_parameters) [31998 32003]))                          )
                        (reparse-symbol indented_block_body) [31970 32183])
                    ("changed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32200 32204]))                          )
                        (reparse-symbol indented_block_body) [32188 32799])
                    ("_autolev" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32817 32821])
                            ("z" variable nil (reparse-symbol function_parameters) [32823 32824])
                            ("N" variable nil (reparse-symbol function_parameters) [32826 32827]))                          )
                        (reparse-symbol indented_block_body) [32804 33819])
                    ("_contour_level_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33848 33852])
                            ("z" variable nil (reparse-symbol function_parameters) [33854 33855])
                            ("args" variable nil (reparse-symbol function_parameters) [33857 33861]))                          
                        :documentation "
        Determine the contour levels and store in self.levels.
        ")
                        (reparse-symbol indented_block_body) [33824 34734])
                    ("_process_levels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34759 34763]))                          )
                        (reparse-symbol indented_block_body) [34739 35820])
                    ("_process_colors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35918 35922]))                          
                        :documentation "
        Color argument processing for contouring.

        Note that we base the color mapping on the contour levels,
        not on the actual range of the Z values.  This means we
        don't have to worry about bad values in Z, and we always have
        the full dynamic range available for the selected levels.

        The color is based on the midpoint of the layer, except for
        an extended end layers.
        ")
                        (reparse-symbol indented_block_body) [35898 37027])
                    ("_process_linewidths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37111 37115]))                          )
                        (reparse-symbol indented_block_body) [37087 37794])
                    ("_process_linestyles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37823 37827]))                          )
                        (reparse-symbol indented_block_body) [37799 38848])
                    ("get_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38867 38871]))                          )
                        (reparse-symbol indented_block_body) [38853 38968])
                    ("set_alpha" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38987 38991])
                            ("alpha" variable nil (reparse-symbol function_parameters) [38993 38998]))                          )
                        (reparse-symbol indented_block_body) [38973 39103])
                    ("find_nearest_contour" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39134 39138])
                            ("x" variable nil (reparse-symbol function_parameters) [39140 39141])
                            ("y" variable nil (reparse-symbol function_parameters) [39143 39144])
                            ("indices" variable nil (reparse-symbol function_parameters) [39146 39153])
                            ("pixel" variable nil (reparse-symbol function_parameters) [39160 39165]))                          
                        :documentation "
        Finds contour that is closest to a point.  Defaults to
        measuring distance in pixels (screen space - useful for manual
        contour labeling), but this can be controlled via a keyword
        argument.

        Returns a tuple containing the contour, segment, index of
        segment, x & y of segment point and distance to minimum point.

        Call signature::

          conmin,segmin,imin,xmin,ymin,dmin = find_nearest_contour(
                     self, x, y, indices=None, pixel=True )

        Optional keyword arguments:

          *indices*:
            Indexes of contour levels to consider when looking for
            nearest point.  Defaults to using all levels.

          *pixel*:
            If *True*, measure distance in pixel space, if not, measure
            distance in axes space.  Defaults to *True*.

        ")
                        (reparse-symbol indented_block_body) [39108 41461]))                  
                :type "class")
                nil [22695 41461])
            ("QuadContourSet" type
               (:documentation "
    Create and store a set of contour lines or filled regions.

    User-callable method: :meth:`clabel`

    Useful attributes:
      ax:
        The axes object in which the contours are drawn

      collections:
        A silent_list of LineCollections or PolyCollections

      levels:
        Contour levels

      layers:
        Same as levels for line contours; half-way between
        levels for filled contours.  See :meth:`_process_colors` method.
    "
                :superclasses ("ContourSet")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Calculate and draw contour lines or filled regions, depending
        on whether keyword arg 'filled' is False (default) or True.

        The first argument of the initializer must be an axes
        object.  The remaining arguments and keyword arguments
        are described in QuadContourSet.contour_doc.
        \"\"\"" code nil (reparse-symbol indented_block_body) [42026 42358])
                            ("ContourSet" code nil (reparse-symbol indented_block_body) [42367 42413]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41990 41994])
                            ("ax" variable nil (reparse-symbol function_parameters) [41996 41998])
                            ("args" variable nil (reparse-symbol function_parameters) [42000 42005])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42007 42015]))                          
                        :documentation "
        Calculate and draw contour lines or filled regions, depending
        on whether keyword arg 'filled' is False (default) or True.

        The first argument of the initializer must be an axes
        object.  The remaining arguments and keyword arguments
        are described in QuadContourSet.contour_doc.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41977 42414])
                    ("_process_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42437 42441])
                            ("args" variable nil (reparse-symbol function_parameters) [42443 42448])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [42450 42458]))                          
                        :documentation "
        Process args and kwargs.
        ")
                        (reparse-symbol indented_block_body) [42419 43218])
                    ("_get_allsegs_and_allkinds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43253 43257]))                          
                        :documentation "
        Create and return allsegs and allkinds by calling underlying C code.
        ")
                        (reparse-symbol indented_block_body) [43223 44088])
                    ("_contour_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44111 44115])
                            ("args" variable nil (reparse-symbol function_parameters) [44117 44121])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44123 44129]))                          )
                        (reparse-symbol indented_block_body) [44093 44959])
                    ("_check_xyz" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44979 44983])
                            ("args" variable nil (reparse-symbol function_parameters) [44985 44989])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [44991 44997]))                          )
                        (reparse-symbol indented_block_body) [44964 46184])
                    ("_initialize_x_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46209 46213])
                            ("z" variable nil (reparse-symbol function_parameters) [46215 46216]))                          )
                        (reparse-symbol indented_block_body) [46189 47637])
                    ("contour_doc" variable nil (reparse-symbol indented_block_body) [47642 54477]))                  
                :type "class")
                nil [41463 54478]))          
      :file "contour.py"
      :pointmax 54478
      :fsize 54477
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Matplotlib provides sophisticated date plotting capabilities, standing
on the shoulders of python :mod:`datetime`, the add-on modules
:mod:`pytz` and :mod:`dateutils`.  :class:`datetime` objects are
converted to floating point numbers which represent time in days
since 0001-01-01 UTC, plus 1.  For example, 0001-01-01, 06:00 is
1.25, not 0.25.  The helper functions :func:`date2num`,
:func:`num2date` and :func:`drange` are used to facilitate easy
conversion to and from :mod:`datetime` and numeric ranges.

.. note::
   Like Python's datetime, mpl uses the Gregorian calendar for
   all conversions between dates and floating point numbers.
   This practice is not universal, and calendar differences can
   cause confusing differences between what Python and mpl
   give as the number of days since 0001-01-01 and what other
   software and databases yield.  For example, the
   `US Naval Observatory <http://www.usno.navy.mil/USNO/astronomical-applications/data-services/jul-date>`_
   uses a calendar that switches from Julian to Gregorian in
   October, 1582.  Hence, using their calculator, the number of
   days between 0001-01-01 and 2006-04-01 is 732403, whereas using
   the Gregorian calendar via the datetime module we find::

     In [31]:date(2006,4,1).toordinal() - date(1,1,1).toordinal()
     Out[31]:732401


A wide range of specific and general purpose date tick locators and
formatters are provided in this module.  See
:mod:`matplotlib.ticker` for general information on tick locators
and formatters.  These are described below.

All the matplotlib date converters, tickers and formatters are
timezone aware, and the default timezone is given by the timezone
parameter in your :file:`matplotlibrc` file.  If you leave out a
:class:`tz` timezone instance, the default from your rc file will be
assumed.  If you want to use a custom time zone, pass a
:class:`pytz.timezone` instance with the tz keyword argument to
:func:`num2date`, :func:`plot_date`, and any custom date tickers or
locators you create.  See `pytz <http://pytz.sourceforge.net>`_ for
information on :mod:`pytz` and timezone handling.

The `dateutil module <http://labix.org/python-dateutil>`_ provides
additional code to handle date ticking, making it easy to place ticks
on any kinds of dates.  See examples below.

Date tickers
------------

Most of the date tickers can locate single or multiple values.  For
example::

    # tick on mondays every week
    loc = WeekdayLocator(byweekday=MO, tz=tz)

    # tick on mondays and saturdays
    loc = WeekdayLocator(byweekday=(MO, SA))

In addition, most of the constructors take an interval argument::

    # tick on mondays every second week
    loc = WeekdayLocator(byweekday=MO, interval=2)

The rrule locator allows completely general date ticking::

    # tick every 5th easter
    rule = rrulewrapper(YEARLY, byeaster=1, interval=5)
    loc = RRuleLocator(rule)

Here are all the date tickers:

    * :class:`MinuteLocator`: locate minutes

    * :class:`HourLocator`: locate hours

    * :class:`DayLocator`: locate specifed days of the month

    * :class:`WeekdayLocator`: Locate days of the week, eg MO, TU

    * :class:`MonthLocator`: locate months, eg 7 for july

    * :class:`YearLocator`: locate years that are multiples of base

    * :class:`RRuleLocator`: locate using a
      :class:`matplotlib.dates.rrulewrapper`.  The
      :class:`rrulewrapper` is a simple wrapper around a
      :class:`dateutils.rrule` (`dateutil
      <https://moin.conectiva.com.br/DateUtil>`_) which allow almost
      arbitrary date tick specifications.  See `rrule example
      <../examples/pylab_examples/date_demo_rrule.html>`_.

    * :class:`AutoDateLocator`: On autoscale, this class picks the best
      :class:`MultipleDateLocator` to set the view limits and the tick
      locations.

Date formatters
---------------

Here all all the date formatters:

    * :class:`AutoDateFormatter`: attempts to figure out the best format
      to use.  This is most useful when used with the :class:`AutoDateLocator`.

    * :class:`DateFormatter`: use :func:`strftime` format strings

    * :class:`IndexDateFormatter`: date plots with implicit *x*
      indexing.
\"\"\"" code nil nil [23 4227])
            ("datetime" include nil nil [4228 4259])
            ("math" include nil nil [4228 4259])
            ("time" include nil nil [4228 4259])
            ("re" include nil nil [4228 4259])
            ("matplotlib" include nil nil [4261 4278])
            ("numpy" include nil nil [4279 4297])
            ("matplotlib.units" include nil nil [4299 4331])
            ("matplotlib.cbook" include nil nil [4332 4364])
            ("matplotlib.ticker" include nil nil [4365 4399])
            ("dateutil.rrule" include nil nil [4401 4528])
            ("dateutil.relativedelta" include nil nil [4529 4577])
            ("dateutil.parser" include nil nil [4578 4600])
            ("__all__" variable nil nil [4603 5196])
            ("_UTC" type
               (:documentation "UTC"
                :superclasses ("datetime.tzinfo")
                :members 
                  ( ("utcoffset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5373 5377])
                            ("dt" variable nil (reparse-symbol function_parameters) [5379 5381]))                          )
                        (reparse-symbol indented_block_body) [5359 5421])
                    ("tzname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5437 5441])
                            ("dt" variable nil (reparse-symbol function_parameters) [5443 5445]))                          )
                        (reparse-symbol indented_block_body) [5426 5469])
                    ("dst" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5482 5486])
                            ("dt" variable nil (reparse-symbol function_parameters) [5488 5490]))                          )
                        (reparse-symbol indented_block_body) [5474 5530]))                  
                :type "class")
                nil [5311 5530])
            ("UTC" variable nil nil [5531 5543])
            ("_get_rc_timezone" function nil nil [5545 5691])
            ("HOURS_PER_DAY" variable nil nil [5693 5712])
            ("MINUTES_PER_DAY" code nil nil [5713 5749])
            ("SECONDS_PER_DAY" code nil nil [5750 5788])
            ("MUSECONDS_PER_DAY" code nil nil [5789 5828])
            ("SEC_PER_MIN" variable nil nil [5829 5845])
            ("SEC_PER_HOUR" variable nil nil [5846 5865])
            ("SEC_PER_DAY" code nil nil [5866 5897])
            ("SEC_PER_WEEK" code nil nil [5898 5928])
            ("MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY" code nil nil [5929 6027])
            ("WEEKDAYS" variable nil nil [6028 6103])
            ("_to_ordinalf" function
               (:documentation "
    Convert :mod:`datetime` to the Gregorian date as UTC float days,
    preserving hours, minutes, seconds and microseconds.  Return value
    is a :func:`float`.
    "
                :arguments 
                  ( ("dt" variable nil (reparse-symbol function_parameters) [6125 6127]))                  )
                nil [6108 6706])
            ("_from_ordinalf" function
               (:documentation "
    Convert Gregorian float of the date, preserving hours, minutes,
    seconds and microseconds.  Return value is a :class:`datetime`.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [6726 6727])
                    ("tz" variable nil (reparse-symbol function_parameters) [6729 6731]))                  )
                nil [6707 7560])
            ("strpdate2num" type
               (:documentation "
    Use this class to parse date strings to matplotlib datenums when
    you know the date format string of the date you are parsing.  See
    :file:`examples/load_demo.py`.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\" fmt: any valid strptime format is supported \"\"\"" code nil (reparse-symbol indented_block_body) [7808 7859])
                            ("self" variable nil (reparse-symbol indented_block_body) [7868 7882]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7788 7792])
                            ("fmt" variable nil (reparse-symbol function_parameters) [7794 7797]))                          
                        :documentation " fmt: any valid strptime format is supported "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7775 7883])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7901 7905])
                            ("s" variable nil (reparse-symbol function_parameters) [7907 7908]))                          
                        :documentation "s : string to be converted
           return value: a date2num float
        ")
                        (reparse-symbol indented_block_body) [7888 8079]))                  
                :type "class")
                nil [7561 8079])
            ("datestr2num" function
               (:documentation "
    Convert a date string to a datenum using
    :func:`dateutil.parser.parse`.  *d* can be a single string or a
    sequence of strings.
    "
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [8096 8097]))                  )
                nil [8080 8425])
            ("date2num" function
               (:documentation "
    *d* is either a :class:`datetime` instance or a sequence of datetimes.

    Return value is a floating point number (or sequence of floats)
    which gives the number of days (fraction part represents hours,
    minutes, seconds) since 0001-01-01 00:00:00 UTC, *plus* *one*.
    The addition of one here is a historical artifact.  Also, note
    that the Gregorian calendar is assumed; this is not universal
    practice.  For details, see the module docstring.
    "
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [8440 8441]))                  )
                nil [8427 9041])
            ("julian2num" function (:arguments 
              ( ("j" variable nil (reparse-symbol function_parameters) [9058 9059]))              ) nil [9043 9209])
            ("num2julian" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [9225 9226]))              ) nil [9210 9376])
            ("num2date" function
               (:documentation "
    *x* is a float value which gives the number of days
    (fraction part represents hours, minutes, seconds) since
    0001-01-01 00:00:00 UTC *plus* *one*.
    The addition of one here is a historical artifact.  Also, note
    that the Gregorian calendar is assumed; this is not universal
    practice.  For details, see the module docstring.

    Return value is a :class:`datetime` instance in timezone *tz* (default to
    rcparams TZ value).

    If *x* is a sequence, a sequence of :class:`datetime` objects will
    be returned.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [9390 9391])
                    ("tz" variable nil (reparse-symbol function_parameters) [9393 9395]))                  )
                nil [9377 10115])
            ("drange" function
               (:documentation "
    Return a date range as float Gregorian ordinals.  *dstart* and
    *dend* are :class:`datetime` instances.  *delta* is a
    :class:`datetime.timedelta` instance.
    "
                :arguments 
                  ( ("dstart" variable nil (reparse-symbol function_parameters) [10127 10133])
                    ("dend" variable nil (reparse-symbol function_parameters) [10135 10139])
                    ("delta" variable nil (reparse-symbol function_parameters) [10141 10146]))                  )
                nil [10116 11054])
            ("DateFormatter" type
               (:documentation "
    Tick location is seconds since the epoch.  Use a :func:`strftime`
    format string.

    Python only supports :mod:`datetime` :func:`strftime` formatting
    for years greater than 1900.  Thanks to Andrew Dalke, Dalke
    Scientific Software who contributed the :func:`strftime` code
    below to include dates earlier than this year.
    "
                :superclasses ("ticker.Formatter")
                :members 
                  ( ("illegal_s" variable nil (reparse-symbol indented_block_body) [11494 11538])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *fmt* is an :func:`strftime` format string; *tz* is the
         :class:`tzinfo` instance.
        \"\"\"" code nil (reparse-symbol indented_block_body) [11586 11700])
                            ("if" code nil (reparse-symbol indented_block_body) [11709 11748])
                            ("self" variable nil (reparse-symbol indented_block_body) [11756 11770])
                            ("self" variable nil (reparse-symbol indented_block_body) [11779 11791]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11557 11561])
                            ("fmt" variable nil (reparse-symbol function_parameters) [11563 11566])
                            ("tz" variable nil (reparse-symbol function_parameters) [11568 11570]))                          
                        :documentation "
        *fmt* is an :func:`strftime` format string; *tz* is the
         :class:`tzinfo` instance.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11544 11792])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11810 11814])
                            ("x" variable nil (reparse-symbol function_parameters) [11816 11817])
                            ("pos" variable nil (reparse-symbol function_parameters) [11819 11822]))                          )
                        (reparse-symbol indented_block_body) [11797 12126])
                    ("set_tzinfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12146 12150])
                            ("tz" variable nil (reparse-symbol function_parameters) [12152 12154]))                          )
                        (reparse-symbol indented_block_body) [12131 12178])
                    ("_findall" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12196 12200])
                            ("text" variable nil (reparse-symbol function_parameters) [12202 12206])
                            ("substr" variable nil (reparse-symbol function_parameters) [12208 12214]))                          )
                        (reparse-symbol indented_block_body) [12183 12447])
                    ("strftime" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12684 12688])
                            ("dt" variable nil (reparse-symbol function_parameters) [12690 12692])
                            ("fmt" variable nil (reparse-symbol function_parameters) [12694 12697]))                          )
                        (reparse-symbol indented_block_body) [12671 13707]))                  
                :type "class")
                nil [11094 13707])
            ("IndexDateFormatter" type
               (:documentation "
    Use with :class:`~matplotlib.ticker.IndexLocator` to cycle format
    strings by index.
    "
                :superclasses ("ticker.Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *t* is a sequence of dates (floating point days).  *fmt* is a
        :func:`strftime` format string.
        \"\"\"" code nil (reparse-symbol indented_block_body) [13911 14036])
                            ("if" code nil (reparse-symbol indented_block_body) [14045 14084])
                            ("self" variable nil (reparse-symbol indented_block_body) [14092 14102])
                            ("self" variable nil (reparse-symbol indented_block_body) [14111 14125])
                            ("self" variable nil (reparse-symbol indented_block_body) [14134 14146]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13879 13883])
                            ("t" variable nil (reparse-symbol function_parameters) [13885 13886])
                            ("fmt" variable nil (reparse-symbol function_parameters) [13888 13891])
                            ("tz" variable nil (reparse-symbol function_parameters) [13893 13895]))                          
                        :documentation "
        *t* is a sequence of dates (floating point days).  *fmt* is a
        :func:`strftime` format string.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13866 14147])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14165 14169])
                            ("x" variable nil (reparse-symbol function_parameters) [14171 14172])
                            ("pos" variable nil (reparse-symbol function_parameters) [14174 14177]))                          )
                        (reparse-symbol indented_block_body) [14152 14420]))                  
                :type "class")
                nil [13710 14420])
            ("AutoDateFormatter" type
               (:documentation "
    This class attempts to figure out the best format to use.  This is
    most useful when used with the :class:`AutoDateLocator`.


    The AutoDateFormatter has a scale dictionary that maps the scale
    of the tick (the distance in days between one major tick) and a
    format string.  The default looks like this::

        self.scaled = {
           365.0  : '%Y',
           30.    : '%b %Y',
           1.0    : '%b %d %Y',
           1./24. : '%H:%M:%D',
           }


    The algorithm picks the key in the dictionary that is >= the
    current scale and uses that format string.  You can customize this
    dictionary by doing::


      formatter = AutoDateFormatter()
      formatter.scaled[1/(24.*60.)] = '%M:%S' # only show min and sec

    "
                :superclasses ("ticker.Formatter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Autofmt the date labels.  The default format is the one to use
        if none of the times in scaled match
        \"\"\"" code nil (reparse-symbol indented_block_body) [15762 15893])
                            ("self" variable nil (reparse-symbol indented_block_body) [15902 15925])
                            ("self" variable nil (reparse-symbol indented_block_body) [15934 15947])
                            ("self" variable nil (reparse-symbol indented_block_body) [15956 15984])
                            ("self" variable nil (reparse-symbol indented_block_body) [15993 16045])
                            ("self" variable nil (reparse-symbol indented_block_body) [16054 16201]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15706 15710])
                            ("locator" variable nil (reparse-symbol function_parameters) [15712 15719])
                            ("tz" variable nil (reparse-symbol function_parameters) [15721 15723])
                            ("defaultfmt" variable nil (reparse-symbol function_parameters) [15730 15740]))                          
                        :documentation "
        Autofmt the date labels.  The default format is the one to use
        if none of the times in scaled match
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15693 16202])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16220 16224])
                            ("x" variable nil (reparse-symbol function_parameters) [16226 16227])
                            ("pos" variable nil (reparse-symbol function_parameters) [16229 16232]))                          )
                        (reparse-symbol indented_block_body) [16207 16533]))                  
                :type "class")
                nil [14422 16533])
            ("rrulewrapper" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [16605 16636])
                            ("self" variable nil (reparse-symbol indented_block_body) [16645 16675])
                            ("self" variable nil (reparse-symbol indented_block_body) [16684 16722]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16574 16578])
                            ("freq" variable nil (reparse-symbol function_parameters) [16580 16584])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16586 16594]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16561 16723])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16736 16740])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16742 16750]))                          )
                        (reparse-symbol indented_block_body) [16728 16839])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16860 16864])
                            ("name" variable nil (reparse-symbol function_parameters) [16866 16870]))                          )
                        (reparse-symbol indented_block_body) [16844 16988]))                  
                :type "class")
                nil [16536 16988])
            ("DateLocator" type
               (:superclasses ("ticker.Locator")
                :members 
                  ( ("hms0d" variable nil (reparse-symbol indented_block_body) [17028 17075])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *tz* is a :class:`tzinfo` instance.
        \"\"\"" code nil (reparse-symbol indented_block_body) [17117 17176])
                            ("if" code nil (reparse-symbol indented_block_body) [17185 17224])
                            ("self" variable nil (reparse-symbol indented_block_body) [17232 17244]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17093 17097])
                            ("tz" variable nil (reparse-symbol function_parameters) [17099 17101]))                          
                        :documentation "
        *tz* is a :class:`tzinfo` instance.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17080 17245])
                    ("set_tzinfo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17265 17269])
                            ("tz" variable nil (reparse-symbol function_parameters) [17271 17273]))                          )
                        (reparse-symbol indented_block_body) [17250 17297])
                    ("datalim_to_dt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17320 17324]))                          )
                        (reparse-symbol indented_block_body) [17302 17442])
                    ("viewlim_to_dt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17465 17469]))                          )
                        (reparse-symbol indented_block_body) [17447 17587])
                    ("_get_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17606 17610]))                          
                        :documentation "
        Return how many days a unit of the locator is; used for
        intelligent autoscaling.
        ")
                        (reparse-symbol indented_block_body) [17592 17751])
                    ("_get_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17774 17778]))                          
                        :documentation "
        Return the number of units for each tick.
        ")
                        (reparse-symbol indented_block_body) [17756 17872])
                    ("nonsingular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17893 17897])
                            ("vmin" variable nil (reparse-symbol function_parameters) [17899 17903])
                            ("vmax" variable nil (reparse-symbol function_parameters) [17905 17909]))                          )
                        (reparse-symbol indented_block_body) [17877 18118]))                  
                :type "class")
                nil [16989 18118])
            ("RRuleLocator" type
               (:superclasses ("DateLocator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("DateLocator" code nil (reparse-symbol indented_block_body) [18235 18265])
                            ("self" variable nil (reparse-symbol indented_block_body) [18274 18287]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18208 18212])
                            ("o" variable nil (reparse-symbol function_parameters) [18214 18215])
                            ("tz" variable nil (reparse-symbol function_parameters) [18217 18219]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18195 18288])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18306 18310]))                          )
                        (reparse-symbol indented_block_body) [18293 19807])
                    ("_get_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19826 19830]))                          
                        :documentation "
        Return how many days a unit of the locator is; used for
        intelligent autoscaling.
        ")
                        (reparse-symbol indented_block_body) [19812 20035])
                    ("get_unit_generic" function (:arguments 
                      ( ("freq" variable nil (reparse-symbol function_parameters) [20061 20065]))                      ) (reparse-symbol indented_block_body) [20040 20585])
                    ("get_unit_generic" variable nil (reparse-symbol indented_block_body) [20589 20638])
                    ("_get_interval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20662 20666]))                          )
                        (reparse-symbol indented_block_body) [20644 20711])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20730 20734]))                          
                        :documentation "
        Set the view limits to include the data range.
        ")
                        (reparse-symbol indented_block_body) [20716 21643]))                  
                :type "class")
                nil [18119 21643])
            ("AutoDateLocator" type
               (:documentation "
    On autoscale, this class picks the best
    :class:`MultipleDateLocator` to set the view limits and the tick
    locations.
    "
                :superclasses ("DateLocator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *minticks* is the minimum number of ticks desired, which is used to
        select the type of ticking (yearly, monthly, etc.).

        *maxticks* is the maximum number of ticks desired, which controls
        any interval between ticks (ticking every other, every 3, etc.).
        For really fine-grained control, this can be a dictionary mapping
        individual rrule frequency constants (YEARLY, MONTHLY, etc.)
        to their own maximum number of ticks.  This can be used to keep
        the number of ticks appropriate to the format chosen in
        class:`AutoDateFormatter`. Any frequency not specified in this
        dictionary is given a default value.

        *tz* is a :class:`tzinfo` instance.

        *interval_multiples* is a boolean that indicates whether ticks
        should be chosen to be multiple of the interval. This will lock
        ticks to 'nicer' locations. For example, this will force the
        ticks to be at hours 0,6,12,18 when hourly ticking is done at
        6 hour intervals.

        The AutoDateLocator has an interval dictionary that maps the
        frequency of the tick (a constant from dateutil.rrule) and a
        multiple allowed for that ticking.  The default looks like this::

          self.intervald = {
            YEARLY  : [1, 2, 4, 5, 10],
            MONTHLY : [1, 2, 3, 4, 6],
            DAILY   : [1, 2, 3, 7, 14],
            HOURLY  : [1, 2, 3, 4, 6, 12],
            MINUTELY: [1, 5, 10, 15, 30],
            SECONDLY: [1, 5, 10, 15, 30]
            }

        The interval is used to specify multiples that are appropriate for
        the frequency of ticking. For instance, every 7 days is sensible
        for daily ticks, but for minutes/seconds, 15 or 30 make sense.
        You can customize this dictionary by doing::

          locator = AutoDateLocator()
          locator.intervald[HOURLY] = [3] # only show every 3 hours
        \"\"\"" code nil (reparse-symbol indented_block_body) [21927 23857])
                            ("DateLocator" code nil (reparse-symbol indented_block_body) [23866 23896])
                            ("self" variable nil (reparse-symbol indented_block_body) [23905 23934])
                            ("self" variable nil (reparse-symbol indented_block_body) [23943 23962])
                            ("self" variable nil (reparse-symbol indented_block_body) [23971 24037])
                            ("self" variable nil (reparse-symbol indented_block_body) [24046 24070])
                            ("self" variable nil (reparse-symbol indented_block_body) [24080 24190])
                            ("if" code nil (reparse-symbol indented_block_body) [24199 24602])
                            ("self" variable nil (reparse-symbol indented_block_body) [24610 24654])
                            ("self" variable nil (reparse-symbol indented_block_body) [24663 24933])
                            ("self" variable nil (reparse-symbol indented_block_body) [24942 25047]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21842 21846])
                            ("tz" variable nil (reparse-symbol function_parameters) [21848 21850])
                            ("minticks" variable nil (reparse-symbol function_parameters) [21857 21865])
                            ("maxticks" variable nil (reparse-symbol function_parameters) [21869 21877])
                            ("interval_multiples" variable nil (reparse-symbol function_parameters) [21892 21910]))                          
                        :documentation "
        *minticks* is the minimum number of ticks desired, which is used to
        select the type of ticking (yearly, monthly, etc.).

        *maxticks* is the maximum number of ticks desired, which controls
        any interval between ticks (ticking every other, every 3, etc.).
        For really fine-grained control, this can be a dictionary mapping
        individual rrule frequency constants (YEARLY, MONTHLY, etc.)
        to their own maximum number of ticks.  This can be used to keep
        the number of ticks appropriate to the format chosen in
        class:`AutoDateFormatter`. Any frequency not specified in this
        dictionary is given a default value.

        *tz* is a :class:`tzinfo` instance.

        *interval_multiples* is a boolean that indicates whether ticks
        should be chosen to be multiple of the interval. This will lock
        ticks to 'nicer' locations. For example, this will force the
        ticks to be at hours 0,6,12,18 when hourly ticking is done at
        6 hour intervals.

        The AutoDateLocator has an interval dictionary that maps the
        frequency of the tick (a constant from dateutil.rrule) and a
        multiple allowed for that ticking.  The default looks like this::

          self.intervald = {
            YEARLY  : [1, 2, 4, 5, 10],
            MONTHLY : [1, 2, 3, 4, 6],
            DAILY   : [1, 2, 3, 7, 14],
            HOURLY  : [1, 2, 3, 4, 6, 12],
            MINUTELY: [1, 5, 10, 15, 30],
            SECONDLY: [1, 5, 10, 15, 30]
            }

        The interval is used to specify multiples that are appropriate for
        the frequency of ticking. For instance, every 7 days is sensible
        for daily ticks, but for minutes/seconds, 15 or 30 make sense.
        You can customize this dictionary by doing::

          locator = AutoDateLocator()
          locator.intervald[HOURLY] = [3] # only show every 3 hours
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21829 25048])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25066 25070]))                          )
                        (reparse-symbol indented_block_body) [25053 25171])
                    ("set_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25189 25193])
                            ("axis" variable nil (reparse-symbol function_parameters) [25195 25199]))                          )
                        (reparse-symbol indented_block_body) [25176 25280])
                    ("refresh" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25297 25301]))                          )
                        (reparse-symbol indented_block_body) [25285 25463])
                    ("_get_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25482 25486]))                          )
                        (reparse-symbol indented_block_body) [25468 25546])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25565 25569]))                          )
                        (reparse-symbol indented_block_body) [25551 25763])
                    ("get_locator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25784 25788])
                            ("dmin" variable nil (reparse-symbol function_parameters) [25790 25794])
                            ("dmax" variable nil (reparse-symbol function_parameters) [25796 25800]))                          )
                        (reparse-symbol indented_block_body) [25768 28828]))                  
                :type "class")
                nil [21645 28828])
            ("YearLocator" type
               (:documentation "
    Make ticks on a given day of each year that is a multiple of base.

    Examples::

      # Tick every year on Jan 1st
      locator = YearLocator()

      # Tick every 5 years on July 4th
      locator = YearLocator(5, month=7, day=4)
    "
                :superclasses ("DateLocator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Mark years that are multiple of base on a given month and day
        (default jan 1).
        \"\"\"" code nil (reparse-symbol indented_block_body) [29183 29293])
                            ("DateLocator" code nil (reparse-symbol indented_block_body) [29302 29332])
                            ("self" variable nil (reparse-symbol indented_block_body) [29341 29370])
                            ("self" variable nil (reparse-symbol indented_block_body) [29379 29644]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29135 29139])
                            ("base" variable nil (reparse-symbol function_parameters) [29141 29145])
                            ("month" variable nil (reparse-symbol function_parameters) [29149 29154])
                            ("day" variable nil (reparse-symbol function_parameters) [29158 29161])
                            ("tz" variable nil (reparse-symbol function_parameters) [29165 29167]))                          
                        :documentation "
        Mark years that are multiple of base on a given month and day
        (default jan 1).
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29122 29645])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29663 29667]))                          )
                        (reparse-symbol indented_block_body) [29650 30063])
                    ("autoscale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30082 30086]))                          
                        :documentation "
        Set the view limits to include the data range.
        ")
                        (reparse-symbol indented_block_body) [30068 30506]))                  
                :type "class")
                nil [28830 30506])
            ("MonthLocator" type
               (:documentation "
    Make ticks on occurances of each month month, eg 1, 3, 12.
    "
                :superclasses ("RRuleLocator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Mark every month in *bymonth*; *bymonth* can be an int or
        sequence.  Default is ``range(1,13)``, i.e. every month.

        *interval* is the interval between each iteration.  For
        example, if ``interval=2``, mark every second occurance.
        \"\"\"" code nil (reparse-symbol indented_block_body) [30703 30979])
                            ("if" code nil (reparse-symbol indented_block_body) [30988 31028])
                            ("o" variable nil (reparse-symbol indented_block_body) [31036 31159])
                            ("RRuleLocator" code nil (reparse-symbol indented_block_body) [31168 31202]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30638 30642])
                            ("bymonth" variable nil (reparse-symbol function_parameters) [30645 30652])
                            ("bymonthday" variable nil (reparse-symbol function_parameters) [30659 30669])
                            ("interval" variable nil (reparse-symbol function_parameters) [30673 30681])
                            ("tz" variable nil (reparse-symbol function_parameters) [30685 30687]))                          
                        :documentation "
        Mark every month in *bymonth*; *bymonth* can be an int or
        sequence.  Default is ``range(1,13)``, i.e. every month.

        *interval* is the interval between each iteration.  For
        example, if ``interval=2``, mark every second occurance.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30625 31203]))                  
                :type "class")
                nil [30508 31203])
            ("WeekdayLocator" type
               (:documentation "
    Make ticks on occurances of each weekday.
    "
                :superclasses ("RRuleLocator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Mark every weekday in *byweekday*; *byweekday* can be a number or
        sequence.

        Elements of *byweekday* must be one of MO, TU, WE, TH, FR, SA,
        SU, the constants from :mod:`dateutils.rrule`.

        *interval* specifies the number of weeks to skip.  For example,
        ``interval=2`` plots every second week.
        \"\"\"" code nil (reparse-symbol indented_block_body) [31371 31726])
                            ("o" variable nil (reparse-symbol indented_block_body) [31735 31837])
                            ("RRuleLocator" code nil (reparse-symbol indented_block_body) [31846 31880]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31321 31325])
                            ("byweekday" variable nil (reparse-symbol function_parameters) [31328 31337])
                            ("interval" variable nil (reparse-symbol function_parameters) [31341 31349])
                            ("tz" variable nil (reparse-symbol function_parameters) [31353 31355]))                          
                        :documentation "
        Mark every weekday in *byweekday*; *byweekday* can be a number or
        sequence.

        Elements of *byweekday* must be one of MO, TU, WE, TH, FR, SA,
        SU, the constants from :mod:`dateutils.rrule`.

        *interval* specifies the number of weeks to skip.  For example,
        ``interval=2`` plots every second week.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31308 31881]))                  
                :type "class")
                nil [31205 31881])
            ("DayLocator" type
               (:documentation "
    Make ticks on occurances of each day of the month.  For example,
    1, 15, 30.
    "
                :superclasses ("RRuleLocator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Mark every day in *bymonthday*; *bymonthday* can be an int or
        sequence.

        Default is to tick every day of the month: ``bymonthday=range(1,32)``
        \"\"\"" code nil (reparse-symbol indented_block_body) [32086 32268])
                            ("if" code nil (reparse-symbol indented_block_body) [32277 32323])
                            ("o" variable nil (reparse-symbol indented_block_body) [32331 32435])
                            ("RRuleLocator" code nil (reparse-symbol indented_block_body) [32444 32478]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32032 32036])
                            ("bymonthday" variable nil (reparse-symbol function_parameters) [32039 32049])
                            ("interval" variable nil (reparse-symbol function_parameters) [32056 32064])
                            ("tz" variable nil (reparse-symbol function_parameters) [32068 32070]))                          
                        :documentation "
        Mark every day in *bymonthday*; *bymonthday* can be an int or
        sequence.

        Default is to tick every day of the month: ``bymonthday=range(1,32)``
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32019 32479]))                  
                :type "class")
                nil [31883 32479])
            ("HourLocator" type
               (:documentation "
    Make ticks on occurances of each hour.
    "
                :superclasses ("RRuleLocator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Mark every hour in *byhour*; *byhour* can be an int or sequence.
        Default is to tick every hour: ``byhour=range(24)``

        *interval* is the interval between each iteration.  For
        example, if ``interval=2``, mark every second occurrence.
        \"\"\"" code nil (reparse-symbol indented_block_body) [32640 32919])
                            ("if" code nil (reparse-symbol indented_block_body) [32928 32964])
                            ("rule" variable nil (reparse-symbol indented_block_body) [32972 33085])
                            ("RRuleLocator" code nil (reparse-symbol indented_block_body) [33094 33131]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32590 32594])
                            ("byhour" variable nil (reparse-symbol function_parameters) [32597 32603])
                            ("interval" variable nil (reparse-symbol function_parameters) [32610 32618])
                            ("tz" variable nil (reparse-symbol function_parameters) [32622 32624]))                          
                        :documentation "
        Mark every hour in *byhour*; *byhour* can be an int or sequence.
        Default is to tick every hour: ``byhour=range(24)``

        *interval* is the interval between each iteration.  For
        example, if ``interval=2``, mark every second occurrence.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32577 33132]))                  
                :type "class")
                nil [32481 33132])
            ("MinuteLocator" type
               (:documentation "
    Make ticks on occurances of each minute.
    "
                :superclasses ("RRuleLocator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Mark every minute in *byminute*; *byminute* can be an int or
        sequence.  Default is to tick every minute: ``byminute=range(60)``

        *interval* is the interval between each iteration.  For
        example, if ``interval=2``, mark every second occurrence.
        \"\"\"" code nil (reparse-symbol indented_block_body) [33299 33589])
                            ("if" code nil (reparse-symbol indented_block_body) [33598 33638])
                            ("rule" variable nil (reparse-symbol indented_block_body) [33646 33753])
                            ("RRuleLocator" code nil (reparse-symbol indented_block_body) [33762 33799]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33247 33251])
                            ("byminute" variable nil (reparse-symbol function_parameters) [33254 33262])
                            ("interval" variable nil (reparse-symbol function_parameters) [33269 33277])
                            ("tz" variable nil (reparse-symbol function_parameters) [33281 33283]))                          
                        :documentation "
        Mark every minute in *byminute*; *byminute* can be an int or
        sequence.  Default is to tick every minute: ``byminute=range(60)``

        *interval* is the interval between each iteration.  For
        example, if ``interval=2``, mark every second occurrence.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33234 33800]))                  
                :type "class")
                nil [33134 33800])
            ("SecondLocator" type
               (:documentation "
    Make ticks on occurances of each second.
    "
                :superclasses ("RRuleLocator")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Mark every second in *bysecond*; *bysecond* can be an int or
        sequence.  Default is to tick every second: ``bysecond = range(60)``

        *interval* is the interval between each iteration.  For
        example, if ``interval=2``, mark every second occurrence.

        \"\"\"" code nil (reparse-symbol indented_block_body) [33967 34260])
                            ("if" code nil (reparse-symbol indented_block_body) [34269 34309])
                            ("rule" variable nil (reparse-symbol indented_block_body) [34317 34384])
                            ("RRuleLocator" code nil (reparse-symbol indented_block_body) [34393 34430]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33915 33919])
                            ("bysecond" variable nil (reparse-symbol function_parameters) [33922 33930])
                            ("interval" variable nil (reparse-symbol function_parameters) [33937 33945])
                            ("tz" variable nil (reparse-symbol function_parameters) [33949 33951]))                          
                        :documentation "
        Mark every second in *bysecond*; *bysecond* can be an int or
        sequence.  Default is to tick every second: ``bysecond = range(60)``

        *interval* is the interval between each iteration.  For
        example, if ``interval=2``, mark every second occurrence.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33902 34431]))                  
                :type "class")
                nil [33802 34431])
            ("_close_to_dt" function (:arguments 
              ( ("d1" variable nil (reparse-symbol function_parameters) [34450 34452])
                ("d2" variable nil (reparse-symbol function_parameters) [34454 34456])
                ("epsilon" variable nil (reparse-symbol function_parameters) [34458 34465]))              ) nil [34433 34688])
            ("_close_to_num" function (:arguments 
              ( ("o1" variable nil (reparse-symbol function_parameters) [34707 34709])
                ("o2" variable nil (reparse-symbol function_parameters) [34711 34713])
                ("epsilon" variable nil (reparse-symbol function_parameters) [34715 34722]))              ) nil [34689 34878])
            ("epoch2num" function
               (:documentation "
    Convert an epoch or sequence of epochs to the new date format,
    that is days since 0001.
    "
                :arguments 
                  ( ("e" variable nil (reparse-symbol function_parameters) [34893 34894]))                  )
                nil [34879 35067])
            ("num2epoch" function
               (:documentation "
    Convert days since 0001 to epoch.  *d* can be a number or sequence.
    "
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [35082 35083]))                  )
                nil [35068 35232])
            ("mx2num" function
               (:documentation "
    Convert mx :class:`datetime` instance (or sequence of mx
    instances) to the new date format.
    "
                :arguments 
                  ( ("mxdates" variable nil (reparse-symbol function_parameters) [35244 35251]))                  )
                nil [35233 35575])
            ("date_ticker_factory" function
               (:documentation "
    Create a date locator with *numticks* (approx) and a date formatter
    for *span* in days.  Return value is (locator, formatter).
    "
                :arguments 
                  ( ("span" variable nil (reparse-symbol function_parameters) [35601 35605])
                    ("tz" variable nil (reparse-symbol function_parameters) [35607 35609])
                    ("numticks" variable nil (reparse-symbol function_parameters) [35616 35624]))                  )
                nil [35577 36774])
            ("seconds" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [36788 36789]))              ) nil [36776 36854])
            ("minutes" function (:arguments 
              ( ("m" variable nil (reparse-symbol function_parameters) [36867 36868]))              ) nil [36855 36937])
            ("hours" function (:arguments 
              ( ("h" variable nil (reparse-symbol function_parameters) [36948 36949]))              ) nil [36938 36997])
            ("weeks" function (:arguments 
              ( ("w" variable nil (reparse-symbol function_parameters) [37008 37009]))              ) nil [36998 37056])
            ("DateConverter" type
               (:documentation "
    Converter for datetime.date and datetime.datetime data,
    or for date/time data represented as it would be converted
    by :func:`date2num`.

    The 'unit' tag for such data is None or a tzinfo instance.
    "
                :superclasses ("units.ConversionInterface")
                :members 
                  ( ("axisinfo" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("unit" variable nil (reparse-symbol function_parameters) [37370 37374])
                            ("axis" variable nil (reparse-symbol function_parameters) [37376 37380]))                          
                        :documentation "
        Return the :class:`~matplotlib.units.AxisInfo` for *unit*.

        *unit* is a tzinfo instance or None.
        The *axis* argument is required but not used.
        ")
                        (reparse-symbol indented_block_body) [37339 37909])
                    ("convert" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("value" variable nil (reparse-symbol function_parameters) [37944 37949])
                            ("unit" variable nil (reparse-symbol function_parameters) [37951 37955])
                            ("axis" variable nil (reparse-symbol function_parameters) [37957 37961]))                          
                        :documentation "
        If *value* is not already a number or sequence of numbers,
        convert it with :func:`date2num`.

        The *unit* and *axis* arguments are not used.
        ")
                        (reparse-symbol indented_block_body) [37914 38264])
                    ("default_units" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("x" variable nil (reparse-symbol function_parameters) [38305 38306])
                            ("axis" variable nil (reparse-symbol function_parameters) [38308 38312]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [38269 38593]))                  
                :type "class")
                nil [37058 38593])
            ("units" variable nil nil [38595 38642])
            ("units" variable nil nil [38643 38694])
            ("if" code nil nil [38698 40071]))          
      :file "dates.py"
      :pointmax 40071
      :fsize 40070
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module for finding, managing, and using fonts across platforms.

This module provides a single :class:`FontManager` instance that can
be shared across backends and platforms.  The :func:`findfont`
function returns the best TrueType (TTF) font file in the local or
system font path that matches the specified :class:`FontProperties`
instance.  The :class:`FontManager` also handles Adobe Font Metrics
(AFM) font files for use by the PostScript backend.

The design is based on the `W3C Cascading Style Sheet, Level 1 (CSS1)
font specification <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_.
Future versions may implement the Level 2 or 2.1 specifications.

Experimental support is included for using `fontconfig` on Unix
variant platforms (Linux, OS X, Solaris).  To enable it, set the
constant ``USE_FONTCONFIG`` in this file to ``True``.  Fontconfig has
the advantage that it is the standard way to look up fonts on X11
platforms, so if a font is installed, it is much more likely to be
found.
\"\"\"" code nil nil [1 1007])
            ("\"\"\"
KNOWN ISSUES

  - documentation
  - font variant is untested
  - font stretch is incomplete
  - font size is incomplete
  - font size_adjust is incomplete
  - default font algorithm needs improvement and testing
  - setWeights function needs improvement
  - 'light' is an invalid weight value, remove it.
  - update_fonts not implemented

Authors   : John Hunter <jdhunter@ace.bsd.uchicago.edu>
            Paul Barrett <Barrett@STScI.Edu>
            Michael Droettboom <mdroe@STScI.edu>
Copyright : John Hunter (2004,2005), Paul Barrett (2004,2005)
License   : matplotlib license (PSF compatible)
            The font directory code is from ttfquery,
            see license/LICENSE_TTFQUERY.
\"\"\"" code nil nil [1009 1711])
            ("warnings" include nil nil [1713 1749])
            ("subprocess" include nil nil [1713 1749])
            ("sys" include nil nil [1713 1749])
            ("os" include nil nil [1713 1749])
            ("try" code nil nil [1750 1813])
            ("matplotlib" include nil nil [1813 1830])
            ("matplotlib" include nil nil [1831 1857])
            ("matplotlib" include nil nil [1858 1888])
            ("matplotlib" include nil nil [1889 1935])
            ("matplotlib.cbook" include nil nil [1936 1979])
            ("matplotlib.cbook" include nil nil [1980 2012])
            ("matplotlib.fontconfig_pattern" include nil nil [2013 2114])
            ("try" code nil nil [2116 2188])
            ("USE_FONTCONFIG" variable nil nil [2189 2211])
            ("verbose" variable nil nil [2213 2241])
            ("font_scalings" variable nil nil [2243 2494])
            ("stretch_dict" variable nil nil [2496 2773])
            ("weight_dict" variable nil nil [2775 3126])
            ("font_family_aliases" variable nil nil [3128 3292])
            ("MSFolders" variable nil nil [3311 3396])
            ("MSFontDirectories" variable nil nil [3398 3536])
            ("X11FontDirectories" variable nil nil [3538 3928])
            ("OSXFontDirectories" variable nil nil [3930 4109])
            ("if" code nil nil [4111 4399])
            ("get_fontext_synonyms" function
               (:documentation "
    Return a list of file extensions extensions that are synonyms for
    the given file extension *fileext*.
    "
                :arguments 
                  ( ("fontext" variable nil (reparse-symbol function_parameters) [4425 4432]))                  )
                nil [4400 4669])
            ("list_fonts" function
               (:documentation "
    Return a list of all fonts matching any of the extensions,
    possibly upper-cased, found recursively under the directory.
    "
                :arguments 
                  ( ("directory" variable nil (reparse-symbol function_parameters) [4685 4694])
                    ("extensions" variable nil (reparse-symbol function_parameters) [4696 4706]))                  )
                nil [4670 5005])
            ("win32FontDirectory" function (:documentation "
    Return the user-specified font directory for Win32.  This is
    looked up from the registry key::

      \\\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\\Fonts

    If the key is not found, $WINDIR/Fonts will be returned.
    ") nil [5006 5871])
            ("win32InstalledFonts" function
               (:documentation "
    Search for fonts in the specified font directory, or use the
    system directories if none given.  A list of TrueType font
    filenames are returned by default, or AFM fonts if *fontext* ==
    'afm'.
    "
                :arguments 
                  ( ("directory" variable nil (reparse-symbol function_parameters) [5896 5905])
                    ("fontext" variable nil (reparse-symbol function_parameters) [5912 5919]))                  )
                nil [5872 7378])
            ("OSXInstalledFonts" function
               (:documentation "
    Get list of font files on OS X - ignores font suffix by default.
    "
                :arguments 
                  ( ("directories" variable nil (reparse-symbol function_parameters) [7401 7412])
                    ("fontext" variable nil (reparse-symbol function_parameters) [7419 7426]))                  )
                nil [7379 7843])
            ("get_fontconfig_fonts" function
               (:documentation "
    Grab a list of all the fonts that are being tracked by fontconfig
    by making a system call to ``fc-list``.  This is an easy way to
    grab all of the fonts the user wants to be made available to
    applications, without needing knowing where all of them reside.
    "
                :arguments 
                  ( ("fontext" variable nil (reparse-symbol function_parameters) [7870 7877]))                  )
                nil [7845 8750])
            ("findSystemFonts" function
               (:documentation "
    Search for fonts in the specified font paths.  If no paths are
    given, will use a standard set of system paths, as well as the
    list of fonts tracked by fontconfig if fontconfig is installed and
    available.  A list of TrueType fonts are returned by default with
    AFM fonts as an option.
    "
                :arguments 
                  ( ("fontpaths" variable nil (reparse-symbol function_parameters) [8771 8780])
                    ("fontext" variable nil (reparse-symbol function_parameters) [8787 8794]))                  )
                nil [8751 10224])
            ("weight_as_number" function
               (:documentation "
    Return the weight property as a numeric value.  String values
    are converted to their corresponding numeric value.
    "
                :arguments 
                  ( ("weight" variable nil (reparse-symbol function_parameters) [10246 10252]))                  )
                nil [10225 10675])
            ("FontEntry" type
               (:documentation "
    A class for storing Font properties.  It is used when populating
    the font lookup dictionary.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11103 11123])
                            ("self" variable nil (reparse-symbol indented_block_body) [11132 11151])
                            ("self" variable nil (reparse-symbol indented_block_body) [11160 11180])
                            ("self" variable nil (reparse-symbol indented_block_body) [11189 11211])
                            ("self" variable nil (reparse-symbol indented_block_body) [11220 11241])
                            ("self" variable nil (reparse-symbol indented_block_body) [11250 11272])
                            ("try" code nil (reparse-symbol indented_block_body) [11281 11383]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10836 10840])
                            ("fname" variable nil (reparse-symbol function_parameters) [10859 10864])
                            ("name" variable nil (reparse-symbol function_parameters) [10888 10892])
                            ("style" variable nil (reparse-symbol function_parameters) [10917 10922])
                            ("variant" variable nil (reparse-symbol function_parameters) [10952 10959])
                            ("weight" variable nil (reparse-symbol function_parameters) [10987 10993])
                            ("stretch" variable nil (reparse-symbol function_parameters) [11022 11029])
                            ("size" variable nil (reparse-symbol function_parameters) [11057 11061]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10823 11383])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11401 11405]))                          )
                        (reparse-symbol indented_block_body) [11388 11576]))                  
                :type "class")
                nil [10677 11576])
            ("ttfFontProperty" function
               (:documentation "
    A function for populating the :class:`FontKey` by extracting
    information from the TrueType font file.

    *font* is a :class:`FT2Font` instance.
    "
                :arguments 
                  ( ("font" variable nil (reparse-symbol function_parameters) [11598 11602]))                  )
                nil [11578 14277])
            ("afmFontProperty" function
               (:documentation "
    A function for populating a :class:`FontKey` instance by
    extracting information from the AFM font file.

    *font* is a class:`AFM` instance.
    "
                :arguments 
                  ( ("fontpath" variable nil (reparse-symbol function_parameters) [14299 14307])
                    ("font" variable nil (reparse-symbol function_parameters) [14309 14313]))                  )
                nil [14279 16424])
            ("createFontList" function
               (:documentation "
    A function to create a font lookup list.  The default is to create
    a list of TrueType fonts.  An AFM font list can optionally be
    created.
    "
                :arguments 
                  ( ("fontfiles" variable nil (reparse-symbol function_parameters) [16445 16454])
                    ("fontext" variable nil (reparse-symbol function_parameters) [16456 16463]))                  )
                nil [16426 17941])
            ("FontProperties" type
               (:documentation "
    A class for storing and manipulating font properties.

    The font properties are those described in the `W3C Cascading
    Style Sheet, Level 1
    <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_ font
    specification.  The six properties are:

      - family: A list of font names in decreasing order of priority.
        The items may include a generic font family name, either
        'serif', 'sans-serif', 'cursive', 'fantasy', or 'monospace'.
        In that case, the actual font to be used will be looked up
        from the associated rcParam in :file:`matplotlibrc`.

      - style: Either 'normal', 'italic' or 'oblique'.

      - variant: Either 'normal' or 'small-caps'.

      - stretch: A numeric value in the range 0-1000 or one of
        'ultra-condensed', 'extra-condensed', 'condensed',
        'semi-condensed', 'normal', 'semi-expanded', 'expanded',
        'extra-expanded' or 'ultra-expanded'

      - weight: A numeric value in the range 0-1000 or one of
        'ultralight', 'light', 'normal', 'regular', 'book', 'medium',
        'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy',
        'extra bold', 'black'

      - size: Either an relative value of 'xx-small', 'x-small',
        'small', 'medium', 'large', 'x-large', 'xx-large' or an
        absolute font size, e.g. 12

    The default font property for TrueType fonts (as specified in the
    default :file:`matplotlibrc` file) is::

      sans-serif, normal, normal, normal, normal, scalable.

    Alternatively, a font may be specified using an absolute path to a
    .ttf file, by using the *fname* kwarg.

    The preferred usage of font sizes is to use the relative values,
    e.g.  'large', instead of absolute font sizes, e.g. 12.  This
    approach allows all text sizes to be made larger or smaller based
    on the font manager's default font size.

    This class will also accept a `fontconfig
    <http://www.fontconfig.org/>`_ pattern, if it is the only argument
    provided.  See the documentation on `fontconfig patterns
    <http://www.fontconfig.org/fontconfig-user.html>`_.  This support
    does not require fontconfig to be installed.  We are merely
    borrowing its pattern syntax for use here.

    Note that matplotlib's internal font manager and fontconfig use a
    different algorithm to lookup fonts, so the results of the same pattern
    may be different in matplotlib than in other applications that use
    fontconfig.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [20826 20845])
                            ("self" variable nil (reparse-symbol indented_block_body) [20854 20872])
                            ("self" variable nil (reparse-symbol indented_block_body) [20881 20901])
                            ("self" variable nil (reparse-symbol indented_block_body) [20910 20929])
                            ("self" variable nil (reparse-symbol indented_block_body) [20938 20958])
                            ("self" variable nil (reparse-symbol indented_block_body) [20967 20984])
                            ("self" variable nil (reparse-symbol indented_block_body) [20993 21010])
                            ("if" code nil (reparse-symbol indented_block_body) [21058 21148])
                            ("if" code nil (reparse-symbol indented_block_body) [21157 21568])
                            ("self" code nil (reparse-symbol indented_block_body) [21577 21600])
                            ("self" code nil (reparse-symbol indented_block_body) [21609 21630])
                            ("self" code nil (reparse-symbol indented_block_body) [21639 21664])
                            ("self" code nil (reparse-symbol indented_block_body) [21673 21696])
                            ("self" code nil (reparse-symbol indented_block_body) [21705 21730])
                            ("self" code nil (reparse-symbol indented_block_body) [21739 21759])
                            ("self" code nil (reparse-symbol indented_block_body) [21768 21787]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20462 20466])
                            ("family" variable nil (reparse-symbol function_parameters) [20485 20491])
                            ("style" variable nil (reparse-symbol function_parameters) [20517 20522])
                            ("variant" variable nil (reparse-symbol function_parameters) [20549 20556])
                            ("weight" variable nil (reparse-symbol function_parameters) [20581 20587])
                            ("stretch" variable nil (reparse-symbol function_parameters) [20613 20620])
                            ("size" variable nil (reparse-symbol function_parameters) [20645 20649])
                            ("fname" variable nil (reparse-symbol function_parameters) [20677 20682])
                            ("_init" variable nil (reparse-symbol function_parameters) [20760 20765]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20449 21788])
                    ("_parse_fontconfig_pattern" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21823 21827])
                            ("pattern" variable nil (reparse-symbol function_parameters) [21829 21836]))                          )
                        (reparse-symbol indented_block_body) [21793 21888])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21906 21910]))                          )
                        (reparse-symbol indented_block_body) [21893 22174])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22191 22195]))                          )
                        (reparse-symbol indented_block_body) [22179 22243])
                    ("get_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22263 22267]))                          
                        :documentation "
        Return a list of font names that comprise the font family.
        ")
                        (reparse-symbol indented_block_body) [22248 22564])
                    ("get_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22582 22586]))                          
                        :documentation "
        Return the name of the font that best matches the font
        properties.
        ")
                        (reparse-symbol indented_block_body) [22569 22760])
                    ("get_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22779 22783]))                          
                        :documentation "
        Return the font style.  Values are: 'normal', 'italic' or
        'oblique'.
        ")
                        (reparse-symbol indented_block_body) [22765 22996])
                    ("get_slant" variable nil (reparse-symbol indented_block_body) [23000 23021])
                    ("get_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23043 23047]))                          
                        :documentation "
        Return the font variant.  Values are: 'normal' or
        'small-caps'.
        ")
                        (reparse-symbol indented_block_body) [23027 23261])
                    ("get_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23281 23285]))                          
                        :documentation "
        Set the font weight.  Options are: A numeric value in the
        range 0-1000 or one of 'light', 'normal', 'regular', 'book',
        'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold',
        'heavy', 'extra bold', 'black'
        ")
                        (reparse-symbol indented_block_body) [23266 23657])
                    ("get_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23678 23682]))                          
                        :documentation "
        Return the font stretch or width.  Options are: 'ultra-condensed',
        'extra-condensed', 'condensed', 'semi-condensed', 'normal',
        'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'.
        ")
                        (reparse-symbol indented_block_body) [23662 24032])
                    ("get_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24050 24054]))                          
                        :documentation "
        Return the font size.
        ")
                        (reparse-symbol indented_block_body) [24037 24209])
                    ("get_size_in_points" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24237 24241]))                          )
                        (reparse-symbol indented_block_body) [24214 24503])
                    ("get_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24521 24525]))                          
                        :documentation "
        Return the filename of the associated font.
        ")
                        (reparse-symbol indented_block_body) [24508 24630])
                    ("get_fontconfig_pattern" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24662 24666]))                          
                        :documentation "
        Get a fontconfig pattern suitable for looking up the font as
        specified with fontconfig's ``fc-match`` utility.

        See the documentation on `fontconfig patterns
        <http://www.fontconfig.org/fontconfig-user.html>`_.

        This support does not require fontconfig to be installed or
        support for it to be enabled.  We are merely borrowing its
        pattern syntax for use here.
        ")
                        (reparse-symbol indented_block_body) [24635 25157])
                    ("set_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25177 25181])
                            ("family" variable nil (reparse-symbol function_parameters) [25183 25189]))                          
                        :documentation "
        Change the font family.  May be either an alias (generic name
        is CSS parlance), such as: 'serif', 'sans-serif', 'cursive',
        'fantasy', or 'monospace', or a real font name.
        ")
                        (reparse-symbol indented_block_body) [25162 25591])
                    ("set_name" variable nil (reparse-symbol indented_block_body) [25595 25616])
                    ("set_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25636 25640])
                            ("style" variable nil (reparse-symbol function_parameters) [25642 25647]))                          
                        :documentation "
        Set the font style.  Values are: 'normal', 'italic' or
        'oblique'.
        ")
                        (reparse-symbol indented_block_body) [25622 25919])
                    ("set_slant" variable nil (reparse-symbol indented_block_body) [25923 25944])
                    ("set_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25966 25970])
                            ("variant" variable nil (reparse-symbol function_parameters) [25972 25979]))                          
                        :documentation "
        Set the font variant.  Values are: 'normal' or 'small-caps'.
        ")
                        (reparse-symbol indented_block_body) [25950 26234])
                    ("set_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26254 26258])
                            ("weight" variable nil (reparse-symbol function_parameters) [26260 26266]))                          
                        :documentation "
        Set the font weight.  May be either a numeric value in the
        range 0-1000 or one of 'ultralight', 'light', 'normal',
        'regular', 'book', 'medium', 'roman', 'semibold', 'demibold',
        'demi', 'bold', 'heavy', 'extra bold', 'black'
        ")
                        (reparse-symbol indented_block_body) [26239 26886])
                    ("set_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26907 26911])
                            ("stretch" variable nil (reparse-symbol function_parameters) [26913 26920]))                          
                        :documentation "
        Set the font stretch or width.  Options are: 'ultra-condensed',
        'extra-condensed', 'condensed', 'semi-condensed', 'normal',
        'semi-expanded', 'expanded', 'extra-expanded' or
        'ultra-expanded', or a numeric value in the range 0-1000.
        ")
                        (reparse-symbol indented_block_body) [26891 27557])
                    ("set_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27575 27579])
                            ("size" variable nil (reparse-symbol function_parameters) [27581 27585]))                          
                        :documentation "
        Set the font size.  Either an relative value of 'xx-small',
        'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'
        or an absolute font size, e.g. 12.
        ")
                        (reparse-symbol indented_block_body) [27562 28053])
                    ("set_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28071 28075])
                            ("file" variable nil (reparse-symbol function_parameters) [28077 28081]))                          
                        :documentation "
        Set the filename of the fontfile to use.  In this case, all
        other properties will be ignored.
        ")
                        (reparse-symbol indented_block_body) [28058 28244])
                    ("set_fontconfig_pattern" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28276 28280])
                            ("pattern" variable nil (reparse-symbol function_parameters) [28282 28289]))                          
                        :documentation "
        Set the properties by parsing a fontconfig *pattern*.

        See the documentation on `fontconfig patterns
        <http://www.fontconfig.org/fontconfig-user.html>`_.

        This support does not require fontconfig to be installed or
        support for it to be enabled.  We are merely borrowing its
        pattern syntax for use here.
        ")
                        (reparse-symbol indented_block_body) [28249 28892])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28906 28910]))                          
                        :documentation "Return a deep copy of self")
                        (reparse-symbol indented_block_body) [28897 28998]))                  
                :type "class")
                nil [17942 28998])
            ("ttfdict_to_fnames" function
               (:documentation "
    flatten a ttfdict to all the filenames it contains
    "
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [29021 29022]))                  )
                nil [28999 29451])
            ("pickle_dump" function
               (:documentation "
    Equivalent to pickle.dump(data, open(filename, 'w'))
    but closes the file to prevent filehandle leakage.
    "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [29468 29472])
                    ("filename" variable nil (reparse-symbol function_parameters) [29474 29482]))                  )
                nil [29452 29713])
            ("pickle_load" function
               (:documentation "
    Equivalent to pickle.load(open(filename, 'r'))
    but closes the file to prevent filehandle leakage.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [29730 29738]))                  )
                nil [29714 29980])
            ("FontManager" type
               (:documentation "
    On import, the :class:`FontManager` singleton instance creates a
    list of TrueType fonts based on the font properties: name, style,
    variant, weight, stretch, and size.  The :meth:`findfont` method
    does a nearest neighbor search to find the font that most closely
    matches the specification.  If no good enough match is found, a
    default font is returned.
    "
                :members 
                  ( ("__version__" variable nil (reparse-symbol indented_block_body) [30560 30575])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [30637 30669])
                            ("self" variable nil (reparse-symbol indented_block_body) [30679 30709])
                            ("self" variable nil (reparse-symbol indented_block_body) [30718 30742])
                            ("paths" variable nil (reparse-symbol indented_block_body) [30752 30959])
                            ("for" code nil (reparse-symbol indented_block_body) [31006 31416])
                            ("verbose" code nil (reparse-symbol indented_block_body) [31425 31475])
                            ("self" code nil (reparse-symbol indented_block_body) [31544 31602])
                            ("self" variable nil (reparse-symbol indented_block_body) [31611 31707])
                            ("self" variable nil (reparse-symbol indented_block_body) [31716 31737])
                            ("for" code nil (reparse-symbol indented_block_body) [31747 32057])
                            ("self" variable nil (reparse-symbol indented_block_body) [32066 32110])
                            ("self" code nil (reparse-symbol indented_block_body) [32120 32220])
                            ("self" variable nil (reparse-symbol indented_block_body) [32229 32288])
                            ("self" variable nil (reparse-symbol indented_block_body) [32297 32327])
                            ("self" variable nil (reparse-symbol indented_block_body) [32337 32363])
                            ("self" variable nil (reparse-symbol indented_block_body) [32372 32398]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30594 30598])
                            ("size" variable nil (reparse-symbol function_parameters) [30600 30604])
                            ("weight" variable nil (reparse-symbol function_parameters) [30611 30617]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30581 32399])
                    ("get_default_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32427 32431]))                          
                        :documentation "
        Return the default font weight.
        ")
                        (reparse-symbol indented_block_body) [32404 32535])
                    ("get_default_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32561 32565]))                          
                        :documentation "
        Return the default font size.
        ")
                        (reparse-symbol indented_block_body) [32540 32667])
                    ("set_default_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32695 32699])
                            ("weight" variable nil (reparse-symbol function_parameters) [32701 32707]))                          
                        :documentation "
        Set the default font weight.  The initial value is 'normal'.
        ")
                        (reparse-symbol indented_block_body) [32672 32842])
                    ("update_fonts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32864 32868])
                            ("filenames" variable nil (reparse-symbol function_parameters) [32870 32879]))                          
                        :documentation "
        Update the font dictionary with new font files.
        Currently not implemented.
        ")
                        (reparse-symbol indented_block_body) [32847 33067])
                    ("score_family" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33212 33216])
                            ("families" variable nil (reparse-symbol function_parameters) [33218 33226])
                            ("family2" variable nil (reparse-symbol function_parameters) [33228 33235]))                          
                        :documentation "
        Returns a match score between the list of font families in
        *families* and the font family name *family2*.

        An exact match anywhere in the list returns 0.0.

        A match by generic font name will return 0.1.

        No match will return 1.0.
        ")
                        (reparse-symbol indented_block_body) [33195 34136])
                    ("score_style" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34157 34161])
                            ("style1" variable nil (reparse-symbol function_parameters) [34163 34169])
                            ("style2" variable nil (reparse-symbol function_parameters) [34171 34177]))                          
                        :documentation "
        Returns a match score between *style1* and *style2*.

        An exact match returns 0.0.

        A match between 'italic' and 'oblique' returns 0.1.

        No match returns 1.0.
        ")
                        (reparse-symbol indented_block_body) [34141 34588])
                    ("score_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34611 34615])
                            ("variant1" variable nil (reparse-symbol function_parameters) [34617 34625])
                            ("variant2" variable nil (reparse-symbol function_parameters) [34627 34635]))                          
                        :documentation "
        Returns a match score between *variant1* and *variant2*.

        An exact match returns 0.0, otherwise 1.0.
        ")
                        (reparse-symbol indented_block_body) [34593 34872])
                    ("score_stretch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34895 34899])
                            ("stretch1" variable nil (reparse-symbol function_parameters) [34901 34909])
                            ("stretch2" variable nil (reparse-symbol function_parameters) [34911 34919]))                          
                        :documentation "
        Returns a match score between *stretch1* and *stretch2*.

        The result is the absolute value of the difference between the
        CSS numeric values of *stretch1* and *stretch2*, normalized
        between 0.0 and 1.0.
        ")
                        (reparse-symbol indented_block_body) [34877 35511])
                    ("score_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35533 35537])
                            ("weight1" variable nil (reparse-symbol function_parameters) [35539 35546])
                            ("weight2" variable nil (reparse-symbol function_parameters) [35548 35555]))                          
                        :documentation "
        Returns a match score between *weight1* and *weight2*.

        The result is the absolute value of the difference between the
        CSS numeric values of *weight1* and *weight2*, normalized
        between 0.0 and 1.0.
        ")
                        (reparse-symbol indented_block_body) [35516 36131])
                    ("score_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36151 36155])
                            ("size1" variable nil (reparse-symbol function_parameters) [36157 36162])
                            ("size2" variable nil (reparse-symbol function_parameters) [36164 36169]))                          
                        :documentation "
        Returns a match score between *size1* and *size2*.

        If *size2* (the size specified in the font file) is 'scalable', this
        function always returns 0.0, since any font size can be generated.

        Otherwise, the result is the absolute distance between *size1* and
        *size2*, normalized so that the usual range of font sizes (6pt -
        72pt) will lie between 0.0 and 1.0.
        ")
                        (reparse-symbol indented_block_body) [36136 36988])
                    ("findfont" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37006 37010])
                            ("prop" variable nil (reparse-symbol function_parameters) [37012 37016])
                            ("fontext" variable nil (reparse-symbol function_parameters) [37018 37025])
                            ("directory" variable nil (reparse-symbol function_parameters) [37033 37042])
                            ("fallback_to_default" variable nil (reparse-symbol function_parameters) [37066 37085])
                            ("rebuild_if_missing" variable nil (reparse-symbol function_parameters) [37092 37110]))                          
                        :documentation "
        Search the font list for the font that most closely matches
        the :class:`FontProperties` *prop*.

        :meth:`findfont` performs a nearest neighbor search.  Each
        font is given a similarity score to the target font
        properties.  The first font with the highest score is
        returned.  If no matches below a certain threshold are found,
        the default font (usually Vera Sans) is returned.

        `directory`, is specified, will only return fonts from the
        given directory (or subdirectory of that directory).

        The result is cached, so subsequent lookups don't have to
        perform the O(n) nearest neighbor search.

        If `fallback_to_default` is True, will fallback to the default
        font family (usually \"Bitstream Vera Sans\" or \"Helvetica\") if
        the first lookup hard-fails.

        See the `W3C Cascading Style Sheet, Level 1
        <http://www.w3.org/TR/1998/REC-CSS2-19980512/>`_ documentation
        for a description of the font finding algorithm.
        ")
                        (reparse-symbol indented_block_body) [36993 41235]))                  
                :type "class")
                nil [29981 41235])
            ("_is_opentype_cff_font_cache" variable nil nil [41237 41269])
            ("is_opentype_cff_font" function
               (:documentation "
    Returns True if the given font is a Postscript Compact Font Format
    Font embedded in an OpenType wrapper.  Used by the PostScript and
    PDF backends that can not subset these fonts.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [41295 41303]))                  )
                nil [41270 41880])
            ("fontManager" variable nil nil [41881 41899])
            ("_fmcache" variable nil nil [41901 41959])
            ("_rebuild" function nil nil [41961 42119])
            ("if" code nil nil [42165 43750]))          
      :file "font_manager.py"
      :pointmax 43750
      :fsize 43749
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module contains functions to handle markers.  Used by both the
marker functionality of `~matplotlib.axes.Axes.plot` and
`~matplotlib.axes.Axes.scatter`.
\"\"\"" code nil nil [1 166])
            ("textwrap" include nil nil [168 183])
            ("numpy" include nil nil [185 203])
            ("cbook" include nil nil [205 273])
            ("docstring" include nil nil [274 290])
            ("matplotlib" include nil nil [291 322])
            ("path" include nil nil [323 344])
            ("transforms" include nil nil [345 395])
            ("" code nil nil [435 529])
            ("MarkerStyle" type
               (:members 
                  ( ("style_table" variable nil (reparse-symbol indented_block_body) [554 1895])
                    ("accepts" variable nil (reparse-symbol indented_block_body) [1941 2010])
                    ("markers" variable nil (reparse-symbol indented_block_body) [2016 3177])
                    ("filled_markers" variable nil (reparse-symbol indented_block_body) [3285 3376])
                    ("fillstyles" variable nil (reparse-symbol indented_block_body) [3382 3440])
                    ("_point_size_reduction" variable nil (reparse-symbol indented_block_body) [3495 3522])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3587 3614])
                            ("self" code nil (reparse-symbol indented_block_body) [3623 3646])
                            ("self" code nil (reparse-symbol indented_block_body) [3655 3684]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3541 3545])
                            ("marker" variable nil (reparse-symbol function_parameters) [3547 3553])
                            ("fillstyle" variable nil (reparse-symbol function_parameters) [3560 3569]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3528 3685])
                    ("_recache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3703 3707]))                          )
                        (reparse-symbol indented_block_body) [3690 4026])
                    ("__nonzero__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4047 4051]))                          )
                        (reparse-symbol indented_block_body) [4031 4094])
                    ("is_filled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4113 4117]))                          )
                        (reparse-symbol indented_block_body) [4099 4148])
                    ("get_fillstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4171 4175]))                          )
                        (reparse-symbol indented_block_body) [4153 4209])
                    ("set_fillstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4232 4236])
                            ("fillstyle" variable nil (reparse-symbol function_parameters) [4238 4247]))                          )
                        (reparse-symbol indented_block_body) [4214 4433])
                    ("get_joinstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4456 4460]))                          )
                        (reparse-symbol indented_block_body) [4438 4494])
                    ("get_capstyle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4516 4520]))                          )
                        (reparse-symbol indented_block_body) [4499 4553])
                    ("get_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4573 4577]))                          )
                        (reparse-symbol indented_block_body) [4558 4608])
                    ("set_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4628 4632])
                            ("marker" variable nil (reparse-symbol function_parameters) [4634 4640]))                          )
                        (reparse-symbol indented_block_body) [4613 5545])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5563 5567]))                          )
                        (reparse-symbol indented_block_body) [5550 5596])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5619 5623]))                          )
                        (reparse-symbol indented_block_body) [5601 5666])
                    ("get_alt_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5688 5692]))                          )
                        (reparse-symbol indented_block_body) [5671 5725])
                    ("get_alt_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5752 5756]))                          )
                        (reparse-symbol indented_block_body) [5730 5803])
                    ("get_snap_threshold" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5831 5835]))                          )
                        (reparse-symbol indented_block_body) [5808 5874])
                    ("_set_nothing" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5896 5900]))                          )
                        (reparse-symbol indented_block_body) [5879 5932])
                    ("_set_custom_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5960 5964])
                            ("path" variable nil (reparse-symbol function_parameters) [5966 5970]))                          )
                        (reparse-symbol indented_block_body) [5937 6165])
                    ("_set_path_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6191 6195]))                          )
                        (reparse-symbol indented_block_body) [6170 6244])
                    ("_set_vertices" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6267 6271]))                          )
                        (reparse-symbol indented_block_body) [6249 6372])
                    ("_set_tuple_marker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6399 6403]))                          )
                        (reparse-symbol indented_block_body) [6377 7413])
                    ("_set_mathtext_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7441 7445]))                          
                        :documentation "
        Draws mathtext markers '$...$' using TextPath object.

        Submitted by tcb
        ")
                        (reparse-symbol indented_block_body) [7418 8474])
                    ("_set_circle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8495 8499])
                            ("reduction" variable nil (reparse-symbol function_parameters) [8501 8510]))                          )
                        (reparse-symbol indented_block_body) [8479 9121])
                    ("_set_pixel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9141 9145]))                          )
                        (reparse-symbol indented_block_body) [9126 9876])
                    ("_set_point" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9896 9900]))                          )
                        (reparse-symbol indented_block_body) [9881 9968])
                    ("_triangle_path" variable nil (reparse-symbol indented_block_body) [9973 10121])
                    ("_triangle_path_u" variable nil (reparse-symbol indented_block_body) [10193 10347])
                    ("_triangle_path_d" variable nil (reparse-symbol indented_block_body) [10352 10538])
                    ("_triangle_path_l" variable nil (reparse-symbol indented_block_body) [10543 10693])
                    ("_triangle_path_r" variable nil (reparse-symbol indented_block_body) [10698 10847])
                    ("_set_triangle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10870 10874])
                            ("rot" variable nil (reparse-symbol function_parameters) [10876 10879])
                            ("skip" variable nil (reparse-symbol function_parameters) [10881 10885]))                          )
                        (reparse-symbol indented_block_body) [10852 11896])
                    ("_set_triangle_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11922 11926]))                          )
                        (reparse-symbol indented_block_body) [11901 11971])
                    ("_set_triangle_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11999 12003]))                          )
                        (reparse-symbol indented_block_body) [11976 12050])
                    ("_set_triangle_left" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12078 12082]))                          )
                        (reparse-symbol indented_block_body) [12055 12128])
                    ("_set_triangle_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12157 12161]))                          )
                        (reparse-symbol indented_block_body) [12133 12208])
                    ("_set_square" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12229 12233]))                          )
                        (reparse-symbol indented_block_body) [12213 13088])
                    ("_set_diamond" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13110 13114]))                          )
                        (reparse-symbol indented_block_body) [13093 13799])
                    ("_set_thin_diamond" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13826 13830]))                          )
                        (reparse-symbol indented_block_body) [13804 13901])
                    ("_set_pentagon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13924 13928]))                          )
                        (reparse-symbol indented_block_body) [13906 14990])
                    ("_set_star" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15009 15013]))                          )
                        (reparse-symbol indented_block_body) [14995 16045])
                    ("_set_hexagon1" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16068 16072]))                          )
                        (reparse-symbol indented_block_body) [16050 17133])
                    ("_set_hexagon2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17156 17160]))                          )
                        (reparse-symbol indented_block_body) [17138 18250])
                    ("_set_octagon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18272 18276]))                          )
                        (reparse-symbol indented_block_body) [18255 19076])
                    ("_line_marker_path" variable nil (reparse-symbol indented_block_body) [19081 19132])
                    ("_set_vline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19152 19156]))                          )
                        (reparse-symbol indented_block_body) [19137 19315])
                    ("_set_hline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19335 19339]))                          )
                        (reparse-symbol indented_block_body) [19320 19513])
                    ("_tickhoriz_path" variable nil (reparse-symbol indented_block_body) [19518 19566])
                    ("_set_tickleft" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19589 19593]))                          )
                        (reparse-symbol indented_block_body) [19571 19756])
                    ("_set_tickright" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19780 19784]))                          )
                        (reparse-symbol indented_block_body) [19761 19946])
                    ("_tickvert_path" variable nil (reparse-symbol indented_block_body) [19951 20000])
                    ("_set_tickup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20021 20025]))                          )
                        (reparse-symbol indented_block_body) [20005 20186])
                    ("_set_tickdown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20209 20213]))                          )
                        (reparse-symbol indented_block_body) [20191 20375])
                    ("_plus_path" variable nil (reparse-symbol indented_block_body) [20380 20571])
                    ("_set_plus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20590 20594]))                          )
                        (reparse-symbol indented_block_body) [20576 20746])
                    ("_tri_path" variable nil (reparse-symbol indented_block_body) [20751 21032])
                    ("_set_tri_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21055 21059]))                          )
                        (reparse-symbol indented_block_body) [21037 21210])
                    ("_set_tri_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21231 21235]))                          )
                        (reparse-symbol indented_block_body) [21215 21401])
                    ("_set_tri_left" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21424 21428]))                          )
                        (reparse-symbol indented_block_body) [21406 21595])
                    ("_set_tri_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21619 21623]))                          )
                        (reparse-symbol indented_block_body) [21600 21790])
                    ("_caret_path" variable nil (reparse-symbol indented_block_body) [21795 21852])
                    ("_set_caretdown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21876 21880]))                          )
                        (reparse-symbol indented_block_body) [21857 22067])
                    ("_set_caretup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22089 22093]))                          )
                        (reparse-symbol indented_block_body) [22072 22296])
                    ("_set_caretleft" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22320 22324]))                          )
                        (reparse-symbol indented_block_body) [22301 22527])
                    ("_set_caretright" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22552 22556]))                          )
                        (reparse-symbol indented_block_body) [22532 22758])
                    ("_x_path" variable nil (reparse-symbol indented_block_body) [22763 22944])
                    ("_set_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22960 22964]))                          )
                        (reparse-symbol indented_block_body) [22949 23113]))                  
                :type "class")
                nil [531 23113])
            ("_styles" variable nil nil [23114 23178])
            ("_styles" code nil nil [23179 23221])
            ("MarkerStyle" variable nil nil [23222 23353])
            ("MarkerStyle" variable nil nil [23355 23471])
            ("docstring" code nil nil [23473 23534])
            ("docstring" code nil nil [23535 23594]))          
      :file "markers.py"
      :pointmax 23595
      :fsize 23594
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"

Numerical python functions written for compatability with MATLAB
commands with the same names.

MATLAB compatible functions
-------------------------------

:func:`cohere`
  Coherence (normalized cross spectral density)

:func:`csd`
  Cross spectral density uing Welch's average periodogram

:func:`detrend`
  Remove the mean or best fit line from an array

:func:`find`
  Return the indices where some condition is true;
         numpy.nonzero is similar but more general.

:func:`griddata`
  interpolate irregularly distributed data to a
             regular grid.

:func:`prctile`
  find the percentiles of a sequence

:func:`prepca`
  Principal Component Analysis

:func:`psd`
  Power spectral density uing Welch's average periodogram

:func:`rk4`
  A 4th order runge kutta integrator for 1D or ND systems

:func:`specgram`
  Spectrogram (power spectral density over segments of time)

Miscellaneous functions
-------------------------

Functions that don't exist in MATLAB, but are useful anyway:

:meth:`cohere_pairs`
    Coherence over all pairs.  This is not a MATLAB function, but we
    compute coherence a lot in my lab, and we compute it for a lot of
    pairs.  This function is optimized to do this efficiently by
    caching the direct FFTs.

:meth:`rk4`
    A 4th order Runge-Kutta ODE integrator in case you ever find
    yourself stranded without scipy (and the far superior
    scipy.integrate tools)

:meth:`contiguous_regions`
    return the indices of the regions spanned by some logical mask

:meth:`cross_from_below`
    return the indices where a 1D array crosses a threshold from below

:meth:`cross_from_above`
    return the indices where a 1D array crosses a threshold from above


record array helper functions
-------------------------------

A collection of helper methods for numpyrecord arrays

.. _htmlonly:

    See :ref:`misc-examples-index`

:meth:`rec2txt`
    pretty print a record array

:meth:`rec2csv`
    store record array in CSV file

:meth:`csv2rec`
    import record array from CSV file with type inspection

:meth:`rec_append_fields`
    adds  field(s)/array(s) to record array

:meth:`rec_drop_fields`
    drop fields from record array

:meth:`rec_join`
    join two record arrays on sequence of fields

:meth:`recs_join`
    a simple join of multiple recarrays using a single column as a key

:meth:`rec_groupby`
    summarize data by groups (similar to SQL GROUP BY)

:meth:`rec_summarize`
    helper code to filter rec array fields into new fields

For the rec viewer functions(e rec2csv), there are a bunch of Format
objects you can pass into the functions that will do things like color
negative values red, set percent formatting and scaling, etc.

Example usage::

    r = csv2rec('somefile.csv', checkrows=0)

    formatd = dict(
        weight = FormatFloat(2),
        change = FormatPercent(2),
        cost   = FormatThousands(2),
        )


    rec2excel(r, 'test.xls', formatd=formatd)
    rec2csv(r, 'test.csv', formatd=formatd)
    scroll = rec2gtk(r, formatd=formatd)

    win = gtk.Window()
    win.set_size_request(600,800)
    win.add(scroll)
    win.show_all()
    gtk.main()


Deprecated functions
---------------------

The following are deprecated; please import directly from numpy (with
care--function signatures may differ):


:meth:`load`
    load ASCII file - use numpy.loadtxt

:meth:`save`
    save ASCII file - use numpy.savetxt

\"\"\"" code nil nil [1 3422])
            ("__future__" include nil nil [3424 3455])
            ("operator" include nil nil [3456 3496])
            ("os" include nil nil [3456 3496])
            ("copy" include nil nil [3456 3496])
            ("warnings" include nil nil [3456 3496])
            ("csv" include nil nil [3456 3496])
            ("numpy" include nil nil [3498 3516])
            ("ma" variable nil nil [3517 3527])
            ("matplotlib" include nil nil [3528 3558])
            ("matplotlib.nxutils" include nil nil [3560 3596])
            ("matplotlib.cbook" include nil nil [3597 3629])
            ("matplotlib" include nil nil [3630 3662])
            ("logspace" function (:arguments 
              ( ("xmin" variable nil (reparse-symbol function_parameters) [3678 3682])
                ("xmax" variable nil (reparse-symbol function_parameters) [3683 3687])
                ("N" variable nil (reparse-symbol function_parameters) [3688 3689]))              ) nil [3665 3754])
            ("_norm" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3765 3766]))              ) nil [3755 3828])
            ("window_hanning" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3848 3849]))              ) nil [3829 3934])
            ("window_none" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3951 3952]))              ) nil [3935 4010])
            ("detrend" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4023 4024])
                ("key" variable nil (reparse-symbol function_parameters) [4026 4029]))              ) nil [4011 4164])
            ("demean" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4176 4177])
                ("axis" variable nil (reparse-symbol function_parameters) [4179 4183]))              ) nil [4165 4439])
            ("detrend_mean" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4457 4458]))              ) nil [4440 4518])
            ("detrend_none" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [4536 4537]))              ) nil [4519 4583])
            ("detrend_linear" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [4603 4604]))              ) nil [4584 4875])
            ("_spectral_helper" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5042 5043])
                ("y" variable nil (reparse-symbol function_parameters) [5045 5046])
                ("NFFT" variable nil (reparse-symbol function_parameters) [5048 5052])
                ("Fs" variable nil (reparse-symbol function_parameters) [5058 5060])
                ("detrend" variable nil (reparse-symbol function_parameters) [5064 5071])
                ("window" variable nil (reparse-symbol function_parameters) [5094 5100])
                ("noverlap" variable nil (reparse-symbol function_parameters) [5117 5125])
                ("pad_to" variable nil (reparse-symbol function_parameters) [5129 5135])
                ("sides" variable nil (reparse-symbol function_parameters) [5142 5147])
                ("scale_by_freq" variable nil (reparse-symbol function_parameters) [5167 5180]))              ) nil [5021 8181])
            ("docstring" code nil nil [8247 11218])
            ("psd" function
               (:documentation "
    The power spectral density by Welch's average periodogram method.
    The vector *x* is divided into *NFFT* length blocks.  Each block
    is detrended by the function *detrend* and windowed by the function
    *window*.  *noverlap* gives the length of the overlap between blocks.
    The absolute(fft(block))**2 of each segment are averaged to compute
    *Pxx*, with a scaling to correct for power loss due to windowing.

    If len(*x*) < *NFFT*, it will be zero padded to *NFFT*.

    *x*
        Array or sequence containing the data

    %(PSD)s

    Returns the tuple (*Pxx*, *freqs*).

    Refs:

        Bendat & Piersol -- Random Data: Analysis and Measurement
        Procedures, John Wiley & Sons (1986)

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [11254 11255])
                    ("NFFT" variable nil (reparse-symbol function_parameters) [11257 11261])
                    ("Fs" variable nil (reparse-symbol function_parameters) [11267 11269])
                    ("detrend" variable nil (reparse-symbol function_parameters) [11273 11280])
                    ("window" variable nil (reparse-symbol function_parameters) [11295 11301])
                    ("noverlap" variable nil (reparse-symbol function_parameters) [11326 11334])
                    ("pad_to" variable nil (reparse-symbol function_parameters) [11338 11344])
                    ("sides" variable nil (reparse-symbol function_parameters) [11351 11356])
                    ("scale_by_freq" variable nil (reparse-symbol function_parameters) [11368 11381]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [11220 12253])
            ("csd" function
               (:documentation "
    The cross power spectral density by Welch's average periodogram
    method.  The vectors *x* and *y* are divided into *NFFT* length
    blocks.  Each block is detrended by the function *detrend* and
    windowed by the function *window*.  *noverlap* gives the length
    of the overlap between blocks.  The product of the direct FFTs
    of *x* and *y* are averaged over each segment to compute *Pxy*,
    with a scaling to correct for power loss due to windowing.

    If len(*x*) < *NFFT* or len(*y*) < *NFFT*, they will be zero
    padded to *NFFT*.

    *x*, *y*
        Array or sequence containing the data

    %(PSD)s

    Returns the tuple (*Pxy*, *freqs*).

    Refs:
        Bendat & Piersol -- Random Data: Analysis and Measurement
        Procedures, John Wiley & Sons (1986)
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [12288 12289])
                    ("y" variable nil (reparse-symbol function_parameters) [12291 12292])
                    ("NFFT" variable nil (reparse-symbol function_parameters) [12294 12298])
                    ("Fs" variable nil (reparse-symbol function_parameters) [12304 12306])
                    ("detrend" variable nil (reparse-symbol function_parameters) [12310 12317])
                    ("window" variable nil (reparse-symbol function_parameters) [12332 12338])
                    ("noverlap" variable nil (reparse-symbol function_parameters) [12363 12371])
                    ("pad_to" variable nil (reparse-symbol function_parameters) [12375 12381])
                    ("sides" variable nil (reparse-symbol function_parameters) [12388 12393])
                    ("scale_by_freq" variable nil (reparse-symbol function_parameters) [12405 12418]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [12254 13454])
            ("specgram" function
               (:documentation "
    Compute a spectrogram of data in *x*.  Data are split into *NFFT*
    length segments and the PSD of each section is computed.  The
    windowing function *window* is applied to each segment, and the
    amount of overlap of each segment is specified with *noverlap*.

    If *x* is real (i.e. non-complex) only the spectrum of the positive
    frequencie is returned.  If *x* is complex then the complete
    spectrum is returned.

    %(PSD)s

    Returns a tuple (*Pxx*, *freqs*, *t*):

         - *Pxx*: 2-D array, columns are the periodograms of
           successive segments

         - *freqs*: 1-D array of frequencies corresponding to the rows
           in Pxx

         - *t*: 1-D array of times corresponding to midpoints of
           segments.

    .. seealso::

        :func:`psd`
            :func:`psd` differs in the default overlap; in returning
            the mean of the segment periodograms; and in not returning
            times.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [13494 13495])
                    ("NFFT" variable nil (reparse-symbol function_parameters) [13497 13501])
                    ("Fs" variable nil (reparse-symbol function_parameters) [13507 13509])
                    ("detrend" variable nil (reparse-symbol function_parameters) [13513 13520])
                    ("window" variable nil (reparse-symbol function_parameters) [13535 13541])
                    ("noverlap" variable nil (reparse-symbol function_parameters) [13566 13574])
                    ("pad_to" variable nil (reparse-symbol function_parameters) [13580 13586])
                    ("sides" variable nil (reparse-symbol function_parameters) [13593 13598])
                    ("scale_by_freq" variable nil (reparse-symbol function_parameters) [13610 13623]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [13455 14844])
            ("_coh_error" variable nil nil [14845 14983])
            ("cohere" function
               (:documentation "
    The coherence between *x* and *y*.  Coherence is the normalized
    cross spectral density:

    .. math::

        C_{xy} = \\\\frac{|P_{xy}|^2}{P_{xx}P_{yy}}

    *x*, *y*
        Array or sequence containing the data

    %(PSD)s

    The return value is the tuple (*Cxy*, *f*), where *f* are the
    frequencies of the coherence vector. For cohere, scaling the
    individual densities by the sampling frequency has no effect,
    since the factors cancel out.

    .. seealso::

        :func:`psd` and :func:`csd`
            For information about the methods used to compute
            :math:`P_{xy}`, :math:`P_{xx}` and :math:`P_{yy}`.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [15021 15022])
                    ("y" variable nil (reparse-symbol function_parameters) [15024 15025])
                    ("NFFT" variable nil (reparse-symbol function_parameters) [15027 15031])
                    ("Fs" variable nil (reparse-symbol function_parameters) [15037 15039])
                    ("detrend" variable nil (reparse-symbol function_parameters) [15043 15050])
                    ("window" variable nil (reparse-symbol function_parameters) [15065 15071])
                    ("noverlap" variable nil (reparse-symbol function_parameters) [15096 15104])
                    ("pad_to" variable nil (reparse-symbol function_parameters) [15108 15114])
                    ("sides" variable nil (reparse-symbol function_parameters) [15121 15126])
                    ("scale_by_freq" variable nil (reparse-symbol function_parameters) [15138 15151]))                  
                :decorators 
                  ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                  )
                nil [14984 16265])
            ("donothing_callback" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [16290 16295]))              ) nil [16267 16307])
            ("cohere_pairs" function (:arguments 
              ( ("X" variable nil (reparse-symbol function_parameters) [16326 16327])
                ("ij" variable nil (reparse-symbol function_parameters) [16329 16331])
                ("NFFT" variable nil (reparse-symbol function_parameters) [16333 16337])
                ("Fs" variable nil (reparse-symbol function_parameters) [16343 16345])
                ("detrend" variable nil (reparse-symbol function_parameters) [16349 16356])
                ("window" variable nil (reparse-symbol function_parameters) [16389 16395])
                ("noverlap" variable nil (reparse-symbol function_parameters) [16412 16420])
                ("preferSpeedOverMemory" variable nil (reparse-symbol function_parameters) [16442 16463])
                ("progressCallback" variable nil (reparse-symbol function_parameters) [16488 16504])
                ("returnPxx" variable nil (reparse-symbol function_parameters) [16543 16552]))              ) nil [16308 21967])
            ("entropy" function (:arguments 
              ( ("y" variable nil (reparse-symbol function_parameters) [21980 21981])
                ("bins" variable nil (reparse-symbol function_parameters) [21983 21987]))              ) nil [21968 22705])
            ("normpdf" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [22718 22719])
                ("args" variable nil (reparse-symbol function_parameters) [22721 22726]))              ) nil [22706 22901])
            ("levypdf" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [22915 22916])
                ("gamma" variable nil (reparse-symbol function_parameters) [22918 22923])
                ("alpha" variable nil (reparse-symbol function_parameters) [22925 22930]))              ) nil [22903 23504])
            ("find" function (:arguments 
              ( ("condition" variable nil (reparse-symbol function_parameters) [23515 23524]))              ) nil [23506 23641])
            ("longest_contiguous_ones" function
               (:documentation "
    Return the indices of the longest stretch of contiguous ones in *x*,
    assuming *x* is a vector of zeros and ones.  If there are two
    equally long stretches, pick the first.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [23671 23672]))                  )
                nil [23643 24323])
            ("longest_ones" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [24341 24342]))              ) nil [24324 24427])
            ("prepca" function
               (:documentation "

    WARNING: this function is deprecated -- please see class PCA instead

    Compute the principal components of *P*.  *P* is a (*numVars*,
    *numObs*) array.  *frac* is the minimum fraction of variance that a
    component must contain to be included.

    Return value is a tuple of the form (*Pcomponents*, *Trans*,
    *fracVar*) where:

      - *Pcomponents* : a (numVars, numObs) array

      - *Trans* : the weights matrix, ie, *Pcomponents* = *Trans* *
         *P*

      - *fracVar* : the fraction of the variance accounted for by each
         component returned

    A similar function of the same name was in the MATLAB
    R13 Neural Network Toolbox but is not found in later versions;
    its successor seems to be called \"processpcs\".
    "
                :arguments 
                  ( ("P" variable nil (reparse-symbol function_parameters) [24439 24440])
                    ("frac" variable nil (reparse-symbol function_parameters) [24442 24446]))                  )
                nil [24428 25633])
            ("PCA" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        compute the SVD of a and store data for PCA.  Use project to
        project the data onto a reduced set of dimensions

        Inputs:

          *a*: a numobservations x numdims array

        Attrs:

          *a* a centered unit sigma version of input a

          *numrows*, *numcols*: the dimensions of a

          *mu* : a numdims array of means of a

          *sigma* : a numdims array of atandard deviation of a

          *fracs* : the proportion of variance of each of the principal components

          *Wt* : the weight vector for projecting a numdims point or array into PCA space

          *Y* : a projected into PCA space


        The factor loadings are in the Wt factor, ie the factor
        loadings for the 1st principal component are given by Wt[0]

        \"\"\"" code nil (reparse-symbol indented_block_body) [25681 26481])
                            ("n, m" code nil (reparse-symbol indented_block_body) [26490 26504])
                            ("if" code nil (reparse-symbol indented_block_body) [26513 26609])
                            ("self, self" code nil (reparse-symbol indented_block_body) [26618 26651])
                            ("self" variable nil (reparse-symbol indented_block_body) [26660 26684])
                            ("self" variable nil (reparse-symbol indented_block_body) [26693 26719])
                            ("a" variable nil (reparse-symbol indented_block_body) [26729 26747])
                            ("self" variable nil (reparse-symbol indented_block_body) [26757 26767])
                            ("U, s, Vh" code nil (reparse-symbol indented_block_body) [26777 26825])
                            ("Y" variable nil (reparse-symbol indented_block_body) [26836 26857])
                            ("vars" code nil (reparse-symbol indented_block_body) [26867 26892])
                            ("self" code nil (reparse-symbol indented_block_body) [26901 26929])
                            ("self" variable nil (reparse-symbol indented_block_body) [26940 26952])
                            ("self" variable nil (reparse-symbol indented_block_body) [26961 26971]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25663 25667])
                            ("a" variable nil (reparse-symbol function_parameters) [25669 25670]))                          
                        :documentation "
        compute the SVD of a and store data for PCA.  Use project to
        project the data onto a reduced set of dimensions

        Inputs:

          *a*: a numobservations x numdims array

        Attrs:

          *a* a centered unit sigma version of input a

          *numrows*, *numcols*: the dimensions of a

          *mu* : a numdims array of means of a

          *sigma* : a numdims array of atandard deviation of a

          *fracs* : the proportion of variance of each of the principal components

          *Wt* : the weight vector for projecting a numdims point or array into PCA space

          *Y* : a projected into PCA space


        The factor loadings are in the Wt factor, ie the factor
        loadings for the 1st principal component are given by Wt[0]

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25650 26972])
                    ("project" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26990 26994])
                            ("x" variable nil (reparse-symbol function_parameters) [26996 26997])
                            ("minfrac" variable nil (reparse-symbol function_parameters) [26999 27006]))                          )
                        (reparse-symbol indented_block_body) [26978 27496])
                    ("center" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27514 27518])
                            ("x" variable nil (reparse-symbol function_parameters) [27520 27521]))                          )
                        (reparse-symbol indented_block_body) [27503 27635])
                    ("_get_colinear" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [27642 28452]))                  
                :type "class")
                nil [25635 28452])
            ("prctile" function
               (:documentation "
    Return the percentiles of *x*.  *p* can either be a sequence of
    percentile values or a scalar.  If *p* is a sequence, the ith
    element of the return sequence is the *p*(i)-th percentile of *x*.
    If *p* is a scalar, the largest value of *x* less than or equal to
    the *p* percentage point in the sequence is returned.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [28465 28466])
                    ("p" variable nil (reparse-symbol function_parameters) [28468 28469]))                  )
                nil [28453 29711])
            ("prctile_rank" function
               (:documentation "
    Return the rank for each element in *x*, return the rank
    0..len(*p*).  Eg if *p* = (25, 50, 75), the return value will be a
    len(*x*) array with values in [0,1,2,3] where 0 indicates the
    value is less than the 25th percentile, 1 indicates the value is
    >= the 25th and < 50th percentile, ... and 3 indicates the value
    is above the 75th percentile cutoff.

    *p* is either an array of percentiles in [0..100] or a scalar which
    indicates how many quantiles of data you want ranked.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [29729 29730])
                    ("p" variable nil (reparse-symbol function_parameters) [29732 29733]))                  )
                nil [29712 30564])
            ("center_matrix" function
               (:documentation "
    Return the matrix *M* with each row having zero mean and unit std.

    If *dim* = 1 operate on columns instead of rows.  (*dim* is
    opposite to the numpy axis kwarg.)
    "
                :arguments 
                  ( ("M" variable nil (reparse-symbol function_parameters) [30583 30584])
                    ("dim" variable nil (reparse-symbol function_parameters) [30586 30589]))                  )
                nil [30565 30993])
            ("rk4" function
               (:documentation "
    Integrate 1D or ND system of ODEs using 4-th order Runge-Kutta.
    This is a toy implementation which may be useful if you find
    yourself stranded on a system w/o scipy.  Otherwise use
    :func:`scipy.integrate`.

    *y0*
        initial state vector

    *t*
        sample times

    *derivs*
        returns the derivative of the system and has the
        signature ``dy = derivs(yi, ti)``


    Example 1 ::

        ## 2D system

        def derivs6(x,t):
            d1 =  x[0] + 2*x[1]
            d2 =  -3*x[0] + 4*x[1]
            return (d1, d2)
        dt = 0.0005
        t = arange(0.0, 2.0, dt)
        y0 = (1,2)
        yout = rk4(derivs6, y0, t)

    Example 2::

        ## 1D system
        alpha = 2
        def derivs(x,t):
            return -alpha*x + exp(-t)

        y0 = 1
        yout = rk4(derivs, y0, t)


    If you have access to scipy, you should probably be using the
    scipy.integrate tools rather than this function.
    "
                :arguments 
                  ( ("derivs" variable nil (reparse-symbol function_parameters) [31004 31010])
                    ("y0" variable nil (reparse-symbol function_parameters) [31012 31014])
                    ("t" variable nil (reparse-symbol function_parameters) [31016 31017]))                  )
                nil [30996 32591])
            ("bivariate_normal" function
               (:documentation "
    Bivariate Gaussian distribution for equal shape *X*, *Y*.

    See `bivariate normal
    <http://mathworld.wolfram.com/BivariateNormalDistribution.html>`_
    at mathworld.
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [32614 32615])
                    ("Y" variable nil (reparse-symbol function_parameters) [32617 32618])
                    ("sigmax" variable nil (reparse-symbol function_parameters) [32620 32626])
                    ("sigmay" variable nil (reparse-symbol function_parameters) [32632 32638])
                    ("mux" variable nil (reparse-symbol function_parameters) [32665 32668])
                    ("muy" variable nil (reparse-symbol function_parameters) [32674 32677])
                    ("sigmaxy" variable nil (reparse-symbol function_parameters) [32683 32690]))                  )
                nil [32593 33131])
            ("get_xyz_where" function
               (:documentation "
    *Z* and *Cond* are *M* x *N* matrices.  *Z* are data and *Cond* is
    a boolean matrix where some condition is satisfied.  Return value
    is (*x*, *y*, *z*) where *x* and *y* are the indices into *Z* and
    *z* are the values of *Z* at those indices.  *x*, *y*, and *z* are
    1D arrays.
    "
                :arguments 
                  ( ("Z" variable nil (reparse-symbol function_parameters) [33150 33151])
                    ("Cond" variable nil (reparse-symbol function_parameters) [33153 33157]))                  )
                nil [33132 33540])
            ("get_sparse_matrix" function
               (:documentation "
    Return a *M* x *N* sparse matrix with *frac* elements randomly
    filled.
    "
                :arguments 
                  ( ("M" variable nil (reparse-symbol function_parameters) [33563 33564])
                    ("N" variable nil (reparse-symbol function_parameters) [33565 33566])
                    ("frac" variable nil (reparse-symbol function_parameters) [33567 33571]))                  )
                nil [33541 33865])
            ("dist" function
               (:documentation "
    Return the distance between two points.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [33875 33876])
                    ("y" variable nil (reparse-symbol function_parameters) [33877 33878]))                  )
                nil [33866 33985])
            ("dist_point_to_segment" function
               (:documentation "
    Get the distance of a point to a segment.

      *p*, *s0*, *s1* are *xy* sequences

    This algorithm from
    http://softsurfer.com/Archive/algorithm_0102/algorithm_0102.htm#Distance%20to%20Ray%20or%20Segment
    "
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [34012 34013])
                    ("s0" variable nil (reparse-symbol function_parameters) [34015 34017])
                    ("s1" variable nil (reparse-symbol function_parameters) [34019 34021]))                  )
                nil [33986 34593])
            ("segments_intersect" function
               (:documentation "
    Return *True* if *s1* and *s2* intersect.
    *s1* and *s2* are defined as::

      s1: (x1, y1), (x2, y2)
      s2: (x3, y3), (x4, y4)
    "
                :arguments 
                  ( ("s1" variable nil (reparse-symbol function_parameters) [34617 34619])
                    ("s2" variable nil (reparse-symbol function_parameters) [34621 34623]))                  )
                nil [34594 35135])
            ("fftsurr" function
               (:documentation "
    Compute an FFT phase randomized surrogate of *x*.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [35149 35150])
                    ("detrend" variable nil (reparse-symbol function_parameters) [35152 35159])
                    ("window" variable nil (reparse-symbol function_parameters) [35174 35180]))                  )
                nil [35137 35501])
            ("liaupunov" function
               (:documentation "
    *x* is a very long trajectory from a map, and *fprime* returns the
    derivative of *x*.

    This function will be removed from matplotlib.

    Returns :
    .. math::

        \\lambda = \\\\frac{1}{n}\\\\sum \\\\ln|f^'(x_i)|

    .. seealso::

        Lyapunov Exponent
           Sec 10.5 Strogatz (1994) \"Nonlinear Dynamics and Chaos\".
           `Wikipedia article on Lyapunov Exponent
           <http://en.wikipedia.org/wiki/Lyapunov_exponent>`_.

    .. note::
        What the function here calculates may not be what you really want;
        *caveat emptor*.

        It also seems that this function's name is badly misspelled.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [35517 35518])
                    ("fprime" variable nil (reparse-symbol function_parameters) [35520 35526]))                  )
                nil [35503 36346])
            ("FIFOBuffer" type
               (:documentation "
    A FIFO queue to hold incoming *x*, *y* data in a rotating buffer
    using numpy arrays under the hood.  It is assumed that you will
    call asarrays much less frequently than you add data to the queue
    -- otherwise another data structure will be faster.

    This can be used to support plots where data is added from a real
    time feed and the plot object wants to grab data from the buffer
    and plot it to screen less freqeuently than the incoming.

    If you set the *dataLim* attr to
    :class:`~matplotlib.transforms.BBox` (eg
    :attr:`matplotlib.Axes.dataLim`), the *dataLim* will be updated as
    new data come in.

    TODO: add a grow method that will extend nmax

    .. note::

      mlab seems like the wrong place for this class.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Buffer up to *nmax* points.
        \"\"\"" code nil (reparse-symbol indented_block_body) [37181 37232])
                            ("self" variable nil (reparse-symbol indented_block_body) [37241 37280])
                            ("self" variable nil (reparse-symbol indented_block_body) [37289 37328])
                            ("self" variable nil (reparse-symbol indented_block_body) [37337 37376])
                            ("self" variable nil (reparse-symbol indented_block_body) [37385 37424])
                            ("self" variable nil (reparse-symbol indented_block_body) [37433 37446])
                            ("self" variable nil (reparse-symbol indented_block_body) [37455 37472])
                            ("self" variable nil (reparse-symbol indented_block_body) [37481 37500])
                            ("self" variable nil (reparse-symbol indented_block_body) [37509 37528]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37160 37164])
                            ("nmax" variable nil (reparse-symbol function_parameters) [37166 37170]))                          
                        :documentation "
        Buffer up to *nmax* points.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37147 37529])
                    ("register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37547 37551])
                            ("func" variable nil (reparse-symbol function_parameters) [37553 37557])
                            ("N" variable nil (reparse-symbol function_parameters) [37559 37560]))                          
                        :documentation "
        Call *func* every time *N* events are passed; *func* signature
        is ``func(fifo)``.
        ")
                        (reparse-symbol indented_block_body) [37534 37739])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37752 37756])
                            ("x" variable nil (reparse-symbol function_parameters) [37758 37759])
                            ("y" variable nil (reparse-symbol function_parameters) [37761 37762]))                          
                        :documentation "
        Add scalar *x* and *y* to the queue.
        ")
                        (reparse-symbol indented_block_body) [37744 38269])
                    ("last" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38283 38287]))                          
                        :documentation "
        Get the last *x*, *y* or *None*.  *None* if no data set.
        ")
                        (reparse-symbol indented_block_body) [38274 38507])
                    ("asarrays" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38525 38529]))                          
                        :documentation "
        Return *x* and *y* as arrays; their length will be the len of
        data added or *nmax*.
        ")
                        (reparse-symbol indented_block_body) [38512 39028])
                    ("update_datalim_to_current" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39063 39067]))                          
                        :documentation "
        Update the *datalim* in the current data in the fifo.
        ")
                        (reparse-symbol indented_block_body) [39033 39387]))                  
                :type "class")
                nil [36347 39387])
            ("movavg" function
               (:documentation "
    Compute the len(*n*) moving average of *x*.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [39399 39400])
                    ("n" variable nil (reparse-symbol function_parameters) [39401 39402]))                  )
                nil [39388 39569])
            ("save" function
               (:documentation "
    Save the data in *X* to file *fname* using *fmt* string to convert the
    data to strings.

    Deprecated.  Use numpy.savetxt.

    *fname* can be a filename or a file handle.  If the filename ends
    in '.gz', the file is automatically saved in compressed gzip
    format.  The :func:`load` function understands gzipped files
    transparently.

    Example usage::

      save('test.out', X)         # X is an array
      save('test1.out', (x,y,z))  # x,y,z equal sized 1D arrays
      save('test2.out', x)        # x is 1D
      save('test3.out', x, fmt='%1.4e')  # use exponential notation

    *delimiter* is used to separate the fields, eg. *delimiter* ','
    for comma-separated values.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [39579 39584])
                    ("X" variable nil (reparse-symbol function_parameters) [39586 39587])
                    ("fmt" variable nil (reparse-symbol function_parameters) [39589 39592])
                    ("delimiter" variable nil (reparse-symbol function_parameters) [39601 39610]))                  )
                nil [39570 40982])
            ("load" function
               (:documentation "
    Load ASCII data from *fname* into an array and return the array.

    Deprecated: use numpy.loadtxt.

    The data must be regular, same number of values in every row

    *fname* can be a filename or a file handle.  Support for gzipped
    files is automatic, if the filename ends in '.gz'.

    matfile data is not supported; for that, use :mod:`scipy.io.mio`
    module.

    Example usage::

      X = load('test.dat')  # data in two columns
      t = X[:,0]
      y = X[:,1]

    Alternatively, you can do the same with \"unpack\"; see below::

      X = load('test.dat')    # a matrix of data
      x = load('test.dat')    # a single column of data

    - *comments*: the character used to indicate the start of a comment
      in the file

    - *delimiter* is a string-like character used to seperate values
      in the file. If *delimiter* is unspecified or *None*, any
      whitespace string is a separator.

    - *converters*, if not *None*, is a dictionary mapping column number to
      a function that will convert that column to a float (or the optional
      *dtype* if specified).  Eg, if column 0 is a date string::

        converters = {0:datestr2num}

    - *skiprows* is the number of rows from the top to skip.

    - *usecols*, if not *None*, is a sequence of integer column indexes to
      extract where 0 is the first column, eg ``usecols=[1,4,5]`` to extract
      just the 2nd, 5th and 6th columns

    - *unpack*, if *True*, will transpose the matrix allowing you to unpack
      into named arguments on the left hand side::

        t,y = load('test.dat', unpack=True) # for  two column data
        x,y,z = load('somefile.dat', usecols=[3,5,7], unpack=True)

    - *dtype*: the array will have this dtype.  default: ``numpy.float_``

    .. seealso::

        See :file:`examples/pylab_examples/load_converter.py` in the source tree
           Exercises many of these options.
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [40995 41000])
                    ("comments" variable nil (reparse-symbol function_parameters) [41001 41009])
                    ("delimiter" variable nil (reparse-symbol function_parameters) [41014 41023])
                    ("converters" variable nil (reparse-symbol function_parameters) [41030 41040])
                    ("skiprows" variable nil (reparse-symbol function_parameters) [41046 41054])
                    ("usecols" variable nil (reparse-symbol function_parameters) [41067 41074])
                    ("unpack" variable nil (reparse-symbol function_parameters) [41081 41087])
                    ("dtype" variable nil (reparse-symbol function_parameters) [41095 41100]))                  )
                nil [40986 44243])
            ("\"\"\"
A set of convenient utilities for numerical work.

Most of this module requires numpy or is meant to be used with it.

Copyright (c) 2001-2004, Fernando Perez. <Fernando.Perez@colorado.edu>
All rights reserved.

This license was generated from the BSD license template as found in:
http://www.opensource.org/licenses/bsd-license.php

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the IPython project nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

\"\"\"" code nil nil [44396 46203])
            ("operator" include nil nil [46205 46220])
            ("math" include nil nil [46221 46232])
            ("exp_safe_MIN" variable nil nil [46426 46474])
            ("exp_safe_MAX" variable nil nil [46475 46513])
            ("exp_safe" function
               (:documentation "
    Compute exponentials which safely underflow to zero.

    Slow, but convenient to use. Note that numpy provides proper
    floating point exception handling with access to the underlying
    hardware.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [46528 46529]))                  )
                nil [46515 46878])
            ("amap" function
               (:documentation "
    amap(function, sequence[, sequence, ...]) -> array.

    Works like :func:`map`, but it returns an array.  This is just a
    convenient shorthand for ``numpy.array(map(...))``.
    "
                :arguments 
                  ( ("fn" variable nil (reparse-symbol function_parameters) [46888 46890])
                    ("args" variable nil (reparse-symbol function_parameters) [46891 46896]))                  )
                nil [46879 47132])
            ("rms_flat" function
               (:documentation "
    Return the root mean square of all the elements of *a*, flattened out.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [47147 47148]))                  )
                nil [47134 47289])
            ("l1norm" function
               (:documentation "
    Return the *l1* norm of *a*, flattened out.

    Implemented as a separate function (not a call to :func:`norm` for speed).
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [47301 47302]))                  )
                nil [47290 47483])
            ("l2norm" function
               (:documentation "
    Return the *l2* norm of *a*, flattened out.

    Implemented as a separate function (not a call to :func:`norm` for speed).
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [47495 47496]))                  )
                nil [47484 47689])
            ("norm_flat" function
               (:documentation "
    norm(a,p=2) -> l-p norm of a.flat

    Return the l-p norm of *a*, considered as a flat array.  This is NOT a true
    matrix norm, since arrays of arbitrary rank are always flattened.

    *p* can be a number or the string 'Infinity' to get the L-infinity norm.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [47704 47705])
                    ("p" variable nil (reparse-symbol function_parameters) [47706 47707]))                  )
                nil [47690 48237])
            ("frange" function
               (:documentation "
    frange([start,] stop[, step, keywords]) -> array of floats

    Return a numpy ndarray containing a progression of floats. Similar to
    :func:`numpy.arange`, but defaults to a closed interval.

    ``frange(x0, x1)`` returns ``[x0, x0+1, x0+2, ..., x1]``; *start*
    defaults to 0, and the endpoint *is included*. This behavior is
    different from that of :func:`range` and
    :func:`numpy.arange`. This is deliberate, since :func:`frange`
    will probably be more useful for generating lists of points for
    function evaluation, and endpoints are often desired in this
    use. The usual behavior of :func:`range` can be obtained by
    setting the keyword *closed* = 0, in this case, :func:`frange`
    basically becomes :func:numpy.arange`.

    When *step* is given, it specifies the increment (or
    decrement). All arguments can be floating point numbers.

    ``frange(x0,x1,d)`` returns ``[x0,x0+d,x0+2d,...,xfin]`` where
    *xfin* <= *x1*.

    :func:`frange` can also be called with the keyword *npts*. This
    sets the number of points the list should contain (and overrides
    the value *step* might have been given). :func:`numpy.arange`
    doesn't offer this option.

    Examples::

      >>> frange(3)
      array([ 0.,  1.,  2.,  3.])
      >>> frange(3,closed=0)
      array([ 0.,  1.,  2.])
      >>> frange(1,6,2)
      array([1, 3, 5])   or 1,3,5,7, depending on floating point vagueries
      >>> frange(1,6.5,npts=5)
      array([ 1.   ,  2.375,  3.75 ,  5.125,  6.5  ])
    "
                :arguments 
                  ( ("xini" variable nil (reparse-symbol function_parameters) [48249 48253])
                    ("xfin" variable nil (reparse-symbol function_parameters) [48254 48258])
                    ("delta" variable nil (reparse-symbol function_parameters) [48264 48269])
                    ("kw" variable nil (reparse-symbol function_parameters) [48275 48279]))                  )
                nil [48238 50647])
            ("identity" function
               (:documentation "
    Returns the identity matrix of shape (*n*, *n*, ..., *n*) (rank *r*).

    For ranks higher than 2, this object is simply a multi-index Kronecker
    delta::

                            /  1  if i0=i1=...=iR,
        id[i0,i1,...,iR] = -|
                            \\  0  otherwise.

    Optionally a *dtype* (or typecode) may be given (it defaults to 'l').

    Since rank defaults to 2, this function behaves in the default case (when
    only *n* is given) like ``numpy.identity(n)`` -- but surprisingly, it is
    much faster.
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [50677 50678])
                    ("rank" variable nil (reparse-symbol function_parameters) [50680 50684])
                    ("dtype" variable nil (reparse-symbol function_parameters) [50688 50693])
                    ("typecode" variable nil (reparse-symbol function_parameters) [50699 50707]))                  )
                nil [50664 51445])
            ("base_repr" function
               (:documentation "
    Return the representation of a *number* in any given *base*.
    "
                :arguments 
                  ( ("number" variable nil (reparse-symbol function_parameters) [51461 51467])
                    ("base" variable nil (reparse-symbol function_parameters) [51469 51473])
                    ("padding" variable nil (reparse-symbol function_parameters) [51479 51486]))                  )
                nil [51446 52007])
            ("binary_repr" function
               (:documentation "
    Return the binary representation of the input *number* as a
    string.

    This is more efficient than using :func:`base_repr` with base 2.

    Increase the value of max_length for very large numbers. Note that
    on 32-bit machines, 2**1023 is the largest integer power of 2
    which can be converted to a Python float.
    "
                :arguments 
                  ( ("number" variable nil (reparse-symbol function_parameters) [52024 52030])
                    ("max_length" variable nil (reparse-symbol function_parameters) [52032 52042]))                  )
                nil [52008 52739])
            ("log2" function
               (:documentation "
    Return the log(*x*) in base 2.

    This is a _slow_ function but which is guaranteed to return the correct
    integer value if the input is an integer exact power of 2.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [52749 52750])
                    ("ln2" variable nil (reparse-symbol function_parameters) [52751 52754]))                  )
                nil [52740 53192])
            ("ispower2" function
               (:documentation "
    Returns the log base 2 of *n* if *n* is a power of 2, zero otherwise.

    Note the potential ambiguity if *n* == 1: 2**0 == 1, interpret accordingly.
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [53206 53207]))                  )
                nil [53193 53487])
            ("isvector" function
               (:documentation "
    Like the MATLAB function with the same name, returns *True*
    if the supplied numpy array or matrix *X* looks like a vector,
    meaning it has a one non-singleton axis (i.e., it can have
    multiple axes, but all must have length 1, except for one of
    them).

    If you just want to see if the array has 1 axis, use X.ndim == 1.
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [53501 53502]))                  )
                nil [53488 53907])
            ("safe_isnan" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [54030 54031]))              ) nil [54015 54257])
            ("safe_isinf" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [54273 54274]))              ) nil [54258 54500])
            ("rec_append_fields" function
               (:documentation "
    Return a new record array with field names populated with data
    from arrays in *arrs*.  If appending a single field, then *names*,
    *arrs* and *dtypes* do not have to be lists. They can just be the
    values themselves.
    "
                :arguments 
                  ( ("rec" variable nil (reparse-symbol function_parameters) [54523 54526])
                    ("names" variable nil (reparse-symbol function_parameters) [54528 54533])
                    ("arrs" variable nil (reparse-symbol function_parameters) [54535 54539])
                    ("dtypes" variable nil (reparse-symbol function_parameters) [54541 54547]))                  )
                nil [54501 55761])
            ("rec_drop_fields" function
               (:documentation "
    Return a new numpy record array with fields in *names* dropped.
    "
                :arguments 
                  ( ("rec" variable nil (reparse-symbol function_parameters) [55783 55786])
                    ("names" variable nil (reparse-symbol function_parameters) [55788 55793]))                  )
                nil [55763 56186])
            ("rec_keep_fields" function
               (:documentation "
    Return a new numpy record array with only fields listed in names
    "
                :arguments 
                  ( ("rec" variable nil (reparse-symbol function_parameters) [56207 56210])
                    ("names" variable nil (reparse-symbol function_parameters) [56212 56217]))                  )
                nil [56187 56499])
            ("rec_groupby" function
               (:documentation "
    *r* is a numpy record array

    *groupby* is a sequence of record array attribute names that
    together form the grouping key.  eg ('date', 'productcode')

    *stats* is a sequence of (*attr*, *func*, *outname*) tuples which
    will call ``x = func(attr)`` and assign *x* to the record array
    output with attribute *outname*.  For example::

      stats = ( ('sales', len, 'numsales'), ('sales', np.mean, 'avgsale') )

    Return record array has *dtype* names for each attribute name in
    the the *groupby* argument, with the associated group values, and
    for each outname name in the *stats* argument, with the associated
    stat summary output.
    "
                :arguments 
                  ( ("r" variable nil (reparse-symbol function_parameters) [56518 56519])
                    ("groupby" variable nil (reparse-symbol function_parameters) [56521 56528])
                    ("stats" variable nil (reparse-symbol function_parameters) [56530 56535]))                  )
                nil [56502 58059])
            ("rec_summarize" function
               (:documentation "
    *r* is a numpy record array

    *summaryfuncs* is a list of (*attr*, *func*, *outname*) tuples
    which will apply *func* to the the array *r*[attr] and assign the
    output to a new attribute name *outname*.  The returned record
    array is identical to *r*, with extra arrays for each element in
    *summaryfuncs*.

    "
                :arguments 
                  ( ("r" variable nil (reparse-symbol function_parameters) [58080 58081])
                    ("summaryfuncs" variable nil (reparse-symbol function_parameters) [58083 58095]))                  )
                nil [58062 58691])
            ("rec_join" function
               (:documentation "
    Join record arrays *r1* and *r2* on *key*; *key* is a tuple of
    field names -- if *key* is a string it is assumed to be a single
    attribute name. If *r1* and *r2* have equal values on all the keys
    in the *key* tuple, then their fields will be merged into a new
    record array containing the intersection of the fields of *r1* and
    *r2*.

    *r1* (also *r2*) must not have any duplicate keys.

    The *jointype* keyword can be 'inner', 'outer', 'leftouter'.  To
    do a rightouter join just reverse *r1* and *r2*.

    The *defaults* keyword is a dictionary filled with
    ``{column_name:default_value}`` pairs.

    The keywords *r1postfix* and *r2postfix* are postfixed to column names
    (other than keys) that are both in *r1* and *r2*.
    "
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [58706 58709])
                    ("r1" variable nil (reparse-symbol function_parameters) [58711 58713])
                    ("r2" variable nil (reparse-symbol function_parameters) [58715 58717])
                    ("jointype" variable nil (reparse-symbol function_parameters) [58719 58727])
                    ("defaults" variable nil (reparse-symbol function_parameters) [58737 58745])
                    ("r1postfix" variable nil (reparse-symbol function_parameters) [58752 58761])
                    ("r2postfix" variable nil (reparse-symbol function_parameters) [58767 58776]))                  )
                nil [58693 63183])
            ("recs_join" function
               (:documentation "
    Join a sequence of record arrays on single column key.

    This function only joins a single column of the multiple record arrays

    *key*
      is the column name that acts as a key

    *name*
      is the name of the column that we want to join

    *recs*
      is a list of record arrays to join

    *jointype*
      is a string 'inner' or 'outer'

    *missing*
      is what any missing field is replaced by

    *postfixes*
      if not None, a len recs sequence of postfixes

    returns a record array with columns [rowkey, name0, name1, ... namen-1].
    or if postfixes [PF0, PF1, ..., PFN-1] are supplied,
    [rowkey, namePF0, namePF1, ... namePFN-1].

    Example::

      r = recs_join(\"date\", \"close\", recs=[r0, r1], missing=0.)

    "
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [63198 63201])
                    ("name" variable nil (reparse-symbol function_parameters) [63203 63207])
                    ("recs" variable nil (reparse-symbol function_parameters) [63209 63213])
                    ("jointype" variable nil (reparse-symbol function_parameters) [63215 63223])
                    ("missing" variable nil (reparse-symbol function_parameters) [63233 63240])
                    ("postfixes" variable nil (reparse-symbol function_parameters) [63245 63254]))                  )
                nil [63184 64763])
            ("csv2rec" function
               (:documentation "
    Load data from comma/space/tab delimited file in *fname* into a
    numpy record array and return the record array.

    If *names* is *None*, a header row is required to automatically
    assign the recarray names.  The headers will be lower cased,
    spaces will be converted to underscores, and illegal attribute
    name characters removed.  If *names* is not *None*, it is a
    sequence of names to use for the column names.  In this case, it
    is assumed there is no header row.


    - *fname*: can be a filename or a file handle.  Support for gzipped
      files is automatic, if the filename ends in '.gz'

    - *comments*: the character used to indicate the start of a comment
      in the file

    - *skiprows*: is the number of rows from the top to skip

    - *checkrows*: is the number of rows to check to validate the column
      data type.  When set to zero all rows are validated.

    - *converterd*: if not *None*, is a dictionary mapping column number or
      munged column name to a converter function.

    - *names*: if not None, is a list of header names.  In this case, no
      header will be read from the file

    - *missingd* is a dictionary mapping munged column names to field values
      which signify that the field does not contain actual data and should
      be masked, e.g. '0000-00-00' or 'unused'

    - *missing*: a string whose value signals a missing field regardless of
      the column it appears in

    - *use_mrecords*: if True, return an mrecords.fromrecords record array if any of the data are missing

      If no rows are found, *None* is returned -- see :file:`examples/loadrec.py`
    "
                :arguments 
                  ( ("fname" variable nil (reparse-symbol function_parameters) [64777 64782])
                    ("comments" variable nil (reparse-symbol function_parameters) [64784 64792])
                    ("skiprows" variable nil (reparse-symbol function_parameters) [64798 64806])
                    ("checkrows" variable nil (reparse-symbol function_parameters) [64810 64819])
                    ("delimiter" variable nil (reparse-symbol function_parameters) [64823 64832])
                    ("converterd" variable nil (reparse-symbol function_parameters) [64850 64860])
                    ("names" variable nil (reparse-symbol function_parameters) [64867 64872])
                    ("missing" variable nil (reparse-symbol function_parameters) [64879 64886])
                    ("missingd" variable nil (reparse-symbol function_parameters) [64891 64899])
                    ("use_mrecords" variable nil (reparse-symbol function_parameters) [64918 64930]))                  )
                nil [64765 73167])
            ("FormatObj" type
               (:members 
                  ( ("tostr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73280 73284])
                            ("x" variable nil (reparse-symbol function_parameters) [73286 73287]))                          )
                        (reparse-symbol indented_block_body) [73270 73319])
                    ("toval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73334 73338])
                            ("x" variable nil (reparse-symbol function_parameters) [73340 73341]))                          )
                        (reparse-symbol indented_block_body) [73324 73366])
                    ("fromstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73383 73387])
                            ("s" variable nil (reparse-symbol function_parameters) [73389 73390]))                          )
                        (reparse-symbol indented_block_body) [73371 73410])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73429 73433]))                          
                        :documentation "
        override the hash function of any of the formatters, so that we don't create duplicate excel format styles
        ")
                        (reparse-symbol indented_block_body) [73416 73611]))                  
                :type "class")
                nil [73249 73611])
            ("FormatString" type
               (:superclasses ("FormatObj")
                :members 
                  ( ("tostr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73657 73661])
                            ("x" variable nil (reparse-symbol function_parameters) [73663 73664]))                          )
                        (reparse-symbol indented_block_body) [73647 73714]))                  
                :type "class")
                nil [73612 73714])
            ("FormatFormatStr" type
               (:superclasses ("FormatObj")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [73883 73897]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73863 73867])
                            ("fmt" variable nil (reparse-symbol function_parameters) [73869 73872]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [73850 73898])
                    ("tostr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73913 73917])
                            ("x" variable nil (reparse-symbol function_parameters) [73919 73920]))                          )
                        (reparse-symbol indented_block_body) [73903 73997]))                  
                :type "class")
                nil [73812 73997])
            ("FormatFloat" type
               (:superclasses ("FormatFormatStr")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("FormatFormatStr" code nil (reparse-symbol indented_block_body) [74092 74143])
                            ("self" variable nil (reparse-symbol indented_block_body) [74152 74178])
                            ("self" variable nil (reparse-symbol indented_block_body) [74187 74205]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74054 74058])
                            ("precision" variable nil (reparse-symbol function_parameters) [74060 74069])
                            ("scale" variable nil (reparse-symbol function_parameters) [74073 74078]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [74041 74206])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74224 74228]))                          )
                        (reparse-symbol indented_block_body) [74211 74297])
                    ("toval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74312 74316])
                            ("x" variable nil (reparse-symbol function_parameters) [74318 74319]))                          )
                        (reparse-symbol indented_block_body) [74302 74396])
                    ("fromstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74413 74417])
                            ("s" variable nil (reparse-symbol function_parameters) [74419 74420]))                          )
                        (reparse-symbol indented_block_body) [74401 74458]))                  
                :type "class")
                nil [74001 74458])
            ("FormatInt" type
               (:superclasses ("FormatObj")
                :members 
                  ( ("tostr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74503 74507])
                            ("x" variable nil (reparse-symbol function_parameters) [74509 74510]))                          )
                        (reparse-symbol indented_block_body) [74493 74540])
                    ("toval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74555 74559])
                            ("x" variable nil (reparse-symbol function_parameters) [74561 74562]))                          )
                        (reparse-symbol indented_block_body) [74545 74587])
                    ("fromstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74604 74608])
                            ("s" variable nil (reparse-symbol function_parameters) [74610 74611]))                          )
                        (reparse-symbol indented_block_body) [74592 74636]))                  
                :type "class")
                nil [74460 74636])
            ("FormatBool" type
               (:superclasses ("FormatObj")
                :members 
                  ( ("toval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74682 74686])
                            ("x" variable nil (reparse-symbol function_parameters) [74688 74689]))                          )
                        (reparse-symbol indented_block_body) [74672 74714])
                    ("fromstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74731 74735])
                            ("s" variable nil (reparse-symbol function_parameters) [74737 74738]))                          )
                        (reparse-symbol indented_block_body) [74719 74764]))                  
                :type "class")
                nil [74637 74764])
            ("FormatPercent" type
               (:superclasses ("FormatFloat")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("FormatFloat" code nil (reparse-symbol indented_block_body) [74844 74893]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74816 74820])
                            ("precision" variable nil (reparse-symbol function_parameters) [74822 74831]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [74803 74894]))                  
                :type "class")
                nil [74765 74894])
            ("FormatThousands" type
               (:superclasses ("FormatFloat")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("FormatFloat" code nil (reparse-symbol indented_block_body) [74976 75025]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74948 74952])
                            ("precision" variable nil (reparse-symbol function_parameters) [74954 74963]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [74935 75026]))                  
                :type "class")
                nil [74895 75026])
            ("FormatMillions" type
               (:superclasses ("FormatFloat")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("FormatFloat" code nil (reparse-symbol indented_block_body) [75108 75157]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75080 75084])
                            ("precision" variable nil (reparse-symbol function_parameters) [75086 75095]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [75067 75158]))                  
                :type "class")
                nil [75028 75158])
            ("FormatDate" type
               (:superclasses ("FormatObj")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [75226 75240]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75206 75210])
                            ("fmt" variable nil (reparse-symbol function_parameters) [75212 75215]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [75193 75241])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75259 75263]))                          )
                        (reparse-symbol indented_block_body) [75246 75314])
                    ("toval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75330 75334])
                            ("x" variable nil (reparse-symbol function_parameters) [75336 75337]))                          )
                        (reparse-symbol indented_block_body) [75320 75412])
                    ("fromstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75429 75433])
                            ("x" variable nil (reparse-symbol function_parameters) [75435 75436]))                          )
                        (reparse-symbol indented_block_body) [75417 75517]))                  
                :type "class")
                nil [75160 75517])
            ("FormatDatetime" type
               (:superclasses ("FormatDate")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("FormatDate" code nil (reparse-symbol indented_block_body) [75609 75639]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75569 75573])
                            ("fmt" variable nil (reparse-symbol function_parameters) [75575 75578]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [75556 75640])
                    ("fromstr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75657 75661])
                            ("x" variable nil (reparse-symbol function_parameters) [75663 75664]))                          )
                        (reparse-symbol indented_block_body) [75645 75738]))                  
                :type "class")
                nil [75518 75738])
            ("defaultformatd" variable nil nil [75742 76006])
            ("get_formatd" function (:arguments 
              ( ("r" variable nil (reparse-symbol function_parameters) [76024 76025])
                ("formatd" variable nil (reparse-symbol function_parameters) [76027 76034]))              ) nil [76008 76406])
            ("csvformat_factory" function (:arguments 
              ( ("format" variable nil (reparse-symbol function_parameters) [76429 76435]))              ) nil [76407 76614])
            ("rec2txt" function
               (:documentation "
    Returns a textual representation of a record array.

    *r*: numpy recarray

    *header*: list of column headers

    *padding*: space between each column

    *precision*: number of decimal places to use for floats.
        Set to an integer to apply to all floats.  Set to a
        list of integers to apply precision individually.
        Precision for non-floats is simply ignored.

    *fields* : if not None, a list of field names to print.  fields
    can be a list of strings like ['field1', 'field2'] or a single
    comma separated string like 'field1,field2'

    Example::

      precision=[0,2,3]

    Output::

      ID    Price   Return
      ABC   12.54    0.234
      XYZ    6.32   -0.076
    "
                :arguments 
                  ( ("r" variable nil (reparse-symbol function_parameters) [76627 76628])
                    ("header" variable nil (reparse-symbol function_parameters) [76630 76636])
                    ("padding" variable nil (reparse-symbol function_parameters) [76643 76650])
                    ("precision" variable nil (reparse-symbol function_parameters) [76654 76663])
                    ("fields" variable nil (reparse-symbol function_parameters) [76667 76673]))                  )
                nil [76615 80738])
            ("rec2csv" function
               (:documentation "
    Save the data from numpy recarray *r* into a
    comma-/space-/tab-delimited file.  The record array dtype names
    will be used for column headers.

    *fname*: can be a filename or a file handle.  Support for gzipped
      files is automatic, if the filename ends in '.gz'

    *withheader*: if withheader is False, do not write the attribute
      names in the first row

    for formatd type FormatFloat, we override the precision to store
    full precision floats in the CSV file


    .. seealso::

        :func:`csv2rec`
            For information about *missing* and *missingd*, which can
            be used to fill in masked values into your CSV file.
    "
                :arguments 
                  ( ("r" variable nil (reparse-symbol function_parameters) [80753 80754])
                    ("fname" variable nil (reparse-symbol function_parameters) [80756 80761])
                    ("delimiter" variable nil (reparse-symbol function_parameters) [80763 80772])
                    ("formatd" variable nil (reparse-symbol function_parameters) [80778 80785])
                    ("missing" variable nil (reparse-symbol function_parameters) [80792 80799])
                    ("missingd" variable nil (reparse-symbol function_parameters) [80816 80824])
                    ("withheader" variable nil (reparse-symbol function_parameters) [80831 80841]))                  )
                nil [80741 82805])
            ("griddata" function
               (:documentation "
    ``zi = griddata(x,y,z,xi,yi)`` fits a surface of the form *z* =
    *f*(*x*, *y*) to the data in the (usually) nonuniformly spaced
    vectors (*x*, *y*, *z*).  :func:`griddata` interpolates this
    surface at the points specified by (*xi*, *yi*) to produce
    *zi*. *xi* and *yi* must describe a regular grid, can be either 1D
    or 2D, but must be monotonically increasing.

    A masked array is returned if any grid points are outside convex
    hull defined by input data (no extrapolation is done).

    If interp keyword is set to '`nn`' (default),
    uses natural neighbor interpolation based on Delaunay
    triangulation.  By default, this algorithm is provided by the
    :mod:`matplotlib.delaunay` package, written by Robert Kern.  The
    triangulation algorithm in this package is known to fail on some
    nearly pathological cases. For this reason, a separate toolkit
    (:mod:`mpl_tookits.natgrid`) has been created that provides a more
    robust algorithm fof triangulation and interpolation.  This
    toolkit is based on the NCAR natgrid library, which contains code
    that is not redistributable under a BSD-compatible license.  When
    installed, this function will use the :mod:`mpl_toolkits.natgrid`
    algorithm, otherwise it will use the built-in
    :mod:`matplotlib.delaunay` package.

    If the interp keyword is set to '`linear`', then linear interpolation
    is used instead of natural neighbor. In this case, the output grid
    is assumed to be regular with a constant grid spacing in both the x and
    y directions. For regular grids with nonconstant grid spacing, you
    must use natural neighbor interpolation.  Linear interpolation is only valid if
    :mod:`matplotlib.delaunay` package is used - :mod:`mpl_tookits.natgrid`
    only provides natural neighbor interpolation.

    The natgrid matplotlib toolkit can be downloaded from
    http://sourceforge.net/project/showfiles.php?group_id=80706&package_id=142792
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [82819 82820])
                    ("y" variable nil (reparse-symbol function_parameters) [82821 82822])
                    ("z" variable nil (reparse-symbol function_parameters) [82823 82824])
                    ("xi" variable nil (reparse-symbol function_parameters) [82825 82827])
                    ("yi" variable nil (reparse-symbol function_parameters) [82828 82830])
                    ("interp" variable nil (reparse-symbol function_parameters) [82831 82837]))                  )
                nil [82806 88437])
            ("griddata" variable nil nil [88437 88463])
            ("less_simple_linear_interpolation" function
               (:documentation "
    This function provides simple (but somewhat less so than
    :func:`cbook.simple_linear_interpolation`) linear interpolation.
    :func:`simple_linear_interpolation` will give a list of point
    between a start and an end, while this does true linear
    interpolation at an arbitrary set of points.

    This is very inefficient linear interpolation meant to be used
    only for a small number of points in relatively non-intensive use
    cases.  For real linear interpolation, use scipy.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [88639 88640])
                    ("y" variable nil (reparse-symbol function_parameters) [88642 88643])
                    ("xi" variable nil (reparse-symbol function_parameters) [88645 88647])
                    ("extrap" variable nil (reparse-symbol function_parameters) [88649 88655]))                  )
                nil [88601 89813])
            ("slopes" function
               (:documentation "
    :func:`slopes` calculates the slope *y*'(*x*)

    The slope is estimated using the slope obtained from that of a
    parabola through any three consecutive points.

    This method should be superior to that described in the appendix
    of A CONSISTENTLY WELL BEHAVED METHOD OF INTERPOLATION by Russel
    W. Stineman (Creative Computing July 1980) in at least one aspect:

      Circles for interpolation demand a known aspect ratio between
      *x*- and *y*-values.  For many functions, however, the abscissa
      are given in different dimensions, so an aspect ratio is
      completely arbitrary.

    The parabola method gives very similar results to the circle
    method for most regular cases but behaves much better in special
    cases.

    Norbert Nemec, Institute of Theoretical Physics, University or
    Regensburg, April 2006 Norbert.Nemec at physik.uni-regensburg.de

    (inspired by a original implementation by Halldor Bjornsson,
    Icelandic Meteorological Office, March 2006 halldor at vedur.is)
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [89825 89826])
                    ("y" variable nil (reparse-symbol function_parameters) [89827 89828]))                  )
                nil [89814 91240])
            ("stineman_interp" function
               (:documentation "
    Given data vectors *x* and *y*, the slope vector *yp* and a new
    abscissa vector *xi*, the function :func:`stineman_interp` uses
    Stineman interpolation to calculate a vector *yi* corresponding to
    *xi*.

    Here's an example that generates a coarse sine curve, then
    interpolates over a finer abscissa::

      x = linspace(0,2*pi,20);  y = sin(x); yp = cos(x)
      xi = linspace(0,2*pi,40);
      yi = stineman_interp(xi,x,y,yp);
      plot(x,y,'o',xi,yi)

    The interpolation method is described in the article A
    CONSISTENTLY WELL BEHAVED METHOD OF INTERPOLATION by Russell
    W. Stineman. The article appeared in the July 1980 issue of
    Creative Computing with a note from the editor stating that while
    they were:

      not an academic journal but once in a while something serious
      and original comes in adding that this was
      \"apparently a real solution\" to a well known problem.

    For *yp* = *None*, the routine automatically determines the slopes
    using the :func:`slopes` routine.

    *x* is assumed to be sorted in increasing order.

    For values ``xi[j] < x[0]`` or ``xi[j] > x[-1]``, the routine
    tries an extrapolation.  The relevance of the data obtained from
    this, of course, is questionable...

    Original implementation by Halldor Bjornsson, Icelandic
    Meteorolocial Office, March 2006 halldor at vedur.is

    Completely reworked and optimized for Python by Norbert Nemec,
    Institute of Theoretical Physics, University or Regensburg, April
    2006 Norbert.Nemec at physik.uni-regensburg.de
    "
                :arguments 
                  ( ("xi" variable nil (reparse-symbol function_parameters) [91262 91264])
                    ("x" variable nil (reparse-symbol function_parameters) [91265 91266])
                    ("y" variable nil (reparse-symbol function_parameters) [91267 91268])
                    ("yp" variable nil (reparse-symbol function_parameters) [91269 91271]))                  )
                nil [91242 94561])
            ("inside_poly" function
               (:documentation "
    *points* is a sequence of *x*, *y* points.
    *verts* is a sequence of *x*, *y* vertices of a polygon.

    Return value is a sequence of indices into points for the points
    that are inside the polygon.
    "
                :arguments 
                  ( ("points" variable nil (reparse-symbol function_parameters) [94728 94734])
                    ("verts" variable nil (reparse-symbol function_parameters) [94736 94741]))                  )
                nil [94712 95052])
            ("poly_below" function
               (:documentation "
    Given a sequence of *xs* and *ys*, return the vertices of a
    polygon that has a horizontal base at *xmin* and an upper bound at
    the *ys*.  *xmin* is a scalar.

    Intended for use with :meth:`matplotlib.axes.Axes.fill`, eg::

      xv, yv = poly_below(0, x, y)
      ax.fill(xv, yv)
    "
                :arguments 
                  ( ("xmin" variable nil (reparse-symbol function_parameters) [95068 95072])
                    ("xs" variable nil (reparse-symbol function_parameters) [95074 95076])
                    ("ys" variable nil (reparse-symbol function_parameters) [95078 95080]))                  )
                nil [95053 95710])
            ("poly_between" function
               (:documentation "
    Given a sequence of *x*, *ylower* and *yupper*, return the polygon
    that fills the regions between them.  *ylower* or *yupper* can be
    scalar or iterable.  If they are iterable, they must be equal in
    length to *x*.

    Return value is *x*, *y* arrays for use with
    :meth:`matplotlib.axes.Axes.fill`.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [95730 95731])
                    ("ylower" variable nil (reparse-symbol function_parameters) [95733 95739])
                    ("yupper" variable nil (reparse-symbol function_parameters) [95741 95747]))                  )
                nil [95713 96474])
            ("is_closed_polygon" function
               (:documentation "
    Tests whether first and last object in a sequence are the same.  These are
    presumably coordinates on a polygonal curve, in which case this function
    tests if that curve is closed.
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [96498 96499]))                  )
                nil [96476 96742])
            ("contiguous_regions" function
               (:documentation "
    return a list of (ind0, ind1) such that mask[ind0:ind1].all() is
    True and we cover all such regions

    TODO: this is a pure python implementation which probably has a much faster numpy impl
    "
                :arguments 
                  ( ("mask" variable nil (reparse-symbol function_parameters) [96767 96771]))                  )
                nil [96744 97351])
            ("cross_from_below" function
               (:documentation "
    return the indices into *x* where *x* crosses some threshold from
    below, eg the i's where::

      x[i-1]<threshold and x[i]>=threshold

    Example code::

        import matplotlib.pyplot as plt

        t = np.arange(0.0, 2.0, 0.1)
        s = np.sin(2*np.pi*t)

        fig = plt.figure()
        ax = fig.add_subplot(111)
        ax.plot(t, s, '-o')
        ax.axhline(0.5)
        ax.axhline(-0.5)

        ind = cross_from_below(s, 0.5)
        ax.vlines(t[ind], -1, 1)

        ind = cross_from_above(s, -0.5)
        ax.vlines(t[ind], -1, 1)

        plt.show()

    .. seealso::

        :func:`cross_from_above` and :func:`contiguous_regions`

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [97374 97375])
                    ("threshold" variable nil (reparse-symbol function_parameters) [97377 97386]))                  )
                nil [97353 98233])
            ("cross_from_above" function
               (:documentation "
    return the indices into *x* where *x* crosses some threshold from
    below, eg the i's where::

      x[i-1]>threshold and x[i]<=threshold

    .. seealso::

        :func:`cross_from_below` and :func:`contiguous_regions`

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [98255 98256])
                    ("threshold" variable nil (reparse-symbol function_parameters) [98258 98267]))                  )
                nil [98234 98653])
            ("vector_lengths" function
               (:documentation "
    Finds the length of a set of vectors in *n* dimensions.  This is
    like the :func:`numpy.norm` function for vectors, but has the ability to
    work over a particular axis of the supplied array or matrix.

    Computes ``(sum((x_i)^P))^(1/P)`` for each ``{x_i}`` being the
    elements of *X* along the given axis.  If *axis* is *None*,
    compute over all elements of *X*.
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [98823 98824])
                    ("P" variable nil (reparse-symbol function_parameters) [98826 98827])
                    ("axis" variable nil (reparse-symbol function_parameters) [98832 98836]))                  )
                nil [98803 99310])
            ("distances_along_curve" function
               (:documentation "
    Computes the distance between a set of successive points in *N* dimensions.

    Where *X* is an *M* x *N* array or matrix.  The distances between
    successive rows is computed.  Distance is the standard Euclidean
    distance.
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [99338 99339]))                  )
                nil [99311 99658])
            ("path_length" function
               (:documentation "
    Computes the distance travelled along a polygonal curve in *N* dimensions.

    Where *X* is an *M* x *N* array or matrix.  Returns an array of
    length *M* consisting of the distance along the curve at each point
    (i.e., the rows of *X*).
    "
                :arguments 
                  ( ("X" variable nil (reparse-symbol function_parameters) [99675 99676]))                  )
                nil [99659 100034])
            ("quad2cubic" function
               (:documentation "
    Converts a quadratic Bezier curve to a cubic approximation.

    The inputs are the *x* and *y* coordinates of the three control
    points of a quadratic curve, and the output is a tuple of *x* and
    *y* coordinates of the four control points of the cubic curve.
    "
                :arguments 
                  ( ("q0x" variable nil (reparse-symbol function_parameters) [100050 100053])
                    ("q0y" variable nil (reparse-symbol function_parameters) [100055 100058])
                    ("q1x" variable nil (reparse-symbol function_parameters) [100060 100063])
                    ("q1y" variable nil (reparse-symbol function_parameters) [100065 100068])
                    ("q2x" variable nil (reparse-symbol function_parameters) [100070 100073])
                    ("q2y" variable nil (reparse-symbol function_parameters) [100075 100078]))                  )
                nil [100035 100605]))          
      :file "mlab.py"
      :pointmax 100605
      :fsize 100604
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__future__" include nil nil [1 32])
            ("matplotlib" include nil nil [34 51])
            ("rcParams" variable nil nil [52 82])
            ("matplotlib.artist" include nil nil [84 119])
            ("matplotlib.artist" include nil nil [120 169])
            ("matplotlib" include nil nil [170 202])
            ("matplotlib.transforms" include nil nil [203 246])
            ("matplotlib.lines" include nil nil [247 280])
            ("matplotlib.patches" include nil nil [281 318])
            ("matplotlib.path" include nil nil [319 350])
            ("matplotlib.cbook" include nil nil [351 383])
            ("numpy" include nil nil [384 402])
            ("warnings" include nil nil [403 418])
            ("Spine" type
               (:documentation "an axis spine -- the line noting the data area boundaries

    Spines are the lines connecting the axis tick marks and noting the
    boundaries of the data area. They can be placed at arbitrary
    positions. See function:`~matplotlib.spines.Spine.set_position`
    for more information.

    The default position is ``('outward',0)``.

    Spines are subclasses of class:`~matplotlib.patches.Patch`, and
    inherit much of their behavior.

    Spines draw a line or a circle, depending if
    function:`~matplotlib.spines.Spine.set_patch_line` or
    function:`~matplotlib.spines.Spine.set_patch_circle` has been
    called. Line-like is the default.

    "
                :superclasses ("mpatches.Patch")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1135 1139]))                          )
                        (reparse-symbol indented_block_body) [1123 1165])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        - *axes* : the Axes instance containing the spine
        - *spine_type* : a string specifying the spine type
        - *path* : the path instance used to draw the spine

        Valid kwargs are:
        %(Patch)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [1258 1496])
                            ("super" code nil (reparse-symbol indented_block_body) [1505 1541])
                            ("self" variable nil (reparse-symbol indented_block_body) [1550 1566])
                            ("self" code nil (reparse-symbol indented_block_body) [1575 1608])
                            ("self" variable nil (reparse-symbol indented_block_body) [1617 1645])
                            ("self" code nil (reparse-symbol indented_block_body) [1654 1680])
                            ("self" code nil (reparse-symbol indented_block_body) [1689 1737])
                            ("self" code nil (reparse-symbol indented_block_body) [1746 1792])
                            ("self" variable nil (reparse-symbol indented_block_body) [1801 1817])
                            ("self" code nil (reparse-symbol indented_block_body) [1827 1847])
                            ("self" code nil (reparse-symbol indented_block_body) [1856 1895])
                            ("self" variable nil (reparse-symbol indented_block_body) [1925 1944])
                            ("self" variable nil (reparse-symbol indented_block_body) [1970 1996])
                            ("self" variable nil (reparse-symbol indented_block_body) [2213 2234])
                            ("assert" code nil (reparse-symbol indented_block_body) [2243 2287])
                            ("self" variable nil (reparse-symbol indented_block_body) [2296 2313])
                            ("self" variable nil (reparse-symbol indented_block_body) [2620 2645])
                            ("self" variable nil (reparse-symbol indented_block_body) [2777 2832]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1213 1217])
                            ("axes" variable nil (reparse-symbol function_parameters) [1218 1222])
                            ("spine_type" variable nil (reparse-symbol function_parameters) [1223 1233])
                            ("path" variable nil (reparse-symbol function_parameters) [1234 1238])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1239 1247]))                          
                        :documentation "
        - *axes* : the Axes instance containing the spine
        - *spine_type* : a string specifying the spine type
        - *path* : the path instance used to draw the spine

        Valid kwargs are:
        %(Patch)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1170 2833])
                    ("set_smart_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2859 2863])
                            ("value" variable nil (reparse-symbol function_parameters) [2864 2869]))                          
                        :documentation "set the spine and associated axis to have smart bounds")
                        (reparse-symbol indented_block_body) [2838 3219])
                    ("get_smart_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3245 3249]))                          
                        :documentation "get whether the spine has smart bounds")
                        (reparse-symbol indented_block_body) [3224 3339])
                    ("set_patch_circle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3365 3369])
                            ("center" variable nil (reparse-symbol function_parameters) [3370 3376])
                            ("radius" variable nil (reparse-symbol function_parameters) [3377 3383]))                          
                        :documentation "set the spine to be circular")
                        (reparse-symbol indented_block_body) [3344 3663])
                    ("set_patch_line" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3687 3691]))                          
                        :documentation "set the spine to be linear")
                        (reparse-symbol indented_block_body) [3668 3769])
                    ("_recompute_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3844 3848]))                          
                        :documentation "NOTE: This cannot be called until after this has been added
                 to an Axes, otherwise unit conversion will fail. This
                 maxes it very important to call the accessor method and
                 not directly access the transformation member variable.
        ")
                        (reparse-symbol indented_block_body) [3819 4583])
                    ("get_patch_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4612 4616]))                          )
                        (reparse-symbol indented_block_body) [4588 4814])
                    ("get_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4832 4836]))                          )
                        (reparse-symbol indented_block_body) [4819 4865])
                    ("_ensure_position_is_set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4898 4902]))                          )
                        (reparse-symbol indented_block_body) [4870 5074])
                    ("register_axis" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5097 5101])
                            ("axis" variable nil (reparse-symbol function_parameters) [5102 5106]))                          
                        :documentation "register an axis

        An axis should be registered with its corresponding spine from
        the Axes instance. This allows the spine to clear any axis
        properties when needed.
        ")
                        (reparse-symbol indented_block_body) [5079 5407])
                    ("cla" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5420 5424]))                          )
                        (reparse-symbol indented_block_body) [5412 5570])
                    ("is_frame_like" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5593 5597]))                          
                        :documentation "return True if directly on axes frame

        This is useful for determining if a spine is the edge of an
        old style MPL plot. If so, this function will return True.
        ")
                        (reparse-symbol indented_block_body) [5575 6280])
                    ("_adjust_location" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6306 6310]))                          
                        :documentation "automatically set spine bounds to the view interval")
                        (reparse-symbol indented_block_body) [6285 9514])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9553 9557])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9559 9567]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [9519 9652])
                    ("_calc_offset_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9684 9688]))                          
                        :documentation "calculate the offset transform performed by the spine")
                        (reparse-symbol indented_block_body) [9657 12777])
                    ("set_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12799 12803])
                            ("position" variable nil (reparse-symbol function_parameters) [12804 12812]))                          
                        :documentation "set the position of the spine

        Spine position is specified by a 2 tuple of (position type,
        amount). The position types are:

        * 'outward' : place the spine out from the data area by the
          specified number of points. (Negative values specify placing the
          spine inward.)

        * 'axes' : place the spine at the specified Axes coordinate (from
          0.0-1.0).

        * 'data' : place the spine at the specified data coordinate.

        Additionally, shorthand notations define a special positions:

        * 'center' -> ('axes',0.5)
        * 'zero' -> ('data', 0.0)

        ")
                        (reparse-symbol indented_block_body) [12782 14269])
                    ("get_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14291 14295]))                          
                        :documentation "get the spine position")
                        (reparse-symbol indented_block_body) [14274 14404])
                    ("get_spine_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14433 14437]))                          
                        :documentation "get the spine transform")
                        (reparse-symbol indented_block_body) [14409 15842])
                    ("set_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15863 15867])
                            ("low" variable nil (reparse-symbol function_parameters) [15869 15872])
                            ("high" variable nil (reparse-symbol function_parameters) [15874 15878]))                          
                        :documentation "Set the bounds of the spine.")
                        (reparse-symbol indented_block_body) [15847 16103])
                    ("get_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16124 16128]))                          
                        :documentation "Get the bounds of the spine.")
                        (reparse-symbol indented_block_body) [16108 16203])
                    ("linear_spine" function
                       (:documentation "
        (staticmethod) Returns a linear :class:`Spine`.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [16242 16245])
                            ("axes" variable nil (reparse-symbol function_parameters) [16247 16251])
                            ("spine_type" variable nil (reparse-symbol function_parameters) [16253 16263])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [16265 16273]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16208 16936])
                    ("circular_spine" function
                       (:documentation "
        (staticmethod) Returns a circular :class:`Spine`.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [16977 16980])
                            ("axes" variable nil (reparse-symbol function_parameters) [16981 16985])
                            ("center" variable nil (reparse-symbol function_parameters) [16986 16992])
                            ("radius" variable nil (reparse-symbol function_parameters) [16993 16999])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17000 17008]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16941 17284])
                    ("set_color" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17303 17307])
                            ("c" variable nil (reparse-symbol function_parameters) [17309 17310]))                          
                        :documentation "
        Set the edgecolor.

        ACCEPTS: matplotlib color arg or sequence of rgba tuples

        .. seealso::

            :meth:`set_facecolor`, :meth:`set_edgecolor`
               For setting the edge or face color individually.
        ")
                        (reparse-symbol indented_block_body) [17289 17724]))                  
                :type "class")
                nil [420 17724]))          
      :file "spines.py"
      :pointmax 17724
      :fsize 17723
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Support for plotting vector fields.

Presently this contains Quiver and Barb. Quiver plots an arrow in the
direction of the vector, with the size of the arrow related to the
magnitude of the vector.

Barbs are like quiver in that they point along a vector, but
the magnitude of the vector is given schematically by the presence of barbs
or flags on the barb.

This will also become a home for things such as standard
deviation ellipses, which can and will be derived very easily from
the Quiver code.
\"\"\"" code nil nil [1 509])
            ("numpy" include nil nil [512 530])
            ("numpy" include nil nil [531 551])
            ("matplotlib.collections" include nil nil [552 596])
            ("matplotlib.transforms" include nil nil [597 639])
            ("matplotlib.text" include nil nil [640 671])
            ("matplotlib.artist" include nil nil [672 707])
            ("matplotlib.artist" include nil nil [708 757])
            ("matplotlib" include nil nil [758 790])
            ("matplotlib.font_manager" include nil nil [791 837])
            ("matplotlib.cbook" include nil nil [838 870])
            ("matplotlib.cbook" include nil nil [871 920])
            ("matplotlib.patches" include nil nil [921 965])
            ("math" include nil nil [966 977])
            ("_quiver_doc" code nil nil [980 5460])
            ("_quiverkey_doc" variable nil nil [5462 7275])
            ("QuiverKey" type
               (:documentation " Labelled arrow for use as a quiver plot scale key."
                :superclasses ("martist.Artist")
                :members 
                  ( ("halign" variable nil (reparse-symbol indented_block_body) [7377 7445])
                    ("valign" variable nil (reparse-symbol indented_block_body) [7450 7519])
                    ("pivot" variable nil (reparse-symbol indented_block_body) [7524 7591])
                    ("__init__" function
                       (:suite 
                          ( ("martist" code nil (reparse-symbol indented_block_body) [7650 7679])
                            ("self" variable nil (reparse-symbol indented_block_body) [7688 7698])
                            ("self" variable nil (reparse-symbol indented_block_body) [7707 7717])
                            ("self" variable nil (reparse-symbol indented_block_body) [7726 7736])
                            ("self" variable nil (reparse-symbol indented_block_body) [7745 7755])
                            ("self" variable nil (reparse-symbol indented_block_body) [7764 7806])
                            ("self" variable nil (reparse-symbol indented_block_body) [7815 7849])
                            ("self" variable nil (reparse-symbol indented_block_body) [7858 7876])
                            ("self" variable nil (reparse-symbol indented_block_body) [7885 7932])
                            ("self" variable nil (reparse-symbol indented_block_body) [7941 7998])
                            ("on_dpi_change" function (:arguments 
                              ( ("fig" variable nil (reparse-symbol function_parameters) [8026 8029]))                              ) (reparse-symbol indented_block_body) [8008 8160])
                            ("Q" code nil (reparse-symbol indented_block_body) [8301 8360])
                            ("self" variable nil (reparse-symbol indented_block_body) [8370 8409])
                            ("self" variable nil (reparse-symbol indented_block_body) [8418 8462])
                            ("self" variable nil (reparse-symbol indented_block_body) [8471 8525])
                            ("self" variable nil (reparse-symbol indented_block_body) [8534 8546])
                            ("_fp" variable nil (reparse-symbol indented_block_body) [8555 8580])
                            ("self" variable nil (reparse-symbol indented_block_body) [8631 8902])
                            ("if" code nil (reparse-symbol indented_block_body) [8911 8992])
                            ("self" variable nil (reparse-symbol indented_block_body) [9000 9025])
                            ("self" code nil (reparse-symbol indented_block_body) [9034 9062]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7610 7614])
                            ("Q" variable nil (reparse-symbol function_parameters) [7616 7617])
                            ("X" variable nil (reparse-symbol function_parameters) [7619 7620])
                            ("Y" variable nil (reparse-symbol function_parameters) [7622 7623])
                            ("U" variable nil (reparse-symbol function_parameters) [7625 7626])
                            ("label" variable nil (reparse-symbol function_parameters) [7628 7633])
                            ("kw" variable nil (reparse-symbol function_parameters) [7635 7639]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7597 9063])
                    ("__init__" variable nil (reparse-symbol indented_block_body) [9069 9102])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9118 9122]))                          )
                        (reparse-symbol indented_block_body) [9108 10113])
                    ("_text_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10130 10134])
                            ("x" variable nil (reparse-symbol function_parameters) [10136 10137]))                          )
                        (reparse-symbol indented_block_body) [10118 10317])
                    ("_text_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10334 10338])
                            ("y" variable nil (reparse-symbol function_parameters) [10340 10341]))                          )
                        (reparse-symbol indented_block_body) [10322 10521])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10560 10564])
                            ("renderer" variable nil (reparse-symbol function_parameters) [10566 10574]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10526 10818])
                    ("_set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10843 10847]))                          )
                        (reparse-symbol indented_block_body) [10824 11293])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11313 11317])
                            ("fig" variable nil (reparse-symbol function_parameters) [11319 11322]))                          )
                        (reparse-symbol indented_block_body) [11298 11404])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11422 11426])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [11428 11438]))                          )
                        (reparse-symbol indented_block_body) [11409 11707])
                    ("quiverkey_doc" variable nil (reparse-symbol indented_block_body) [11712 11742]))                  
                :type "class")
                nil [7278 11743])
            ("_parse_args" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [11938 11943]))              ) nil [11922 12693])
            ("Quiver" type
               (:documentation "
    Specialized PolyCollection for arrows.

    The only API method is set_UVC(), which can be used
    to change the size, orientation, and color of the
    arrows; their locations are fixed when the class is
    instantiated.  Possibly this method will be useful
    in animations.

    Much of the work in this class is done in the draw()
    method so that as much information as possible is available
    about the plot.  In subsequent draw() calls, recalculation
    is limited to things that might have changed, so there
    should be no performance penalty from putting the calculations
    in the draw() method.
    "
                :superclasses ("collections.PolyCollection")
                :members 
                  ( ("" code nil (reparse-symbol indented_block_body) [13402 13415])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The constructor takes one required argument, an Axes
        instance, followed by the args and kwargs described
        by the following pylab interface documentation:
        %s
        \"\"\"" code nil (reparse-symbol indented_block_body) [13465 13668])
                            ("self" variable nil (reparse-symbol indented_block_body) [13677 13689])
                            ("X, Y, U, V, C" code nil (reparse-symbol indented_block_body) [13698 13732])
                            ("self" variable nil (reparse-symbol indented_block_body) [13741 13751])
                            ("self" variable nil (reparse-symbol indented_block_body) [13760 13770])
                            ("self" variable nil (reparse-symbol indented_block_body) [13779 13834])
                            ("self" variable nil (reparse-symbol indented_block_body) [13843 13858])
                            ("self" variable nil (reparse-symbol indented_block_body) [13867 13901])
                            ("self" variable nil (reparse-symbol indented_block_body) [13910 13949])
                            ("self" variable nil (reparse-symbol indented_block_body) [13958 14006])
                            ("self" variable nil (reparse-symbol indented_block_body) [14015 14066])
                            ("self" variable nil (reparse-symbol indented_block_body) [14075 14112])
                            ("self" variable nil (reparse-symbol indented_block_body) [14121 14160])
                            ("self" variable nil (reparse-symbol indented_block_body) [14169 14206])
                            ("self" variable nil (reparse-symbol indented_block_body) [14215 14261])
                            ("self" variable nil (reparse-symbol indented_block_body) [14270 14306])
                            ("self" variable nil (reparse-symbol indented_block_body) [14315 14349])
                            ("self" variable nil (reparse-symbol indented_block_body) [14358 14391])
                            ("self" variable nil (reparse-symbol indented_block_body) [14400 14436])
                            ("kw" code nil (reparse-symbol indented_block_body) [14445 14484])
                            ("kw" code nil (reparse-symbol indented_block_body) [14493 14526])
                            ("collections" code nil (reparse-symbol indented_block_body) [14535 14775])
                            ("self" variable nil (reparse-symbol indented_block_body) [14784 14800])
                            ("self" code nil (reparse-symbol indented_block_body) [14809 14830])
                            ("self" variable nil (reparse-symbol indented_block_body) [14839 14864])
                            ("self" variable nil (reparse-symbol indented_block_body) [14874 14892])
                            ("self" variable nil (reparse-symbol indented_block_body) [14901 14920])
                            ("on_dpi_change" function (:arguments 
                              ( ("fig" variable nil (reparse-symbol function_parameters) [14948 14951]))                              ) (reparse-symbol indented_block_body) [14930 15147])
                            ("self" code nil (reparse-symbol indented_block_body) [15288 15350]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13433 13437])
                            ("ax" variable nil (reparse-symbol function_parameters) [13439 13441])
                            ("args" variable nil (reparse-symbol function_parameters) [13443 13448])
                            ("kw" variable nil (reparse-symbol function_parameters) [13450 13454]))                          
                        :documentation "
        The constructor takes one required argument, an Axes
        instance, followed by the args and kwargs described
        by the following pylab interface documentation:
        %s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13420 15351])
                    ("_init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15367 15371]))                          
                        :documentation "
        Initialization delayed until first draw;
        allow time for axes setup.
        ")
                        (reparse-symbol indented_block_body) [15357 16029])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16068 16072])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16074 16082]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16034 16401])
                    ("set_UVC" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16418 16422])
                            ("U" variable nil (reparse-symbol function_parameters) [16424 16425])
                            ("V" variable nil (reparse-symbol function_parameters) [16427 16428])
                            ("C" variable nil (reparse-symbol function_parameters) [16430 16431]))                          )
                        (reparse-symbol indented_block_body) [16406 17070])
                    ("_dots_per_unit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17094 17098])
                            ("units" variable nil (reparse-symbol function_parameters) [17100 17105]))                          
                        :documentation "
        Return a scale factor for converting from units to pixels
        ")
                        (reparse-symbol indented_block_body) [17075 18163])
                    ("_set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18187 18191]))                          
                        :documentation "
        Sets the PolygonCollection transform to go
        from arrow width units to pixels.
        ")
                        (reparse-symbol indented_block_body) [18168 18520])
                    ("_angles_lengths" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18545 18549])
                            ("U" variable nil (reparse-symbol function_parameters) [18551 18552])
                            ("V" variable nil (reparse-symbol function_parameters) [18554 18555])
                            ("eps" variable nil (reparse-symbol function_parameters) [18557 18560]))                          )
                        (reparse-symbol indented_block_body) [18525 18898])
                    ("_make_verts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18921 18925])
                            ("U" variable nil (reparse-symbol function_parameters) [18927 18928])
                            ("V" variable nil (reparse-symbol function_parameters) [18930 18931]))                          )
                        (reparse-symbol indented_block_body) [18905 21461])
                    ("_h_arrows" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21481 21485])
                            ("length" variable nil (reparse-symbol function_parameters) [21487 21493]))                          
                        :documentation " length is in arrow width units ")
                        (reparse-symbol indented_block_body) [21467 23989])
                    ("quiver_doc" variable nil (reparse-symbol indented_block_body) [23994 24018]))                  
                :type "class")
                nil [12695 24019])
            ("_barbs_doc" code nil nil [24020 29074])
            ("docstring" code nil nil [29076 29122])
            ("Barbs" type
               (:superclasses ("collections.PolyCollection")
                :members 
                  ( ("'''
    Specialized PolyCollection for barbs.

    The only API method is :meth:`set_UVC`, which can be used to
    change the size, orientation, and color of the arrows.  Locations
    are changed using the :meth:`set_offsets` collection method.
    Possibly this method will be useful in animations.

    There is one internal function :meth:`_find_tails` which finds
    exactly what should be put on the barb given the vector magnitude.
    From there :meth:`_make_barbs` is used to find the vertices of the
    polygon to represent the barb based on this information.
    '''" code nil (reparse-symbol indented_block_body) [29169 29749])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        The constructor takes one required argument, an Axes
        instance, followed by the args and kwargs described
        by the following pylab interface documentation:
        %(barbs_doc)s
        \"\"\"" code nil (reparse-symbol indented_block_body) [29990 30204])
                            ("self" variable nil (reparse-symbol indented_block_body) [30213 30249])
                            ("self" variable nil (reparse-symbol indented_block_body) [30258 30292])
                            ("barbcolor" variable nil (reparse-symbol indented_block_body) [30301 30338])
                            ("flagcolor" variable nil (reparse-symbol indented_block_body) [30347 30384])
                            ("self" variable nil (reparse-symbol indented_block_body) [30393 30429])
                            ("self" variable nil (reparse-symbol indented_block_body) [30438 30483])
                            ("self" variable nil (reparse-symbol indented_block_body) [30492 30548])
                            ("self" variable nil (reparse-symbol indented_block_body) [30557 30597])
                            ("self" variable nil (reparse-symbol indented_block_body) [30606 30644])
                            ("if" code nil (reparse-symbol indented_block_body) [30911 31355])
                            ("x, y, u, v, c" code nil (reparse-symbol indented_block_body) [31441 31475])
                            ("self" variable nil (reparse-symbol indented_block_body) [31484 31494])
                            ("self" variable nil (reparse-symbol indented_block_body) [31503 31513])
                            ("xy" variable nil (reparse-symbol indented_block_body) [31522 31572])
                            ("barb_size" code nil (reparse-symbol indented_block_body) [31609 31640])
                            ("collections" code nil (reparse-symbol indented_block_body) [31673 31788])
                            ("self" code nil (reparse-symbol indented_block_body) [31797 31847])
                            ("self" code nil (reparse-symbol indented_block_body) [31857 31878]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29958 29962])
                            ("ax" variable nil (reparse-symbol function_parameters) [29964 29966])
                            ("args" variable nil (reparse-symbol function_parameters) [29968 29973])
                            ("kw" variable nil (reparse-symbol function_parameters) [29975 29979]))                          
                        :documentation "
        The constructor takes one required argument, an Axes
        instance, followed by the args and kwargs described
        by the following pylab interface documentation:
        %(barbs_doc)s
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29922 31879])
                    ("_find_tails" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31900 31904])
                            ("mag" variable nil (reparse-symbol function_parameters) [31906 31909])
                            ("rounding" variable nil (reparse-symbol function_parameters) [31911 31919])
                            ("half" variable nil (reparse-symbol function_parameters) [31926 31930])
                            ("full" variable nil (reparse-symbol function_parameters) [31934 31938])
                            ("flag" variable nil (reparse-symbol function_parameters) [31943 31947]))                          )
                        (reparse-symbol indented_block_body) [31884 33080])
                    ("_make_barbs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33101 33105])
                            ("u" variable nil (reparse-symbol function_parameters) [33107 33108])
                            ("v" variable nil (reparse-symbol function_parameters) [33110 33111])
                            ("nflags" variable nil (reparse-symbol function_parameters) [33113 33119])
                            ("nbarbs" variable nil (reparse-symbol function_parameters) [33121 33127])
                            ("half_barb" variable nil (reparse-symbol function_parameters) [33129 33138])
                            ("empty_flag" variable nil (reparse-symbol function_parameters) [33140 33150])
                            ("length" variable nil (reparse-symbol function_parameters) [33152 33158])
                            ("pivot" variable nil (reparse-symbol function_parameters) [33168 33173])
                            ("sizes" variable nil (reparse-symbol function_parameters) [33175 33180])
                            ("fill_empty" variable nil (reparse-symbol function_parameters) [33182 33192])
                            ("flip" variable nil (reparse-symbol function_parameters) [33194 33198]))                          )
                        (reparse-symbol indented_block_body) [33085 38832])
                    ("set_UVC" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38849 38853])
                            ("U" variable nil (reparse-symbol function_parameters) [38855 38856])
                            ("V" variable nil (reparse-symbol function_parameters) [38858 38859])
                            ("C" variable nil (reparse-symbol function_parameters) [38861 38862]))                          )
                        (reparse-symbol indented_block_body) [38837 39929])
                    ("set_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39950 39954])
                            ("xy" variable nil (reparse-symbol function_parameters) [39956 39958]))                          
                        :documentation "
        Set the offsets for the barb polygons.  This saves the offets passed in
        and actually sets version masked as appropriate for the existing U/V
        data. *offsets* should be a sequence.

        ACCEPTS: sequence of pairs of floats
        ")
                        (reparse-symbol indented_block_body) [39934 40499])
                    ("set_offsets" variable nil (reparse-symbol indented_block_body) [40503 40571])
                    ("barbs_doc" variable nil (reparse-symbol indented_block_body) [40577 40599]))                  
                :type "class")
                nil [29124 40600]))          
      :file "quiver.py"
      :pointmax 40600
      :fsize 40599
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Place a table below the x-axis at location loc.

The table consists of a grid of cells.

The grid need not be rectangular and can have holes.

Cells are added by specifying their row and column.

For the purposes of positioning the cell at (0, 0) is
assumed to be at the top left and the cell at (max_row, max_col)
is assumed to be at bottom right.

You can add additional cells outside this range to have convenient
ways of positioning more interesting grids.

Author    : John Gill <jng@europe.renre.com>
Copyright : 2004 John Gill and John Hunter
License   : matplotlib license

\"\"\"" code nil nil [1 590])
            ("__future__" include nil nil [591 622])
            ("warnings" include nil nil [623 638])
            ("artist" include nil nil [640 653])
            ("artist" include nil nil [654 700])
            ("patches" include nil nil [701 730])
            ("cbook" include nil nil [731 763])
            ("matplotlib" include nil nil [764 796])
            ("text" include nil nil [797 818])
            ("transforms" include nil nil [819 846])
            ("Cell" type
               (:documentation "
    A cell is a Rectangle with some associated text.

    "
                :superclasses ("Rectangle")
                :members 
                  ( ("PAD" variable nil (reparse-symbol indented_block_body) [947 956])
                    ("__init__" function
                       (:suite 
                          ( ("Rectangle" code nil (reparse-symbol indented_block_body) [1252 1386])
                            ("self" code nil (reparse-symbol indented_block_body) [1395 1418])
                            ("if" code nil (reparse-symbol indented_block_body) [1457 1487])
                            ("self" variable nil (reparse-symbol indented_block_body) [1495 1510])
                            ("self" variable nil (reparse-symbol indented_block_body) [1519 1622])
                            ("self" code nil (reparse-symbol indented_block_body) [1631 1660]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1013 1017])
                            ("xy" variable nil (reparse-symbol function_parameters) [1019 1021])
                            ("width" variable nil (reparse-symbol function_parameters) [1023 1028])
                            ("height" variable nil (reparse-symbol function_parameters) [1030 1036])
                            ("edgecolor" variable nil (reparse-symbol function_parameters) [1055 1064])
                            ("facecolor" variable nil (reparse-symbol function_parameters) [1070 1079])
                            ("fill" variable nil (reparse-symbol function_parameters) [1102 1106])
                            ("text" variable nil (reparse-symbol function_parameters) [1130 1134])
                            ("loc" variable nil (reparse-symbol function_parameters) [1156 1159])
                            ("fontproperties" variable nil (reparse-symbol function_parameters) [1183 1197]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1000 1661])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1685 1689])
                            ("trans" variable nil (reparse-symbol function_parameters) [1691 1696]))                          )
                        (reparse-symbol indented_block_body) [1667 1744])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1811 1815])
                            ("fig" variable nil (reparse-symbol function_parameters) [1817 1820]))                          )
                        (reparse-symbol indented_block_body) [1796 1898])
                    ("get_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1916 1920]))                          )
                        (reparse-symbol indented_block_body) [1903 1988])
                    ("set_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2010 2014])
                            ("size" variable nil (reparse-symbol function_parameters) [2016 2020]))                          )
                        (reparse-symbol indented_block_body) [1993 2061])
                    ("get_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2083 2087]))                          )
                        (reparse-symbol indented_block_body) [2066 2166])
                    ("auto_set_font_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2194 2198])
                            ("renderer" variable nil (reparse-symbol function_parameters) [2200 2208]))                          
                        :documentation " Shrink font size until text fits. ")
                        (reparse-symbol indented_block_body) [2171 2561])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2600 2604])
                            ("renderer" variable nil (reparse-symbol function_parameters) [2606 2614]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2566 2832])
                    ("_set_text_position" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2860 2864])
                            ("renderer" variable nil (reparse-symbol function_parameters) [2866 2874]))                          
                        :documentation " Set text up so it draws in the right place.

        Currently support 'left', 'center' and 'right'
        ")
                        (reparse-symbol indented_block_body) [2837 3632])
                    ("get_text_bounds" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3657 3661])
                            ("renderer" variable nil (reparse-symbol function_parameters) [3663 3671]))                          
                        :documentation " Get text bounds in axes co-ordinates. ")
                        (reparse-symbol indented_block_body) [3637 3878])
                    ("get_required_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3906 3910])
                            ("renderer" variable nil (reparse-symbol function_parameters) [3912 3920]))                          
                        :documentation " Get width required for this cell. ")
                        (reparse-symbol indented_block_body) [3883 4066])
                    ("set_text_props" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4091 4095])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4097 4105]))                          )
                        (reparse-symbol indented_block_body) [4072 4191]))                  
                :type "class")
                nil [850 4191])
            ("Table" type
               (:documentation "
    Create a table of cells.

    Table can have (optional) row and column headers.

    Each entry in the table can be either text or patches.

    Column widths and row heights for the table can be specifified.

    Return value is a sequence of text, line and patch instances that make
    up the table
    "
                :superclasses ("Artist")
                :members 
                  ( ("codes" variable nil (reparse-symbol indented_block_body) [4539 5161])
                    ("FONTSIZE" variable nil (reparse-symbol indented_block_body) [5167 5180])
                    ("AXESPAD" variable nil (reparse-symbol indented_block_body) [5185 5199])
                    ("__init__" function
                       (:suite 
                          ( ("Artist" code nil (reparse-symbol indented_block_body) [5307 5328])
                            ("if" code nil (reparse-symbol indented_block_body) [5338 5559])
                            ("if" code nil (reparse-symbol indented_block_body) [5567 5620])
                            ("self" code nil (reparse-symbol indented_block_body) [5628 5654])
                            ("self" variable nil (reparse-symbol indented_block_body) [5663 5678])
                            ("self" variable nil (reparse-symbol indented_block_body) [5687 5702])
                            ("self" variable nil (reparse-symbol indented_block_body) [5711 5728])
                            ("self" code nil (reparse-symbol indented_block_body) [5764 5796])
                            ("self" variable nil (reparse-symbol indented_block_body) [5806 5822])
                            ("self" variable nil (reparse-symbol indented_block_body) [5831 5847])
                            ("self" variable nil (reparse-symbol indented_block_body) [5856 5875])
                            ("self" variable nil (reparse-symbol indented_block_body) [5884 5906])
                            ("self" variable nil (reparse-symbol indented_block_body) [5915 5940])
                            ("self" variable nil (reparse-symbol indented_block_body) [5950 5977]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5266 5270])
                            ("ax" variable nil (reparse-symbol function_parameters) [5272 5274])
                            ("loc" variable nil (reparse-symbol function_parameters) [5276 5279])
                            ("bbox" variable nil (reparse-symbol function_parameters) [5286 5290]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5253 5978])
                    ("add_cell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5996 6000])
                            ("row" variable nil (reparse-symbol function_parameters) [6002 6005])
                            ("col" variable nil (reparse-symbol function_parameters) [6007 6010])
                            ("args" variable nil (reparse-symbol function_parameters) [6012 6017])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6019 6027]))                          
                        :documentation " Add a cell to the table. ")
                        (reparse-symbol indented_block_body) [5983 6290])
                    ("_approx_text_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6319 6323]))                          )
                        (reparse-symbol indented_block_body) [6295 6405])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6444 6448])
                            ("renderer" variable nil (reparse-symbol function_parameters) [6450 6458]))                          
                        :decorators 
                          ( ("allow_rasterization" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6410 7099])
                    ("_get_grid_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7123 7127])
                            ("renderer" variable nil (reparse-symbol function_parameters) [7129 7137]))                          
                        :documentation "Get a bbox, in axes co-ordinates for the cells.

        Only include those in the range (0,0) to (maxRow, maxCol)")
                        (reparse-symbol indented_block_body) [7104 7523])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7541 7545])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [7546 7556]))                          
                        :documentation "Test whether the mouse event occurred in the table.

        Returns T/F, {}
        ")
                        (reparse-symbol indented_block_body) [7528 8232])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8254 8258]))                          )
                        (reparse-symbol indented_block_body) [8237 8349])
                    ("get_child_artists" variable nil (reparse-symbol indented_block_body) [8353 8385])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8439 8443])
                            ("renderer" variable nil (reparse-symbol function_parameters) [8445 8453]))                          )
                        (reparse-symbol indented_block_body) [8417 8620])
                    ("_do_cell_alignment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8648 8652]))                          
                        :documentation " Calculate row heights and column widths.

        Position cells accordingly.
        ")
                        (reparse-symbol indented_block_body) [8625 9687])
                    ("auto_set_column_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9718 9722])
                            ("col" variable nil (reparse-symbol function_parameters) [9724 9727]))                          )
                        (reparse-symbol indented_block_body) [9692 9769])
                    ("_auto_set_column_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9801 9805])
                            ("col" variable nil (reparse-symbol function_parameters) [9807 9810])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9812 9820]))                          
                        :documentation " Automagically set width for column.
        ")
                        (reparse-symbol indented_block_body) [9774 10217])
                    ("auto_set_font_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10245 10249])
                            ("value" variable nil (reparse-symbol function_parameters) [10251 10256]))                          
                        :documentation " Automatically set font size. ")
                        (reparse-symbol indented_block_body) [10222 10344])
                    ("_auto_set_font_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10373 10377])
                            ("renderer" variable nil (reparse-symbol function_parameters) [10379 10387]))                          )
                        (reparse-symbol indented_block_body) [10349 10916])
                    ("scale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10931 10935])
                            ("xscale" variable nil (reparse-symbol function_parameters) [10937 10943])
                            ("yscale" variable nil (reparse-symbol function_parameters) [10945 10951]))                          
                        :documentation " Scale column widths by xscale and row heights by yscale. ")
                        (reparse-symbol indented_block_body) [10921 11168])
                    ("set_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11190 11194])
                            ("size" variable nil (reparse-symbol function_parameters) [11196 11200]))                          
                        :documentation "
        Set the fontsize of the cell text

        ACCEPTS: a float in points
        ")
                        (reparse-symbol indented_block_body) [11173 11388])
                    ("_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11405 11409])
                            ("ox" variable nil (reparse-symbol function_parameters) [11411 11413])
                            ("oy" variable nil (reparse-symbol function_parameters) [11415 11417]))                          )
                        (reparse-symbol indented_block_body) [11393 11610])
                    ("_update_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11637 11641])
                            ("renderer" variable nil (reparse-symbol function_parameters) [11643 11651]))                          )
                        (reparse-symbol indented_block_body) [11615 13620])
                    ("get_celld" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13640 13644]))                          )
                        (reparse-symbol indented_block_body) [13626 13720]))                  
                :type "class")
                nil [4192 13720])
            ("table" function
               (:documentation "
    TABLE(cellText=None, cellColours=None,
          cellLoc='right', colWidths=None,
          rowLabels=None, rowColours=None, rowLoc='left',
          colLabels=None, colColours=None, colLoc='center',
          loc='bottom', bbox=None)

    Factory function to generate a Table instance.

    Thanks to John Gill for providing the class and table.
    "
                :arguments 
                  ( ("ax" variable nil (reparse-symbol function_parameters) [13731 13733])
                    ("cellText" variable nil (reparse-symbol function_parameters) [13739 13747])
                    ("cellColours" variable nil (reparse-symbol function_parameters) [13754 13765])
                    ("cellLoc" variable nil (reparse-symbol function_parameters) [13776 13783])
                    ("colWidths" variable nil (reparse-symbol function_parameters) [13793 13802])
                    ("rowLabels" variable nil (reparse-symbol function_parameters) [13813 13822])
                    ("rowColours" variable nil (reparse-symbol function_parameters) [13829 13839])
                    ("rowLoc" variable nil (reparse-symbol function_parameters) [13846 13852])
                    ("colLabels" variable nil (reparse-symbol function_parameters) [13865 13874])
                    ("colColours" variable nil (reparse-symbol function_parameters) [13881 13891])
                    ("colLoc" variable nil (reparse-symbol function_parameters) [13898 13904])
                    ("loc" variable nil (reparse-symbol function_parameters) [13919 13922])
                    ("bbox" variable nil (reparse-symbol function_parameters) [13933 13937]))                  )
                nil [13721 16815])
            ("docstring" code nil nil [16817 16868]))          
      :file "table.py"
      :pointmax 16869
      :fsize 16868
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("matplotlib.cbook" include nil nil [1 33])
            ("Container" type
               (:documentation "
    Base class for containers.
    "
                :superclasses ("tuple")
                :members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124 128]))                          )
                        (reparse-symbol indented_block_body) [111 195])
                    ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [212 215])
                        ("kl" variable nil (reparse-symbol function_parameters) [217 220])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [222 230]))                      ) (reparse-symbol indented_block_body) [200 274])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [324 345])
                            ("self" variable nil (reparse-symbol indented_block_body) [386 399])
                            ("self" variable nil (reparse-symbol indented_block_body) [426 450])
                            ("self" variable nil (reparse-symbol indented_block_body) [488 514])
                            ("self" code nil (reparse-symbol indented_block_body) [524 545]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [292 296])
                            ("kl" variable nil (reparse-symbol function_parameters) [298 300])
                            ("label" variable nil (reparse-symbol function_parameters) [302 307]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [279 546])
                    ("set_remove_method" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [573 577])
                            ("f" variable nil (reparse-symbol function_parameters) [579 580]))                          )
                        (reparse-symbol indented_block_body) [551 615])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [631 635]))                          )
                        (reparse-symbol indented_block_body) [620 751])
                    ("get_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [770 774]))                          
                        :documentation "
        Get the label used for this artist in the legend.
        ")
                        (reparse-symbol indented_block_body) [756 886])
                    ("set_label" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [905 909])
                            ("s" variable nil (reparse-symbol function_parameters) [911 912]))                          
                        :documentation "
        Set the label to *s* for auto legend.

        ACCEPTS: any string
        ")
                        (reparse-symbol indented_block_body) [891 1062])
                    ("add_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1084 1088])
                            ("func" variable nil (reparse-symbol function_parameters) [1090 1094]))                          
                        :documentation "
        Adds a callback function that will be called whenever one of
        the :class:`Artist`'s properties changes.

        Returns an *id* that is useful for removing the callback with
        :meth:`remove_callback` later.
        ")
                        (reparse-symbol indented_block_body) [1067 1456])
                    ("remove_callback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1481 1485])
                            ("oid" variable nil (reparse-symbol function_parameters) [1487 1490]))                          
                        :documentation "
        Remove a callback based on its *id*.

        .. seealso::

            :meth:`add_callback`
               For adding callbacks

        ")
                        (reparse-symbol indented_block_body) [1461 1727])
                    ("pchanged" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1745 1749]))                          
                        :documentation "
        Fire an event when property changed, calling all of the
        registered callbacks.
        ")
                        (reparse-symbol indented_block_body) [1732 1947])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1969 1973]))                          )
                        (reparse-symbol indented_block_body) [1952 2017]))                  
                :type "class")
                nil [35 2017])
            ("BarContainer" type
               (:superclasses ("Container")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2117 2139])
                            ("self" variable nil (reparse-symbol indented_block_body) [2148 2172])
                            ("Container" code nil (reparse-symbol indented_block_body) [2181 2224]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2068 2072])
                            ("patches" variable nil (reparse-symbol function_parameters) [2074 2081])
                            ("errorbar" variable nil (reparse-symbol function_parameters) [2083 2091])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2098 2106]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2055 2225]))                  
                :type "class")
                nil [2019 2225])
            ("ErrorbarContainer" type
               (:superclasses ("Container")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2345 2363])
                            ("self" variable nil (reparse-symbol indented_block_body) [2372 2396])
                            ("self" variable nil (reparse-symbol indented_block_body) [2405 2429])
                            ("Container" code nil (reparse-symbol indented_block_body) [2438 2479]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2281 2285])
                            ("lines" variable nil (reparse-symbol function_parameters) [2287 2292])
                            ("has_xerr" variable nil (reparse-symbol function_parameters) [2294 2302])
                            ("has_yerr" variable nil (reparse-symbol function_parameters) [2310 2318])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2326 2334]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2268 2480]))                  
                :type "class")
                nil [2227 2480])
            ("StemContainer" type
               (:superclasses ("Container")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("markerline, stemlines, baseline" code nil (reparse-symbol indented_block_body) [2588 2651])
                            ("self" variable nil (reparse-symbol indented_block_body) [2660 2688])
                            ("self" variable nil (reparse-symbol indented_block_body) [2697 2723])
                            ("self" variable nil (reparse-symbol indented_block_body) [2732 2756])
                            ("Container" code nil (reparse-symbol indented_block_body) [2765 2830]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2532 2536])
                            ("markerline_stemlines_baseline" variable nil (reparse-symbol function_parameters) [2538 2567])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [2569 2577]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2519 2831]))                  
                :type "class")
                nil [2482 2831]))          
      :file "container.py"
      :pointmax 2833
      :fsize 2832
      :lastmodtime '(20373 43436 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Nothing here but dictionaries for generating LinearSegmentedColormaps,
and a dictionary of these dictionaries.

\"\"\"" code nil nil [1 120])
            ("numpy" include nil nil [122 140])
            ("_binary_data" variable nil nil [142 295])
            ("_bone_data" variable nil nil [297 461])
            ("_autumn_data" variable nil nil [464 634])
            ("_bone_data" variable nil nil [636 949])
            ("_cool_data" variable nil nil [951 1116])
            ("_copper_data" variable nil nil [1118 1331])
            ("_flag_data" variable nil nil [1333 1549])
            ("_prism_data" variable nil nil [1551 1779])
            ("cubehelix" function
               (:documentation "Return custom data dictionary of (r,g,b) conversion functions, which
    can be used with :func:`register_cmap`, for the cubehelix color scheme.

    Unlike most other color schemes cubehelix was designed by D.A. Green to
    be monotonically increasing in terms of perceived brightness.
    Also, when printed on a black and white postscript printer, the scheme
    results in a greyscale with monotonically increasing brightness.
    This color scheme is named cubehelix because the r,g,b values produced
    can be visualised as a squashed helix around the diagonal in the
    r,g,b color cube.

    For a unit color cube (i.e. 3-D coordinates for r,g,b each in the
    range 0 to 1) the color scheme starts at (r,g,b) = (0,0,0), i.e. black,
    and finishes at (r,g,b) = (1,1,1), i.e. white. For some fraction *x*,
    between 0 and 1, the color is the corresponding grey value at that
    fraction along the black to white diagonal (x,x,x) plus a color
    element. This color element is calculated in a plane of constant
    perceived intensity and controlled by the following parameters.

    Optional keyword arguments:

      =========   =======================================================
      Keyword     Description
      =========   =======================================================
      gamma       gamma factor to emphasise either low intensity values
                  (gamma < 1), or high intensity values (gamma > 1);
                  defaults to 1.0.
      s           the start color; defaults to 0.5 (i.e. purple).
      r           the number of r,g,b rotations in color that are made
                  from the start to the end of the color scheme; defaults
                  to -1.5 (i.e. -> B -> G -> R -> B).
      h           the hue parameter which controls how saturated the
                  colors are. If this parameter is zero then the color
                  scheme is purely a greyscale; defaults to 1.0.
      =========   =======================================================

    "
                :arguments 
                  ( ("gamma" variable nil (reparse-symbol function_parameters) [1795 1800])
                    ("s" variable nil (reparse-symbol function_parameters) [1806 1807])
                    ("r" variable nil (reparse-symbol function_parameters) [1813 1814])
                    ("h" variable nil (reparse-symbol function_parameters) [1821 1822]))                  )
                nil [1781 4563])
            ("_cubehelix_data" variable nil nil [4564 4593])
            ("_bwr_data" variable nil nil [4595 4658])
            ("_brg_data" variable nil nil [4659 4722])
            ("gfunc" variable nil nil [4752 6178])
            ("gfunc32" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6192 6193]))              ) nil [6180 6394])
            ("_gnuplot_data" variable nil nil [6395 6493])
            ("_gnuplot2_data" variable nil nil [6495 6596])
            ("_ocean_data" variable nil nil [6598 6695])
            ("_afmhot_data" variable nil nil [6697 6796])
            ("_rainbow_data" variable nil nil [6798 6898])
            ("_seismic_data" variable nil nil [6900 7026])
            ("_terrain_data" variable nil nil [7028 7245])
            ("_gray_data" variable nil nil [7247 7396])
            ("_hot_data" variable nil nil [7398 7715])
            ("_hsv_data" variable nil nil [7717 8682])
            ("_jet_data" variable nil nil [8684 9048])
            ("_pink_data" variable nil nil [9050 17313])
            ("_spring_data" variable nil nil [17315 17485])
            ("_summer_data" variable nil nil [17488 17662])
            ("_winter_data" variable nil nil [17665 17835])
            ("_spectral_data" variable nil nil [17837 20003])
            ("_Accent_data" variable nil nil [20327 21830])
            ("_Blues_data" variable nil nil [21832 23263])
            ("_BrBG_data" variable nil nil [23265 25371])
            ("_BuGn_data" variable nil nil [25373 26770])
            ("_BuPu_data" variable nil nil [26772 28202])
            ("_Dark2_data" variable nil nil [28204 29774])
            ("_GnBu_data" variable nil nil [29776 31242])
            ("_Greens_data" variable nil nil [31244 32642])
            ("_Greys_data" variable nil nil [32644 33915])
            ("_Oranges_data" variable nil nil [33917 35366])
            ("_OrRd_data" variable nil nil [35368 36668])
            ("_Paired_data" variable nil nil [36670 38922])
            ("_Pastel1_data" variable nil nil [38924 40323])
            ("_Pastel2_data" variable nil nil [40325 41855])
            ("_PiYG_data" variable nil nil [41857 43989])
            ("_PRGn_data" variable nil nil [43991 46051])
            ("_PuBu_data" variable nil nil [46053 47495])
            ("_PuBuGn_data" variable nil nil [47497 48941])
            ("_PuOr_data" variable nil nil [48943 51043])
            ("_PuRd_data" variable nil nil [51045 52445])
            ("_Purples_data" variable nil nil [52447 53878])
            ("_RdBu_data" variable nil nil [53880 55978])
            ("_RdGy_data" variable nil nil [55980 57972])
            ("_RdPu_data" variable nil nil [57974 59378])
            ("_RdYlBu_data" variable nil nil [59380 62040])
            ("_RdYlGn_data" variable nil nil [62042 64040])
            ("_Reds_data" variable nil nil [64042 65448])
            ("_Set1_data" variable nil nil [65450 66780])
            ("_Set2_data" variable nil nil [66782 68309])
            ("_Set3_data" variable nil nil [68311 70589])
            ("_Spectral_data" variable nil nil [70591 72665])
            ("_YlGn_data" variable nil nil [72667 74000])
            ("_YlGnBu_data" variable nil nil [74002 75410])
            ("_YlOrBr_data" variable nil nil [75412 76792])
            ("_YlOrRd_data" variable nil nil [76794 78094])
            ("_gist_earth_data" variable nil nil [78606 79714])
            ("_gist_gray_data" variable nil nil [79716 79815])
            ("_gist_heat_data" variable nil nil [79817 79947])
            ("_gist_ncar_data" variable nil nil [79949 81215])
            ("_gist_rainbow_data" variable nil nil [81217 81536])
            ("_gist_stern_data" variable nil nil [81538 81907])
            ("_gist_yarg_data" variable nil nil [81909 82029])
            ("_coolwarm_data" variable nil nil [82229 86620])
            ("datad" variable nil nil [86623 87360])
            ("datad" variable nil nil [87363 87391])
            ("datad" variable nil nil [87392 87418])
            ("datad" variable nil nil [87419 87443])
            ("datad" variable nil nil [87444 87468])
            ("datad" variable nil nil [87469 87493])
            ("datad" variable nil nil [87494 87520])
            ("datad" variable nil nil [87521 87545])
            ("datad" variable nil nil [87546 87574])
            ("datad" variable nil nil [87575 87601])
            ("datad" variable nil nil [87602 87632])
            ("datad" variable nil nil [87633 87657])
            ("datad" variable nil nil [87658 87686])
            ("datad" variable nil nil [87687 87717])
            ("datad" variable nil nil [87718 87748])
            ("datad" variable nil nil [87749 87773])
            ("datad" variable nil nil [87774 87798])
            ("datad" variable nil nil [87799 87823])
            ("datad" variable nil nil [87824 87852])
            ("datad" variable nil nil [87853 87877])
            ("datad" variable nil nil [87878 87902])
            ("datad" variable nil nil [87903 87933])
            ("datad" variable nil nil [87934 87958])
            ("datad" variable nil nil [87959 87983])
            ("datad" variable nil nil [87984 88008])
            ("datad" variable nil nil [88009 88037])
            ("datad" variable nil nil [88038 88066])
            ("datad" variable nil nil [88067 88091])
            ("datad" variable nil nil [88092 88116])
            ("datad" variable nil nil [88117 88141])
            ("datad" variable nil nil [88142 88166])
            ("datad" variable nil nil [88167 88199])
            ("datad" variable nil nil [88200 88224])
            ("datad" variable nil nil [88225 88253])
            ("datad" variable nil nil [88254 88282])
            ("datad" variable nil nil [88283 88311])
            ("datad" variable nil nil [88312 88348])
            ("datad" variable nil nil [88349 88383])
            ("datad" variable nil nil [88384 88418])
            ("datad" variable nil nil [88419 88453])
            ("datad" variable nil nil [88454 88494])
            ("datad" variable nil nil [88495 88531])
            ("datad" variable nil nil [88532 88566])
            ("datad" variable nil nil [88567 88599]))          
      :file "_cm.py"
      :pointmax 88600
      :fsize 88599
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
A module providing some utility functions regarding bezier path manipulation.
\"\"\"" code nil nil [1 86])
            ("numpy" include nil nil [89 107])
            ("math" include nil nil [108 129])
            ("matplotlib.path" include nil nil [131 163])
            ("operator" include nil nil [165 189])
            ("warnings" include nil nil [190 205])
            ("NonIntersectingPathException" type
               (:superclasses ("ValueError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [260 264]))                  
                :type "class")
                nil [208 265])
            ("get_intersection" function
               (:documentation " return a intersecting point between a line through (cx1, cy1)
    and having angle t1 and a line through (cx2, cy2) and angle t2.
    "
                :arguments 
                  ( ("cx1" variable nil (reparse-symbol function_parameters) [305 308])
                    ("cy1" variable nil (reparse-symbol function_parameters) [310 313])
                    ("cos_t1" variable nil (reparse-symbol function_parameters) [315 321])
                    ("sin_t1" variable nil (reparse-symbol function_parameters) [323 329])
                    ("cx2" variable nil (reparse-symbol function_parameters) [352 355])
                    ("cy2" variable nil (reparse-symbol function_parameters) [357 360])
                    ("cos_t2" variable nil (reparse-symbol function_parameters) [362 368])
                    ("sin_t2" variable nil (reparse-symbol function_parameters) [370 376]))                  )
                nil [284 1121])
            ("get_normal_points" function
               (:documentation "
    For a line passing through (*cx*, *cy*) and having a angle *t*,
    return locations of the two points located along its perpendicular line at the distance of *length*.
    "
                :arguments 
                  ( ("cx" variable nil (reparse-symbol function_parameters) [1146 1148])
                    ("cy" variable nil (reparse-symbol function_parameters) [1150 1152])
                    ("cos_t" variable nil (reparse-symbol function_parameters) [1154 1159])
                    ("sin_t" variable nil (reparse-symbol function_parameters) [1161 1166])
                    ("length" variable nil (reparse-symbol function_parameters) [1168 1174]))                  )
                nil [1124 1621])
            ("_de_casteljau1" function (:arguments 
              ( ("beta" variable nil (reparse-symbol function_parameters) [1778 1782])
                ("t" variable nil (reparse-symbol function_parameters) [1784 1785]))              ) nil [1759 1858])
            ("split_de_casteljau" function
               (:documentation "split a bezier segment defined by its controlpoints *beta*
    into two separate segment divided at *t* and return their control points.

    "
                :arguments 
                  ( ("beta" variable nil (reparse-symbol function_parameters) [1882 1886])
                    ("t" variable nil (reparse-symbol function_parameters) [1888 1889]))                  )
                nil [1859 2369])
            ("find_bezier_t_intersecting_with_closedpath" function
               (:documentation " Find a parameter t0 and t1 of the given bezier path which
    bounds the intersecting points with a provided closed
    path(*inside_closedpath*). Search starts from *t0* and *t1* and it
    uses a simple bisecting algorithm therefore one of the end point
    must be inside the path while the orther doesn't. The search stop
    when |t0-t1| gets smaller than the given tolerence.
    value for

    - bezier_point_at_t : a function which returns x, y coordinates at *t*

    - inside_closedpath : return True if the point is insed the path

    "
                :arguments 
                  ( ("bezier_point_at_t" variable nil (reparse-symbol function_parameters) [2423 2440])
                    ("inside_closedpath" variable nil (reparse-symbol function_parameters) [2442 2459])
                    ("t0" variable nil (reparse-symbol function_parameters) [2508 2510])
                    ("t1" variable nil (reparse-symbol function_parameters) [2515 2517])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [2522 2531]))                  )
                nil [2376 4012])
            ("BezierSegment" type
               (:documentation "
    A simple class of a 2-dimensional bezier segment
    "
                :members 
                  ( ("_binom_coeff" variable nil (reparse-symbol indented_block_body) [4209 4342])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *control_points* : location of contol points. It needs have a
         shpae of n * 2, where n is the order of the bezier line. 1<=
         n <= 3 is supported.
        \"\"\"" code nil (reparse-symbol indented_block_body) [4392 4577])
                            ("_o" variable nil (reparse-symbol indented_block_body) [4586 4610])
                            ("self" variable nil (reparse-symbol indented_block_body) [4619 4647])
                            ("_coeff" variable nil (reparse-symbol indented_block_body) [4656 4699])
                            ("_control_points" variable nil (reparse-symbol indented_block_body) [4709 4753])
                            ("xx" variable nil (reparse-symbol indented_block_body) [4762 4787])
                            ("yy" variable nil (reparse-symbol indented_block_body) [4796 4821])
                            ("self" code nil (reparse-symbol indented_block_body) [4831 4853])
                            ("self" code nil (reparse-symbol indented_block_body) [4862 4884]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4361 4365])
                            ("control_points" variable nil (reparse-symbol function_parameters) [4367 4381]))                          
                        :documentation "
        *control_points* : location of contol points. It needs have a
         shpae of n * 2, where n is the order of the bezier line. 1<=
         n <= 3 is supported.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4348 4885])
                    ("point_at_t" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4905 4909])
                            ("t" variable nil (reparse-symbol function_parameters) [4911 4912]))                          )
                        (reparse-symbol indented_block_body) [4890 5187]))                  
                :type "class")
                nil [4017 5187])
            ("split_bezier_intersecting_with_closedpath" function
               (:documentation "
    bezier : control points of the bezier segment
    inside_closedpath : a function which returns true if the point is inside the path
    "
                :arguments 
                  ( ("bezier" variable nil (reparse-symbol function_parameters) [5235 5241])
                    ("inside_closedpath" variable nil (reparse-symbol function_parameters) [5289 5306])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [5354 5363]))                  )
                nil [5189 5907])
            ("find_r_to_boundary_of_closedpath" function
               (:documentation "
    Find a radius r (centered at *xy*) between *rmin* and *rmax* at
    which it intersect with the path.

    inside_closedpath : function
    cx, cy : center
    cos_t, sin_t : cosine and sine for the angle
    rmin, rmax :
    "
                :arguments 
                  ( ("inside_closedpath" variable nil (reparse-symbol function_parameters) [5947 5964])
                    ("xy" variable nil (reparse-symbol function_parameters) [5966 5968])
                    ("cos_t" variable nil (reparse-symbol function_parameters) [6007 6012])
                    ("sin_t" variable nil (reparse-symbol function_parameters) [6014 6019])
                    ("rmin" variable nil (reparse-symbol function_parameters) [6058 6062])
                    ("rmax" variable nil (reparse-symbol function_parameters) [6067 6071])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [6076 6085]))                  )
                nil [5910 6566])
            ("split_path_inout" function
               (:documentation " divide a path into two segment at the point where inside(x, y)
    becomes False.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [6614 6618])
                    ("inside" variable nil (reparse-symbol function_parameters) [6620 6626])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [6628 6637])
                    ("reorder_inout" variable nil (reparse-symbol function_parameters) [6644 6657]))                  )
                nil [6593 8716])
            ("inside_circle" function (:arguments 
              ( ("cx" variable nil (reparse-symbol function_parameters) [8739 8741])
                ("cy" variable nil (reparse-symbol function_parameters) [8743 8745])
                ("r" variable nil (reparse-symbol function_parameters) [8747 8748]))              ) nil [8721 8855])
            ("get_cos_sin" function (:arguments 
              ( ("x0" variable nil (reparse-symbol function_parameters) [8900 8902])
                ("y0" variable nil (reparse-symbol function_parameters) [8904 8906])
                ("x1" variable nil (reparse-symbol function_parameters) [8908 8910])
                ("y1" variable nil (reparse-symbol function_parameters) [8912 8914]))              ) nil [8884 8993])
            ("check_if_parallel" function
               (:documentation " returns
       * 1 if two lines are parralel in same direction
       * -1 if two lines are parralel in opposite direction
       * 0 otherwise
    "
                :arguments 
                  ( ("dx1" variable nil (reparse-symbol function_parameters) [9016 9019])
                    ("dy1" variable nil (reparse-symbol function_parameters) [9021 9024])
                    ("dx2" variable nil (reparse-symbol function_parameters) [9026 9029])
                    ("dy2" variable nil (reparse-symbol function_parameters) [9031 9034])
                    ("tolerence" variable nil (reparse-symbol function_parameters) [9036 9045]))                  )
                nil [8994 9458])
            ("get_parallels" function
               (:documentation "
    Given the quadraitc bezier control points *bezier2*, returns
    control points of quadrativ bezier lines roughly parralel to given
    one separated by *width*.
    "
                :arguments 
                  ( ("bezier2" variable nil (reparse-symbol function_parameters) [9478 9485])
                    ("width" variable nil (reparse-symbol function_parameters) [9487 9492]))                  )
                nil [9460 12228])
            ("make_wedged_bezier2" function
               (:documentation "
    Being similar to get_parallels, returns
    control points of two quadrativ bezier lines having a width roughly parralel to given
    one separated by *width*.
    "
                :arguments 
                  ( ("bezier2" variable nil (reparse-symbol function_parameters) [12255 12262])
                    ("length" variable nil (reparse-symbol function_parameters) [12264 12270])
                    ("shrink_factor" variable nil (reparse-symbol function_parameters) [12272 12285]))                  )
                nil [12231 13167])
            ("find_control_points" function
               (:documentation " Find control points of the bezier line throught c1, mm, c2. We
    simply assume that c1, mm, c2 which have parameteric value 0, 0.5, and 1.
    "
                :arguments 
                  ( ("c1x" variable nil (reparse-symbol function_parameters) [13193 13196])
                    ("c1y" variable nil (reparse-symbol function_parameters) [13198 13201])
                    ("mmx" variable nil (reparse-symbol function_parameters) [13203 13206])
                    ("mmy" variable nil (reparse-symbol function_parameters) [13208 13211])
                    ("c2x" variable nil (reparse-symbol function_parameters) [13213 13216])
                    ("c2y" variable nil (reparse-symbol function_parameters) [13218 13221]))                  )
                nil [13169 13505])
            ("make_wedged_bezier2" function
               (:documentation "
    Being similar to get_parallels, returns
    control points of two quadrativ bezier lines having a width roughly parralel to given
    one separated by *width*.
    "
                :arguments 
                  ( ("bezier2" variable nil (reparse-symbol function_parameters) [13531 13538])
                    ("width" variable nil (reparse-symbol function_parameters) [13540 13545])
                    ("w1" variable nil (reparse-symbol function_parameters) [13547 13549])
                    ("wm" variable nil (reparse-symbol function_parameters) [13554 13556])
                    ("w2" variable nil (reparse-symbol function_parameters) [13562 13564]))                  )
                nil [13507 15424])
            ("make_path_regular" function
               (:documentation "
    fill in the codes if None.
    "
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [15450 15451]))                  )
                nil [15428 15701])
            ("concatenate_paths" function
               (:documentation "
    concatenate list of paths into a single path.
    "
                :arguments 
                  ( ("paths" variable nil (reparse-symbol function_parameters) [15724 15729]))                  )
                nil [15702 16052])
            ("if" code nil nil [16055 16235]))          
      :file "bezier.py"
      :pointmax 16238
      :fsize 16237
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The OffsetBox is a simple container artist. The child artist are meant
to be drawn at a relative position to its parent.  The [VH]Packer,
DrawingArea and TextArea are derived from the OffsetBox.

The [VH]Packer automatically adjust the relative postisions of their
children, which should be instances of the OffsetBox. This is used to
align similar artists together, e.g., in legend.

The DrawingArea can contain any Artist as a child. The
DrawingArea has a fixed width and height. The position of children
relative to the parent is fixed.  The TextArea is contains a single
Text instance. The width and height of the TextArea instance is the
width and height of the its child text.
\"\"\"" code nil nil [1 691])
            ("matplotlib.transforms" include nil nil [694 737])
            ("matplotlib.artist" include nil nil [738 773])
            ("matplotlib.text" include nil nil [774 805])
            ("numpy" include nil nil [806 824])
            ("matplotlib.transforms" include nil nil [825 935])
            ("matplotlib.font_manager" include nil nil [937 987])
            ("matplotlib.patches" include nil nil [988 1050])
            ("matplotlib" include nil nil [1051 1082])
            ("matplotlib" include nil nil [1084 1116])
            ("matplotlib.cbook" include nil nil [1117 1149])
            ("matplotlib.image" include nil nil [1184 1222])
            ("matplotlib.patches" include nil nil [1224 1282])
            ("DEBUG" variable nil nil [1285 1296])
            ("bbox_artist" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [1332 1337])
                ("kwargs" variable nil (reparse-symbol function_parameters) [1339 1347]))              ) nil [1316 1402])
            ("_get_packed_offsets" function
               (:documentation "
    Geiven a list of (width, xdescent) of each boxes, calculate the
    total width and the x-offset positions of each items according to
    *mode*. xdescent is analagous to the usual descent, but along the
    x-direction. xdescent values are currently ignored.

    *wd_list* : list of (width, xdescent) of boxes to be packed.
    *sep* : spacing between boxes
    *total* : Intended total length. None if not used.
    *mode* : packing mode. 'fixed', 'expand', or 'equal'.
    "
                :arguments 
                  ( ("wd_list" variable nil (reparse-symbol function_parameters) [1597 1604])
                    ("total" variable nil (reparse-symbol function_parameters) [1606 1611])
                    ("sep" variable nil (reparse-symbol function_parameters) [1613 1616])
                    ("mode" variable nil (reparse-symbol function_parameters) [1618 1622]))                  )
                nil [1573 2991])
            ("_get_aligned_offsets" function
               (:documentation "
    Given a list of (height, descent) of each boxes, align the boxes
    with *align* and calculate the y-offsets of each boxes.
    total width and the offset positions of each items according to
    *mode*. xdescent is analogous to the usual descent, but along the
    x-direction. xdescent values are currently ignored.

    *hd_list* : list of (width, xdescent) of boxes to be aligned.
    *sep* : spacing between boxes
    *height* : Intended total length. None if not used.
    *align* : align mode. 'baseline', 'top', 'bottom', or 'center'.
    "
                :arguments 
                  ( ("hd_list" variable nil (reparse-symbol function_parameters) [3018 3025])
                    ("height" variable nil (reparse-symbol function_parameters) [3027 3033])
                    ("align" variable nil (reparse-symbol function_parameters) [3035 3040]))                  )
                nil [2993 4321])
            ("OffsetBox" type
               (:documentation "
    The OffsetBox is a simple container artist. The child artist are meant
    to be drawn at a relative position to its parent.
    "
                :superclasses ("martist.Artist")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [4552 4600])
                            ("self" variable nil (reparse-symbol indented_block_body) [4610 4629])
                            ("self" variable nil (reparse-symbol indented_block_body) [4638 4659]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4519 4523])
                            ("args" variable nil (reparse-symbol function_parameters) [4525 4530])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4532 4540]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4506 4660])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4680 4684])
                            ("fig" variable nil (reparse-symbol function_parameters) [4686 4689]))                          
                        :documentation "
        Set the figure

        accepts a class:`~matplotlib.figure.Figure` instance
        ")
                        (reparse-symbol indented_block_body) [4665 4914])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4932 4936])
                            ("mouseevent" variable nil (reparse-symbol function_parameters) [4938 4948]))                          )
                        (reparse-symbol indented_block_body) [4919 5102])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5122 5126])
                            ("xy" variable nil (reparse-symbol function_parameters) [5128 5130]))                          
                        :documentation "
        Set the offset

        accepts x, y, tuple, or a callable object.
        ")
                        (reparse-symbol indented_block_body) [5107 5258])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5278 5282])
                            ("width" variable nil (reparse-symbol function_parameters) [5284 5289])
                            ("height" variable nil (reparse-symbol function_parameters) [5291 5297])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [5299 5307])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [5309 5317])
                            ("renderer" variable nil (reparse-symbol function_parameters) [5319 5327]))                          
                        :documentation "
        Get the offset

        accepts extent of the box
        ")
                        (reparse-symbol indented_block_body) [5263 5570])
                    ("set_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5589 5593])
                            ("width" variable nil (reparse-symbol function_parameters) [5595 5600]))                          
                        :documentation "
        Set the width

        accepts float
        ")
                        (reparse-symbol indented_block_body) [5575 5699])
                    ("set_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5719 5723])
                            ("height" variable nil (reparse-symbol function_parameters) [5725 5731]))                          
                        :documentation "
        Set the height

        accepts float
        ")
                        (reparse-symbol indented_block_body) [5704 5833])
                    ("get_visible_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5863 5867]))                          
                        :documentation "
        Return a list of visible artists it contains.
        ")
                        (reparse-symbol indented_block_body) [5838 6010])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6032 6036]))                          
                        :documentation "
        Return a list of artists it contains.
        ")
                        (reparse-symbol indented_block_body) [6015 6139])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6167 6171])
                            ("renderer" variable nil (reparse-symbol function_parameters) [6173 6181]))                          )
                        (reparse-symbol indented_block_body) [6144 6212])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6232 6236])
                            ("renderer" variable nil (reparse-symbol function_parameters) [6238 6246]))                          
                        :documentation "
        Return with, height, xdescent, ydescent of box
        ")
                        (reparse-symbol indented_block_body) [6217 6422])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6449 6453])
                            ("renderer" variable nil (reparse-symbol function_parameters) [6455 6463]))                          )
                        (reparse-symbol indented_block_body) [6427 6724])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6738 6742])
                            ("renderer" variable nil (reparse-symbol function_parameters) [6744 6752]))                          
                        :documentation "
        Update the location of children if necessary and draw them
        to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [6729 7256]))                  
                :type "class")
                nil [4324 7256])
            ("PackerBase" type
               (:superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *pad* : boundary pad
        *sep* : spacing between items
        *width*, *height* : width and height of the container box.
           calculated if None.
        *align* : alignment of boxes. Can be one of 'top', 'bottom',
           'left', 'right', 'center' and 'baseline'
        *mode* : packing mode

        .. note::
          *pad* and *sep* need to given in points and will be
          scale with the renderer dpi, while *width* and *height*
          need to be in pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [7436 7946])
                            ("super" code nil (reparse-symbol indented_block_body) [7955 7989])
                            ("self" variable nil (reparse-symbol indented_block_body) [7999 8019])
                            ("self" variable nil (reparse-symbol indented_block_body) [8028 8046])
                            ("self" variable nil (reparse-symbol indented_block_body) [8055 8069])
                            ("self" variable nil (reparse-symbol indented_block_body) [8078 8092])
                            ("self" variable nil (reparse-symbol indented_block_body) [8101 8117])
                            ("self" variable nil (reparse-symbol indented_block_body) [8126 8144])
                            ("self" variable nil (reparse-symbol indented_block_body) [8154 8179]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7304 7308])
                            ("pad" variable nil (reparse-symbol function_parameters) [7310 7313])
                            ("sep" variable nil (reparse-symbol function_parameters) [7320 7323])
                            ("width" variable nil (reparse-symbol function_parameters) [7330 7335])
                            ("height" variable nil (reparse-symbol function_parameters) [7342 7348])
                            ("align" variable nil (reparse-symbol function_parameters) [7372 7377])
                            ("mode" variable nil (reparse-symbol function_parameters) [7384 7388])
                            ("children" variable nil (reparse-symbol function_parameters) [7412 7420]))                          
                        :documentation "
        *pad* : boundary pad
        *sep* : spacing between items
        *width*, *height* : width and height of the container box.
           calculated if None.
        *align* : alignment of boxes. Can be one of 'top', 'bottom',
           'left', 'right', 'center' and 'baseline'
        *mode* : packing mode

        .. note::
          *pad* and *sep* need to given in points and will be
          scale with the renderer dpi, while *width* and *height*
          need to be in pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7291 8180]))                  
                :type "class")
                nil [7258 8180])
            ("VPacker" type
               (:documentation "
    The VPacker has its children packed vertically. It automatically
    adjust the relative positions of children in the drawing time.
    "
                :superclasses ("PackerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *pad* : boundary pad
        *sep* : spacing between items
        *width*, *height* : width and height of the container box.
           calculated if None.
        *align* : alignment of boxes
        *mode* : packing mode

        .. note::
          *pad* and *sep* need to given in points and will be
          scale with the renderer dpi, while *width* and *height*
          need to be in pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [8519 8945])
                            ("super" code nil (reparse-symbol indented_block_body) [8954 9107]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8378 8382])
                            ("pad" variable nil (reparse-symbol function_parameters) [8384 8387])
                            ("sep" variable nil (reparse-symbol function_parameters) [8394 8397])
                            ("width" variable nil (reparse-symbol function_parameters) [8404 8409])
                            ("height" variable nil (reparse-symbol function_parameters) [8416 8422])
                            ("align" variable nil (reparse-symbol function_parameters) [8446 8451])
                            ("mode" variable nil (reparse-symbol function_parameters) [8464 8468])
                            ("children" variable nil (reparse-symbol function_parameters) [8495 8503]))                          
                        :documentation "
        *pad* : boundary pad
        *sep* : spacing between items
        *width*, *height* : width and height of the container box.
           calculated if None.
        *align* : alignment of boxes
        *mode* : packing mode

        .. note::
          *pad* and *sep* need to given in points and will be
          scale with the renderer dpi, while *width* and *height*
          need to be in pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8365 9108])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9138 9142])
                            ("renderer" variable nil (reparse-symbol function_parameters) [9144 9152]))                          
                        :documentation "
        update offset of childrens and return the extents of the box
        ")
                        (reparse-symbol indented_block_body) [9115 10520]))                  
                :type "class")
                nil [8182 10520])
            ("HPacker" type
               (:documentation "
    The HPacker has its children packed horizontally. It automatically
    adjust the relative positions of children in the drawing time.
    "
                :superclasses ("PackerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *pad* : boundary pad
        *sep* : spacing between items
        *width*, *height* : width and height of the container box.
           calculated if None.
        *align* : alignment of boxes
        *mode* : packing mode

        .. note::
          *pad* and *sep* need to given in points and will be
          scale with the renderer dpi, while *width* and *height*
          need to be in pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [10861 11287])
                            ("super" code nil (reparse-symbol indented_block_body) [11296 11411]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10720 10724])
                            ("pad" variable nil (reparse-symbol function_parameters) [10726 10729])
                            ("sep" variable nil (reparse-symbol function_parameters) [10736 10739])
                            ("width" variable nil (reparse-symbol function_parameters) [10746 10751])
                            ("height" variable nil (reparse-symbol function_parameters) [10758 10764])
                            ("align" variable nil (reparse-symbol function_parameters) [10788 10793])
                            ("mode" variable nil (reparse-symbol function_parameters) [10806 10810])
                            ("children" variable nil (reparse-symbol function_parameters) [10837 10845]))                          
                        :documentation "
        *pad* : boundary pad
        *sep* : spacing between items
        *width*, *height* : width and height of the container box.
           calculated if None.
        *align* : alignment of boxes
        *mode* : packing mode

        .. note::
          *pad* and *sep* need to given in points and will be
          scale with the renderer dpi, while *width* and *height*
          need to be in pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10707 11412])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11441 11445])
                            ("renderer" variable nil (reparse-symbol function_parameters) [11447 11455]))                          
                        :documentation "
        update offset of children and return the extents of the box
        ")
                        (reparse-symbol indented_block_body) [11418 12823]))                  
                :type "class")
                nil [10522 12823])
            ("PaddedBox" type
               (:superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *pad* : boundary pad

        .. note::
          *pad* need to given in points and will be
          scale with the renderer dpi, while *width* and *height*
          need to be in pixels.
        \"\"\"" code nil (reparse-symbol indented_block_body) [12940 13153])
                            ("super" code nil (reparse-symbol indented_block_body) [13163 13196])
                            ("self" variable nil (reparse-symbol indented_block_body) [13206 13220])
                            ("self" variable nil (reparse-symbol indented_block_body) [13229 13253])
                            ("self" variable nil (reparse-symbol indented_block_body) [13263 13480])
                            ("self" code nil (reparse-symbol indented_block_body) [13490 13529])
                            ("if" code nil (reparse-symbol indented_block_body) [13539 13610])
                            ("self" variable nil (reparse-symbol indented_block_body) [13619 13648]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12872 12876])
                            ("child" variable nil (reparse-symbol function_parameters) [12878 12883])
                            ("pad" variable nil (reparse-symbol function_parameters) [12885 12888])
                            ("draw_frame" variable nil (reparse-symbol function_parameters) [12895 12905])
                            ("patch_attrs" variable nil (reparse-symbol function_parameters) [12913 12924]))                          
                        :documentation "
        *pad* : boundary pad

        .. note::
          *pad* need to given in points and will be
          scale with the renderer dpi, while *width* and *height*
          need to be in pixels.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12859 13649])
                    ("get_extent_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13678 13682])
                            ("renderer" variable nil (reparse-symbol function_parameters) [13684 13692]))                          
                        :documentation "
        update offset of childrens and return the extents of the box
        ")
                        (reparse-symbol indented_block_body) [13655 14028])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14043 14047])
                            ("renderer" variable nil (reparse-symbol function_parameters) [14049 14057]))                          
                        :documentation "
        Update the location of children if necessary and draw them
        to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [14034 14574])
                    ("update_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14666 14670])
                            ("bbox" variable nil (reparse-symbol function_parameters) [14672 14676])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [14678 14686]))                          )
                        (reparse-symbol indented_block_body) [14649 14871])
                    ("draw_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14891 14895])
                            ("renderer" variable nil (reparse-symbol function_parameters) [14897 14905]))                          )
                        (reparse-symbol indented_block_body) [14876 15108]))                  
                :type "class")
                nil [12827 15108])
            ("DrawingArea" type
               (:documentation "
    The DrawingArea can contain any Artist as a child. The DrawingArea
    has a fixed width and height. The position of children relative to
    the parent is fixed.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *width*, *height* : width and height of the container box.
        *xdescent*, *ydescent* : descent of the box in x- and y-direction.
        \"\"\"" code nil (reparse-symbol indented_block_body) [15425 15582])
                            ("super" code nil (reparse-symbol indented_block_body) [15592 15627])
                            ("self" variable nil (reparse-symbol indented_block_body) [15637 15655])
                            ("self" variable nil (reparse-symbol indented_block_body) [15664 15684])
                            ("self" variable nil (reparse-symbol indented_block_body) [15693 15717])
                            ("self" variable nil (reparse-symbol indented_block_body) [15726 15750])
                            ("self" variable nil (reparse-symbol indented_block_body) [15760 15806])
                            ("self" code nil (reparse-symbol indented_block_body) [15815 15844])
                            ("self" code nil (reparse-symbol indented_block_body) [15853 15890])
                            ("self" variable nil (reparse-symbol indented_block_body) [15900 15943]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15341 15345])
                            ("width" variable nil (reparse-symbol function_parameters) [15347 15352])
                            ("height" variable nil (reparse-symbol function_parameters) [15354 15360])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [15362 15370])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [15392 15400])
                            ("clip" variable nil (reparse-symbol function_parameters) [15405 15409]))                          
                        :documentation "
        *width*, *height* : width and height of the container box.
        *xdescent*, *ydescent* : descent of the box in x- and y-direction.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15328 15944])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15969 15973]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` applied
        to the children
        ")
                        (reparse-symbol indented_block_body) [15951 16151])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16174 16178])
                            ("t" variable nil (reparse-symbol function_parameters) [16180 16181]))                          
                        :documentation "
        set_transform is ignored.
        ")
                        (reparse-symbol indented_block_body) [16156 16255])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16276 16280])
                            ("xy" variable nil (reparse-symbol function_parameters) [16282 16284]))                          
                        :documentation "
        set offset of the container.

        Accept : tuple of x,y cooridnate in disokay units.
        ")
                        (reparse-symbol indented_block_body) [16261 16527])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16548 16552]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [16533 16647])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16675 16679])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16681 16689]))                          )
                        (reparse-symbol indented_block_body) [16653 16926])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16947 16951])
                            ("renderer" variable nil (reparse-symbol function_parameters) [16953 16961]))                          
                        :documentation "
        Return with, height, xdescent, ydescent of box
        ")
                        (reparse-symbol indented_block_body) [16932 17211])
                    ("add_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17232 17236])
                            ("a" variable nil (reparse-symbol function_parameters) [17238 17239]))                          )
                        (reparse-symbol indented_block_body) [17217 17436])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17451 17455])
                            ("renderer" variable nil (reparse-symbol function_parameters) [17457 17465]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [17442 17785]))                  
                :type "class")
                nil [15110 17785])
            ("TextArea" type
               (:documentation "
    The TextArea is contains a single Text instance. The text is
    placed at (0,0) with baseline+left alignment. The width and height
    of the TextArea instance is the width and height of the its child
    text.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *s* : a string to be displayed.
        *textprops* : property dictionary for the text
        *multilinebaseline* : If True, baseline for multiline text is
                              adjusted so that it is (approximatedly)
                              center-aligned with singleline text.
        *minimumdescent*  : If True, the box has a minimum descent of \"p\".
        \"\"\"" code nil (reparse-symbol indented_block_body) [18215 18607])
                            ("if" code nil (reparse-symbol indented_block_body) [18616 18665])
                            ("if" code nil (reparse-symbol indented_block_body) [18674 18745])
                            ("self" variable nil (reparse-symbol indented_block_body) [18754 18799])
                            ("OffsetBox" code nil (reparse-symbol indented_block_body) [18809 18833])
                            ("self" variable nil (reparse-symbol indented_block_body) [18843 18872])
                            ("self" variable nil (reparse-symbol indented_block_body) [18883 18929])
                            ("self" code nil (reparse-symbol indented_block_body) [18938 18967])
                            ("self" code nil (reparse-symbol indented_block_body) [18976 19013])
                            ("self" variable nil (reparse-symbol indented_block_body) [19022 19071])
                            ("self" code nil (reparse-symbol indented_block_body) [19080 19152])
                            ("self" variable nil (reparse-symbol indented_block_body) [19162 19205])
                            ("self" variable nil (reparse-symbol indented_block_body) [19214 19251]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18066 18070])
                            ("s" variable nil (reparse-symbol function_parameters) [18072 18073])
                            ("textprops" variable nil (reparse-symbol function_parameters) [18092 18101])
                            ("multilinebaseline" variable nil (reparse-symbol function_parameters) [18125 18142])
                            ("minimumdescent" variable nil (reparse-symbol function_parameters) [18166 18180]))                          
                        :documentation "
        *s* : a string to be displayed.
        *textprops* : property dictionary for the text
        *multilinebaseline* : If True, baseline for multiline text is
                              adjusted so that it is (approximatedly)
                              center-aligned with singleline text.
        *minimumdescent*  : If True, the box has a minimum descent of \"p\".
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18053 19252])
                    ("set_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19271 19275])
                            ("s" variable nil (reparse-symbol function_parameters) [19277 19278]))                          )
                        (reparse-symbol indented_block_body) [19258 19331])
                    ("get_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19349 19353]))                          )
                        (reparse-symbol indented_block_body) [19336 19412])
                    ("set_multilinebaseline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19443 19447])
                            ("t" variable nil (reparse-symbol function_parameters) [19449 19450]))                          
                        :documentation "
        Set multilinebaseline .

        If True, baseline for multiline text is
        adjusted so that it is (approximatedly) center-aligned with
        singleline text.
        ")
                        (reparse-symbol indented_block_body) [19417 19687])
                    ("get_multilinebaseline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19719 19723]))                          
                        :documentation "
        get multilinebaseline .
        ")
                        (reparse-symbol indented_block_body) [19693 19821])
                    ("set_minimumdescent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19850 19854])
                            ("t" variable nil (reparse-symbol function_parameters) [19856 19857]))                          
                        :documentation "
        Set minimumdescent .

        If True, extent of the single line text is adjusted so that
        it has minimum descent of \"p\"
        ")
                        (reparse-symbol indented_block_body) [19827 20053])
                    ("get_minimumdescent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20082 20086]))                          
                        :documentation "
        get minimumdescent.
        ")
                        (reparse-symbol indented_block_body) [20059 20177])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20201 20205])
                            ("t" variable nil (reparse-symbol function_parameters) [20207 20208]))                          
                        :documentation "
        set_transform is ignored.
        ")
                        (reparse-symbol indented_block_body) [20183 20282])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20303 20307])
                            ("xy" variable nil (reparse-symbol function_parameters) [20309 20311]))                          
                        :documentation "
        set offset of the container.

        Accept : tuple of x,y cooridnate in disokay units.
        ")
                        (reparse-symbol indented_block_body) [20288 20554])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20575 20579]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [20560 20674])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20702 20706])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20708 20716]))                          )
                        (reparse-symbol indented_block_body) [20680 20953])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20974 20978])
                            ("renderer" variable nil (reparse-symbol function_parameters) [20980 20988]))                          )
                        (reparse-symbol indented_block_body) [20959 22052])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22067 22071])
                            ("renderer" variable nil (reparse-symbol function_parameters) [22073 22081]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [22058 22238]))                  
                :type "class")
                nil [17787 22238])
            ("AuxTransformBox" type
               (:documentation "
    Offset Box with the aux_transform . Its children will be
    transformed with the aux_transform first then will be
    offseted. The absolute coordinate of the aux_transform is meaning
    as it will be automatically adjust so that the left-lower corner
    of the bounding box of children will be set to (0,0) before the
    offset transform.

    It is similar to drawing area, except that the extent of the box
    is not predetermined but calculated from the window extent of its
    children. Furthermore, the extent of the children will be
    calculated in the transformed coordinate.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [22935 22969])
                            ("OffsetBox" code nil (reparse-symbol indented_block_body) [22978 23002])
                            ("self" variable nil (reparse-symbol indented_block_body) [23012 23058])
                            ("self" code nil (reparse-symbol indented_block_body) [23067 23096])
                            ("self" code nil (reparse-symbol indented_block_body) [23105 23142])
                            ("self" variable nil (reparse-symbol indented_block_body) [23314 23364])
                            ("self" code nil (reparse-symbol indented_block_body) [23373 23406]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22905 22909])
                            ("aux_transform" variable nil (reparse-symbol function_parameters) [22911 22924]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [22892 23407])
                    ("add_artist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23427 23431])
                            ("a" variable nil (reparse-symbol function_parameters) [23433 23434]))                          )
                        (reparse-symbol indented_block_body) [23412 23590])
                    ("get_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23613 23617]))                          
                        :documentation "
        Return the :class:`~matplotlib.transforms.Transform` applied
        to the children
        ")
                        (reparse-symbol indented_block_body) [23595 23858])
                    ("set_transform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23881 23885])
                            ("t" variable nil (reparse-symbol function_parameters) [23887 23888]))                          
                        :documentation "
        set_transform is ignored.
        ")
                        (reparse-symbol indented_block_body) [23863 23962])
                    ("set_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23983 23987])
                            ("xy" variable nil (reparse-symbol function_parameters) [23989 23991]))                          
                        :documentation "
        set offset of the container.

        Accept : tuple of x,y coordinate in disokay units.
        ")
                        (reparse-symbol indented_block_body) [23968 24234])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24255 24259]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [24240 24354])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24382 24386])
                            ("renderer" variable nil (reparse-symbol function_parameters) [24388 24396]))                          )
                        (reparse-symbol indented_block_body) [24360 24633])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24654 24658])
                            ("renderer" variable nil (reparse-symbol function_parameters) [24660 24668]))                          )
                        (reparse-symbol indented_block_body) [24639 25297])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25312 25316])
                            ("renderer" variable nil (reparse-symbol function_parameters) [25318 25326]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [25303 25511]))                  
                :type "class")
                nil [22241 25511])
            ("AnchoredOffsetbox" type
               (:documentation "
    An offset box placed according to the legend location
    loc. AnchoredOffsetbox has a single child. When multiple children
    is needed, use other OffsetBox class to enclose them.  By default,
    the offset box is anchored against its parent axes. You may
    explicitly specify the bbox_to_anchor.
    "
                :superclasses ("OffsetBox")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [25877 25887])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        loc is a string or an integer specifying the legend location.
        The valid  location codes are::

        'upper right'  : 1,
        'upper left'   : 2,
        'lower left'   : 3,
        'lower right'  : 4,
        'right'        : 5,
        'center left'  : 6,
        'center right' : 7,
        'lower center' : 8,
        'upper center' : 9,
        'center'       : 10,

        pad : pad around the child for drawing a frame. given in
          fraction of fontsize.

        borderpad : pad between offsetbox frame and the bbox_to_anchor,

        child : OffsetBox instance that will be anchored.

        prop : font property. This is only used as a reference for paddings.

        frameon : draw a frame box if True.

        bbox_to_anchor : bbox to anchor. Use self.axes.bbox if None.

        bbox_transform : with which the bbox_to_anchor will be transformed.

        \"\"\"" code nil (reparse-symbol indented_block_body) [26147 27055])
                            ("super" code nil (reparse-symbol indented_block_body) [27065 27114])
                            ("self" code nil (reparse-symbol indented_block_body) [27124 27179])
                            ("self" code nil (reparse-symbol indented_block_body) [27188 27209])
                            ("self" variable nil (reparse-symbol indented_block_body) [27219 27233])
                            ("self" variable nil (reparse-symbol indented_block_body) [27242 27266])
                            ("self" variable nil (reparse-symbol indented_block_body) [27275 27289])
                            ("if" code nil (reparse-symbol indented_block_body) [27299 27611])
                            ("self" variable nil (reparse-symbol indented_block_body) [27620 27833])
                            ("self" code nil (reparse-symbol indented_block_body) [27842 27881])
                            ("self" variable nil (reparse-symbol indented_block_body) [27890 27916]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25929 25933])
                            ("loc" variable nil (reparse-symbol function_parameters) [25935 25938])
                            ("pad" variable nil (reparse-symbol function_parameters) [25957 25960])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [25966 25975])
                            ("child" variable nil (reparse-symbol function_parameters) [25998 26003])
                            ("prop" variable nil (reparse-symbol function_parameters) [26010 26014])
                            ("frameon" variable nil (reparse-symbol function_parameters) [26021 26028])
                            ("bbox_to_anchor" variable nil (reparse-symbol function_parameters) [26052 26066])
                            ("bbox_transform" variable nil (reparse-symbol function_parameters) [26090 26104])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [26128 26136]))                          
                        :documentation "
        loc is a string or an integer specifying the legend location.
        The valid  location codes are::

        'upper right'  : 1,
        'upper left'   : 2,
        'lower left'   : 3,
        'lower right'  : 4,
        'right'        : 5,
        'center left'  : 6,
        'center right' : 7,
        'lower center' : 8,
        'upper center' : 9,
        'center'       : 10,

        pad : pad around the child for drawing a frame. given in
          fraction of fontsize.

        borderpad : pad between offsetbox frame and the bbox_to_anchor,

        child : OffsetBox instance that will be anchored.

        prop : font property. This is only used as a reference for paddings.

        frameon : draw a frame box if True.

        bbox_to_anchor : bbox to anchor. Use self.axes.bbox if None.

        bbox_transform : with which the bbox_to_anchor will be transformed.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25916 27917])
                    ("set_child" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27939 27943])
                            ("child" variable nil (reparse-symbol function_parameters) [27945 27950]))                          )
                        (reparse-symbol indented_block_body) [27925 28020])
                    ("get_child" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28039 28043]))                          )
                        (reparse-symbol indented_block_body) [28025 28100])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28122 28126]))                          )
                        (reparse-symbol indented_block_body) [28105 28196])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28217 28221])
                            ("renderer" variable nil (reparse-symbol function_parameters) [28223 28231]))                          
                        :documentation "
        return the extent of the artist. The extent of the child
        added with the pad is returned
        ")
                        (reparse-symbol indented_block_body) [28202 28584])
                    ("get_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28613 28617]))                          
                        :documentation "
        return the bbox that the legend will be anchored
        ")
                        (reparse-symbol indented_block_body) [28590 29052])
                    ("set_bbox_to_anchor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29083 29087])
                            ("bbox" variable nil (reparse-symbol function_parameters) [29089 29093])
                            ("transform" variable nil (reparse-symbol function_parameters) [29095 29104]))                          
                        :documentation "
        set the bbox that the child will be anchored.

        *bbox* can be a Bbox instance, a list of [left, bottom, width,
        height], or a list of [left, bottom] where the width and
        height will be assumed to be zero. The bbox will be
        transformed to display coordinate by the given transform.
        ")
                        (reparse-symbol indented_block_body) [29060 29902])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29930 29934])
                            ("renderer" variable nil (reparse-symbol function_parameters) [29936 29944]))                          )
                        (reparse-symbol indented_block_body) [29908 30219])
                    ("_update_offset_func" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30249 30253])
                            ("renderer" variable nil (reparse-symbol function_parameters) [30255 30263])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [30265 30273]))                          
                        :documentation "
        Update the offset func which depends on the dpi of the
        renderer (because of the padding).
        ")
                        (reparse-symbol indented_block_body) [30225 31038])
                    ("update_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31061 31065])
                            ("bbox" variable nil (reparse-symbol function_parameters) [31067 31071])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [31073 31081]))                          )
                        (reparse-symbol indented_block_body) [31044 31282])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31296 31300])
                            ("renderer" variable nil (reparse-symbol function_parameters) [31302 31310]))                          )
                        (reparse-symbol indented_block_body) [31287 31973])
                    ("_get_anchored_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32003 32007])
                            ("loc" variable nil (reparse-symbol function_parameters) [32009 32012])
                            ("bbox" variable nil (reparse-symbol function_parameters) [32014 32018])
                            ("parentbbox" variable nil (reparse-symbol function_parameters) [32020 32030])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [32032 32041]))                          
                        :documentation "
        return the position of the bbox anchored at the parentbbox
        with the loc code, with the borderpad.
        ")
                        (reparse-symbol indented_block_body) [31980 32799]))                  
                :type "class")
                nil [25514 32799])
            ("AnchoredText" type
               (:documentation "
    AnchoredOffsetbox with Text
    "
                :superclasses ("AnchoredOffsetbox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *s* : string
        *loc* : location code
        *prop* : font property
        *pad* : pad between the text and the frame as fraction of the font size.
        *borderpad* : pad between the frame and the axes (or bbox_to_anchor).

        other keyword parameters of AnchoredOffsetbox are also allowed.
        \"\"\"" code nil (reparse-symbol indented_block_body) [32974 33303])
                            ("self" variable nil (reparse-symbol indented_block_body) [33313 33401])
                            ("fp" variable nil (reparse-symbol indented_block_body) [33410 33450])
                            ("super" code nil (reparse-symbol indented_block_body) [33460 33693]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32906 32910])
                            ("s" variable nil (reparse-symbol function_parameters) [32912 32913])
                            ("loc" variable nil (reparse-symbol function_parameters) [32915 32918])
                            ("pad" variable nil (reparse-symbol function_parameters) [32920 32923])
                            ("borderpad" variable nil (reparse-symbol function_parameters) [32929 32938])
                            ("prop" variable nil (reparse-symbol function_parameters) [32944 32948])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [32955 32963]))                          
                        :documentation "
        *s* : string
        *loc* : location code
        *prop* : font property
        *pad* : pad between the text and the frame as fraction of the font size.
        *borderpad* : pad between the frame and the axes (or bbox_to_anchor).

        other keyword parameters of AnchoredOffsetbox are also allowed.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32893 33694]))                  
                :type "class")
                nil [32801 33694])
            ("OffsetImage" type
               (:superclasses ("OffsetBox")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [34091 34114])
                            ("self" variable nil (reparse-symbol indented_block_body) [34124 34600])
                            ("self" variable nil (reparse-symbol indented_block_body) [34610 34639])
                            ("self" code nil (reparse-symbol indented_block_body) [34649 34668])
                            ("self" code nil (reparse-symbol indented_block_body) [34677 34695])
                            ("OffsetBox" code nil (reparse-symbol indented_block_body) [34705 34729]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33744 33748])
                            ("arr" variable nil (reparse-symbol function_parameters) [33750 33753])
                            ("zoom" variable nil (reparse-symbol function_parameters) [33772 33776])
                            ("cmap" variable nil (reparse-symbol function_parameters) [33797 33801])
                            ("norm" variable nil (reparse-symbol function_parameters) [33827 33831])
                            ("interpolation" variable nil (reparse-symbol function_parameters) [33857 33870])
                            ("origin" variable nil (reparse-symbol function_parameters) [33894 33900])
                            ("filternorm" variable nil (reparse-symbol function_parameters) [33924 33934])
                            ("filterrad" variable nil (reparse-symbol function_parameters) [33955 33964])
                            ("resample" variable nil (reparse-symbol function_parameters) [33987 33995])
                            ("dpi_cor" variable nil (reparse-symbol function_parameters) [34022 34029])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [34053 34061]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33731 34730])
                    ("set_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34749 34753])
                            ("arr" variable nil (reparse-symbol function_parameters) [34755 34758]))                          )
                        (reparse-symbol indented_block_body) [34736 34838])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34856 34860]))                          )
                        (reparse-symbol indented_block_body) [34843 34889])
                    ("set_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34907 34911])
                            ("zoom" variable nil (reparse-symbol function_parameters) [34913 34917]))                          )
                        (reparse-symbol indented_block_body) [34894 34946])
                    ("get_zoom" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34964 34968]))                          )
                        (reparse-symbol indented_block_body) [34951 34997])
                    ("get_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35421 35425]))                          
                        :documentation "
        return offset of the container.
        ")
                        (reparse-symbol indented_block_body) [35406 35520])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35542 35546]))                          )
                        (reparse-symbol indented_block_body) [35525 35577])
                    ("get_window_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35604 35608])
                            ("renderer" variable nil (reparse-symbol function_parameters) [35610 35618]))                          )
                        (reparse-symbol indented_block_body) [35582 35840])
                    ("get_extent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35861 35865])
                            ("renderer" variable nil (reparse-symbol function_parameters) [35867 35875]))                          )
                        (reparse-symbol indented_block_body) [35846 36172])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36188 36192])
                            ("renderer" variable nil (reparse-symbol function_parameters) [36194 36202]))                          
                        :documentation "
        Draw the children
        ")
                        (reparse-symbol indented_block_body) [36179 36290]))                  
                :type "class")
                nil [33697 36290])
            ("matplotlib.text" include nil nil [36363 36406])
            ("AnnotationBbox" type
               (:documentation "
    Annotation-like class, but with offsetbox instead of Text.
    "
                :superclasses ("martist.Artist" "_AnnotationBase")
                :members 
                  ( ("zorder" variable nil (reparse-symbol indented_block_body) [36547 36557])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36575 36579]))                          )
                        (reparse-symbol indented_block_body) [36563 36645])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        *offsetbox* : OffsetBox instance

        *xycoords* : same as Annotation but can be a tuple of two
           strings which are interpreted as x and y coordinates.

        *boxcoords* : similar to textcoords as Annotation but can be a
           tuple of two strings which are interpreted as x and y
           coordinates.

        *box_alignment* : a tuple of two floats for a vertical and
           horizontal alignment of the offset box w.r.t. the *boxcoords*.
           The lower-left corner is (0.0) and upper-right corner is (1.1).

        other parameters are identical to that of Annotation.
        \"\"\"" code nil (reparse-symbol indented_block_body) [37078 37707])
                            ("self" variable nil (reparse-symbol indented_block_body) [37716 37742])
                            ("self" variable nil (reparse-symbol indented_block_body) [37752 37780])
                            ("self" code nil (reparse-symbol indented_block_body) [37790 37817])
                            ("if" code nil (reparse-symbol indented_block_body) [37828 38146])
                            ("_AnnotationBase" code nil (reparse-symbol indented_block_body) [38155 38376])
                            ("martist" code nil (reparse-symbol indented_block_body) [38386 38425])
                            ("self" variable nil (reparse-symbol indented_block_body) [38488 38523])
                            ("self" variable nil (reparse-symbol indented_block_body) [38549 38762])
                            ("self" code nil (reparse-symbol indented_block_body) [38771 38812])
                            ("if" code nil (reparse-symbol indented_block_body) [38821 38875])
                            ("self" variable nil (reparse-symbol indented_block_body) [38883 38909]))                          
                        :parent "dummy"
                        :decorators 
                          ( ("docstring.dedent_interpd" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36692 36696])
                            ("offsetbox" variable nil (reparse-symbol function_parameters) [36698 36707])
                            ("xy" variable nil (reparse-symbol function_parameters) [36709 36711])
                            ("xybox" variable nil (reparse-symbol function_parameters) [36730 36735])
                            ("xycoords" variable nil (reparse-symbol function_parameters) [36759 36767])
                            ("boxcoords" variable nil (reparse-symbol function_parameters) [36793 36802])
                            ("frameon" variable nil (reparse-symbol function_parameters) [36826 36833])
                            ("pad" variable nil (reparse-symbol function_parameters) [36840 36843])
                            ("annotation_clip" variable nil (reparse-symbol function_parameters) [36878 36893])
                            ("box_alignment" variable nil (reparse-symbol function_parameters) [36917 36930])
                            ("bboxprops" variable nil (reparse-symbol function_parameters) [36960 36969])
                            ("arrowprops" variable nil (reparse-symbol function_parameters) [36993 37003])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [37027 37035])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [37059 37067]))                          
                        :documentation "
        *offsetbox* : OffsetBox instance

        *xycoords* : same as Annotation but can be a tuple of two
           strings which are interpreted as x and y coordinates.

        *boxcoords* : similar to textcoords as Annotation but can be a
           tuple of two strings which are interpreted as x and y
           coordinates.

        *box_alignment* : a tuple of two floats for a vertical and
           horizontal alignment of the offset box w.r.t. the *boxcoords*.
           The lower-left corner is (0.0) and upper-right corner is (1.1).

        other parameters are identical to that of Annotation.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36649 38910])
                    ("contains" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38929 38933])
                            ("event" variable nil (reparse-symbol function_parameters) [38934 38939]))                          )
                        (reparse-symbol indented_block_body) [38916 39215])
                    ("get_children" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39238 39242]))                          )
                        (reparse-symbol indented_block_body) [39221 39392])
                    ("set_figure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39412 39416])
                            ("fig" variable nil (reparse-symbol function_parameters) [39418 39421]))                          )
                        (reparse-symbol indented_block_body) [39397 39595])
                    ("set_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39617 39621])
                            ("s" variable nil (reparse-symbol function_parameters) [39623 39624]))                          
                        :documentation "
        set fontsize in points
        ")
                        (reparse-symbol indented_block_body) [39600 39795])
                    ("get_fontsize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39817 39821])
                            ("s" variable nil (reparse-symbol function_parameters) [39823 39824]))                          
                        :documentation "
        return fontsize in points
        ")
                        (reparse-symbol indented_block_body) [39800 39936])
                    ("update_positions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39962 39966])
                            ("renderer" variable nil (reparse-symbol function_parameters) [39968 39976]))                          )
                        (reparse-symbol indented_block_body) [39941 40381])
                    ("_update_position_xybox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40414 40418])
                            ("renderer" variable nil (reparse-symbol function_parameters) [40420 40428])
                            ("xy_pixel" variable nil (reparse-symbol function_parameters) [40430 40438]))                          )
                        (reparse-symbol indented_block_body) [40387 42486])
                    ("draw" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42502 42506])
                            ("renderer" variable nil (reparse-symbol function_parameters) [42508 42516]))                          
                        :documentation "
        Draw the :class:`Annotation` object to the given *renderer*.
        ")
                        (reparse-symbol indented_block_body) [42493 43212]))                  
                :type "class")
                nil [36408 43212])
            ("DraggableBase" type
               (:documentation "
    helper code for a draggable artist (legend, offsetbox)
    The derived class must override following two method.

      def saveoffset(self):
          pass

      def update_offset(self, dx, dy):
          pass

    *saveoffset* is called when the object is picked for dragging and it is
    meant to save reference position of the artist.

    *update_offset* is called during the dragging. dx and dy is the pixel
     offset from the point where the mouse drag started.

    Optionally you may override following two methods.

      def artist_picker(self, artist, evt):
          return self.ref_artist.contains(evt)

      def finalize_offset(self):
          pass

    *artist_picker* is a picker method that will be
     used. *finalize_offset* is called when the mouse is released. In
     current implementaion of DraggableLegend and DraggableAnnotation,
     *update_offset* places the artists simply in display
     coordinates. And *finalize_offset* recalculate their position in
     the normalized axes coordinate and set a relavant attribute.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [44383 44411])
                            ("self" variable nil (reparse-symbol indented_block_body) [44420 44443])
                            ("self" variable nil (reparse-symbol indented_block_body) [44452 44477])
                            ("self" variable nil (reparse-symbol indented_block_body) [44487 44530])
                            ("c2" variable nil (reparse-symbol indented_block_body) [44539 44595])
                            ("c3" variable nil (reparse-symbol indented_block_body) [44604 44673])
                            ("ref_artist" code nil (reparse-symbol indented_block_body) [44683 44724])
                            ("self" variable nil (reparse-symbol indented_block_body) [44733 44753]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44340 44344])
                            ("ref_artist" variable nil (reparse-symbol function_parameters) [44346 44356])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [44358 44366]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [44327 44754])
                    ("on_motion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44773 44777])
                            ("evt" variable nil (reparse-symbol function_parameters) [44779 44782]))                          )
                        (reparse-symbol indented_block_body) [44759 44959])
                    ("on_motion_blit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44983 44987])
                            ("evt" variable nil (reparse-symbol function_parameters) [44989 44992]))                          )
                        (reparse-symbol indented_block_body) [44964 45325])
                    ("on_pick" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45342 45346])
                            ("evt" variable nil (reparse-symbol function_parameters) [45348 45351]))                          )
                        (reparse-symbol indented_block_body) [45330 46101])
                    ("on_release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46121 46125])
                            ("event" variable nil (reparse-symbol function_parameters) [46127 46132]))                          )
                        (reparse-symbol indented_block_body) [46106 46367])
                    ("disconnect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46387 46391]))                          )
                        (reparse-symbol indented_block_body) [46372 46503])
                    ("artist_picker" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46526 46530])
                            ("artist" variable nil (reparse-symbol function_parameters) [46532 46538])
                            ("evt" variable nil (reparse-symbol function_parameters) [46540 46543]))                          )
                        (reparse-symbol indented_block_body) [46508 46591])
                    ("save_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46612 46616]))                          )
                        (reparse-symbol indented_block_body) [46596 46632])
                    ("update_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46655 46659])
                            ("dx" variable nil (reparse-symbol function_parameters) [46661 46663])
                            ("dy" variable nil (reparse-symbol function_parameters) [46665 46667]))                          )
                        (reparse-symbol indented_block_body) [46637 46683])
                    ("finalize_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46708 46712]))                          )
                        (reparse-symbol indented_block_body) [46688 46728]))                  
                :type "class")
                nil [43215 46728])
            ("DraggableOffsetBox" type
               (:superclasses ("DraggableBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("DraggableBase" code nil (reparse-symbol indented_block_body) [46842 46901])
                            ("self" variable nil (reparse-symbol indented_block_body) [46910 46936]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46788 46792])
                            ("ref_artist" variable nil (reparse-symbol function_parameters) [46794 46804])
                            ("offsetbox" variable nil (reparse-symbol function_parameters) [46806 46815])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [46817 46825]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [46775 46937])
                    ("save_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46958 46962]))                          )
                        (reparse-symbol indented_block_body) [46942 47262])
                    ("update_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47285 47289])
                            ("dx" variable nil (reparse-symbol function_parameters) [47291 47293])
                            ("dy" variable nil (reparse-symbol function_parameters) [47295 47297]))                          )
                        (reparse-symbol indented_block_body) [47267 47418])
                    ("get_loc_in_canvas" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47445 47449]))                          )
                        (reparse-symbol indented_block_body) [47423 47696]))                  
                :type "class")
                nil [46730 47696])
            ("DraggableAnnotation" type
               (:superclasses ("DraggableBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("DraggableBase" code nil (reparse-symbol indented_block_body) [47800 47859])
                            ("self" variable nil (reparse-symbol indented_block_body) [47868 47896]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47757 47761])
                            ("annotation" variable nil (reparse-symbol function_parameters) [47763 47773])
                            ("use_blit" variable nil (reparse-symbol function_parameters) [47775 47783]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47744 47897])
                    ("save_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47918 47922]))                          )
                        (reparse-symbol indented_block_body) [47902 48455])
                    ("update_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48478 48482])
                            ("dx" variable nil (reparse-symbol function_parameters) [48484 48486])
                            ("dy" variable nil (reparse-symbol function_parameters) [48488 48490]))                          )
                        (reparse-symbol indented_block_body) [48460 48666])
                    ("finalize_offset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48691 48695]))                          )
                        (reparse-symbol indented_block_body) [48671 48957]))                  
                :type "class")
                nil [47698 48957])
            ("if" code nil nil [48959 50156]))          
      :file "offsetbox.py"
      :pointmax 50157
      :fsize 50156
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module defines default legend handlers.

Legend handlers are expected to be a callable object with a following
signature. ::

    legend_handler(legend, orig_handle, fontsize, handlebox)

Where *legend* is the legend itself, *orig_handle* is the original
plot, *fontsize* is the fontsize in pixles, and *handlebox* is a
OffsetBox instance. Within the call, you should create relevant
artists (using relevant properties from the *legend* and/or
*orig_handle*) and add them into the handlebox. The artists needs to
be scaled according to the fontsize (note that the size is in pixel,
i.e., this is dpi-scaled value).

This module includes definition of several legend handler classes
derived from the base class (HandlerBase) with a following method.

    def __call__(self, legend, orig_handle,
                 fontsize,
                 handlebox):


\"\"\"" code nil nil [1 865])
            ("numpy" include nil nil [867 885])
            ("matplotlib.lines" include nil nil [887 922])
            ("matplotlib.patches" include nil nil [923 963])
            ("matplotlib.collections" include nil nil [964 1002])
            ("update_from_first_child" function (:arguments 
              ( ("tgt" variable nil (reparse-symbol function_parameters) [1134 1137])
                ("src" variable nil (reparse-symbol function_parameters) [1139 1142]))              ) nil [1106 1188])
            ("HandlerBase" type
               (:documentation "
    A Base class for default legend handlers.

    The derived classes are meant to override *create_artists* method, which
    has a following signatture.::

      def create_artists(self, legend, orig_handle,
                         xdescent, ydescent, width, height, fontsize,
                         trans):

    The overriden method needs to create artists of the given
    transform that fits in the given dimension (xdescent, ydescemt,
    width, height) that are scaled by fontsize if necessary.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self, self" code nil (reparse-symbol indented_block_body) [1808 1843])
                            ("self" variable nil (reparse-symbol indented_block_body) [1852 1888]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1757 1761])
                            ("xpad" variable nil (reparse-symbol function_parameters) [1763 1767])
                            ("ypad" variable nil (reparse-symbol function_parameters) [1772 1776])
                            ("update_func" variable nil (reparse-symbol function_parameters) [1781 1792]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1744 1889])
                    ("_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1911 1915])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [1917 1930])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [1932 1943]))                          )
                        (reparse-symbol indented_block_body) [1894 2132])
                    ("_default_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2162 2166])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [2168 2181])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2183 2194]))                          )
                        (reparse-symbol indented_block_body) [2137 2244])
                    ("update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2266 2270])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [2272 2285])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2287 2298])
                            ("legend" variable nil (reparse-symbol function_parameters) [2300 2306]))                          )
                        (reparse-symbol indented_block_body) [2250 2649])
                    ("adjust_drawing_area" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2678 2682])
                            ("legend" variable nil (reparse-symbol function_parameters) [2684 2690])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [2692 2703])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [2733 2741])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [2743 2751])
                            ("width" variable nil (reparse-symbol function_parameters) [2753 2758])
                            ("height" variable nil (reparse-symbol function_parameters) [2760 2766])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [2768 2776]))                          )
                        (reparse-symbol indented_block_body) [2654 3040])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3058 3062])
                            ("legend" variable nil (reparse-symbol function_parameters) [3064 3070])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [3072 3083])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [3102 3110])
                            ("handlebox" variable nil (reparse-symbol function_parameters) [3129 3138]))                          
                        :documentation "
        x, y, w, h in display coordinate w/ default dpi (72)
        fontsize in points
        ")
                        (reparse-symbol indented_block_body) [3045 4143])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4168 4172])
                            ("legend" variable nil (reparse-symbol function_parameters) [4174 4180])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [4182 4193])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [4218 4226])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [4228 4236])
                            ("width" variable nil (reparse-symbol function_parameters) [4238 4243])
                            ("height" variable nil (reparse-symbol function_parameters) [4245 4251])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [4253 4261])
                            ("trans" variable nil (reparse-symbol function_parameters) [4286 4291]))                          )
                        (reparse-symbol indented_block_body) [4149 4354]))                  
                :type "class")
                nil [1190 4354])
            ("HandlerNpoints" type
               (:superclasses ("HandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerBase" code nil (reparse-symbol indented_block_body) [4461 4493])
                            ("self" variable nil (reparse-symbol indented_block_body) [4503 4530])
                            ("self" variable nil (reparse-symbol indented_block_body) [4539 4568]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4408 4412])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [4414 4424])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [4430 4439])
                            ("kw" variable nil (reparse-symbol function_parameters) [4446 4450]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4395 4569])
                    ("get_numpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4592 4596])
                            ("legend" variable nil (reparse-symbol function_parameters) [4598 4604]))                          )
                        (reparse-symbol indented_block_body) [4574 4728])
                    ("get_xdata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4747 4751])
                            ("legend" variable nil (reparse-symbol function_parameters) [4753 4759])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [4761 4769])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [4771 4779])
                            ("width" variable nil (reparse-symbol function_parameters) [4781 4786])
                            ("height" variable nil (reparse-symbol function_parameters) [4788 4794])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [4796 4804]))                          )
                        (reparse-symbol indented_block_body) [4733 5347]))                  
                :type "class")
                nil [4356 5347])
            ("HandlerNpointsYoffsets" type
               (:superclasses ("HandlerNpoints")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerNpoints" code nil (reparse-symbol indented_block_body) [5465 5520])
                            ("self" variable nil (reparse-symbol indented_block_body) [5529 5554]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5413 5417])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [5419 5428])
                            ("yoffsets" variable nil (reparse-symbol function_parameters) [5435 5443])
                            ("kw" variable nil (reparse-symbol function_parameters) [5450 5454]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5400 5555])
                    ("get_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5574 5578])
                            ("legend" variable nil (reparse-symbol function_parameters) [5580 5586])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [5588 5596])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [5598 5606])
                            ("width" variable nil (reparse-symbol function_parameters) [5608 5613])
                            ("height" variable nil (reparse-symbol function_parameters) [5615 5621])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [5623 5631]))                          )
                        (reparse-symbol indented_block_body) [5560 5810]))                  
                :type "class")
                nil [5350 5810])
            ("HandlerLine2D" type
               (:documentation "
    Handler for Line2D instances
    "
                :superclasses ("HandlerNpoints")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerNpoints" code nil (reparse-symbol indented_block_body) [5971 6050]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5918 5922])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [5924 5934])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [5940 5949])
                            ("kw" variable nil (reparse-symbol function_parameters) [5956 5960]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5905 6051])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6076 6080])
                            ("legend" variable nil (reparse-symbol function_parameters) [6082 6088])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [6090 6101])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [6126 6134])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [6136 6144])
                            ("width" variable nil (reparse-symbol function_parameters) [6146 6151])
                            ("height" variable nil (reparse-symbol function_parameters) [6153 6159])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [6161 6169])
                            ("trans" variable nil (reparse-symbol function_parameters) [6194 6199]))                          )
                        (reparse-symbol indented_block_body) [6057 7515]))                  
                :type "class")
                nil [5815 7515])
            ("HandlerPatch" type
               (:documentation "
    Handler for Patches
    "
                :superclasses ("HandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerBase" code nil (reparse-symbol indented_block_body) [7646 7678])
                            ("self" variable nil (reparse-symbol indented_block_body) [7688 7717]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7608 7612])
                            ("patch_func" variable nil (reparse-symbol function_parameters) [7614 7624])
                            ("kw" variable nil (reparse-symbol function_parameters) [7631 7635]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7595 7718])
                    ("_create_patch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7741 7745])
                            ("legend" variable nil (reparse-symbol function_parameters) [7747 7753])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [7755 7766])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [7790 7798])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [7800 7808])
                            ("width" variable nil (reparse-symbol function_parameters) [7810 7815])
                            ("height" variable nil (reparse-symbol function_parameters) [7817 7823])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [7825 7833]))                          )
                        (reparse-symbol indented_block_body) [7723 8238])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8262 8266])
                            ("legend" variable nil (reparse-symbol function_parameters) [8268 8274])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [8276 8287])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [8312 8320])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [8322 8330])
                            ("width" variable nil (reparse-symbol function_parameters) [8332 8337])
                            ("height" variable nil (reparse-symbol function_parameters) [8339 8345])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [8347 8355])
                            ("trans" variable nil (reparse-symbol function_parameters) [8357 8362]))                          )
                        (reparse-symbol indented_block_body) [8243 8564]))                  
                :type "class")
                nil [7518 8564])
            ("HandlerLineCollection" type
               (:documentation "
    Handler for LineCollections
    "
                :superclasses ("HandlerLine2D")
                :members 
                  ( ("get_numpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8682 8686])
                            ("legend" variable nil (reparse-symbol function_parameters) [8688 8694]))                          )
                        (reparse-symbol indented_block_body) [8664 8822])
                    ("_default_update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8852 8856])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [8858 8871])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [8873 8884]))                          )
                        (reparse-symbol indented_block_body) [8827 9195])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9220 9224])
                            ("legend" variable nil (reparse-symbol function_parameters) [9226 9232])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [9234 9245])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [9270 9278])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [9280 9288])
                            ("width" variable nil (reparse-symbol function_parameters) [9290 9295])
                            ("height" variable nil (reparse-symbol function_parameters) [9297 9303])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [9305 9313])
                            ("trans" variable nil (reparse-symbol function_parameters) [9315 9320]))                          )
                        (reparse-symbol indented_block_body) [9201 9655]))                  
                :type "class")
                nil [8567 9655])
            ("HandlerRegularPolyCollection" type
               (:documentation "
    Handler for RegularPolyCollections.
    "
                :superclasses ("HandlerNpointsYoffsets")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerNpointsYoffsets" code nil (reparse-symbol indented_block_body) [9839 9901])
                            ("self" variable nil (reparse-symbol indented_block_body) [9911 9930]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9791 9795])
                            ("yoffsets" variable nil (reparse-symbol function_parameters) [9797 9805])
                            ("sizes" variable nil (reparse-symbol function_parameters) [9812 9817])
                            ("kw" variable nil (reparse-symbol function_parameters) [9824 9828]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9778 9931])
                    ("get_numpoints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9954 9958])
                            ("legend" variable nil (reparse-symbol function_parameters) [9960 9966]))                          )
                        (reparse-symbol indented_block_body) [9936 10094])
                    ("get_sizes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10113 10117])
                            ("legend" variable nil (reparse-symbol function_parameters) [10119 10125])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [10127 10138])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [10157 10165])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [10167 10175])
                            ("width" variable nil (reparse-symbol function_parameters) [10177 10182])
                            ("height" variable nil (reparse-symbol function_parameters) [10184 10190])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [10192 10200]))                          )
                        (reparse-symbol indented_block_body) [10099 10750])
                    ("update_prop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10771 10775])
                            ("legend_handle" variable nil (reparse-symbol function_parameters) [10777 10790])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [10792 10803])
                            ("legend" variable nil (reparse-symbol function_parameters) [10805 10811]))                          )
                        (reparse-symbol indented_block_body) [10755 11050])
                    ("create_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11077 11081])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [11083 11094])
                            ("sizes" variable nil (reparse-symbol function_parameters) [11096 11101])
                            ("offsets" variable nil (reparse-symbol function_parameters) [11103 11110])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [11112 11123]))                          )
                        (reparse-symbol indented_block_body) [11055 11445])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11469 11473])
                            ("legend" variable nil (reparse-symbol function_parameters) [11475 11481])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [11483 11494])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [11519 11527])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [11529 11537])
                            ("width" variable nil (reparse-symbol function_parameters) [11539 11544])
                            ("height" variable nil (reparse-symbol function_parameters) [11546 11552])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [11554 11562])
                            ("trans" variable nil (reparse-symbol function_parameters) [11587 11592]))                          )
                        (reparse-symbol indented_block_body) [11450 12296]))                  
                :type "class")
                nil [9658 12296])
            ("HandlerPathCollection" type
               (:documentation "
    Handler for PathCollections, which are used by scatter
    "
                :superclasses ("HandlerRegularPolyCollection")
                :members 
                  ( ("create_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12457 12461])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [12463 12474])
                            ("sizes" variable nil (reparse-symbol function_parameters) [12476 12481])
                            ("offsets" variable nil (reparse-symbol function_parameters) [12483 12490])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [12492 12503]))                          )
                        (reparse-symbol indented_block_body) [12435 12760]))                  
                :type "class")
                nil [12297 12760])
            ("HandlerCircleCollection" type
               (:documentation "
    Handler for CircleCollections
    "
                :superclasses ("HandlerRegularPolyCollection")
                :members 
                  ( ("create_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12903 12907])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [12909 12920])
                            ("sizes" variable nil (reparse-symbol function_parameters) [12922 12927])
                            ("offsets" variable nil (reparse-symbol function_parameters) [12929 12936])
                            ("transOffset" variable nil (reparse-symbol function_parameters) [12938 12949]))                          )
                        (reparse-symbol indented_block_body) [12881 13140]))                  
                :type "class")
                nil [12766 13140])
            ("HandlerErrorbar" type
               (:documentation "
    Handler for Errorbars
    "
                :superclasses ("HandlerLine2D")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [13341 13368])
                            ("self" variable nil (reparse-symbol indented_block_body) [13377 13404])
                            ("HandlerLine2D" code nil (reparse-symbol indented_block_body) [13414 13523]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13239 13243])
                            ("xerr_size" variable nil (reparse-symbol function_parameters) [13245 13254])
                            ("yerr_size" variable nil (reparse-symbol function_parameters) [13260 13269])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [13293 13303])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [13309 13318])
                            ("kw" variable nil (reparse-symbol function_parameters) [13325 13329]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13226 13524])
                    ("get_err_size" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13546 13550])
                            ("legend" variable nil (reparse-symbol function_parameters) [13552 13558])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [13560 13568])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [13570 13578])
                            ("width" variable nil (reparse-symbol function_parameters) [13580 13585])
                            ("height" variable nil (reparse-symbol function_parameters) [13587 13593])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [13595 13603]))                          )
                        (reparse-symbol indented_block_body) [13529 13822])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13848 13852])
                            ("legend" variable nil (reparse-symbol function_parameters) [13854 13860])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [13862 13873])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [13898 13906])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [13908 13916])
                            ("width" variable nil (reparse-symbol function_parameters) [13918 13923])
                            ("height" variable nil (reparse-symbol function_parameters) [13925 13931])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [13933 13941])
                            ("trans" variable nil (reparse-symbol function_parameters) [13966 13971]))                          )
                        (reparse-symbol indented_block_body) [13829 17175]))                  
                :type "class")
                nil [13142 17175])
            ("HandlerStem" type
               (:documentation "
    Handler for Errorbars
    "
                :superclasses ("HandlerNpointsYoffsets")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerNpointsYoffsets" code nil (reparse-symbol indented_block_body) [17379 17605])
                            ("self" variable nil (reparse-symbol indented_block_body) [17615 17636]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17280 17284])
                            ("marker_pad" variable nil (reparse-symbol function_parameters) [17286 17296])
                            ("numpoints" variable nil (reparse-symbol function_parameters) [17302 17311])
                            ("bottom" variable nil (reparse-symbol function_parameters) [17335 17341])
                            ("yoffsets" variable nil (reparse-symbol function_parameters) [17348 17356])
                            ("kw" variable nil (reparse-symbol function_parameters) [17363 17367]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17267 17637])
                    ("get_ydata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17657 17661])
                            ("legend" variable nil (reparse-symbol function_parameters) [17663 17669])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [17671 17679])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [17681 17689])
                            ("width" variable nil (reparse-symbol function_parameters) [17691 17696])
                            ("height" variable nil (reparse-symbol function_parameters) [17698 17704])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [17706 17714]))                          )
                        (reparse-symbol indented_block_body) [17643 17905])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17930 17934])
                            ("legend" variable nil (reparse-symbol function_parameters) [17936 17942])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [17944 17955])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [17980 17988])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [17990 17998])
                            ("width" variable nil (reparse-symbol function_parameters) [18000 18005])
                            ("height" variable nil (reparse-symbol function_parameters) [18007 18013])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [18015 18023])
                            ("trans" variable nil (reparse-symbol function_parameters) [18048 18053]))                          )
                        (reparse-symbol indented_block_body) [17911 19267]))                  
                :type "class")
                nil [17178 19267])
            ("HandlerTuple" type
               (:documentation "
    Handler for Tuple
    "
                :superclasses ("HandlerBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HandlerBase" code nil (reparse-symbol indented_block_body) [19382 19418]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19357 19361])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19363 19371]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [19344 19419])
                    ("create_artists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19485 19489])
                            ("legend" variable nil (reparse-symbol function_parameters) [19491 19497])
                            ("orig_handle" variable nil (reparse-symbol function_parameters) [19499 19510])
                            ("xdescent" variable nil (reparse-symbol function_parameters) [19535 19543])
                            ("ydescent" variable nil (reparse-symbol function_parameters) [19545 19553])
                            ("width" variable nil (reparse-symbol function_parameters) [19555 19560])
                            ("height" variable nil (reparse-symbol function_parameters) [19562 19568])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [19570 19578])
                            ("trans" variable nil (reparse-symbol function_parameters) [19603 19608]))                          )
                        (reparse-symbol indented_block_body) [19466 20099]))                  
                :type "class")
                nil [19269 20099]))          
      :file "legend_handler.py"
      :pointmax 20099
      :fsize 20098
      :lastmodtime '(20373 43436 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"
:mod:`~matplotlib.mathtext` is a module for parsing a subset of the
TeX math syntax and drawing them to a matplotlib backend.

For a tutorial of its usage see :ref:`mathtext-tutorial`.  This
document is primarily concerned with implementation details.

The module uses pyparsing_ to parse the TeX expression.

.. _pyparsing: http://pyparsing.wikispaces.com/

The Bakoma distribution of the TeX Computer Modern fonts, and STIX
fonts are supported.  There is experimental support for using
arbitrary fonts, but results may vary without proper tweaking and
metrics for those fonts.

If you find TeX expressions that don't parse or render properly,
please email mdroe@stsci.edu, but please check KNOWN ISSUES below first.
\"\"\"" code nil nil [1 727])
            ("__future__" include nil nil [728 759])
            ("os" include nil nil [760 769])
            ("cStringIO" include nil nil [770 800])
            ("math" include nil nil [801 822])
            ("try" code nil nil [823 886])
            ("unicodedata" include nil nil [886 904])
            ("warnings" include nil nil [905 930])
            ("numpy" include nil nil [932 960])
            ("numpy" include nil nil [961 979])
            ("matplotlib.pyparsing" include nil nil [980 1216])
            ("ParserElement" code nil nil [1242 1271])
            ("matplotlib.afm" include nil nil [1273 1303])
            ("matplotlib.cbook" include nil nil [1304 1392])
            ("matplotlib.ft2font" include nil nil [1393 1496])
            ("matplotlib.font_manager" include nil nil [1497 1557])
            ("matplotlib._mathtext_data" include nil nil [1558 1684])
            ("matplotlib" include nil nil [1685 1731])
            ("matplotlib.colors" include nil nil [1735 1770])
            ("matplotlib._png" include nil nil [1771 1801])
            ("get_unicode_index" function
               (:documentation "get_unicode_index(symbol) -> integer

Return the integer index (from the Unicode table) of symbol.  *symbol*
can be a single unicode character, a TeX command (i.e. r'\\pi'), or a
Type1 symbol name (i.e. 'phi').
"
                :arguments 
                  ( ("symbol" variable nil (reparse-symbol function_parameters) [1936 1942]))                  )
                nil [1914 109732]))          
      :file "mathtext.py"
      :pointmax 109732
      :fsize 109731
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax '((INDENT_BLOCK 86379 . 109732) (INDENT_BLOCK 86137 . 86379) (COLON 86130 . 86131) (DEDENT 86097 . 86101) (NAME 86101 . 86114) (LBRACE 86117 . 86118) (NEWLINE 85625 . 85626) (COLON 85624 . 85625) (RPAREN 85623 . 85624) (DEDENT 85587 . 85591) (DEF 85591 . 85594) (LPAREN 85606 . 85607) (NEWLINE 85256 . 85257) (COLON 85255 . 85256) (RPAREN 85254 . 85255) (DEDENT 85219 . 85223) (DEF 85223 . 85226) (LPAREN 85235 . 85236) (NEWLINE 85111 . 85112) (COLON 85110 . 85111) (RPAREN 85109 . 85110) (DEDENT 85078 . 85082) (DEF 85082 . 85085) (LPAREN 85090 . 85091) (NEWLINE 84983 . 84984) (COLON 84982 . 84983) (RPAREN 84981 . 84982) (DEDENT 84948 . 84952) (DEF 84952 . 84955) (LPAREN 84962 . 84963) (NEWLINE 84764 . 84765) (COLON 84763 . 84764) (RPAREN 84762 . 84763) (DEDENT 84739 . 84743) (DEF 84743 . 84746) (LPAREN 84757 . 84758) (NEWLINE 84634 . 84635) (COLON 84633 . 84634) (RPAREN 84632 . 84633) (DEDENT 84610 . 84614) (DEF 84614 . 84617) (LPAREN 84627 . 84628) (NEWLINE 84493 . 84494) (COLON 84492 . 84493) (RPAREN 84491 . 84492) (DEDENT 84469 . 84473) (DEF 84473 . 84476) (LPAREN 84486 . 84487) (NEWLINE 83557 . 83558) (COLON 83556 . 83557) (RPAREN 83555 . 83556) (DEDENT 83533 . 83537) (CLASS 83537 . 83542) (LPAREN 83548 . 83549) (NEWLINE 82692 . 82693) (COLON 82691 . 82692) (RPAREN 82690 . 82691) (DEDENT 82640 . 82644) (DEF 82644 . 82647) (LPAREN 82653 . 82654) (NEWLINE 82481 . 82482) (COLON 82480 . 82481) (RPAREN 82479 . 82480) (DEDENT 82461 . 82465) (DEF 82465 . 82468) (LPAREN 82474 . 82475) (NEWLINE 71186 . 71187) (COLON 71185 . 71186) (RPAREN 71184 . 71185) (DEDENT 71165 . 71165) (CLASS 71165 . 71170) (LPAREN 71177 . 71178) (NEWLINE 70945 . 70946) (COLON 70944 . 70945) (RPAREN 70943 . 70944) (LPAREN 70939 . 70940) (NEWLINE 70839 . 70840) (RPAREN 70838 . 70839) (DEDENT 70826 . 70826) (NAME 70826 . 70830) (LPAREN 70837 . 70838) (NEWLINE 64728 . 64729) (COLON 64727 . 64728) (RPAREN 64726 . 64727) (DEDENT 64709 . 64709) (CLASS 64709 . 64714) (LPAREN 64719 . 64720) (NEWLINE 63822 . 63823) (COLON 63821 . 63822) (RPAREN 63820 . 63821) (DEDENT 63795 . 63795) (CLASS 63795 . 63800) (LPAREN 63814 . 63815) (NEWLINE 62795 . 62796) (COLON 62794 . 62795) (RPAREN 62793 . 62794) (DEDENT 62767 . 62767) (CLASS 62767 . 62772) (LPAREN 62787 . 62788) (NEWLINE 62281 . 62282) (COLON 62280 . 62281) (RPAREN 62279 . 62280) (DEDENT 62252 . 62252) (CLASS 62252 . 62257) (LPAREN 62273 . 62274) (NEWLINE 61433 . 61434) (COLON 61432 . 61433) (RPAREN 61431 . 61432) (DEDENT 61416 . 61416) (CLASS 61416 . 61421) (LPAREN 61426 . 61427) (NEWLINE 61190 . 61191) (COLON 61189 . 61190) (RPAREN 61188 . 61189) (DEDENT 61167 . 61167) (CLASS 61167 . 61172) (LPAREN 61182 . 61183) (NEWLINE 60902 . 60903) (COLON 60901 . 60902) (RPAREN 60900 . 60901) (DEDENT 60879 . 60879) (CLASS 60879 . 60884) (LPAREN 60894 . 60895) (NEWLINE 60819 . 60820) (COLON 60818 . 60819) (RPAREN 60817 . 60818) (DEDENT 60800 . 60800) (CLASS 60800 . 60805) (LPAREN 60812 . 60813) (NEWLINE 60733 . 60734) (COLON 60732 . 60733) (RPAREN 60731 . 60732) (DEDENT 60712 . 60712) (CLASS 60712 . 60717) (LPAREN 60726 . 60727) (NEWLINE 60646 . 60647) (COLON 60645 . 60646) (RPAREN 60644 . 60645) (DEDENT 60626 . 60626) (CLASS 60626 . 60631) (LPAREN 60639 . 60640) (NEWLINE 60561 . 60562) (COLON 60560 . 60561) (RPAREN 60559 . 60560) (DEDENT 60542 . 60542) (CLASS 60542 . 60547) (LPAREN 60554 . 60555) (NEWLINE 60479 . 60480) (COLON 60478 . 60479) (RPAREN 60477 . 60478) (DEDENT 60461 . 60461) (CLASS 60461 . 60466) (LPAREN 60472 . 60473) (NEWLINE 60399 . 60400) (COLON 60398 . 60399) (RPAREN 60397 . 60398) (DEDENT 60382 . 60382) (CLASS 60382 . 60387) (LPAREN 60392 . 60393) (NEWLINE 60321 . 60322) (COLON 60320 . 60321) (RPAREN 60319 . 60320) (LPAREN 60314 . 60315) (NEWLINE 60251 . 60252) (RBRACE 60250 . 60251) (INDENT_BLOCK 59874 . 60250) (NEWLINE 59873 . 59874) (DEDENT 59854 . 59854) (NAME 59854 . 59862) (LBRACE 59872 . 59873) (NEWLINE 59240 . 59241) (COLON 59239 . 59240) (RPAREN 59238 . 59239) (DEDENT 59217 . 59217) (CLASS 59217 . 59222) (LPAREN 59231 . 59232) (NEWLINE 58026 . 58027) (COLON 58025 . 58026) (RPAREN 58024 . 58025) (DEDENT 58009 . 58009) (CLASS 58009 . 58014) (LPAREN 58019 . 58020) (NEWLINE 57741 . 57742) (COLON 57740 . 57741) (RPAREN 57739 . 57740) (DEDENT 57723 . 57723) (CLASS 57723 . 57728) (LPAREN 57734 . 57735) (NEWLINE 57359 . 57360) (COLON 57358 . 57359) (RPAREN 57357 . 57358) (DEDENT 57341 . 57341) (CLASS 57341 . 57346) (LPAREN 57352 . 57353) (NEWLINE 56619 . 56620) (COLON 56618 . 56619) (RPAREN 56617 . 56618) (DEDENT 56603 . 56603) (CLASS 56603 . 56608) (LPAREN 56613 . 56614) (NEWLINE 54237 . 54238) (COLON 54236 . 54237) (RPAREN 54235 . 54236) (DEDENT 54219 . 54219) (CLASS 54219 . 54224) (LPAREN 54230 . 54231) (NEWLINE 50158 . 50159) (COLON 50157 . 50158) (RPAREN 50156 . 50157) (DEDENT 50140 . 50140) (CLASS 50140 . 50145) (LPAREN 50151 . 50152) (NEWLINE 48064 . 48065) (COLON 48063 . 48064) (RPAREN 48062 . 48063) (DEDENT 48048 . 48048) (CLASS 48048 . 48053) (LPAREN 48058 . 48059) (NEWLINE 47162 . 47163) (COLON 47161 . 47162) (RPAREN 47160 . 47161) (DEDENT 47143 . 47143) (CLASS 47143 . 47148) (LPAREN 47155 . 47156) (NEWLINE 44326 . 44327) (COLON 44325 . 44326) (RPAREN 44324 . 44325) (DEDENT 44309 . 44309) (CLASS 44309 . 44314) (LPAREN 44319 . 44320) (NEWLINE 44167 . 44168) (COLON 44166 . 44167) (RPAREN 44165 . 44166) (DEDENT 44151 . 44151) (CLASS 44151 . 44156) (LPAREN 44161 . 44162) (NEWLINE 44007 . 44008) (COLON 44006 . 44007) (RPAREN 44005 . 44006) (DEDENT 43991 . 43991) (CLASS 43991 . 43996) (LPAREN 44001 . 44002) (NEWLINE 43350 . 43351) (COLON 43349 . 43350) (RPAREN 43348 . 43349) (DEDENT 43334 . 43334) (CLASS 43334 . 43339) (LPAREN 43343 . 43344) (NEWLINE 42649 . 42650) (COLON 42648 . 42649) (RPAREN 42647 . 42648) (DEDENT 42630 . 42630) (CLASS 42630 . 42635) (LPAREN 42640 . 42641) (NEWLINE 42619 . 42620) (COLON 42618 . 42619) (RPAREN 42617 . 42618) (CLASS 42588 . 42593) (LPAREN 42609 . 42610) (NEWLINE 35745 . 35746) (COLON 35744 . 35745) (RPAREN 35743 . 35744) (DEDENT 35716 . 35716) (CLASS 35716 . 35721) (LPAREN 35737 . 35738) (NEWLINE 35586 . 35587) (COLON 35585 . 35586) (RPAREN 35584 . 35585) (DEDENT 35555 . 35555) (CLASS 35555 . 35560) (LPAREN 35574 . 35575) (NEWLINE 31724 . 31725) (COLON 31723 . 31724) (RPAREN 31722 . 31723) (DEDENT 31694 . 31694) (CLASS 31694 . 31699) (LPAREN 31709 . 31710) (NEWLINE 27450 . 27451) (COLON 27449 . 27450) (RPAREN 27448 . 27449) (DEDENT 27416 . 27416) (CLASS 27416 . 27421) (LPAREN 27434 . 27435) (NEWLINE 22457 . 22458) (COLON 22456 . 22457) (RPAREN 22455 . 22456) (DEDENT 22424 . 22424) (CLASS 22424 . 22429) (LPAREN 22441 . 22442) (NEWLINE 17901 . 17902) (COLON 17900 . 17901) (RPAREN 17899 . 17900) (DEDENT 17874 . 17874) (CLASS 17874 . 17879) (LPAREN 17893 . 17894) (NEWLINE 12748 . 12749) (COLON 12747 . 12748) (RPAREN 12746 . 12747) (DEDENT 12728 . 12728) (CLASS 12728 . 12733) (LPAREN 12739 . 12740) (NEWLINE 11992 . 11993) (COLON 11991 . 11992) (RPAREN 11990 . 11991) (DEDENT 11948 . 11948) (CLASS 11948 . 11953) (LPAREN 11974 . 11975) (NEWLINE 11220 . 11221) (COLON 11219 . 11220) (RPAREN 11218 . 11219) (DEDENT 11177 . 11177) (CLASS 11177 . 11182) (LPAREN 11202 . 11203) (NEWLINE 10302 . 10303) (COLON 10301 . 10302) (RPAREN 10300 . 10301) (DEDENT 10260 . 10260) (CLASS 10260 . 10265) (LPAREN 10284 . 10285) (NEWLINE 9457 . 9458) (COLON 9456 . 9457) (RPAREN 9455 . 9456) (DEDENT 9415 . 9415) (CLASS 9415 . 9420) (LPAREN 9439 . 9440) (NEWLINE 8208 . 8209) (COLON 8207 . 8208) (RPAREN 8206 . 8207) (DEDENT 8167 . 8167) (CLASS 8167 . 8172) (LPAREN 8190 . 8191) (NEWLINE 7982 . 7983) (COLON 7981 . 7982) (RPAREN 7980 . 7981) (DEDENT 7954 . 7954) (DEF 7954 . 7957) (LPAREN 7979 . 7980) (NEWLINE 7882 . 7883) (COLON 7881 . 7882) (RPAREN 7880 . 7881) (DEDENT 7822 . 7822) (CLASS 7822 . 7827) (LPAREN 7855 . 7856) (NEWLINE 7761 . 7762) (COLON 7760 . 7761) (RPAREN 7759 . 7760) (DEDENT 7736 . 7736) (DEF 7736 . 7739) (LPAREN 7758 . 7759) (NEWLINE 6379 . 6380) (COLON 6378 . 6379) (RPAREN 6377 . 6378) (DEDENT 6331 . 6331) (CLASS 6331 . 6336) (LPAREN 6361 . 6362) (NEWLINE 4654 . 4655) (COLON 4653 . 4654) (RPAREN 4652 . 4653) (DEDENT 4611 . 4611) (CLASS 4611 . 4616) (LPAREN 4636 . 4637) (NEWLINE 3207 . 3208) (COLON 3206 . 3207) (RPAREN 3205 . 3206) (DEDENT 3177 . 3177) (CLASS 3177 . 3182) (LPAREN 3198 . 3199) (NEWLINE 2904 . 2905) (COLON 2903 . 2904) (RPAREN 2902 . 2903) (DEDENT 2881 . 2881) (DEF 2881 . 2884) (LPAREN 2896 . 2897) (NEWLINE 2746 . 2747) (COLON 2745 . 2746) (DEDENT 2726 . 2730) (EXCEPT 2730 . 2736)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
An experimental module for reading dvi files output by TeX. Several
limitations make this not (currently) useful as a general-purpose dvi
preprocessor, but it is currently used by the pdf backend for
processing usetex text.

Interface::

  dvi = Dvi(filename, 72)
  # iterate over pages (but only one page is supported for now):
  for page in dvi:
      w, h, d = page.width, page.height, page.descent
      for x,y,font,glyph,width in page.text:
          fontname = font.texname
          pointsize = font.size
          ...
      for x,y,height,width in page.boxes:
          ...

\"\"\"" code nil nil [1 592])
            ("errno" include nil nil [594 606])
            ("matplotlib" include nil nil [607 624])
            ("matplotlib.cbook" include nil nil [625 661])
            ("numpy" include nil nil [662 680])
            ("struct" include nil nil [681 694])
            ("subprocess" include nil nil [695 712])
            ("_dvistate" variable nil nil [714 790])
            ("Dvi" type
               (:documentation "
    A dvi (\"device-independent\") file, as produced by TeX.
    The current implementation only reads the first page and does not
    even attempt to verify the postamble.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Initialize the object. This takes the filename as input and
        opens the file; actually reading the file happens when
        iterating through the pages of the file.
        \"\"\"" code nil (reparse-symbol indented_block_body) [1046 1241])
                            ("matplotlib" code nil (reparse-symbol indented_block_body) [1250 1304])
                            ("self" variable nil (reparse-symbol indented_block_body) [1313 1345])
                            ("self" variable nil (reparse-symbol indented_block_body) [1354 1368])
                            ("self" variable nil (reparse-symbol indented_block_body) [1377 1392])
                            ("self" variable nil (reparse-symbol indented_block_body) [1401 1427]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1016 1020])
                            ("filename" variable nil (reparse-symbol function_parameters) [1022 1030])
                            ("dpi" variable nil (reparse-symbol function_parameters) [1032 1035]))                          
                        :documentation "
        Initialize the object. This takes the filename as input and
        opens the file; actually reading the file happens when
        iterating through the pages of the file.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1003 1428])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1446 1450]))                          
                        :documentation "
        Iterate through the pages of the file.

        Returns (text, boxes) pairs, where:
          text is a list of (x, y, fontnum, glyphnum, width) tuples
          boxes is a list of (x, y, height, width) tuples

        The coordinates are transformed into a standard Cartesian
        coordinate system at the dpi value given when initializing.
        The coordinates are floating point numbers, but otherwise
        precision is not lost and coordinate values are not clipped to
        integers.
        ")
                        (reparse-symbol indented_block_body) [1433 2145])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2160 2164]))                          
                        :documentation "
        Close the underlying file if it is open.
        ")
                        (reparse-symbol indented_block_body) [2150 2303])
                    ("_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2320 2324]))                          
                        :documentation "
        Output the text and boxes belonging to the most recent page.
        page = dvi._output()
        ")
                        (reparse-symbol indented_block_body) [2308 3806])
                    ("_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3821 3825]))                          
                        :documentation "
        Read one page from the file. Return True if successful,
        False if there were no more pages.
        ")
                        (reparse-symbol indented_block_body) [3811 4481])
                    ("_arg" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4495 4499])
                            ("nbytes" variable nil (reparse-symbol function_parameters) [4501 4507])
                            ("signed" variable nil (reparse-symbol function_parameters) [4509 4515]))                          
                        :documentation "
        Read and return an integer argument *nbytes* long.
        Signedness is determined by the *signed* keyword.
        ")
                        (reparse-symbol indented_block_body) [4486 4903])
                    ("_dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4922 4926])
                            ("byte" variable nil (reparse-symbol function_parameters) [4928 4932]))                          
                        :documentation "
        Based on the opcode *byte*, read the correct kinds of
        arguments from the dvi file and call the method implementing
        that opcode with those arguments.
        ")
                        (reparse-symbol indented_block_body) [4908 8615])
                    ("_pre" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8629 8633])
                            ("i" variable nil (reparse-symbol function_parameters) [8635 8636])
                            ("num" variable nil (reparse-symbol function_parameters) [8638 8641])
                            ("den" variable nil (reparse-symbol function_parameters) [8643 8646])
                            ("mag" variable nil (reparse-symbol function_parameters) [8648 8651])
                            ("comment" variable nil (reparse-symbol function_parameters) [8653 8660]))                          )
                        (reparse-symbol indented_block_body) [8620 9506])
                    ("_set_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9525 9529])
                            ("char" variable nil (reparse-symbol function_parameters) [9531 9535]))                          )
                        (reparse-symbol indented_block_body) [9511 9726])
                    ("_set_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9745 9749])
                            ("a" variable nil (reparse-symbol function_parameters) [9751 9752])
                            ("b" variable nil (reparse-symbol function_parameters) [9754 9755]))                          )
                        (reparse-symbol indented_block_body) [9731 9913])
                    ("_put_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9932 9936])
                            ("char" variable nil (reparse-symbol function_parameters) [9938 9942]))                          )
                        (reparse-symbol indented_block_body) [9918 11062])
                    ("_put_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11081 11085])
                            ("a" variable nil (reparse-symbol function_parameters) [11087 11088])
                            ("b" variable nil (reparse-symbol function_parameters) [11090 11091]))                          )
                        (reparse-symbol indented_block_body) [11067 11282])
                    ("_nop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11446 11450]))                          )
                        (reparse-symbol indented_block_body) [11437 11466])
                    ("_bop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11480 11484])
                            ("c0" variable nil (reparse-symbol function_parameters) [11486 11488])
                            ("c1" variable nil (reparse-symbol function_parameters) [11490 11492])
                            ("c2" variable nil (reparse-symbol function_parameters) [11494 11496])
                            ("c3" variable nil (reparse-symbol function_parameters) [11498 11500])
                            ("c4" variable nil (reparse-symbol function_parameters) [11502 11504])
                            ("c5" variable nil (reparse-symbol function_parameters) [11506 11508])
                            ("c6" variable nil (reparse-symbol function_parameters) [11510 11512])
                            ("c7" variable nil (reparse-symbol function_parameters) [11514 11516])
                            ("c8" variable nil (reparse-symbol function_parameters) [11518 11520])
                            ("c9" variable nil (reparse-symbol function_parameters) [11522 11524])
                            ("p" variable nil (reparse-symbol function_parameters) [11526 11527]))                          )
                        (reparse-symbol indented_block_body) [11471 11934])
                    ("_eop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11948 11952]))                          )
                        (reparse-symbol indented_block_body) [11939 12164])
                    ("_push" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12179 12183]))                          )
                        (reparse-symbol indented_block_body) [12169 12364])
                    ("_pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12378 12382]))                          )
                        (reparse-symbol indented_block_body) [12369 12560])
                    ("_right" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12576 12580])
                            ("b" variable nil (reparse-symbol function_parameters) [12582 12583]))                          )
                        (reparse-symbol indented_block_body) [12565 12709])
                    ("_right_w" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12727 12731])
                            ("new_w" variable nil (reparse-symbol function_parameters) [12733 12738]))                          )
                        (reparse-symbol indented_block_body) [12714 12922])
                    ("_right_x" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12940 12944])
                            ("new_x" variable nil (reparse-symbol function_parameters) [12946 12951]))                          )
                        (reparse-symbol indented_block_body) [12927 13135])
                    ("_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13150 13154])
                            ("a" variable nil (reparse-symbol function_parameters) [13156 13157]))                          )
                        (reparse-symbol indented_block_body) [13140 13282])
                    ("_down_y" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13299 13303])
                            ("new_y" variable nil (reparse-symbol function_parameters) [13305 13310]))                          )
                        (reparse-symbol indented_block_body) [13287 13494])
                    ("_down_z" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13511 13515])
                            ("new_z" variable nil (reparse-symbol function_parameters) [13517 13522]))                          )
                        (reparse-symbol indented_block_body) [13499 13706])
                    ("_fnt_num" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13724 13728])
                            ("k" variable nil (reparse-symbol function_parameters) [13730 13731]))                          )
                        (reparse-symbol indented_block_body) [13711 13858])
                    ("_xxx" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13872 13876])
                            ("special" variable nil (reparse-symbol function_parameters) [13878 13885]))                          )
                        (reparse-symbol indented_block_body) [13863 14133])
                    ("_fnt_def" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14151 14155])
                            ("k" variable nil (reparse-symbol function_parameters) [14157 14158])
                            ("c" variable nil (reparse-symbol function_parameters) [14160 14161])
                            ("s" variable nil (reparse-symbol function_parameters) [14163 14164])
                            ("d" variable nil (reparse-symbol function_parameters) [14166 14167])
                            ("a" variable nil (reparse-symbol function_parameters) [14169 14170])
                            ("l" variable nil (reparse-symbol function_parameters) [14172 14173])
                            ("n" variable nil (reparse-symbol function_parameters) [14175 14176]))                          )
                        (reparse-symbol indented_block_body) [14138 14668])
                    ("_post" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14683 14687]))                          )
                        (reparse-symbol indented_block_body) [14673 14832])
                    ("_post_post" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14969 14973]))                          )
                        (reparse-symbol indented_block_body) [14954 15010]))                  
                :type "class")
                nil [792 15010])
            ("DviFont" type
               (:documentation "
    Object that holds a font's texname and size, supports comparison,
    and knows the widths of glyphs in the same units as the AFM file.
    There are also internal attributes (for use by dviread.py) that
    are *not* used for comparison.

    The size is in Adobe points (converted from TeX points).

    .. attribute:: texname
    
       Name of the font as used internally by TeX and friends. This
       is usually very different from any external font names, and
       :class:`dviread.PsfontsMap` can be used to find the external
       name of the font.

    .. attribute:: size
    
       Size of the font in Adobe points, converted from the slightly
       smaller TeX points.

    .. attribute:: widths
    
       Widths of glyphs in glyph-space units, typically 1/1000ths of
       the point size.
    
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [15875 15941])
                    ("__init__" function
                       (:suite 
                          ( ("self, self, self, self" code nil (reparse-symbol indented_block_body) [16000 16086])
                            ("self" code nil (reparse-symbol indented_block_body) [16095 16139])
                            ("try" code nil (reparse-symbol indented_block_body) [16148 16254])
                            ("self" variable nil (reparse-symbol indented_block_body) [16262 16365]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15960 15964])
                            ("scale" variable nil (reparse-symbol function_parameters) [15966 15971])
                            ("tfm" variable nil (reparse-symbol function_parameters) [15973 15976])
                            ("texname" variable nil (reparse-symbol function_parameters) [15978 15985])
                            ("vf" variable nil (reparse-symbol function_parameters) [15987 15989]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15947 16366])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16382 16386])
                            ("other" variable nil (reparse-symbol function_parameters) [16388 16393]))                          )
                        (reparse-symbol indented_block_body) [16371 16521])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16537 16541])
                            ("other" variable nil (reparse-symbol function_parameters) [16543 16548]))                          )
                        (reparse-symbol indented_block_body) [16526 16589])
                    ("_width_of" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16608 16612])
                            ("char" variable nil (reparse-symbol function_parameters) [16614 16618]))                          
                        :documentation "
        Width of char in dvi units. For internal use by dviread.py.
        ")
                        (reparse-symbol indented_block_body) [16594 16984])
                    ("_height_depth_of" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17010 17014])
                            ("char" variable nil (reparse-symbol function_parameters) [17016 17020]))                          
                        :documentation "
        Height and depth of char in dvi units. For internal use by dviread.py.
        ")
                        (reparse-symbol indented_block_body) [16989 17621]))                  
                :type "class")
                nil [15011 17621])
            ("Vf" type
               (:documentation "
    A virtual font (\\*.vf file) containing subroutines for dvi files.

    Usage::

      vf = Vf(filename)
      glyph = vf[code]
      glyph.text, glyph.boxes, glyph.width
    "
                :superclasses ("Dvi")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Dvi" code nil (reparse-symbol indented_block_body) [17874 17905])
                            ("self" variable nil (reparse-symbol indented_block_body) [17914 17937])
                            ("self" variable nil (reparse-symbol indented_block_body) [17946 17962])
                            ("self" variable nil (reparse-symbol indented_block_body) [17971 17995])
                            ("self" code nil (reparse-symbol indented_block_body) [18004 18016])
                            ("self" code nil (reparse-symbol indented_block_body) [18025 18037]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17849 17853])
                            ("filename" variable nil (reparse-symbol function_parameters) [17855 17863]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17836 18038])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18059 18063])
                            ("code" variable nil (reparse-symbol function_parameters) [18065 18069]))                          )
                        (reparse-symbol indented_block_body) [18043 18105])
                    ("_dispatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18124 18128])
                            ("byte" variable nil (reparse-symbol function_parameters) [18130 18134]))                          )
                        (reparse-symbol indented_block_body) [18110 19556])
                    ("_init_packet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19578 19582])
                            ("pl" variable nil (reparse-symbol function_parameters) [19584 19586])
                            ("cc" variable nil (reparse-symbol function_parameters) [19588 19590])
                            ("tfm" variable nil (reparse-symbol function_parameters) [19592 19595]))                          )
                        (reparse-symbol indented_block_body) [19561 20015])
                    ("_finalize_packet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20041 20045]))                          )
                        (reparse-symbol indented_block_body) [20020 20217])
                    ("_pre" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20231 20235])
                            ("i" variable nil (reparse-symbol function_parameters) [20237 20238])
                            ("x" variable nil (reparse-symbol function_parameters) [20240 20241])
                            ("cs" variable nil (reparse-symbol function_parameters) [20243 20245])
                            ("ds" variable nil (reparse-symbol function_parameters) [20247 20249]))                          )
                        (reparse-symbol indented_block_body) [20222 20563])
                    ("_fnt_def" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20623 20627])
                            ("k" variable nil (reparse-symbol function_parameters) [20629 20630])
                            ("args" variable nil (reparse-symbol function_parameters) [20632 20637]))                          )
                        (reparse-symbol indented_block_body) [20610 20747]))                  
                :type "class")
                nil [17626 20747])
            ("_fix2comp" function
               (:documentation "
    Convert from two's complement to negative.
    "
                :arguments 
                  ( ("num" variable nil (reparse-symbol function_parameters) [20762 20765]))                  )
                nil [20748 20935])
            ("_mul2012" function
               (:documentation "
    Multiply two numbers in 20.12 fixed point format.
    "
                :arguments 
                  ( ("num1" variable nil (reparse-symbol function_parameters) [20949 20953])
                    ("num2" variable nil (reparse-symbol function_parameters) [20955 20959]))                  )
                nil [20936 21130])
            ("Tfm" type
               (:documentation "
    A TeX Font Metric file. This implementation covers only the bare
    minimum needed by the Dvi class.

    .. attribute:: checksum

       Used for verifying against the dvi file.

    .. attribute:: design_size

       Design size of the font (in what units?)

    .. attribute::  width

       Width of each character, needs to be scaled by the factor
       specified in the dvi file. This is a dict because indexing may
       not start from 0.

    .. attribute:: height

       Height of each character.
    
    .. attribute:: depth
        
       Depth of each character.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [21755 21822])
                    ("__init__" function
                       (:suite 
                          ( ("matplotlib" code nil (reparse-symbol indented_block_body) [21866 21932])
                            ("file" variable nil (reparse-symbol indented_block_body) [21941 21968])
                            ("try" code nil (reparse-symbol indented_block_body) [21978 22657])
                            ("self, self, self" code nil (reparse-symbol indented_block_body) [22666 22714])
                            ("widths, heights, depths" code nil (reparse-symbol indented_block_body) [22723 22853])
                            ("for" code nil (reparse-symbol indented_block_body) [22862 23140]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21841 21845])
                            ("filename" variable nil (reparse-symbol function_parameters) [21847 21855]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21828 23140]))                  
                :type "class")
                nil [21131 23140])
            ("PsfontsMap" type
               (:documentation "
    A psfonts.map formatted file, mapping TeX fonts to PS fonts.
    Usage::

     >>> map = PsfontsMap(find_tex_file('pdftex.map'))
     >>> entry = map['ptmbo8r']
     >>> entry.texname
     'ptmbo8r'
     >>> entry.psname
     'Times-Bold'
     >>> entry.encoding
     '/usr/local/texlive/2008/texmf-dist/fonts/enc/dvips/base/8r.enc'
     >>> entry.effects
     {'slant': 0.16700000000000001}
     >>> entry.filename

    For historical reasons, TeX knows many Type-1 fonts by different
    names than the outside world. (For one thing, the names have to
    fit in eight characters.) Also, TeX's native fonts are not Type-1
    but Metafont, which is nontrivial to convert to PostScript except
    as a bitmap. While high-quality conversions to Type-1 format exist
    and are shipped with modern TeX distributions, we need to know
    which Type-1 fonts are the counterparts of which native fonts. For
    these reasons a mapping is needed from internal font names to font
    file names.

    A texmf tree typically includes mapping files called e.g.
    psfonts.map, pdftex.map, dvipdfm.map. psfonts.map is used by
    dvips, pdftex.map by pdfTeX, and dvipdfm.map by dvipdfm.
    psfonts.map might avoid embedding the 35 PostScript fonts (i.e.,
    have no filename for them, as in the Times-Bold example above),
    while the pdf-related files perhaps only avoid the \"Base 14\" pdf
    fonts. But the user may have configured these files differently.
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [24645 24667])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [24711 24726])
                            ("file" variable nil (reparse-symbol indented_block_body) [24735 24762])
                            ("try" code nil (reparse-symbol indented_block_body) [24771 24848]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24686 24690])
                            ("filename" variable nil (reparse-symbol function_parameters) [24692 24700]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24673 24848])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24869 24873])
                            ("texname" variable nil (reparse-symbol function_parameters) [24875 24882]))                          )
                        (reparse-symbol indented_block_body) [24853 25214])
                    ("_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25230 25234])
                            ("file" variable nil (reparse-symbol function_parameters) [25236 25240]))                          
                        :documentation "Parse each line into words.")
                        (reparse-symbol indented_block_body) [25219 26053])
                    ("_register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26072 26076])
                            ("words" variable nil (reparse-symbol function_parameters) [26078 26083]))                          
                        :documentation "Register a font described by \"words\".

        The format is, AFAIK: texname fontname [effects and filenames]
        Effects are PostScript snippets like \".177 SlantFont\",
        filenames begin with one or two less-than signs. A filename
        ending in enc is an encoding file, other filenames are font
        files. This can be overridden with a left bracket: <[foobar
        indicates an encoding file named foobar.

        There is some difference between <foo.pfb and <<bar.pfb in
        subsetting, but I have no example of << in my TeX installation.
        ")
                        (reparse-symbol indented_block_body) [26058 28245]))                  
                :type "class")
                nil [23141 28245])
            ("Encoding" type
               (:documentation "
    Parses a \\*.enc file referenced from a psfonts.map style file.
    The format this class understands is a very limited subset of
    PostScript.

    Usage (subject to change)::

      for name in Encoding(filename):
          whatever(name)
    "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [28536 28561])
                    ("__init__" function
                       (:suite 
                          ( ("file" variable nil (reparse-symbol indented_block_body) [28605 28632])
                            ("try" code nil (reparse-symbol indented_block_body) [28641 28912]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28580 28584])
                            ("filename" variable nil (reparse-symbol function_parameters) [28586 28594]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28567 28912])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28930 28934]))                          )
                        (reparse-symbol indented_block_body) [28917 28995])
                    ("_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29011 29015])
                            ("file" variable nil (reparse-symbol function_parameters) [29017 29021]))                          )
                        (reparse-symbol indented_block_body) [29000 29987]))                  
                :type "class")
                nil [28246 29987])
            ("find_tex_file" function
               (:documentation "
    Call :program:`kpsewhich` to find a file in the texmf tree. If
    *format* is not None, it is used as the value for the
    :option:`--format` option.

    Apparently most existing TeX distributions on Unix-like systems
    use kpathsea. I hear MikTeX (a popular distribution on Windows)
    doesn't use kpathsea, so what do we do? (TODO)

    .. seealso::

      `Kpathsea documentation <http://www.tug.org/kpathsea/>`_
        The library that :program:`kpsewhich` is part of.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [30006 30014])
                    ("format" variable nil (reparse-symbol function_parameters) [30016 30022]))                  )
                nil [29988 31269])
            ("_tfmcache" variable nil nil [31465 31479])
            ("_vfcache" variable nil nil [31480 31493])
            ("_fontfile" function (:arguments 
              ( ("texname" variable nil (reparse-symbol function_parameters) [31509 31516])
                ("class_" variable nil (reparse-symbol function_parameters) [31518 31524])
                ("suffix" variable nil (reparse-symbol function_parameters) [31526 31532])
                ("cache" variable nil (reparse-symbol function_parameters) [31534 31539]))              ) nil [31495 31793])
            ("_tfmfile" function (:arguments 
              ( ("texname" variable nil (reparse-symbol function_parameters) [31807 31814]))              ) nil [31794 31871])
            ("_vffile" function (:arguments 
              ( ("texname" variable nil (reparse-symbol function_parameters) [31884 31891]))              ) nil [31872 31945])
            ("if" code nil nil [31948 32576]))          
      :file "dviread.py"
      :pointmax 32576
      :fsize 32575
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__doc__" variable nil nil [1165 2574])
            ("__version__" variable nil nil [2576 2597])
            ("__versionTime__" variable nil nil [2598 2635])
            ("__author__" variable nil nil [2636 2693])
            ("string" include nil nil [2695 2708])
            ("weakref" include nil nil [2709 2741])
            ("sys" include nil nil [2742 2757])
            ("copy" include nil nil [2742 2757])
            ("warnings" include nil nil [2758 2773])
            ("re" include nil nil [2774 2783])
            ("sre_constants" include nil nil [2784 2804])
            ("xml.sax.saxutils" include nil nil [2805 2828])
            ("__all__" variable nil nil [2931 4406])
            ("\"\"\"
Detect if we are running version 3.X and make appropriate changes
Robert A. Clark
\"\"\"" code nil nil [4409 4498])
            ("if" code nil nil [4499 4642])
            ("if" code nil nil [4643 5926])
            ("_str2dict" function (:arguments 
              ( ("strg" variable nil (reparse-symbol function_parameters) [5941 5945]))              ) nil [5927 5989])
            ("_Constants" type
               (:superclasses ("object")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [6059 6063]))                  
                :type "class")
                nil [6029 6064])
            ("if" code nil nil [6065 6203])
            ("nums" variable nil nil [6203 6229])
            ("hexnums" code nil nil [6230 6264])
            ("alphanums" code nil nil [6265 6291])
            ("col" function
               (:documentation "Returns current column within a string, counting newlines as line separators.
   The first column is number 1.

   Note: the default parsing behavior is to expand tabs in the input string
   before starting the parsing process.  See L{I{ParserElement.parseString}<ParserElement.parseString>} for more information
   on parsing strings containing <TAB>s, and suggested methods to maintain a
   consistent view of the parsed string, the parse location, and line and column
   positions within the parsed string.
   "
                :arguments 
                  ( ("loc" variable nil (reparse-symbol function_parameters) [22874 22877])
                    ("strg" variable nil (reparse-symbol function_parameters) [22878 22882]))                  )
                nil [22865 23498])
            ("lineno" function
               (:documentation "Returns current line number within a string, counting newlines as line separators.
   The first line is number 1.

   Note: the default parsing behavior is to expand tabs in the input string
   before starting the parsing process.  See L{I{ParserElement.parseString}<ParserElement.parseString>} for more information
   on parsing strings containing <TAB>s, and suggested methods to maintain a
   consistent view of the parsed string, the parse location, and line and column
   positions within the parsed string.
   "
                :arguments 
                  ( ("loc" variable nil (reparse-symbol function_parameters) [23510 23513])
                    ("strg" variable nil (reparse-symbol function_parameters) [23514 23518]))                  )
                nil [23499 24086])
            ("line" function
               (:documentation "Returns the line of text containing loc within a string, counting newlines as line separators.
       "
                :arguments 
                  ( ("loc" variable nil (reparse-symbol function_parameters) [24097 24100])
                    ("strg" variable nil (reparse-symbol function_parameters) [24102 24106]))                  )
                nil [24087 24392])
            ("_defaultStartDebugAction" function (:arguments 
              ( ("instring" variable nil (reparse-symbol function_parameters) [24423 24431])
                ("loc" variable nil (reparse-symbol function_parameters) [24433 24436])
                ("expr" variable nil (reparse-symbol function_parameters) [24438 24442]))              ) nil [24393 24565])
            ("_defaultSuccessDebugAction" function (:arguments 
              ( ("instring" variable nil (reparse-symbol function_parameters) [24598 24606])
                ("startloc" variable nil (reparse-symbol function_parameters) [24608 24616])
                ("endloc" variable nil (reparse-symbol function_parameters) [24618 24624])
                ("expr" variable nil (reparse-symbol function_parameters) [24626 24630])
                ("toks" variable nil (reparse-symbol function_parameters) [24632 24636]))              ) nil [24566 24707])
            ("_defaultExceptionDebugAction" function (:arguments 
              ( ("instring" variable nil (reparse-symbol function_parameters) [24742 24750])
                ("loc" variable nil (reparse-symbol function_parameters) [24752 24755])
                ("expr" variable nil (reparse-symbol function_parameters) [24757 24761])
                ("exc" variable nil (reparse-symbol function_parameters) [24763 24766]))              ) nil [24708 24815])
            ("nullDebugAction" function
               (:documentation "'Do-nothing' debug action, to suppress debugging output during parsing."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [24836 24841]))                  )
                nil [24816 24935])
            ("ParserElement" type
               (:documentation "Abstract base level parser element class."
                :superclasses ("object")
                :members 
                  ( ("DEFAULT_WHITE_CHARS" variable nil (reparse-symbol indented_block_body) [25021 25052])
                    ("setDefaultWhitespaceChars" function
                       (:documentation "Overrides the default whitespace chars
        "
                        :arguments 
                          ( ("chars" variable nil (reparse-symbol function_parameters) [25089 25094]))                          )
                        (reparse-symbol indented_block_body) [25058 25210])
                    ("setDefaultWhitespaceChars" variable nil (reparse-symbol indented_block_body) [25214 25281])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [25333 25358])
                            ("self" variable nil (reparse-symbol indented_block_body) [25367 25389])
                            ("self" variable nil (reparse-symbol indented_block_body) [25493 25512])
                            ("self" variable nil (reparse-symbol indented_block_body) [25521 25544])
                            ("self" variable nil (reparse-symbol indented_block_body) [25553 25579])
                            ("self" variable nil (reparse-symbol indented_block_body) [25588 25614])
                            ("self" variable nil (reparse-symbol indented_block_body) [25623 25674])
                            ("self" variable nil (reparse-symbol indented_block_body) [25683 25716])
                            ("self" variable nil (reparse-symbol indented_block_body) [25725 25752])
                            ("self" variable nil (reparse-symbol indented_block_body) [25801 25822])
                            ("self" variable nil (reparse-symbol indented_block_body) [25831 25856])
                            ("self" variable nil (reparse-symbol indented_block_body) [25865 25883])
                            ("self" variable nil (reparse-symbol indented_block_body) [25892 25916])
                            ("self" variable nil (reparse-symbol indented_block_body) [25925 25950])
                            ("self" variable nil (reparse-symbol indented_block_body) [26043 26059])
                            ("self" variable nil (reparse-symbol indented_block_body) [26068 26092])
                            ("self" variable nil (reparse-symbol indented_block_body) [26183 26223])
                            ("self" variable nil (reparse-symbol indented_block_body) [26254 26268])
                            ("self" variable nil (reparse-symbol indented_block_body) [26277 26301])
                            ("self" variable nil (reparse-symbol indented_block_body) [26354 26380]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25301 25305])
                            ("savelist" variable nil (reparse-symbol function_parameters) [25307 25315]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25287 26381])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26396 26400]))                          
                        :documentation "Make a copy of this ParserElement.  Useful for defining different parse actions
           for the same parsing pattern, using copies of the original parse element.")
                        (reparse-symbol indented_block_body) [26386 26828])
                    ("setName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26846 26850])
                            ("name" variable nil (reparse-symbol function_parameters) [26852 26856]))                          
                        :documentation "Define name for this expression, for use in debugging.")
                        (reparse-symbol indented_block_body) [26833 27103])
                    ("setResultsName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27128 27132])
                            ("name" variable nil (reparse-symbol function_parameters) [27134 27138])
                            ("listAllMatches" variable nil (reparse-symbol function_parameters) [27140 27154]))                          
                        :documentation "Define name for referencing matching tokens as a nested attribute
           of the returned parse results.
           NOTE: this returns a *copy* of the original ParserElement object;
           this is so that the client can define a basic element, such as an
           integer, and reference it in multiple places with different names.
        ")
                        (reparse-symbol indented_block_body) [27108 27665])
                    ("setBreak" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27683 27687])
                            ("breakFlag" variable nil (reparse-symbol function_parameters) [27688 27697]))                          
                        :documentation "Method to invoke the Python pdb debugger when this element is
           about to be parsed. Set breakFlag to True to enable, False to
           disable.
        ")
                        (reparse-symbol indented_block_body) [27670 28398])
                    ("_normalizeParseActionArgs" function
                       (:documentation "Internal method used to decorate parse actions that take fewer than 3 arguments,
           so that all parse actions can be called as f(s,l,t)."
                        :arguments 
                          ( ("f" variable nil (reparse-symbol function_parameters) [28434 28435]))                          )
                        (reparse-symbol indented_block_body) [28403 31792])
                    ("_normalizeParseActionArgs" variable nil (reparse-symbol indented_block_body) [31796 31863])
                    ("setParseAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31889 31893])
                            ("fns" variable nil (reparse-symbol function_parameters) [31895 31899])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [31901 31909]))                          
                        :documentation "Define action to perform when successfully matching parse element definition.
           Parse action fn is a callable method with 0-3 arguments, called as fn(s,loc,toks),
           fn(loc,toks), fn(toks), or just fn(), where:
            - s   = the original string being parsed (see note below)
            - loc = the location of the matching substring
            - toks = a list of the matched tokens, packaged as a ParseResults object
           If the functions in fns modify the tokens, they can return them as the return
           value from fn, and the modified list of tokens will replace the original.
           Otherwise, fn does not need to return any value.

           Note: the default parsing behavior is to expand tabs in the input string
           before starting the parsing process.  See L{I{parseString}<parseString>} for more information
           on parsing strings containing <TAB>s, and suggested methods to maintain a
           consistent view of the parsed string, the parse location, and line and column
           positions within the parsed string.
           ")
                        (reparse-symbol indented_block_body) [31869 33211])
                    ("addParseAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33236 33240])
                            ("fns" variable nil (reparse-symbol function_parameters) [33242 33246])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [33248 33256]))                          
                        :documentation "Add parse action to expression's list of parse actions. See L{I{setParseAction}<setParseAction>}.")
                        (reparse-symbol indented_block_body) [33216 33580])
                    ("setFailAction" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33604 33608])
                            ("fn" variable nil (reparse-symbol function_parameters) [33610 33612]))                          
                        :documentation "Define action to perform if parsing fails at this expression.
           Fail acton fn is a callable function that takes the arguments
           fn(s,loc,expr,err) where:
            - s = string being parsed
            - loc = location where expression match was attempted and failed
            - expr = the parse expression that failed
            - err = the exception thrown
           The function returns no value.  It may throw ParseFatalException
           if it is desired to stop parsing immediately.")
                        (reparse-symbol indented_block_body) [33585 34194])
                    ("_skipIgnorables" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34220 34224])
                            ("instring" variable nil (reparse-symbol function_parameters) [34226 34234])
                            ("loc" variable nil (reparse-symbol function_parameters) [34236 34239]))                          )
                        (reparse-symbol indented_block_body) [34199 34602])
                    ("preParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34621 34625])
                            ("instring" variable nil (reparse-symbol function_parameters) [34627 34635])
                            ("loc" variable nil (reparse-symbol function_parameters) [34637 34640]))                          )
                        (reparse-symbol indented_block_body) [34607 34935])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34955 34959])
                            ("instring" variable nil (reparse-symbol function_parameters) [34961 34969])
                            ("loc" variable nil (reparse-symbol function_parameters) [34971 34974])
                            ("doActions" variable nil (reparse-symbol function_parameters) [34976 34985]))                          )
                        (reparse-symbol indented_block_body) [34940 35017])
                    ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35037 35041])
                            ("instring" variable nil (reparse-symbol function_parameters) [35043 35051])
                            ("loc" variable nil (reparse-symbol function_parameters) [35053 35056])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [35058 35067]))                          )
                        (reparse-symbol indented_block_body) [35022 35096])
                    ("_parseNoCache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35136 35140])
                            ("instring" variable nil (reparse-symbol function_parameters) [35142 35150])
                            ("loc" variable nil (reparse-symbol function_parameters) [35152 35155])
                            ("doActions" variable nil (reparse-symbol function_parameters) [35157 35166])
                            ("callPreParse" variable nil (reparse-symbol function_parameters) [35173 35185]))                          )
                        (reparse-symbol indented_block_body) [35117 38627])
                    ("tryParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38646 38650])
                            ("instring" variable nil (reparse-symbol function_parameters) [38652 38660])
                            ("loc" variable nil (reparse-symbol function_parameters) [38662 38665]))                          )
                        (reparse-symbol indented_block_body) [38632 38854])
                    ("_parseCache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39068 39072])
                            ("instring" variable nil (reparse-symbol function_parameters) [39074 39082])
                            ("loc" variable nil (reparse-symbol function_parameters) [39084 39087])
                            ("doActions" variable nil (reparse-symbol function_parameters) [39089 39098])
                            ("callPreParse" variable nil (reparse-symbol function_parameters) [39105 39117]))                          )
                        (reparse-symbol indented_block_body) [39051 39743])
                    ("_parse" variable nil (reparse-symbol indented_block_body) [39748 39770])
                    ("_exprArgCache" variable nil (reparse-symbol indented_block_body) [39875 39893])
                    ("resetCache" function nil (reparse-symbol indented_block_body) [39898 39960])
                    ("resetCache" variable nil (reparse-symbol indented_block_body) [39964 40001])
                    ("_packratEnabled" variable nil (reparse-symbol indented_block_body) [40007 40030])
                    ("enablePackrat" function (:documentation "Enables \"packrat\" parsing, which adds memoizing to the parsing logic.
           Repeated parse attempts at the same string location (which happens
           often in many complex grammars) can immediately return a cached value,
           instead of re-executing parsing/validating code.  Memoizing is done of
           both valid results and parsing exceptions.

           This speedup may break existing programs that use parse actions that
           have side-effects.  For this reason, packrat parsing is disabled when
           you first import pyparsing.  To activate the packrat feature, your
           program must call the class method ParserElement.enablePackrat().  If
           your program uses psyco to \"compile as you go\", you must call
           enablePackrat before calling psyco.full().  If you do not do this,
           Python will crash.  For best results, call enablePackrat() immediately
           after importing pyparsing.
        ") (reparse-symbol indented_block_body) [40035 41193])
                    ("enablePackrat" variable nil (reparse-symbol indented_block_body) [41197 41240])
                    ("parseString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41263 41267])
                            ("instring" variable nil (reparse-symbol function_parameters) [41269 41277])
                            ("parseAll" variable nil (reparse-symbol function_parameters) [41279 41287]))                          
                        :documentation "Execute the parse expression with the given string.
           This is the main interface to the client code, once the complete
           expression has been built.

           If you want the grammar to require that the entire input string be
           successfully parsed, then set parseAll to True (equivalent to ending
           the grammar with StringEnd()).

           Note: parseString implicitly calls expandtabs() on the input string,
           in order to report proper column numbers in parse actions.
           If the input string contains tabs and
           the grammar uses parse actions that use the loc argument to index into the
           string being parsed, you can ensure you have a consistent view of the input
           string by:
            - calling parseWithTabs on your grammar before calling parseString
              (see L{I{parseWithTabs}<parseWithTabs>})
            - define your parse action using the full (s,loc,toks) signature, and
              reference the input string using the parse action's s argument
            - explictly expand the tabs in your input string before calling
              parseString
        ")
                        (reparse-symbol indented_block_body) [41246 42890])
                    ("scanString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42911 42915])
                            ("instring" variable nil (reparse-symbol function_parameters) [42917 42925])
                            ("maxMatches" variable nil (reparse-symbol function_parameters) [42927 42937]))                          
                        :documentation "Scan the input string for expression matches.  Each match will return the
           matching tokens, start location, and end location.  May be called with optional
           maxMatches argument, to clip scanning after 'n' matches are found.

           Note that the start and end locations are reported relative to the string
           being parsed.  See L{I{parseString}<parseString>} for more information on parsing
           strings with embedded tabs.")
                        (reparse-symbol indented_block_body) [42895 44198])
                    ("transformString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44224 44228])
                            ("instring" variable nil (reparse-symbol function_parameters) [44230 44238]))                          
                        :documentation "Extension to scanString, to modify matching text with modified tokens that may
           be returned from a parse action.  To use transformString, define a grammar and
           attach a parse action to it that modifies the returned token list.
           Invoking transformString() on a target string will then scan for matches,
           and replace the matched text patterns according to the logic in the parse
           action.  transformString() returns the resulting transformed string.")
                        (reparse-symbol indented_block_body) [44203 45407])
                    ("searchString" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45430 45434])
                            ("instring" variable nil (reparse-symbol function_parameters) [45436 45444])
                            ("maxMatches" variable nil (reparse-symbol function_parameters) [45446 45456]))                          
                        :documentation "Another extension to scanString, simplifying the access to the tokens found
           to match the given parse expression.  May be called with optional
           maxMatches argument, to clip searching after 'n' matches are found.
        ")
                        (reparse-symbol indented_block_body) [45412 45812])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45829 45833])
                            ("other" variable nil (reparse-symbol function_parameters) [45835 45840]))                          
                        :documentation "Implementation of + operator - returns And")
                        (reparse-symbol indented_block_body) [45817 46240])
                    ("__radd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46258 46262])
                            ("other" variable nil (reparse-symbol function_parameters) [46264 46269]))                          
                        :documentation "Implementation of + operator when left operand is not a ParserElement")
                        (reparse-symbol indented_block_body) [46245 46686])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46703 46707])
                            ("other" variable nil (reparse-symbol function_parameters) [46709 46714]))                          
                        :documentation "Implementation of - operator, returns And with error stop")
                        (reparse-symbol indented_block_body) [46691 47146])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47164 47168])
                            ("other" variable nil (reparse-symbol function_parameters) [47170 47175]))                          
                        :documentation "Implementation of - operator when left operand is not a ParserElement")
                        (reparse-symbol indented_block_body) [47151 47592])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47609 47613])
                            ("other" variable nil (reparse-symbol function_parameters) [47614 47619]))                          )
                        (reparse-symbol indented_block_body) [47597 49893])
                    ("__rmul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49911 49915])
                            ("other" variable nil (reparse-symbol function_parameters) [49917 49922]))                          )
                        (reparse-symbol indented_block_body) [49898 49960])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49976 49980])
                            ("other" variable nil (reparse-symbol function_parameters) [49982 49987]))                          
                        :documentation "Implementation of | operator - returns MatchFirst")
                        (reparse-symbol indented_block_body) [49965 50401])
                    ("__ror__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50418 50422])
                            ("other" variable nil (reparse-symbol function_parameters) [50424 50429]))                          
                        :documentation "Implementation of | operator when left operand is not a ParserElement")
                        (reparse-symbol indented_block_body) [50406 50846])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50863 50867])
                            ("other" variable nil (reparse-symbol function_parameters) [50869 50874]))                          
                        :documentation "Implementation of ^ operator - returns Or")
                        (reparse-symbol indented_block_body) [50851 51272])
                    ("__rxor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51290 51294])
                            ("other" variable nil (reparse-symbol function_parameters) [51296 51301]))                          
                        :documentation "Implementation of ^ operator when left operand is not a ParserElement")
                        (reparse-symbol indented_block_body) [51277 51718])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51735 51739])
                            ("other" variable nil (reparse-symbol function_parameters) [51741 51746]))                          
                        :documentation "Implementation of & operator - returns Each")
                        (reparse-symbol indented_block_body) [51723 52148])
                    ("__rand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52166 52170])
                            ("other" variable nil (reparse-symbol function_parameters) [52172 52177]))                          
                        :documentation "Implementation of & operator when left operand is not a ParserElement")
                        (reparse-symbol indented_block_body) [52153 52594])
                    ("__invert__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52615 52619]))                          
                        :documentation "Implementation of ~ operator - returns NotAny")
                        (reparse-symbol indented_block_body) [52599 52713])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52731 52735])
                            ("name" variable nil (reparse-symbol function_parameters) [52737 52741]))                          
                        :documentation "Shortcut for setResultsName, with listAllMatches=default::
             userdata = Word(alphas).setResultsName(\"name\") + Word(nums+\"-\").setResultsName(\"socsecno\")
           could be written as::
             userdata = Word(alphas)(\"name\") + Word(nums+\"-\")(\"socsecno\")
           ")
                        (reparse-symbol indented_block_body) [52718 53081])
                    ("suppress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53100 53104]))                          
                        :documentation "Suppresses the output of this ParserElement; useful to keep punctuation from
           cluttering up returned output.
        ")
                        (reparse-symbol indented_block_body) [53086 53282])
                    ("leaveWhitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53308 53312]))                          
                        :documentation "Disables the skipping of whitespace before matching the characters in the
           ParserElement's defined pattern.  This is normally only used internally by
           the pyparsing module, but may be needed in some whitespace-sensitive grammars.
        ")
                        (reparse-symbol indented_block_body) [53287 53645])
                    ("setWhitespaceChars" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53674 53678])
                            ("chars" variable nil (reparse-symbol function_parameters) [53680 53685]))                          
                        :documentation "Overrides the default whitespace chars
        ")
                        (reparse-symbol indented_block_body) [53650 53881])
                    ("parseWithTabs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53905 53909]))                          
                        :documentation "Overrides default behavior to expand <TAB>s to spaces before parsing the input string.
           Must be called before parseString when the input grammar contains elements that
           match <TAB> characters.")
                        (reparse-symbol indented_block_body) [53886 54189])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54206 54210])
                            ("other" variable nil (reparse-symbol function_parameters) [54212 54217]))                          
                        :documentation "Define expression to be ignored (e.g., comments) while doing pattern
           matching; may be called repeatedly, to define multiple comment or other
           ignorable patterns.
        ")
                        (reparse-symbol indented_block_body) [54194 54655])
                    ("setDebugActions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54681 54685])
                            ("startAction" variable nil (reparse-symbol function_parameters) [54687 54698])
                            ("successAction" variable nil (reparse-symbol function_parameters) [54700 54713])
                            ("exceptionAction" variable nil (reparse-symbol function_parameters) [54715 54730]))                          
                        :documentation "Enable display of debugging messages while doing pattern matching.")
                        (reparse-symbol indented_block_body) [54660 55083])
                    ("setDebug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55102 55106])
                            ("flag" variable nil (reparse-symbol function_parameters) [55108 55112]))                          
                        :documentation "Enable display of debugging messages while doing pattern matching.
           Set flag to True to enable, False to disable.")
                        (reparse-symbol indented_block_body) [55088 55460])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55478 55482]))                          )
                        (reparse-symbol indented_block_body) [55465 55511])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55530 55534]))                          )
                        (reparse-symbol indented_block_body) [55516 55565])
                    ("streamline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55586 55590]))                          )
                        (reparse-symbol indented_block_body) [55570 55674])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55699 55703])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [55705 55721]))                          )
                        (reparse-symbol indented_block_body) [55679 55738])
                    ("validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55757 55761])
                            ("validateTrace" variable nil (reparse-symbol function_parameters) [55763 55776]))                          
                        :documentation "Check defined expressions for valid structure, check for infinite recursive definitions.")
                        (reparse-symbol indented_block_body) [55743 55920])
                    ("parseFile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55940 55944])
                            ("file_or_filename" variable nil (reparse-symbol function_parameters) [55946 55962]))                          
                        :documentation "Execute the parse expression on the given file or filename.
           If a filename is specified (instead of a file object),
           the entire file is opened, read, and closed before parsing.
        ")
                        (reparse-symbol indented_block_body) [55925 56433])
                    ("getException" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56455 56459]))                          )
                        (reparse-symbol indented_block_body) [56438 56515])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56536 56540])
                            ("aname" variable nil (reparse-symbol function_parameters) [56541 56546]))                          )
                        (reparse-symbol indented_block_body) [56520 56743])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56759 56763])
                            ("other" variable nil (reparse-symbol function_parameters) [56764 56769]))                          )
                        (reparse-symbol indented_block_body) [56748 57056])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57074 57078]))                          )
                        (reparse-symbol indented_block_body) [57061 57111])
                    ("__req__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57128 57132])
                            ("other" variable nil (reparse-symbol function_parameters) [57133 57138]))                          )
                        (reparse-symbol indented_block_body) [57116 57170]))                  
                :type "class")
                nil [24936 57170])
            ("Token" type
               (:documentation "Abstract ParserElement subclass, for defining atomic matching patterns."
                :superclasses ("ParserElement")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [57316 57360]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57300 57304]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [57286 57361])
                    ("setName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57435 57439])
                            ("name" variable nil (reparse-symbol function_parameters) [57441 57445]))                          )
                        (reparse-symbol indented_block_body) [57423 57596]))                  
                :type "class")
                nil [57172 57596])
            ("Empty" type
               (:documentation "An empty token, will always match."
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [57697 57725])
                            ("self" variable nil (reparse-symbol indented_block_body) [57734 57753])
                            ("self" variable nil (reparse-symbol indented_block_body) [57762 57788])
                            ("self" variable nil (reparse-symbol indented_block_body) [57797 57823]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57681 57685]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [57667 57824]))                  
                :type "class")
                nil [57598 57824])
            ("NoMatch" type
               (:documentation "A token that will never match."
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [57923 57953])
                            ("self" variable nil (reparse-symbol indented_block_body) [57962 57983])
                            ("self" variable nil (reparse-symbol indented_block_body) [57992 58018])
                            ("self" variable nil (reparse-symbol indented_block_body) [58027 58053])
                            ("self" variable nil (reparse-symbol indented_block_body) [58062 58095]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57907 57911]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [57893 58096])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58160 58164])
                            ("instring" variable nil (reparse-symbol function_parameters) [58166 58174])
                            ("loc" variable nil (reparse-symbol function_parameters) [58176 58179])
                            ("doActions" variable nil (reparse-symbol function_parameters) [58181 58190]))                          )
                        (reparse-symbol indented_block_body) [58145 58298]))                  
                :type "class")
                nil [57826 58298])
            ("Literal" type
               (:documentation "Token to exactly match a specified string."
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [58422 58452])
                            ("self" variable nil (reparse-symbol indented_block_body) [58461 58485])
                            ("self" variable nil (reparse-symbol indented_block_body) [58494 58526])
                            ("try" code nil (reparse-symbol indented_block_body) [58535 58788])
                            ("self" code nil (reparse-symbol indented_block_body) [58796 58834])
                            ("self" code nil (reparse-symbol indented_block_body) [58843 58880])
                            ("self" variable nil (reparse-symbol indented_block_body) [58889 58916])
                            ("self" variable nil (reparse-symbol indented_block_body) [58969 58995]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58393 58397])
                            ("matchString" variable nil (reparse-symbol function_parameters) [58399 58410]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [58379 58996])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59247 59251])
                            ("instring" variable nil (reparse-symbol function_parameters) [59253 59261])
                            ("loc" variable nil (reparse-symbol function_parameters) [59263 59266])
                            ("doActions" variable nil (reparse-symbol function_parameters) [59268 59277]))                          )
                        (reparse-symbol indented_block_body) [59232 59622]))                  
                :type "class")
                nil [58300 59622])
            ("_L" variable nil nil [59622 59634])
            ("Keyword" type
               (:documentation "Token to exactly match a specified string as a keyword, that is, it must be
       immediately followed by a non-keyword character.  Compare with Literal::
         Literal(\"if\") will match the leading 'if' in 'ifAndOnlyIf'.
         Keyword(\"if\") will not; it will only match the leading 'if in 'if x=1', or 'if(y==2)'
       Accepts two optional constructor arguments in addition to the keyword string:
       identChars is a string of characters that would be valid identifier characters,
       defaulting to all alphanumerics + \"_\" and \"$\"; caseless allows case-insensitive
       matching, default is False.
    "
                :superclasses ("Token")
                :members 
                  ( ("DEFAULT_KEYWORD_CHARS" code nil (reparse-symbol indented_block_body) [60291 60329])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [60428 60458])
                            ("self" variable nil (reparse-symbol indented_block_body) [60467 60491])
                            ("self" variable nil (reparse-symbol indented_block_body) [60500 60532])
                            ("try" code nil (reparse-symbol indented_block_body) [60541 60759])
                            ("self" code nil (reparse-symbol indented_block_body) [60767 60798])
                            ("self" code nil (reparse-symbol indented_block_body) [60807 60844])
                            ("self" variable nil (reparse-symbol indented_block_body) [60853 60880])
                            ("self" variable nil (reparse-symbol indented_block_body) [60933 60959])
                            ("self" variable nil (reparse-symbol indented_block_body) [60968 60992])
                            ("if" code nil (reparse-symbol indented_block_body) [61001 61111])
                            ("self" variable nil (reparse-symbol indented_block_body) [61119 61158]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60349 60353])
                            ("matchString" variable nil (reparse-symbol function_parameters) [60355 60366])
                            ("identChars" variable nil (reparse-symbol function_parameters) [60368 60378])
                            ("caseless" variable nil (reparse-symbol function_parameters) [60402 60410]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [60335 61159])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61179 61183])
                            ("instring" variable nil (reparse-symbol function_parameters) [61185 61193])
                            ("loc" variable nil (reparse-symbol function_parameters) [61195 61198])
                            ("doActions" variable nil (reparse-symbol function_parameters) [61200 61209]))                          )
                        (reparse-symbol indented_block_body) [61164 62131])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62145 62149]))                          )
                        (reparse-symbol indented_block_body) [62136 62261])
                    ("setDefaultKeywordChars" function
                       (:documentation "Overrides the default Keyword chars
        "
                        :arguments 
                          ( ("chars" variable nil (reparse-symbol function_parameters) [62294 62299]))                          )
                        (reparse-symbol indented_block_body) [62266 62408])
                    ("setDefaultKeywordChars" variable nil (reparse-symbol indented_block_body) [62412 62473]))                  
                :type "class")
                nil [59636 62474])
            ("CaselessLiteral" type
               (:documentation "Token to match a specified string, ignoring case of letters.
       Note: the matched results will always be in the case of the given
       match string, NOT the case of the input text.
    "
                :superclasses ("Literal")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [62757 62816])
                            ("self" variable nil (reparse-symbol indented_block_body) [62866 62897])
                            ("self" code nil (reparse-symbol indented_block_body) [62906 62944])
                            ("self" code nil (reparse-symbol indented_block_body) [62953 62990]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62728 62732])
                            ("matchString" variable nil (reparse-symbol function_parameters) [62734 62745]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [62714 62991])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63055 63059])
                            ("instring" variable nil (reparse-symbol function_parameters) [63061 63069])
                            ("loc" variable nil (reparse-symbol function_parameters) [63071 63074])
                            ("doActions" variable nil (reparse-symbol function_parameters) [63076 63085]))                          )
                        (reparse-symbol indented_block_body) [63040 63379]))                  
                :type "class")
                nil [62476 63379])
            ("CaselessKeyword" type
               (:superclasses ("Keyword")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [63501 63579]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63430 63434])
                            ("matchString" variable nil (reparse-symbol function_parameters) [63436 63447])
                            ("identChars" variable nil (reparse-symbol function_parameters) [63449 63459]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [63416 63580])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63600 63604])
                            ("instring" variable nil (reparse-symbol function_parameters) [63606 63614])
                            ("loc" variable nil (reparse-symbol function_parameters) [63616 63619])
                            ("doActions" variable nil (reparse-symbol function_parameters) [63621 63630]))                          )
                        (reparse-symbol indented_block_body) [63585 64047]))                  
                :type "class")
                nil [63380 64047])
            ("Word" type
               (:documentation "Token for matching words composed of allowed character sets.
       Defined with string containing all allowed initial characters,
       an optional string containing allowed body characters (if omitted,
       defaults to the initial character set), and an optional minimum,
       maximum, and/or exact length.  The default value for min is 1 (a
       minimum value < 1 is not valid); the default values for max and exact
       are 0, meaning no maximum or exact length restriction.
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [64671 64698])
                            ("self" variable nil (reparse-symbol indented_block_body) [64707 64737])
                            ("self" variable nil (reparse-symbol indented_block_body) [64746 64783])
                            ("if" code nil (reparse-symbol indented_block_body) [64792 65007])
                            ("self" code nil (reparse-symbol indented_block_body) [65016 65043])
                            ("if" code nil (reparse-symbol indented_block_body) [65053 65188])
                            ("self" variable nil (reparse-symbol indented_block_body) [65197 65214])
                            ("if" code nil (reparse-symbol indented_block_body) [65224 65315])
                            ("if" code nil (reparse-symbol indented_block_body) [65324 65402])
                            ("self" variable nil (reparse-symbol indented_block_body) [65411 65434])
                            ("self" code nil (reparse-symbol indented_block_body) [65443 65480])
                            ("self" variable nil (reparse-symbol indented_block_body) [65533 65559])
                            ("self" variable nil (reparse-symbol indented_block_body) [65568 65594])
                            ("if" code nil (reparse-symbol indented_block_body) [65604 66525]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64588 64592])
                            ("initChars" variable nil (reparse-symbol function_parameters) [64594 64603])
                            ("bodyChars" variable nil (reparse-symbol function_parameters) [64605 64614])
                            ("min" variable nil (reparse-symbol function_parameters) [64621 64624])
                            ("max" variable nil (reparse-symbol function_parameters) [64628 64631])
                            ("exact" variable nil (reparse-symbol function_parameters) [64635 64640])
                            ("asKeyword" variable nil (reparse-symbol function_parameters) [64644 64653]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [64574 66525])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66545 66549])
                            ("instring" variable nil (reparse-symbol function_parameters) [66551 66559])
                            ("loc" variable nil (reparse-symbol function_parameters) [66561 66564])
                            ("doActions" variable nil (reparse-symbol function_parameters) [66566 66575]))                          )
                        (reparse-symbol indented_block_body) [66530 68020])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68038 68042]))                          )
                        (reparse-symbol indented_block_body) [68025 68618]))                  
                :type "class")
                nil [64048 68618])
            ("Regex" type
               (:documentation "Token for matching strings that match a given regular expression.
       Defined with string specifying the regular expression in a form recognized by the inbuilt Python re module.
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"The parameters pattern and flags are passed to the re.compile() function as-is. See the Python re module for an explanation of the acceptable patterns and flags.\"\"\"" code nil (reparse-symbol indented_block_body) [68887 69054])
                            ("super" code nil (reparse-symbol indented_block_body) [69063 69091])
                            ("if" code nil (reparse-symbol indented_block_body) [69101 69250])
                            ("self" variable nil (reparse-symbol indented_block_body) [69259 69281])
                            ("self" variable nil (reparse-symbol indented_block_body) [69290 69308])
                            ("try" code nil (reparse-symbol indented_block_body) [69318 69598])
                            ("self" variable nil (reparse-symbol indented_block_body) [69607 69630])
                            ("self" code nil (reparse-symbol indented_block_body) [69639 69676])
                            ("self" variable nil (reparse-symbol indented_block_body) [69729 69755])
                            ("self" variable nil (reparse-symbol indented_block_body) [69764 69790]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68854 68858])
                            ("pattern" variable nil (reparse-symbol function_parameters) [68860 68867])
                            ("flags" variable nil (reparse-symbol function_parameters) [68869 68874]))                          
                        :documentation "The parameters pattern and flags are passed to the re.compile() function as-is. See the Python re module for an explanation of the acceptable patterns and flags."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [68840 69791])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69811 69815])
                            ("instring" variable nil (reparse-symbol function_parameters) [69817 69825])
                            ("loc" variable nil (reparse-symbol function_parameters) [69827 69830])
                            ("doActions" variable nil (reparse-symbol function_parameters) [69832 69841]))                          )
                        (reparse-symbol indented_block_body) [69796 70226])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70244 70248]))                          )
                        (reparse-symbol indented_block_body) [70231 70466]))                  
                :type "class")
                nil [68620 70466])
            ("QuotedString" type
               (:documentation "Token for matching strings that are delimited by quoting characters.
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
           Defined with the following parameters:
            - quoteChar - string of one or more characters defining the quote delimiting string
            - escChar - character to escape quotes, typically backslash (default=None)
            - escQuote - special quote sequence to escape an embedded quote string (such as SQL's \"\" to escape an embedded \") (default=None)
            - multiline - boolean indicating whether quotes can span multiple lines (default=False)
            - unquoteResults - boolean indicating whether the matched text should be unquoted (default=True)
            - endQuoteChar - string of one or more characters defining the end of the quote delimited string (default=None => same as quoteChar)
        \"\"\"" code nil (reparse-symbol indented_block_body) [70709 71452])
                            ("super" code nil (reparse-symbol indented_block_body) [71461 71496])
                            ("quoteChar" variable nil (reparse-symbol indented_block_body) [71571 71600])
                            ("if" code nil (reparse-symbol indented_block_body) [71609 71758])
                            ("if" code nil (reparse-symbol indented_block_body) [71767 72066])
                            ("self" variable nil (reparse-symbol indented_block_body) [72075 72101])
                            ("self" variable nil (reparse-symbol indented_block_body) [72110 72144])
                            ("self" variable nil (reparse-symbol indented_block_body) [72153 72187])
                            ("self" variable nil (reparse-symbol indented_block_body) [72196 72228])
                            ("self" variable nil (reparse-symbol indented_block_body) [72237 72277])
                            ("self" variable nil (reparse-symbol indented_block_body) [72286 72308])
                            ("self" variable nil (reparse-symbol indented_block_body) [72317 72341])
                            ("self" variable nil (reparse-symbol indented_block_body) [72350 72386])
                            ("if" code nil (reparse-symbol indented_block_body) [72396 72985])
                            ("if" code nil (reparse-symbol indented_block_body) [72993 73341])
                            ("if" code nil (reparse-symbol indented_block_body) [73349 73425])
                            ("if" code nil (reparse-symbol indented_block_body) [73433 73579])
                            ("self" variable nil (reparse-symbol indented_block_body) [73587 73643])
                            ("try" code nil (reparse-symbol indented_block_body) [73653 73938])
                            ("self" variable nil (reparse-symbol indented_block_body) [73947 73970])
                            ("self" code nil (reparse-symbol indented_block_body) [73979 74016])
                            ("self" variable nil (reparse-symbol indented_block_body) [74069 74095])
                            ("self" variable nil (reparse-symbol indented_block_body) [74104 74130]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70597 70601])
                            ("quoteChar" variable nil (reparse-symbol function_parameters) [70603 70612])
                            ("escChar" variable nil (reparse-symbol function_parameters) [70614 70621])
                            ("escQuote" variable nil (reparse-symbol function_parameters) [70628 70636])
                            ("multiline" variable nil (reparse-symbol function_parameters) [70643 70652])
                            ("unquoteResults" variable nil (reparse-symbol function_parameters) [70660 70674])
                            ("endQuoteChar" variable nil (reparse-symbol function_parameters) [70681 70693]))                          
                        :documentation "
           Defined with the following parameters:
            - quoteChar - string of one or more characters defining the quote delimiting string
            - escChar - character to escape quotes, typically backslash (default=None)
            - escQuote - special quote sequence to escape an embedded quote string (such as SQL's \"\" to escape an embedded \") (default=None)
            - multiline - boolean indicating whether quotes can span multiple lines (default=False)
            - unquoteResults - boolean indicating whether the matched text should be unquoted (default=True)
            - endQuoteChar - string of one or more characters defining the end of the quote delimited string (default=None => same as quoteChar)
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [70583 74131])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74151 74155])
                            ("instring" variable nil (reparse-symbol function_parameters) [74157 74165])
                            ("loc" variable nil (reparse-symbol function_parameters) [74167 74170])
                            ("doActions" variable nil (reparse-symbol function_parameters) [74172 74181]))                          )
                        (reparse-symbol indented_block_body) [74136 74975])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74993 74997]))                          )
                        (reparse-symbol indented_block_body) [74980 75278]))                  
                :type "class")
                nil [70468 75278])
            ("CharsNotIn" type
               (:documentation "Token for matching words composed of characters *not* in a given set.
       Defined with string containing all disallowed characters, and an optional
       minimum, maximum, and/or exact length.  The default value for min is 1 (a
       minimum value < 1 is not valid); the default values for max and exact
       are 0, meaning no maximum or exact length restriction.
    "
                :superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [75758 75791])
                            ("self" variable nil (reparse-symbol indented_block_body) [75800 75827])
                            ("self" variable nil (reparse-symbol indented_block_body) [75836 75860])
                            ("if" code nil (reparse-symbol indented_block_body) [75870 76017])
                            ("self" variable nil (reparse-symbol indented_block_body) [76026 76043])
                            ("if" code nil (reparse-symbol indented_block_body) [76053 76144])
                            ("if" code nil (reparse-symbol indented_block_body) [76153 76231])
                            ("self" variable nil (reparse-symbol indented_block_body) [76240 76263])
                            ("self" code nil (reparse-symbol indented_block_body) [76272 76309])
                            ("self" variable nil (reparse-symbol indented_block_body) [76318 76360])
                            ("self" variable nil (reparse-symbol indented_block_body) [76413 76439]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75709 75713])
                            ("notChars" variable nil (reparse-symbol function_parameters) [75715 75723])
                            ("min" variable nil (reparse-symbol function_parameters) [75725 75728])
                            ("max" variable nil (reparse-symbol function_parameters) [75732 75735])
                            ("exact" variable nil (reparse-symbol function_parameters) [75739 75744]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [75695 76440])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76460 76464])
                            ("instring" variable nil (reparse-symbol function_parameters) [76466 76474])
                            ("loc" variable nil (reparse-symbol function_parameters) [76476 76479])
                            ("doActions" variable nil (reparse-symbol function_parameters) [76481 76490]))                          )
                        (reparse-symbol indented_block_body) [76445 77213])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77231 77235]))                          )
                        (reparse-symbol indented_block_body) [77218 77579]))                  
                :type "class")
                nil [75280 77579])
            ("White" type
               (:documentation "Special matching class for matching whitespace.  Normally, whitespace is ignored
       by pyparsing grammars.  This class is included when some whitespace structures
       are significant.  Define with a string containing the whitespace characters to be
       matched; default is \" \\\\t\\\\n\".  Also takes optional min, max, and exact arguments,
       as defined for the Word class."
                :superclasses ("Token")
                :members 
                  ( ("whiteStrs" variable nil (reparse-symbol indented_block_body) [77998 78133])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [78203 78231])
                            ("self" variable nil (reparse-symbol indented_block_body) [78240 78260])
                            ("self" code nil (reparse-symbol indented_block_body) [78269 78361])
                            ("self" variable nil (reparse-symbol indented_block_body) [78404 78472])
                            ("self" variable nil (reparse-symbol indented_block_body) [78481 78507])
                            ("self" code nil (reparse-symbol indented_block_body) [78516 78553])
                            ("self" variable nil (reparse-symbol indented_block_body) [78607 78624])
                            ("if" code nil (reparse-symbol indented_block_body) [78634 78725])
                            ("if" code nil (reparse-symbol indented_block_body) [78734 78812]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78151 78155])
                            ("ws" variable nil (reparse-symbol function_parameters) [78157 78159])
                            ("min" variable nil (reparse-symbol function_parameters) [78171 78174])
                            ("max" variable nil (reparse-symbol function_parameters) [78178 78181])
                            ("exact" variable nil (reparse-symbol function_parameters) [78185 78190]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [78138 78812])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78832 78836])
                            ("instring" variable nil (reparse-symbol function_parameters) [78838 78846])
                            ("loc" variable nil (reparse-symbol function_parameters) [78848 78851])
                            ("doActions" variable nil (reparse-symbol function_parameters) [78853 78862]))                          )
                        (reparse-symbol indented_block_body) [78817 79571]))                  
                :type "class")
                nil [77580 79571])
            ("_PositionToken" type
               (:superclasses ("Token")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [79636 79673])
                            ("self" variable nil (reparse-symbol indented_block_body) [79682 79715])
                            ("self" variable nil (reparse-symbol indented_block_body) [79724 79750])
                            ("self" variable nil (reparse-symbol indented_block_body) [79759 79785]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79620 79624]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [79606 79786]))                  
                :type "class")
                nil [79573 79786])
            ("GoToColumn" type
               (:documentation "Token to advance to a specific column of input text; useful for tabular report scraping."
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [79961 79994])
                            ("self" variable nil (reparse-symbol indented_block_body) [80003 80019]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79938 79942])
                            ("colno" variable nil (reparse-symbol function_parameters) [79944 79949]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [79924 80020])
                    ("preParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80039 80043])
                            ("instring" variable nil (reparse-symbol function_parameters) [80045 80053])
                            ("loc" variable nil (reparse-symbol function_parameters) [80055 80058]))                          )
                        (reparse-symbol indented_block_body) [80025 80378])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80398 80402])
                            ("instring" variable nil (reparse-symbol function_parameters) [80404 80412])
                            ("loc" variable nil (reparse-symbol function_parameters) [80414 80417])
                            ("doActions" variable nil (reparse-symbol function_parameters) [80419 80428]))                          )
                        (reparse-symbol indented_block_body) [80383 80701]))                  
                :type "class")
                nil [79787 80701])
            ("LineStart" type
               (:documentation "Matches if current position is at the beginning of a line within the parse string"
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [80861 80893])
                            ("self" code nil (reparse-symbol indented_block_body) [80902 80934])
                            ("self" variable nil (reparse-symbol indented_block_body) [80943 80981]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80845 80849]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [80831 80982])
                    ("preParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81045 81049])
                            ("instring" variable nil (reparse-symbol function_parameters) [81051 81059])
                            ("loc" variable nil (reparse-symbol function_parameters) [81061 81064]))                          )
                        (reparse-symbol indented_block_body) [81031 81207])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81227 81231])
                            ("instring" variable nil (reparse-symbol function_parameters) [81233 81241])
                            ("loc" variable nil (reparse-symbol function_parameters) [81243 81246])
                            ("doActions" variable nil (reparse-symbol function_parameters) [81248 81257]))                          )
                        (reparse-symbol indented_block_body) [81212 81629]))                  
                :type "class")
                nil [80702 81629])
            ("LineEnd" type
               (:documentation "Matches if current position is at the end of a line within the parse string"
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [81781 81811])
                            ("self" code nil (reparse-symbol indented_block_body) [81820 81852])
                            ("self" variable nil (reparse-symbol indented_block_body) [81861 81897]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81765 81769]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [81751 81898])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81962 81966])
                            ("instring" variable nil (reparse-symbol function_parameters) [81968 81976])
                            ("loc" variable nil (reparse-symbol function_parameters) [81978 81981])
                            ("doActions" variable nil (reparse-symbol function_parameters) [81983 81992]))                          )
                        (reparse-symbol indented_block_body) [81947 82527]))                  
                :type "class")
                nil [81630 82527])
            ("StringStart" type
               (:documentation "Matches if current position is at the beginning of the parse string"
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [82675 82709])
                            ("self" variable nil (reparse-symbol indented_block_body) [82718 82756]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82659 82663]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [82645 82757])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82821 82825])
                            ("instring" variable nil (reparse-symbol function_parameters) [82827 82835])
                            ("loc" variable nil (reparse-symbol function_parameters) [82837 82840])
                            ("doActions" variable nil (reparse-symbol function_parameters) [82842 82851]))                          )
                        (reparse-symbol indented_block_body) [82806 83251]))                  
                :type "class")
                nil [82528 83251])
            ("StringEnd" type
               (:documentation "Matches if current position is at the end of the parse string"
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [83391 83423])
                            ("self" variable nil (reparse-symbol indented_block_body) [83432 83468]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83375 83379]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [83361 83469])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83533 83537])
                            ("instring" variable nil (reparse-symbol function_parameters) [83539 83547])
                            ("loc" variable nil (reparse-symbol function_parameters) [83549 83552])
                            ("doActions" variable nil (reparse-symbol function_parameters) [83554 83563]))                          )
                        (reparse-symbol indented_block_body) [83518 84050]))                  
                :type "class")
                nil [83252 84050])
            ("WordStart" type
               (:documentation "Matches if the current position is at the beginning of a Word, and
       is not preceded by any character in a given set of wordChars
       (default=printables). To emulate the \\b behavior of regular expressions,
       use WordStart(alphanums). WordStart will also match at the beginning of
       the string being parsed, or at the beginning of a line.
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [84512 84544])
                            ("self" variable nil (reparse-symbol indented_block_body) [84553 84590])
                            ("self" variable nil (reparse-symbol indented_block_body) [84599 84641]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84473 84477])
                            ("wordChars" variable nil (reparse-symbol function_parameters) [84479 84488]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [84460 84642])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84661 84665])
                            ("instring" variable nil (reparse-symbol function_parameters) [84667 84675])
                            ("loc" variable nil (reparse-symbol function_parameters) [84677 84680])
                            ("doActions" variable nil (reparse-symbol function_parameters) [84682 84691]))                          )
                        (reparse-symbol indented_block_body) [84647 84982]))                  
                :type "class")
                nil [84051 84982])
            ("WordEnd" type
               (:documentation "Matches if the current position is at the end of a Word, and
       is not followed by any character in a given set of wordChars
       (default=printables). To emulate the \\b behavior of regular expressions,
       use WordEnd(alphanums). WordEnd will also match at the end of
       the string being parsed, or at the end of a line.
    "
                :superclasses ("_PositionToken")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [85420 85450])
                            ("self" variable nil (reparse-symbol indented_block_body) [85459 85496])
                            ("self" variable nil (reparse-symbol indented_block_body) [85505 85532])
                            ("self" variable nil (reparse-symbol indented_block_body) [85541 85581]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85381 85385])
                            ("wordChars" variable nil (reparse-symbol function_parameters) [85387 85396]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [85368 85582])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85601 85605])
                            ("instring" variable nil (reparse-symbol function_parameters) [85607 85615])
                            ("loc" variable nil (reparse-symbol function_parameters) [85617 85620])
                            ("doActions" variable nil (reparse-symbol function_parameters) [85622 85631]))                          )
                        (reparse-symbol indented_block_body) [85587 86055]))                  
                :type "class")
                nil [84983 86055])
            ("ParseExpression" type
               (:documentation "Abstract subclass of ParserElement, for combining and post-processing parsed tokens."
                :superclasses ("ParserElement")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [86249 86295])
                            ("if" code nil (reparse-symbol indented_block_body) [86304 86506])
                            ("self" variable nil (reparse-symbol indented_block_body) [86514 86539]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86208 86212])
                            ("exprs" variable nil (reparse-symbol function_parameters) [86214 86219])
                            ("savelist" variable nil (reparse-symbol function_parameters) [86221 86229]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [86194 86540])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86562 86566])
                            ("i" variable nil (reparse-symbol function_parameters) [86568 86569]))                          )
                        (reparse-symbol indented_block_body) [86545 86602])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86619 86623])
                            ("other" variable nil (reparse-symbol function_parameters) [86625 86630]))                          )
                        (reparse-symbol indented_block_body) [86607 86717])
                    ("leaveWhitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86743 86747]))                          
                        :documentation "Extends leaveWhitespace defined in base class, and also invokes leaveWhitespace on
           all contained expressions.")
                        (reparse-symbol indented_block_body) [86722 87057])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87074 87078])
                            ("other" variable nil (reparse-symbol function_parameters) [87080 87085]))                          )
                        (reparse-symbol indented_block_body) [87062 87503])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87521 87525]))                          )
                        (reparse-symbol indented_block_body) [87508 87780])
                    ("streamline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87801 87805]))                          )
                        (reparse-symbol indented_block_body) [87785 89076])
                    ("setResultsName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89101 89105])
                            ("name" variable nil (reparse-symbol function_parameters) [89107 89111])
                            ("listAllMatches" variable nil (reparse-symbol function_parameters) [89113 89127]))                          )
                        (reparse-symbol indented_block_body) [89081 89234])
                    ("validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89253 89257])
                            ("validateTrace" variable nil (reparse-symbol function_parameters) [89259 89272]))                          )
                        (reparse-symbol indented_block_body) [89239 89408]))                  
                :type "class")
                nil [86057 89408])
            ("And" type
               (:documentation "Requires all given ParseExpressions to be found in the given order.
       Expressions may be separated by whitespace.
       May be constructed using the '+' operator.
    "
                :superclasses ("ParseExpression")
                :members 
                  ( ("_ErrorStop" type
                       (:superclasses ("Empty")
                        :members 
                          ( ("__new__" function (:arguments 
                              ( ("cls" variable nil (reparse-symbol function_parameters) [89671 89674])
                                ("args" variable nil (reparse-symbol function_parameters) [89675 89680])
                                ("kwargs" variable nil (reparse-symbol function_parameters) [89681 89689]))                              ) (reparse-symbol indented_block_body) [89659 89735]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [89626 89735])
                    ("_ErrorStop" variable nil (reparse-symbol indented_block_body) [89739 89768])
                    ("_ErrorStop" code nil (reparse-symbol indented_block_body) [89773 89810])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [89870 89911])
                            ("self" variable nil (reparse-symbol indented_block_body) [89920 89946])
                            ("for" code nil (reparse-symbol indented_block_body) [89955 90079])
                            ("self" code nil (reparse-symbol indented_block_body) [90087 90133])
                            ("self" variable nil (reparse-symbol indented_block_body) [90142 90187])
                            ("self" variable nil (reparse-symbol indented_block_body) [90196 90220]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89830 89834])
                            ("exprs" variable nil (reparse-symbol function_parameters) [89836 89841])
                            ("savelist" variable nil (reparse-symbol function_parameters) [89843 89851]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [89816 90221])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90241 90245])
                            ("instring" variable nil (reparse-symbol function_parameters) [90247 90255])
                            ("loc" variable nil (reparse-symbol function_parameters) [90257 90260])
                            ("doActions" variable nil (reparse-symbol function_parameters) [90262 90271]))                          )
                        (reparse-symbol indented_block_body) [90226 91256])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91274 91278])
                            ("other" variable nil (reparse-symbol function_parameters) [91280 91285]))                          )
                        (reparse-symbol indented_block_body) [91261 91430])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91455 91459])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [91461 91477]))                          )
                        (reparse-symbol indented_block_body) [91435 91674])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91692 91696]))                          )
                        (reparse-symbol indented_block_body) [91679 91909]))                  
                :type "class")
                nil [89409 91909])
            ("Or" type
               (:documentation "Requires that at least one ParseExpression is found.
       If two expressions match, the expression that matches the longest string will be used.
       May be constructed using the '^' operator.
    "
                :superclasses ("ParseExpression")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [92209 92249])
                            ("self" variable nil (reparse-symbol indented_block_body) [92258 92285])
                            ("for" code nil (reparse-symbol indented_block_body) [92294 92413]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92168 92172])
                            ("exprs" variable nil (reparse-symbol function_parameters) [92174 92179])
                            ("savelist" variable nil (reparse-symbol function_parameters) [92181 92189]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [92154 92413])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92433 92437])
                            ("instring" variable nil (reparse-symbol function_parameters) [92439 92447])
                            ("loc" variable nil (reparse-symbol function_parameters) [92449 92452])
                            ("doActions" variable nil (reparse-symbol function_parameters) [92454 92463]))                          )
                        (reparse-symbol indented_block_body) [92418 93427])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93445 93449])
                            ("other" variable nil (reparse-symbol function_parameters) [93451 93456]))                          )
                        (reparse-symbol indented_block_body) [93432 93600])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93618 93622]))                          )
                        (reparse-symbol indented_block_body) [93605 93837])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93862 93866])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [93868 93884]))                          )
                        (reparse-symbol indented_block_body) [93842 94022]))                  
                :type "class")
                nil [91911 94022])
            ("MatchFirst" type
               (:documentation "Requires that at least one ParseExpression is found.
       If two expressions match, the first one listed is the one that will match.
       May be constructed using the '|' operator.
    "
                :superclasses ("ParseExpression")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [94318 94366])
                            ("if" code nil (reparse-symbol indented_block_body) [94375 94621]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94277 94281])
                            ("exprs" variable nil (reparse-symbol function_parameters) [94283 94288])
                            ("savelist" variable nil (reparse-symbol function_parameters) [94290 94298]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [94263 94621])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94641 94645])
                            ("instring" variable nil (reparse-symbol function_parameters) [94647 94655])
                            ("loc" variable nil (reparse-symbol function_parameters) [94657 94660])
                            ("doActions" variable nil (reparse-symbol function_parameters) [94662 94671]))                          )
                        (reparse-symbol indented_block_body) [94626 95538])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95555 95559])
                            ("other" variable nil (reparse-symbol function_parameters) [95561 95566]))                          )
                        (reparse-symbol indented_block_body) [95543 95718])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95736 95740]))                          )
                        (reparse-symbol indented_block_body) [95723 95955])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95980 95984])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [95986 96002]))                          )
                        (reparse-symbol indented_block_body) [95960 96140]))                  
                :type "class")
                nil [94024 96140])
            ("Each" type
               (:documentation "Requires all given ParseExpressions to be found, but in any order.
       Expressions may be separated by whitespace.
       May be constructed using the '&' operator.
    "
                :superclasses ("ParseExpression")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [96412 96454])
                            ("self" variable nil (reparse-symbol indented_block_body) [96463 96489])
                            ("for" code nil (reparse-symbol indented_block_body) [96498 96622])
                            ("self" variable nil (reparse-symbol indented_block_body) [96630 96656])
                            ("self" variable nil (reparse-symbol indented_block_body) [96665 96691]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96372 96376])
                            ("exprs" variable nil (reparse-symbol function_parameters) [96378 96383])
                            ("savelist" variable nil (reparse-symbol function_parameters) [96385 96393]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [96358 96692])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96712 96716])
                            ("instring" variable nil (reparse-symbol function_parameters) [96718 96726])
                            ("loc" variable nil (reparse-symbol function_parameters) [96728 96731])
                            ("doActions" variable nil (reparse-symbol function_parameters) [96733 96742]))                          )
                        (reparse-symbol indented_block_body) [96697 98992])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99010 99014]))                          )
                        (reparse-symbol indented_block_body) [98997 99229])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99254 99258])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [99260 99276]))                          )
                        (reparse-symbol indented_block_body) [99234 99414]))                  
                :type "class")
                nil [96142 99414])
            ("ParseElementEnhance" type
               (:documentation "Abstract subclass of ParserElement, for combining and post-processing parsed tokens."
                :superclasses ("ParserElement")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [99609 99659])
                            ("if" code nil (reparse-symbol indented_block_body) [99668 99736])
                            ("self" variable nil (reparse-symbol indented_block_body) [99744 99760])
                            ("self" variable nil (reparse-symbol indented_block_body) [99769 99788])
                            ("if" code nil (reparse-symbol indented_block_body) [99797 100183]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99571 99575])
                            ("expr" variable nil (reparse-symbol function_parameters) [99577 99581])
                            ("savelist" variable nil (reparse-symbol function_parameters) [99583 99591]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [99557 100183])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100203 100207])
                            ("instring" variable nil (reparse-symbol function_parameters) [100209 100217])
                            ("loc" variable nil (reparse-symbol function_parameters) [100219 100222])
                            ("doActions" variable nil (reparse-symbol function_parameters) [100224 100233]))                          )
                        (reparse-symbol indented_block_body) [100188 100432])
                    ("leaveWhitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100458 100462]))                          )
                        (reparse-symbol indented_block_body) [100437 100633])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100650 100654])
                            ("other" variable nil (reparse-symbol function_parameters) [100656 100661]))                          )
                        (reparse-symbol indented_block_body) [100638 101113])
                    ("streamline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101134 101138]))                          )
                        (reparse-symbol indented_block_body) [101118 101284])
                    ("checkRecursion" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101309 101313])
                            ("parseElementList" variable nil (reparse-symbol function_parameters) [101315 101331]))                          )
                        (reparse-symbol indented_block_body) [101289 101590])
                    ("validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101609 101613])
                            ("validateTrace" variable nil (reparse-symbol function_parameters) [101615 101628]))                          )
                        (reparse-symbol indented_block_body) [101595 101777])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101795 101799]))                          )
                        (reparse-symbol indented_block_body) [101782 102083]))                  
                :type "class")
                nil [99416 102083])
            ("FollowedBy" type
               (:documentation "Lookahead matching of the given parse expression.  FollowedBy
    does *not* advance the parsing position within the input string, it only
    verifies that the specified parse expression matches at the current
    position.  FollowedBy always returns a null token list."
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [102445 102482])
                            ("self" variable nil (reparse-symbol indented_block_body) [102491 102517]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102423 102427])
                            ("expr" variable nil (reparse-symbol function_parameters) [102429 102433]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [102409 102518])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102538 102542])
                            ("instring" variable nil (reparse-symbol function_parameters) [102544 102552])
                            ("loc" variable nil (reparse-symbol function_parameters) [102554 102557])
                            ("doActions" variable nil (reparse-symbol function_parameters) [102559 102568]))                          )
                        (reparse-symbol indented_block_body) [102523 102644]))                  
                :type "class")
                nil [102085 102644])
            ("NotAny" type
               (:documentation "Lookahead to disallow matching with the given parse expression.  NotAny
    does *not* advance the parsing position within the input string, it only
    verifies that the specified parse expression does *not* match at the current
    position.  Also, NotAny does *not* skip over leading whitespace. NotAny
    always returns a null token list.  May be constructed using the '~' operator."
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [103119 103152])
                            ("self" variable nil (reparse-symbol indented_block_body) [103195 103222])
                            ("self" variable nil (reparse-symbol indented_block_body) [103302 103328])
                            ("self" code nil (reparse-symbol indented_block_body) [103337 103392]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103097 103101])
                            ("expr" variable nil (reparse-symbol function_parameters) [103103 103107]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [103083 103393])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103479 103483])
                            ("instring" variable nil (reparse-symbol function_parameters) [103485 103493])
                            ("loc" variable nil (reparse-symbol function_parameters) [103495 103498])
                            ("doActions" variable nil (reparse-symbol function_parameters) [103500 103509]))                          )
                        (reparse-symbol indented_block_body) [103464 103857])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [103875 103879]))                          )
                        (reparse-symbol indented_block_body) [103862 104065]))                  
                :type "class")
                nil [102646 104065])
            ("ZeroOrMore" type
               (:documentation "Optional repetition of zero or more of the given expression."
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [104217 104254])
                            ("self" variable nil (reparse-symbol indented_block_body) [104263 104289]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104195 104199])
                            ("expr" variable nil (reparse-symbol function_parameters) [104201 104205]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [104181 104290])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104310 104314])
                            ("instring" variable nil (reparse-symbol function_parameters) [104316 104324])
                            ("loc" variable nil (reparse-symbol function_parameters) [104326 104329])
                            ("doActions" variable nil (reparse-symbol function_parameters) [104331 104340]))                          )
                        (reparse-symbol indented_block_body) [104295 104970])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104988 104992]))                          )
                        (reparse-symbol indented_block_body) [104975 105180])
                    ("setResultsName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105205 105209])
                            ("name" variable nil (reparse-symbol function_parameters) [105211 105215])
                            ("listAllMatches" variable nil (reparse-symbol function_parameters) [105217 105231]))                          )
                        (reparse-symbol indented_block_body) [105185 105363]))                  
                :type "class")
                nil [104067 105363])
            ("OneOrMore" type
               (:documentation "Repetition of one or more of the given expression."
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105483 105487])
                            ("instring" variable nil (reparse-symbol function_parameters) [105489 105497])
                            ("loc" variable nil (reparse-symbol function_parameters) [105499 105502])
                            ("doActions" variable nil (reparse-symbol function_parameters) [105504 105513]))                          )
                        (reparse-symbol indented_block_body) [105468 106150])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106168 106172]))                          )
                        (reparse-symbol indented_block_body) [106155 106360])
                    ("setResultsName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106385 106389])
                            ("name" variable nil (reparse-symbol function_parameters) [106391 106395])
                            ("listAllMatches" variable nil (reparse-symbol function_parameters) [106397 106411]))                          )
                        (reparse-symbol indented_block_body) [106365 106542]))                  
                :type "class")
                nil [105365 106542])
            ("_NullToken" type
               (:superclasses ("object")
                :members 
                  ( ("__bool__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106586 106590]))                          )
                        (reparse-symbol indented_block_body) [106573 106614])
                    ("__nonzero__" variable nil (reparse-symbol indented_block_body) [106618 106640])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106657 106661]))                          )
                        (reparse-symbol indented_block_body) [106645 106682]))                  
                :type "class")
                nil [106543 106682])
            ("_optionalNotMatched" variable nil nil [106683 106717])
            ("Optional" type
               (:documentation "Optional matching of the given expression.
       A default return string can also be specified, if the optional expression
       is not found.
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [106985 107039])
                            ("self" variable nil (reparse-symbol indented_block_body) [107048 107075])
                            ("self" variable nil (reparse-symbol indented_block_body) [107084 107110]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106933 106937])
                            ("exprs" variable nil (reparse-symbol function_parameters) [106939 106944])
                            ("default" variable nil (reparse-symbol function_parameters) [106946 106953]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [106919 107111])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107131 107135])
                            ("instring" variable nil (reparse-symbol function_parameters) [107137 107145])
                            ("loc" variable nil (reparse-symbol function_parameters) [107147 107150])
                            ("doActions" variable nil (reparse-symbol function_parameters) [107152 107161]))                          )
                        (reparse-symbol indented_block_body) [107116 107702])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107720 107724]))                          )
                        (reparse-symbol indented_block_body) [107707 107909]))                  
                :type "class")
                nil [106718 107909])
            ("SkipTo" type
               (:documentation "Token for skipping over all undefined text until the matched expression is found.
       If include is set to true, the matched expression is also consumed.  The ignore
       argument is used to define grammars (typically quoted strings and comments) that
       might contain false matches.
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [108323 108362])
                            ("if" code nil (reparse-symbol indented_block_body) [108371 108472])
                            ("self" variable nil (reparse-symbol indented_block_body) [108480 108506])
                            ("self" variable nil (reparse-symbol indented_block_body) [108515 108541])
                            ("self" variable nil (reparse-symbol indented_block_body) [108550 108577])
                            ("self" variable nil (reparse-symbol indented_block_body) [108586 108605])
                            ("self" code nil (reparse-symbol indented_block_body) [108614 108666]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108272 108276])
                            ("other" variable nil (reparse-symbol function_parameters) [108278 108283])
                            ("include" variable nil (reparse-symbol function_parameters) [108285 108292])
                            ("ignore" variable nil (reparse-symbol function_parameters) [108300 108306]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [108258 108667])
                    ("parseImpl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108753 108757])
                            ("instring" variable nil (reparse-symbol function_parameters) [108759 108767])
                            ("loc" variable nil (reparse-symbol function_parameters) [108769 108772])
                            ("doActions" variable nil (reparse-symbol function_parameters) [108774 108783]))                          )
                        (reparse-symbol indented_block_body) [108738 109742]))                  
                :type "class")
                nil [107911 109742])
            ("Forward" type
               (:documentation "Forward declaration of an expression to be defined later -
       used for recursive grammars, such as algebraic infix notation.
       When the expression is known, it is assigned to the Forward variable using the '<<' operator.

       Note: take care when assigning to Forward not to overlook precedence of operators.
       Specifically, '|' has a lower precedence than '<<', so that::
          fwdExpr << a | b | c
       will actually be evaluated as::
          (fwdExpr << a) | b | c
       thereby leaving b and c out as parseable alternatives.  It is recommended that you
       explicitly group the values inserted into the Forward::
          fwdExpr << (a | b | c)
    "
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [110519 110572]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110491 110495])
                            ("other" variable nil (reparse-symbol function_parameters) [110497 110502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [110477 110573])
                    ("__lshift__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110594 110598])
                            ("other" variable nil (reparse-symbol function_parameters) [110600 110605]))                          )
                        (reparse-symbol indented_block_body) [110578 111134])
                    ("leaveWhitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111160 111164]))                          )
                        (reparse-symbol indented_block_body) [111139 111224])
                    ("streamline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111245 111249]))                          )
                        (reparse-symbol indented_block_body) [111229 111419])
                    ("validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111438 111442])
                            ("validateTrace" variable nil (reparse-symbol function_parameters) [111444 111457]))                          )
                        (reparse-symbol indented_block_body) [111424 111654])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111672 111676]))                          )
                        (reparse-symbol indented_block_body) [111659 112026])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112040 112044]))                          )
                        (reparse-symbol indented_block_body) [112031 112216]))                  
                :type "class")
                nil [109743 112216])
            ("_ForwardNoRecurse" type
               (:superclasses ("Forward")
                :members 
                  ( ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112268 112272]))                          )
                        (reparse-symbol indented_block_body) [112255 112297]))                  
                :type "class")
                nil [112217 112297])
            ("TokenConverter" type
               (:documentation "Abstract subclass of ParseExpression, for converting parsed results."
                :superclasses ("ParseElementEnhance")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [112476 112519])
                            ("self" variable nil (reparse-symbol indented_block_body) [112541 112564]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112438 112442])
                            ("expr" variable nil (reparse-symbol function_parameters) [112444 112448])
                            ("savelist" variable nil (reparse-symbol function_parameters) [112450 112458]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [112424 112565]))                  
                :type "class")
                nil [112298 112565])
            ("Upcase" type
               (:documentation "Converter to upper case all matching tokens."
                :superclasses ("TokenConverter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [112690 112724])
                            ("warnings" code nil (reparse-symbol indented_block_body) [112733 112871]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112668 112672])
                            ("args" variable nil (reparse-symbol function_parameters) [112674 112679]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [112655 112872])
                    ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112892 112896])
                            ("instring" variable nil (reparse-symbol function_parameters) [112898 112906])
                            ("loc" variable nil (reparse-symbol function_parameters) [112908 112911])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [112913 112922]))                          )
                        (reparse-symbol indented_block_body) [112877 112978]))                  
                :type "class")
                nil [112566 112978])
            ("Combine" type
               (:documentation "Converter to concatenate all matching tokens to a single string.
       By default, the matching patterns must also be contiguous in the input string;
       this can be disabled by specifying 'adjacent=False' in the constructor.
    "
                :superclasses ("TokenConverter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [113326 113362])
                            ("if" code nil (reparse-symbol indented_block_body) [113482 113530])
                            ("self" variable nil (reparse-symbol indented_block_body) [113538 113562])
                            ("self" variable nil (reparse-symbol indented_block_body) [113571 113597])
                            ("self" variable nil (reparse-symbol indented_block_body) [113606 113634]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113274 113278])
                            ("expr" variable nil (reparse-symbol function_parameters) [113280 113284])
                            ("joinString" variable nil (reparse-symbol function_parameters) [113286 113296])
                            ("adjacent" variable nil (reparse-symbol function_parameters) [113301 113309]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [113260 113635])
                    ("ignore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113652 113656])
                            ("other" variable nil (reparse-symbol function_parameters) [113658 113663]))                          )
                        (reparse-symbol indented_block_body) [113640 113823])
                    ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113843 113847])
                            ("instring" variable nil (reparse-symbol function_parameters) [113849 113857])
                            ("loc" variable nil (reparse-symbol function_parameters) [113859 113862])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [113864 113873]))                          )
                        (reparse-symbol indented_block_body) [113828 114175]))                  
                :type "class")
                nil [112980 114175])
            ("Group" type
               (:documentation "Converter to return the matched tokens as a list - useful for returning tokens of ZeroOrMore and OneOrMore expressions."
                :superclasses ("TokenConverter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [114375 114409])
                            ("self" variable nil (reparse-symbol indented_block_body) [114418 114440]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114353 114357])
                            ("expr" variable nil (reparse-symbol function_parameters) [114359 114363]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [114339 114441])
                    ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114461 114465])
                            ("instring" variable nil (reparse-symbol function_parameters) [114467 114475])
                            ("loc" variable nil (reparse-symbol function_parameters) [114477 114480])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [114482 114491]))                          )
                        (reparse-symbol indented_block_body) [114446 114524]))                  
                :type "class")
                nil [114176 114524])
            ("Dict" type
               (:documentation "Converter to return a repetitive expression as a list, but also as a dictionary.
       Each element can also be referenced using the first token in the expression as its key.
       Useful for tabular report scraping when the first column can be used as a item key.
    "
                :superclasses ("TokenConverter")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [114876 114910])
                            ("self" variable nil (reparse-symbol indented_block_body) [114919 114941]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114853 114857])
                            ("exprs" variable nil (reparse-symbol function_parameters) [114859 114864]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [114839 114942])
                    ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114962 114966])
                            ("instring" variable nil (reparse-symbol function_parameters) [114968 114976])
                            ("loc" variable nil (reparse-symbol function_parameters) [114978 114981])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [114983 114992]))                          )
                        (reparse-symbol indented_block_body) [114947 115920]))                  
                :type "class")
                nil [114525 115920])
            ("Suppress" type
               (:documentation "Converter for ignoring the results of a parsed expression."
                :superclasses ("TokenConverter")
                :members 
                  ( ("postParse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116042 116046])
                            ("instring" variable nil (reparse-symbol function_parameters) [116048 116056])
                            ("loc" variable nil (reparse-symbol function_parameters) [116058 116061])
                            ("tokenlist" variable nil (reparse-symbol function_parameters) [116063 116072]))                          )
                        (reparse-symbol indented_block_body) [116027 116094])
                    ("suppress" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116113 116117]))                          )
                        (reparse-symbol indented_block_body) [116099 116141]))                  
                :type "class")
                nil [115922 116141])
            ("OnlyOnce" type
               (:documentation "Wrapper for parse actions, to ensure they are only called once."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [116285 116352])
                            ("self" variable nil (reparse-symbol indented_block_body) [116361 116380]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116258 116262])
                            ("methodCall" variable nil (reparse-symbol function_parameters) [116264 116274]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [116245 116381])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116398 116402])
                            ("s" variable nil (reparse-symbol function_parameters) [116403 116404])
                            ("l" variable nil (reparse-symbol function_parameters) [116405 116406])
                            ("t" variable nil (reparse-symbol function_parameters) [116407 116408]))                          )
                        (reparse-symbol indented_block_body) [116385 116577])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116591 116595]))                          )
                        (reparse-symbol indented_block_body) [116581 116626]))                  
                :type "class")
                nil [116143 116626])
            ("traceParseAction" function
               (:documentation "Decorator for debugging parse actions."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [116648 116649]))                  )
                nil [116627 117377])
            ("delimitedList" function
               (:documentation "Helper to define a delimited list of expressions - the delimiter defaults to ','.
       By default, the list elements and delimiters can have intervening whitespace, and
       comments, but this can be overridden by passing 'combine=True' in the constructor.
       If combine is set to True, the matching tokens are returned as a single token
       string, with the delimiters included; otherwise, the matching tokens are returned
       as a list of tokens, with the delimiters suppressed.
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [117418 117422])
                    ("delim" variable nil (reparse-symbol function_parameters) [117424 117429])
                    ("combine" variable nil (reparse-symbol function_parameters) [117435 117442]))                  )
                nil [117399 118211])
            ("countedArray" function
               (:documentation "Helper to define a counted list of expressions.
       This helper defines a pattern of the form::
           integer expr expr expr...
       where the leading integer tells how many expr expressions follow.
       The matched tokens returns the array of expr tokens as a list - the leading count token is suppressed.
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [118230 118234]))                  )
                nil [118212 118858])
            ("_flatten" function (:arguments 
              ( ("L" variable nil (reparse-symbol function_parameters) [118872 118873]))              ) nil [118859 118984])
            ("matchPreviousLiteral" function
               (:documentation "Helper to define an expression that is indirectly defined from
       the tokens matched in a previous expression, that is, it looks
       for a 'repeat' of a previous expression.  For example::
           first = Word(nums)
           second = matchPreviousLiteral(first)
           matchExpr = first + \":\" + second
       will match \"1:1\", but not \"1:2\".  Because this matches a
       previous literal, will also match the leading \"1:1\" in \"1:10\".
       If this is not desired, use matchPreviousExpr.
       Do *not* use with packrat parsing enabled.
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [119010 119014]))                  )
                nil [118985 119995])
            ("matchPreviousExpr" function
               (:documentation "Helper to define an expression that is indirectly defined from
       the tokens matched in a previous expression, that is, it looks
       for a 'repeat' of a previous expression.  For example::
           first = Word(nums)
           second = matchPreviousExpr(first)
           matchExpr = first + \":\" + second
       will match \"1:1\", but not \"1:2\".  Because this matches by
       expressions, will *not* match the leading \"1:1\" in \"1:10\";
       the expressions are evaluated first, and then compared, so
       \"1\" is compared with \"10\".
       Do *not* use with packrat parsing enabled.
    "
                :arguments 
                  ( ("expr" variable nil (reparse-symbol function_parameters) [120018 120022]))                  )
                nil [119996 121099])
            ("_escapeRegexRangeChars" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [121127 121128]))              ) nil [121100 143925]))          
      :file "pyparsing.py"
      :pointmax 143925
      :fsize 143924
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax '((NEWLINE 142131 . 142132) (RPAREN 142130 . 142131) (LPAREN 142109 . 142110) (PERIOD 142101 . 142102) (RPAREN 142100 . 142101) (LPAREN 142046 . 142047) (NEWLINE 142011 . 142012) (RPAREN 142010 . 142011) (LPAREN 141998 . 141999) (PERIOD 141990 . 141991) (RPAREN 141989 . 141990) (LPAREN 141988 . 141989) (PERIOD 141977 . 141978) (RPAREN 141976 . 141977) (LPAREN 141814 . 141815) (NEWLINE 141790 . 141791) (RPAREN 141789 . 141790) (LPAREN 141749 . 141750) (NEWLINE 141729 . 141730) (RPAREN 141728 . 141729) (LPAREN 141705 . 141706) (PERIOD 141697 . 141698) (RPAREN 141696 . 141697) (NAME 141663 . 141681) (LPAREN 141689 . 141690) (NEWLINE 141626 . 141627) (RPAREN 141625 . 141626) (LPAREN 141605 . 141606) (PERIOD 141597 . 141598) (RPAREN 141596 . 141597) (LPAREN 141534 . 141535) (NEWLINE 141510 . 141511) (RPAREN 141509 . 141510) (LPAREN 141496 . 141497) (PERIOD 141488 . 141489) (RPAREN 141487 . 141488) (LPAREN 141470 . 141471) (NEWLINE 141446 . 141447) (RPAREN 141445 . 141446) (LPAREN 141444 . 141445) (PERIOD 141428 . 141429) (RPAREN 141427 . 141428) (LPAREN 141421 . 141422) (NEWLINE 141402 . 141403) (RPAREN 141401 . 141402) (LPAREN 141382 . 141383) (NEWLINE 141361 . 141362) (RPAREN 141360 . 141361) (LPAREN 141342 . 141343) (PERIOD 141334 . 141335) (RPAREN 141333 . 141334) (NAME 141290 . 141303) (LPAREN 141311 . 141312) (OR 141173 . 141175) (RBRACK 141171 . 141172) (LBRACK 141162 . 141163) (NEWLINE 141085 . 141086) (RPAREN 141084 . 141085) (LPAREN 141041 . 141042) (NEWLINE 141019 . 141020) (RPAREN 141018 . 141019) (LPAREN 140949 . 140950) (NEWLINE 140922 . 140923) (RPAREN 140921 . 140922) (LPAREN 140893 . 140894) (NEWLINE 140854 . 140855) (RPAREN 140853 . 140854) (LPAREN 140826 . 140827) (NEWLINE 140808 . 140809) (RPAREN 140807 . 140808) (DEDENT 140749 . 140749) (NAME 140749 . 140759) (LPAREN 140768 . 140769) (NEWLINE 138619 . 138620) (COLON 138618 . 138619) (RPAREN 138617 . 138618) (DEDENT 138555 . 138555) (DEF 138555 . 138558) (LPAREN 138572 . 138573) (NEWLINE 136374 . 136375) (COLON 136373 . 136374) (RPAREN 136372 . 136373) (LPAREN 136310 . 136311) (NEWLINE 136294 . 136295) (RPAREN 136293 . 136294) (LPAREN 136263 . 136264) (NEWLINE 136239 . 136240) (RPAREN 136238 . 136239) (LPAREN 136193 . 136194) (PERIOD 136185 . 136186) (RPAREN 136184 . 136185) (LPAREN 136063 . 136064) (NEWLINE 136042 . 136043) (RPAREN 136041 . 136042) (LPAREN 136006 . 136007) (PERIOD 135998 . 135999) (RPAREN 135997 . 135998) (LPAREN 135941 . 135942) (NEWLINE 135917 . 135918) (RPAREN 135916 . 135917) (LPAREN 135881 . 135882) (PERIOD 135873 . 135874) (RPAREN 135872 . 135873) (DEDENT 135793 . 135793) (NAME 135793 . 135808) (LPAREN 135816 . 135817) (NEWLINE 131971 . 131972) (COLON 131970 . 131971) (RPAREN 131969 . 131970) (LPAREN 131950 . 131951) (NEWLINE 131926 . 131927) (RPAREN 131925 . 131926) (LPAREN 131924 . 131925) (NEWLINE 131901 . 131902) (RPAREN 131900 . 131901) (LPAREN 131899 . 131900) (NEWLINE 131877 . 131878) (RPAREN 131876 . 131877) (LPAREN 131875 . 131876) (NEWLINE 131853 . 131854) (RPAREN 131852 . 131853) (DEDENT 131819 . 131819) (NAME 131819 . 131832) (LPAREN 131851 . 131852) (NEWLINE 130369 . 130370) (COLON 130368 . 130369) (RPAREN 130367 . 130368) (EXPONENT 130357 . 130359) (MULT 130351 . 130352) (DEDENT 130333 . 130333) (DEF 130333 . 130336) (LPAREN 130350 . 130351) (NEWLINE 130202 . 130203) (COLON 130201 . 130202) (RPAREN 130200 . 130201) (DEDENT 130178 . 130178) (DEF 130178 . 130181) (LPAREN 130193 . 130194) (NEWLINE 130045 . 130046) (COLON 130044 . 130045) (RPAREN 130043 . 130044) (DEDENT 130020 . 130020) (DEF 130020 . 130023) (LPAREN 130036 . 130037) (NEWLINE 128530 . 128531) (COLON 128529 . 128530) (RPAREN 128528 . 128529) (DEDENT 128503 . 128503) (DEF 128503 . 128506) (LPAREN 128516 . 128517) (NEWLINE 127912 . 127913) (COLON 127911 . 127912) (RPAREN 127910 . 127911) (DEDENT 127890 . 127890) (DEF 127890 . 127893) (LPAREN 127909 . 127910) (NEWLINE 127529 . 127530) (COLON 127528 . 127529) (RPAREN 127527 . 127528) (DEDENT 127494 . 127494) (DEF 127494 . 127497) (LPAREN 127514 . 127515) (NEWLINE 127380 . 127381) (COLON 127379 . 127380) (RPAREN 127378 . 127379) (DEDENT 127354 . 127354) (DEF 127354 . 127357) (LPAREN 127372 . 127373) (NEWLINE 127240 . 127241) (COLON 127239 . 127240) (RPAREN 127238 . 127239) (DEDENT 127216 . 127216) (DEF 127216 . 127219) (LPAREN 127232 . 127233) (NEWLINE 126985 . 126986) (COLON 126984 . 126985) (RPAREN 126983 . 126984) (DEDENT 126961 . 126961) (DEF 126961 . 126964) (LPAREN 126977 . 126978) (NEWLINE 126737 . 126738) (COLON 126736 . 126737) (RPAREN 126735 . 126736) (DEDENT 126712 . 126712) (DEF 126712 . 126715) (LPAREN 126727 . 126728) (NEWLINE 126416 . 126417) (COLON 126415 . 126416) (RPAREN 126414 . 126415) (DEDENT 126394 . 126394) (DEF 126394 . 126397) (LPAREN 126412 . 126413) (NEWLINE 125331 . 125332) (COLON 125330 . 125331) (RPAREN 125329 . 125330) (LPAREN 125327 . 125328) (NEWLINE 125315 . 125316) (RPAREN 125314 . 125315) (NAME 125195 . 125204) (LPAREN 125217 . 125218) (RPAREN 125186 . 125187) (LPAREN 125179 . 125180) (PERIOD 125164 . 125165) (RPAREN 125163 . 125164) (LPAREN 125123 . 125124) (RPAREN 125114 . 125115) (LPAREN 125105 . 125106) (PERIOD 125090 . 125091) (RPAREN 125089 . 125090) (LPAREN 125085 . 125086) (RPAREN 125073 . 125074) (LPAREN 125069 . 125070) (NEWLINE 125044 . 125045) (RPAREN 125043 . 125044) (LPAREN 125001 . 125002) (NEWLINE 124982 . 124983) (RPAREN 124981 . 124982) (LPAREN 124946 . 124947) (NEWLINE 124876 . 124877) (RPAREN 124875 . 124876) (LPAREN 124842 . 124843) (PERIOD 124827 . 124828) (RPAREN 124826 . 124827) (LPAREN 124783 . 124784) (NEWLINE 124757 . 124758) (RPAREN 124756 . 124757) (LPAREN 124722 . 124723) (PERIOD 124707 . 124708) (RPAREN 124706 . 124707) (LPAREN 124663 . 124664) (NEWLINE 124637 . 124638) (RPAREN 124636 . 124637) (LPAREN 124591 . 124592) (NEWLINE 124554 . 124555) (RPAREN 124553 . 124554) (LPAREN 124532 . 124533) (PERIOD 124517 . 124518) (RPAREN 124516 . 124517) (LPAREN 124478 . 124479) (NEWLINE 124457 . 124458) (RPAREN 124456 . 124457) (LPAREN 124444 . 124445) (PERIOD 124436 . 124437) (RPAREN 124435 . 124436) (LPAREN 124434 . 124435) (NEWLINE 124410 . 124411) (RPAREN 124409 . 124410) (LPAREN 124395 . 124396) (PERIOD 124387 . 124388) (RPAREN 124386 . 124387) (LPAREN 124385 . 124386) (NEWLINE 124359 . 124360) (RPAREN 124358 . 124359) (LPAREN 124348 . 124349) (PERIOD 124340 . 124341) (RPAREN 124339 . 124340) (LPAREN 124338 . 124339) (NEWLINE 124316 . 124317) (RPAREN 124315 . 124316) (LPAREN 124303 . 124304) (PERIOD 124295 . 124296) (RPAREN 124294 . 124295) (LPAREN 124293 . 124294) (NEWLINE 124269 . 124270) (RPAREN 124268 . 124269) (LPAREN 124260 . 124261) (PERIOD 124252 . 124253) (RPAREN 124251 . 124252) (DEDENT 124231 . 124231) (NAME 124231 . 124236) (LPAREN 124250 . 124251) (NEWLINE 123638 . 123639) (COLON 123637 . 123638) (RPAREN 123636 . 123637) (DEDENT 123613 . 123613) (DEF 123613 . 123616) (LPAREN 123623 . 123624) (NEWLINE 121347 . 121348) (COLON 121346 . 121347) (RPAREN 121345 . 121346) (DEDENT 121298 . 121298) (DEF 121298 . 121301) (LPAREN 121307 . 121308) (NEWLINE 121246 . 121247) (RPAREN 121245 . 121246) (DEDENT 121217 . 121221) (NAME 121221 . 121222) (LPAREN 121234 . 121235) (INDENT_BLOCK 22256 . 22863) (INDENT_BLOCK 7223 . 22217) (INDENT_BLOCK 7018 . 7223) (NAME 6292 . 6299) (NAME 6438 . 6442) (NAME 6443 . 6452) (CLASS 6453 . 6458) (FOR 6459 . 6462) (NAME 6467 . 6474) (NAME 6475 . 6482) (NAME 6483 . 6493) (STRING_LITERAL 6493 . 6984) (NAME 6984 . 6993) (NAME 6994 . 7004) (NAME 7005 . 7007) (NAME 7008 . 7012) (NAME 7013 . 7016) (COLON 7016 . 7017)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
The classes here provide support for using custom classes with
matplotlib, eg those that do not expose the array interface but know
how to converter themselves to arrays.  It also supoprts classes with
units and units conversion.  Use cases include converters for custom
objects, eg a list of datetime objects, as well as for objects that
are unit aware.  We don't assume any particular units implementation,
rather a units implementation must provide a ConversionInterface, and
the register with the Registry converter dictionary.  For example,
here is a complete implementation which supports plotting with native
datetime objects::


    import matplotlib.units as units
    import matplotlib.dates as dates
    import matplotlib.ticker as ticker
    import datetime

    class DateConverter(units.ConversionInterface):

        @staticmethod
        def convert(value, unit, axis):
            'convert value to a scalar or array'
            return dates.date2num(value)

        @staticmethod
        def axisinfo(unit, axis):
            'return major and minor tick locators and formatters'
            if unit!='date': return None
            majloc = dates.AutoDateLocator()
            majfmt = dates.AutoDateFormatter(majloc)
            return AxisInfo(majloc=majloc,
                            majfmt=majfmt,
                            label='date')

        @staticmethod
        def default_units(x, axis):
            'return the default unit for x or None'
            return 'date'

    # finally we register our object type with a converter
    units.registry[datetime.date] = DateConverter()

\"\"\"" code nil nil [1 1624])
            ("numpy" include nil nil [1625 1643])
            ("matplotlib.cbook" include nil nil [1644 1709])
            ("AxisInfo" type
               (:members 
                  ( ("'information to support default axis labeling and tick labeling, and default limits'" code nil (reparse-symbol indented_block_body) [1731 1815])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        majloc and minloc: TickLocators for the major and minor ticks
        majfmt and minfmt: TickFormatters for the major and minor ticks
        label: the default axis label
        default_limits: the default min, max of the axis if no data is present
        If any of the above are None, the axis will simply use the default
        \"\"\"" code nil (reparse-symbol indented_block_body) [1967 2316])
                            ("self" variable nil (reparse-symbol indented_block_body) [2325 2345])
                            ("self" variable nil (reparse-symbol indented_block_body) [2354 2374])
                            ("self" variable nil (reparse-symbol indented_block_body) [2383 2403])
                            ("self" variable nil (reparse-symbol indented_block_body) [2412 2432])
                            ("self" variable nil (reparse-symbol indented_block_body) [2441 2459])
                            ("self" variable nil (reparse-symbol indented_block_body) [2468 2504]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1833 1837])
                            ("majloc" variable nil (reparse-symbol function_parameters) [1839 1845])
                            ("minloc" variable nil (reparse-symbol function_parameters) [1852 1858])
                            ("majfmt" variable nil (reparse-symbol function_parameters) [1882 1888])
                            ("minfmt" variable nil (reparse-symbol function_parameters) [1895 1901])
                            ("label" variable nil (reparse-symbol function_parameters) [1908 1913])
                            ("default_limits" variable nil (reparse-symbol function_parameters) [1937 1951]))                          
                        :documentation "
        majloc and minloc: TickLocators for the major and minor ticks
        majfmt and minfmt: TickFormatters for the major and minor ticks
        label: the default axis label
        default_limits: the default min, max of the axis if no data is present
        If any of the above are None, the axis will simply use the default
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1820 2505]))                  
                :type "class")
                nil [1711 2505])
            ("ConversionInterface" type
               (:documentation "
    The minimal interface for a converter to take custom instances (or
    sequences) and convert them to values mpl can use
    "
                :members 
                  ( ("axisinfo" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("unit" variable nil (reparse-symbol function_parameters) [2710 2714])
                            ("axis" variable nil (reparse-symbol function_parameters) [2716 2720]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2679 2821])
                    ("default_units" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("x" variable nil (reparse-symbol function_parameters) [2862 2863])
                            ("axis" variable nil (reparse-symbol function_parameters) [2865 2869]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2826 2959])
                    ("convert" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("obj" variable nil (reparse-symbol function_parameters) [2994 2997])
                            ("unit" variable nil (reparse-symbol function_parameters) [2999 3003])
                            ("axis" variable nil (reparse-symbol function_parameters) [3005 3009]))                          
                        :documentation "
        convert obj using unit for the specified axis.  If obj is a sequence,
        return the converted sequence.  The ouput must be a sequence of scalars
        that can be used by the numpy array layer
        ")
                        (reparse-symbol indented_block_body) [2964 3263])
                    ("is_numlike" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("x" variable nil (reparse-symbol function_parameters) [3301 3302]))                          
                        :documentation "
        The matplotlib datalim, autoscaling, locators etc work with
        scalars which are the units converted to floats given the
        current unit.  The converter may be passed these floats, or
        arrays of them, even when units are set.  Derived conversion
        interfaces may opt to pass plain-ol unitless numbers through
        the conversion interface and this is a helper function for
        them.
        ")
                        (reparse-symbol indented_block_body) [3268 3890]))                  
                :type "class")
                nil [2507 3890])
            ("Registry" type
               (:documentation "
    register types with conversion interface
    "
                :superclasses ("dict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("dict" code nil (reparse-symbol indented_block_body) [4006 4025])
                            ("self" variable nil (reparse-symbol indented_block_body) [4034 4051]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3991 3995]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3978 4052])
                    ("get_converter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4075 4079])
                            ("x" variable nil (reparse-symbol function_parameters) [4081 4082]))                          )
                        (reparse-symbol indented_block_body) [4057 5012]))                  
                :type "class")
                nil [3891 5012])
            ("registry" variable nil nil [5014 5035]))          
      :file "units.py"
      :pointmax 5036
      :fsize 5035
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This module supports embedded TeX expressions in matplotlib via dvipng
and dvips for the raster and postscript backends.  The tex and
dvipng/dvips information is cached in ~/.matplotlib/tex.cache for reuse between
sessions

Requirements:

* latex
* \\*Agg backends: dvipng
* PS backend: latex w/ psfrag, dvips, and Ghostscript 8.51
  (older versions do not work properly)

Backends:

* \\*Agg
* PS
* PDF

For raster output, you can get RGBA numpy arrays from TeX expressions
as follows::

  texmanager = TexManager()
  s = '\\\\TeX\\\\ is Number $\\\\displaystyle\\\\sum_{n=1}^\\\\infty\\\\frac{-e^{i\\pi}}{2^n}$!'
  Z = self.texmanager.get_rgba(s, size=12, dpi=80, rgb=(1,0,0))

To enable tex rendering of all text in your matplotlib figure, set
text.usetex in your matplotlibrc file (http://matplotlib.sf.net/matplotlibrc)
or include these two lines in your script::

  from matplotlib import rc
  rc('text', usetex=True)

\"\"\"" code nil nil [1 918])
            ("warnings" include nil nil [920 964])
            ("sys" include nil nil [920 964])
            ("shutil" include nil nil [920 964])
            ("os" include nil nil [920 964])
            ("glob" include nil nil [920 964])
            ("copy" include nil nil [920 964])
            ("subprocess" include nil nil [965 1007])
            ("try" code nil nil [1009 1105])
            ("distutils.version" include nil nil [1106 1130])
            ("numpy" include nil nil [1131 1149])
            ("matplotlib" include nil nil [1150 1174])
            ("matplotlib" include nil nil [1175 1206])
            ("matplotlib._png" include nil nil [1207 1243])
            ("matplotlib.dviread" include nil nil [1244 1280])
            ("re" include nil nil [1281 1290])
            ("DEBUG" variable nil nil [1292 1305])
            ("if" code nil nil [1307 1380])
            ("dvipng_hack_alpha" function nil nil [1381 1971])
            ("TexManager" type
               (:documentation "
    Convert strings to dvi files using TeX, caching the results to a
    working dir
    "
                :members 
                  ( ("oldpath" variable nil (reparse-symbol indented_block_body) [2098 2122])
                    ("if" code nil (reparse-symbol indented_block_body) [2127 2177])
                    ("oldcache" variable nil (reparse-symbol indented_block_body) [2181 2227])
                    ("configdir" variable nil (reparse-symbol indented_block_body) [2233 2264])
                    ("texcache" variable nil (reparse-symbol indented_block_body) [2269 2316])
                    ("if" code nil (reparse-symbol indented_block_body) [2322 2559])
                    ("if" code nil (reparse-symbol indented_block_body) [2563 2623])
                    ("_dvipng_hack_alpha" variable nil (reparse-symbol indented_block_body) [2628 2653])
                    ("rgba_arrayd" variable nil (reparse-symbol indented_block_body) [2728 2744])
                    ("grey_arrayd" variable nil (reparse-symbol indented_block_body) [2749 2765])
                    ("postscriptd" variable nil (reparse-symbol indented_block_body) [2770 2786])
                    ("pscnt" variable nil (reparse-symbol indented_block_body) [2791 2800])
                    ("serif" variable nil (reparse-symbol indented_block_body) [2806 2825])
                    ("sans_serif" variable nil (reparse-symbol indented_block_body) [2830 2855])
                    ("monospace" variable nil (reparse-symbol indented_block_body) [2860 2884])
                    ("cursive" variable nil (reparse-symbol indented_block_body) [2889 2932])
                    ("font_family" variable nil (reparse-symbol indented_block_body) [2937 2958])
                    ("font_families" variable nil (reparse-symbol indented_block_body) [2963 3026])
                    ("font_info" variable nil (reparse-symbol indented_block_body) [3032 4028])
                    ("_rc_cache" variable nil (reparse-symbol indented_block_body) [4034 4050])
                    ("_rc_cache_keys" code nil (reparse-symbol indented_block_body) [4055 4178])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [4213 4286])
                            ("ff" variable nil (reparse-symbol indented_block_body) [4294 4330])
                            ("if" code nil (reparse-symbol indented_block_body) [4339 4585])
                            ("fontconfig" variable nil (reparse-symbol indented_block_body) [4594 4625])
                            ("for" code nil (reparse-symbol indented_block_body) [4634 5622])
                            ("self" variable nil (reparse-symbol indented_block_body) [5630 5668])
                            ("cmd" variable nil (reparse-symbol indented_block_body) [5784 5844])
                            ("if" code nil (reparse-symbol indented_block_body) [5853 5915])
                            ("while" code nil (reparse-symbol indented_block_body) [5923 6009])
                            ("cmd" variable nil (reparse-symbol indented_block_body) [6017 6037])
                            ("self" variable nil (reparse-symbol indented_block_body) [6046 6176]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4197 4201]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4184 6177])
                    ("get_basefile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6199 6203])
                            ("tex" variable nil (reparse-symbol function_parameters) [6205 6208])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [6210 6218])
                            ("dpi" variable nil (reparse-symbol function_parameters) [6220 6223]))                          
                        :documentation "
        returns a filename based on a hash of the string, fontsize, and dpi
        ")
                        (reparse-symbol indented_block_body) [6182 6652])
                    ("get_font_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6677 6681]))                          
                        :documentation "Reinitializes self if relevant rcParams on have changed.")
                        (reparse-symbol indented_block_body) [6657 7591])
                    ("get_font_preamble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7618 7622]))                          
                        :documentation "
        returns a string containing font configuration for the tex preamble
        ")
                        (reparse-symbol indented_block_body) [7596 7760])
                    ("get_custom_preamble" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7789 7793]))                          
                        :documentation "returns a string containing user additions to the tex preamble")
                        (reparse-symbol indented_block_body) [7765 7931])
                    ("_get_shell_cmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7955 7959])
                            ("args" variable nil (reparse-symbol function_parameters) [7961 7966]))                          
                        :documentation "
        On windows, changing directories can be complicated by the presence of
        multiple drives. get_shell_cmd deals with this issue.
        ")
                        (reparse-symbol indented_block_body) [7936 8341])
                    ("make_tex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8359 8363])
                            ("tex" variable nil (reparse-symbol function_parameters) [8365 8368])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [8370 8378]))                          
                        :documentation "
        Generate a tex file to render the tex string at a specific font size

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [8346 9855])
                    ("_re_vbox" variable nil (reparse-symbol indented_block_body) [9861 9938])
                    ("make_tex_preview" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9965 9969])
                            ("tex" variable nil (reparse-symbol function_parameters) [9971 9974])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [9976 9984]))                          
                        :documentation "
        Generate a tex file to render the tex string at a specific
        font size.  It uses the preview.sty to determin the dimension
        (width, height, descent) of the output.

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [9944 11926])
                    ("make_dvi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11945 11949])
                            ("tex" variable nil (reparse-symbol function_parameters) [11951 11954])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [11956 11964]))                          
                        :documentation "
        generates a dvi file containing latex's layout of tex string

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [11932 13606])
                    ("make_dvi_preview" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13633 13637])
                            ("tex" variable nil (reparse-symbol function_parameters) [13639 13642])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [13644 13652]))                          
                        :documentation "
        generates a dvi file containing latex's layout of tex
        string. It calls make_tex_preview() method and store the size
        information (width, height, descent) in a separte file.

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [13612 15573])
                    ("make_png" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15591 15595])
                            ("tex" variable nil (reparse-symbol function_parameters) [15597 15600])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [15602 15610])
                            ("dpi" variable nil (reparse-symbol function_parameters) [15612 15615]))                          
                        :documentation "
        generates a png file containing latex's rendering of tex string

        returns the filename
        ")
                        (reparse-symbol indented_block_body) [15578 16951])
                    ("make_ps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16968 16972])
                            ("tex" variable nil (reparse-symbol function_parameters) [16974 16977])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [16979 16987]))                          
                        :documentation "
        generates a postscript file containing latex's rendering of tex string

        returns the file name
        ")
                        (reparse-symbol indented_block_body) [16956 18052])
                    ("get_ps_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18073 18077])
                            ("tex" variable nil (reparse-symbol function_parameters) [18079 18082])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [18084 18092]))                          
                        :documentation "
        returns a list containing the postscript bounding box for latex's
        rendering of the tex string
        ")
                        (reparse-symbol indented_block_body) [18057 18492])
                    ("get_grey" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18510 18514])
                            ("tex" variable nil (reparse-symbol function_parameters) [18516 18519])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [18521 18529])
                            ("dpi" variable nil (reparse-symbol function_parameters) [18536 18539]))                          
                        :documentation "returns the alpha channel")
                        (reparse-symbol indented_block_body) [18497 20796])
                    ("get_rgba" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20815 20819])
                            ("tex" variable nil (reparse-symbol function_parameters) [20821 20824])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [20826 20834])
                            ("dpi" variable nil (reparse-symbol function_parameters) [20841 20844])
                            ("rgb" variable nil (reparse-symbol function_parameters) [20851 20854]))                          
                        :documentation "
        Returns latex's rendering of the tex string as an rgba array
        ")
                        (reparse-symbol indented_block_body) [20802 21504])
                    ("get_text_width_height_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21544 21548])
                            ("tex" variable nil (reparse-symbol function_parameters) [21550 21553])
                            ("fontsize" variable nil (reparse-symbol function_parameters) [21555 21563])
                            ("renderer" variable nil (reparse-symbol function_parameters) [21565 21573]))                          
                        :documentation "
        return width, heigth and descent of the text.
        ")
                        (reparse-symbol indented_block_body) [21510 22704]))                  
                :type "class")
                nil [1973 22704]))          
      :file "texmanager.py"
      :pointmax 22704
      :fsize 22703
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("matplotlib" include nil nil [1 29])
            ("Substitution" type
               (:documentation "
    A decorator to take a function's docstring and perform string
    substitution on it.
    
    This decorator should be robust even if func.__doc__ is None
    (for example, if -OO was passed to the interpreter)
    
    Usage: construct a docstring.Substitution with a sequence or
    dictionary suitable for performing substitution; then
    decorate a suitable function with the constructed object. e.g.
    
    sub_author_name = Substitution(author='Jason')
    
    @sub_author_name
    def some_function(x):
        \"%(author)s wrote this function\"
    
    # note that some_function.__doc__ is now \"Jason wrote this function\"
    
    One can also use positional arguments.
    
    sub_first_last_names = Substitution('Edgar Allen', 'Poe')
    
    @sub_first_last_names
    def some_function(x):
        \"%s %s wrote the Raven\"
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("assert" code nil (reparse-symbol indented_block_body) [966 1041])
                            ("self" code nil (reparse-symbol indented_block_body) [1050 1078]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [934 938])
                            ("args" variable nil (reparse-symbol function_parameters) [940 945])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [947 955]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [921 1079])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1097 1101])
                            ("func" variable nil (reparse-symbol function_parameters) [1103 1107]))                          )
                        (reparse-symbol indented_block_body) [1084 1197])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1213 1217])
                            ("args" variable nil (reparse-symbol function_parameters) [1219 1224])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1226 1234]))                          )
                        (reparse-symbol indented_block_body) [1202 1353])
                    ("from_params" function
                       (:documentation "
        In the case where the params is a mutable sequence (list or dictionary)
        and it may change before this class is called, one may explicitly use
        a reference to the params rather than using *args or **kwargs which will
        copy the values and not reference them.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1391 1394])
                            ("params" variable nil (reparse-symbol function_parameters) [1396 1402]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1358 1792]))                  
                :type "class")
                nil [31 1792])
            ("Appender" type
               (:documentation "
    A function decorator that will append an addendum to the docstring
    of the target function.
    
    This decorator should be robust even if func.__doc__ is None
    (for example, if -OO was passed to the interpreter).
    
    Usage: construct a docstring.Appender with a string to be joined to
    the original docstring. An optional 'join' parameter may be supplied
    which will be used to join the docstring and addendum. e.g.
    
    add_copyright = Appender(\"Copyright (c) 2009\", join='\\n')
    
    @add_copyright
    def my_dog(has='fleas'):
        \"This docstring will have a copyright below\"
        pass
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2510 2534])
                            ("self" variable nil (reparse-symbol indented_block_body) [2543 2559]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2476 2480])
                            ("addendum" variable nil (reparse-symbol function_parameters) [2482 2490])
                            ("join" variable nil (reparse-symbol function_parameters) [2492 2496]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2463 2560])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2578 2582])
                            ("func" variable nil (reparse-symbol function_parameters) [2584 2588]))                          )
                        (reparse-symbol indented_block_body) [2565 2718]))                  
                :type "class")
                nil [1793 2718])
            ("dedent" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [2730 2734]))              ) nil [2719 2854])
            ("copy" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [2864 2870]))              ) nil [2855 3075])
            ("interpd" variable nil nil [3179 3203])
            ("dedent_interpd" function
               (:documentation "A special case of the interpd that first performs a dedent on
    the incoming docstring"
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [3224 3228]))                  )
                nil [3205 3363])
            ("copy_dedent" function
               (:documentation "A decorator that will copy the docstring from the source and
    then dedent it"
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [3380 3386]))                  )
                nil [3364 3770]))          
      :file "docstring.py"
      :pointmax 3770
      :fsize 3769
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This is a python interface to Adobe Font Metrics Files.  Although a
number of other python implementations exist (and may be more complete
than mine) I decided not to go with them because either they were
either

  1) copyrighted or used a non-BSD compatible license

  2) had too many dependencies and I wanted a free standing lib

  3) Did more than I needed and it was easier to write my own than
     figure out how to just get what I needed from theirs

It is pretty easy to use, and requires only built-in python libs::

    >>> from afm import AFM
    >>> fh = file('ptmr8a.afm')
    >>> afm = AFM(fh)
    >>> afm.string_width_height('What the heck?')
    (6220.0, 683)
    >>> afm.get_fontname()
    'Times-Roman'
    >>> afm.get_kern_dist('A', 'f')
    0
    >>> afm.get_kern_dist('A', 'y')
    -92.0
    >>> afm.get_bbox_char('!')
    [130, -9, 238, 676]
    >>> afm.get_bbox_font()
    [-168, -218, 1000, 898]


AUTHOR:
  John D. Hunter <jdh2358@gmail.com>
\"\"\"" code nil nil [1 976])
            ("re" include nil nil [978 996])
            ("os" include nil nil [978 996])
            ("sys" include nil nil [978 996])
            ("_mathtext_data" include nil nil [997 1033])
            ("_to_int" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [1386 1387]))              ) nil [1374 1415])
            ("_to_float" variable nil nil [1416 1433])
            ("_to_str" variable nil nil [1434 1448])
            ("_to_list_of_ints" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [1471 1472]))              ) nil [1450 1550])
            ("_to_list_of_floats" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [1574 1575]))              ) nil [1551 1627])
            ("_to_bool" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [1640 1641]))              ) nil [1627 1729])
            ("_sanity_check" function
               (:documentation "
    Check if the file at least looks like AFM.
    If not, raise :exc:`RuntimeError`.
    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [1749 1751]))                  )
                nil [1731 2394])
            ("_parse_header" function
               (:documentation "
    Reads the font metrics header (up to the char metrics) and returns
    a dictionary mapping *key* to *val*.  *val* will be converted to the
    appropriate python type as necessary; eg:

        * 'False'->False
        * '0'->0
        * '-168 -218 1000 898'-> [-168, -218, 1000, 898]

    Dictionary keys are

      StartFontMetrics, FontName, FullName, FamilyName, Weight,
      ItalicAngle, IsFixedPitch, FontBBox, UnderlinePosition,
      UnderlineThickness, Version, Notice, EncodingScheme, CapHeight,
      XHeight, Ascender, Descender, StartCharMetrics

    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [2413 2415]))                  )
                nil [2395 4661])
            ("_parse_char_metrics" function
               (:documentation "
    Return a character metric dictionary.  Keys are the ASCII num of
    the character, values are a (*wx*, *name*, *bbox*) tuple, where
    *wx* is the character width, *name* is the postscript language
    name, and *bbox* is a (*llx*, *lly*, *urx*, *ury*) tuple.

    This function is incomplete per the standard, but thus far parses
    all the sample afm files tried.
    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [4686 4688]))                  )
                nil [4662 5937])
            ("_parse_kern_pairs" function
               (:documentation "
    Return a kern pairs dictionary; keys are (*char1*, *char2*) tuples and
    values are the kern pair value.  For example, a kern pairs line like
    ``KPX A y -50``

    will be represented as::

      d[ ('A', 'y') ] = -50

    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [5960 5962]))                  )
                nil [5938 6864])
            ("_parse_composites" function
               (:documentation "
    Return a composites dictionary.  Keys are the names of the
    composites.  Values are a num parts list of composite information,
    with each element being a (*name*, *dx*, *dy*) tuple.  Thus a
    composites line reading:

      CC Aacute 2 ; PCC A 0 0 ; PCC acute 160 170 ;

    will be represented as::

      d['Aacute'] = [ ('A', 0, 0), ('acute', 160, 170) ]

    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [6887 6889]))                  )
                nil [6865 7867])
            ("_parse_optional" function
               (:documentation "
    Parse the optional fields for kern pair data and composites

    return value is a (*kernDict*, *compositeDict*) which are the
    return values from :func:`_parse_kern_pairs`, and
    :func:`_parse_composites` if the data exists, or empty dicts
    otherwise
    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [7888 7890]))                  )
                nil [7868 8630])
            ("parse_afm" function
               (:documentation "
    Parse the Adobe Font Metics file in file handle *fh*. Return value
    is a (*dhead*, *dcmetrics*, *dkernpairs*, *dcomposite*) tuple where
    *dhead* is a :func:`_parse_header` dict, *dcmetrics* is a
    :func:`_parse_composites` dict, *dkernpairs* is a
    :func:`_parse_kern_pairs` dict (possibly {}), and *dcomposite* is a
    :func:`_parse_composites` dict (possibly {})
    "
                :arguments 
                  ( ("fh" variable nil (reparse-symbol function_parameters) [8645 8647]))                  )
                nil [8631 9275])
            ("AFM" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Parse the AFM file in file object *fh*
        \"\"\"" code nil (reparse-symbol indented_block_body) [9325 9387])
                            ("" code nil (reparse-symbol indented_block_body) [9396 9490])
                            ("self" variable nil (reparse-symbol indented_block_body) [9499 9519])
                            ("self" variable nil (reparse-symbol indented_block_body) [9528 9551])
                            ("self" variable nil (reparse-symbol indented_block_body) [9560 9591])
                            ("self" variable nil (reparse-symbol indented_block_body) [9600 9638])
                            ("self" variable nil (reparse-symbol indented_block_body) [9647 9675]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9306 9310])
                            ("fh" variable nil (reparse-symbol function_parameters) [9312 9314]))                          
                        :documentation "
        Parse the AFM file in file object *fh*
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9293 9676])
                    ("get_bbox_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9700 9704])
                            ("c" variable nil (reparse-symbol function_parameters) [9706 9707])
                            ("isord" variable nil (reparse-symbol function_parameters) [9709 9714]))                          )
                        (reparse-symbol indented_block_body) [9682 9816])
                    ("string_width_height" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9845 9849])
                            ("s" variable nil (reparse-symbol function_parameters) [9851 9852]))                          
                        :documentation "
        Return the string width (including kerning) and string height
        as a (*w*, *h*) tuple.
        ")
                        (reparse-symbol indented_block_body) [9821 10620])
                    ("get_str_bbox_and_descent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10654 10658])
                            ("s" variable nil (reparse-symbol function_parameters) [10660 10661]))                          
                        :documentation "
        Return the string bounding box
        ")
                        (reparse-symbol indented_block_body) [10625 11696])
                    ("get_str_bbox" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11719 11723])
                            ("s" variable nil (reparse-symbol function_parameters) [11725 11726]))                          
                        :documentation "
        Return the string bounding box
        ")
                        (reparse-symbol indented_block_body) [11702 11844])
                    ("get_name_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11867 11871])
                            ("c" variable nil (reparse-symbol function_parameters) [11873 11874])
                            ("isord" variable nil (reparse-symbol function_parameters) [11876 11881]))                          
                        :documentation "
        Get the name of the character, ie, ';' is 'semicolon'
        ")
                        (reparse-symbol indented_block_body) [11849 12069])
                    ("get_width_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12093 12097])
                            ("c" variable nil (reparse-symbol function_parameters) [12099 12100])
                            ("isord" variable nil (reparse-symbol function_parameters) [12102 12107]))                          
                        :documentation "
        Get the width of the character from the character metric WX
        field
        ")
                        (reparse-symbol indented_block_body) [12074 12313])
                    ("get_width_from_char_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12347 12351])
                            ("name" variable nil (reparse-symbol function_parameters) [12353 12357]))                          
                        :documentation "
        Get the width of the character from a type1 character name
        ")
                        (reparse-symbol indented_block_body) [12318 12516])
                    ("get_height_char" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12541 12545])
                            ("c" variable nil (reparse-symbol function_parameters) [12547 12548])
                            ("isord" variable nil (reparse-symbol function_parameters) [12550 12555]))                          
                        :documentation "
        Get the height of character *c* from the bounding box.  This
        is the ink height (space is 0)
        ")
                        (reparse-symbol indented_block_body) [12521 12793])
                    ("get_kern_dist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12816 12820])
                            ("c1" variable nil (reparse-symbol function_parameters) [12822 12824])
                            ("c2" variable nil (reparse-symbol function_parameters) [12826 12828]))                          
                        :documentation "
        Return the kerning pair distance (possibly 0) for chars *c1*
        and *c2*
        ")
                        (reparse-symbol indented_block_body) [12798 13069])
                    ("get_kern_dist_from_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13102 13106])
                            ("name1" variable nil (reparse-symbol function_parameters) [13108 13113])
                            ("name2" variable nil (reparse-symbol function_parameters) [13115 13120]))                          
                        :documentation "
        Return the kerning pair distance (possibly 0) for chars
        *name1* and *name2*
        ")
                        (reparse-symbol indented_block_body) [13074 13313])
                    ("get_fontname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13335 13339]))                          )
                        (reparse-symbol indented_block_body) [13318 13432])
                    ("get_fullname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13454 13458]))                          )
                        (reparse-symbol indented_block_body) [13437 13680])
                    ("get_familyname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13704 13708]))                          )
                        (reparse-symbol indented_block_body) [13685 14104])
                    ("get_weight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14124 14128]))                          )
                        (reparse-symbol indented_block_body) [14109 14225])
                    ("get_angle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14244 14248]))                          )
                        (reparse-symbol indented_block_body) [14230 14334])
                    ("get_capheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14357 14361]))                          )
                        (reparse-symbol indented_block_body) [14339 14446])
                    ("get_xheight" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14467 14471]))                          )
                        (reparse-symbol indented_block_body) [14451 14551])
                    ("get_underline_thickness" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14584 14588]))                          )
                        (reparse-symbol indented_block_body) [14556 14691])
                    ("get_horizontal_stem_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14726 14730]))                          
                        :documentation "
        Return the standard horizontal stem width as float, or *None* if
        not specified in AFM file.
        ")
                        (reparse-symbol indented_block_body) [14696 14912])
                    ("get_vertical_stem_width" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14945 14949]))                          
                        :documentation "
        Return the standard vertical stem width as float, or *None* if
        not specified in AFM file.
        ")
                        (reparse-symbol indented_block_body) [14917 15129]))                  
                :type "class")
                nil [9277 15129])
            ("if" code nil nil [15131 15423]))          
      :file "afm.py"
      :pointmax 15423
      :fsize 15422
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
font data tables for truetype and afm computer modern fonts
\"\"\"" code nil nil [1 68])
            ("\"\"\"
from matplotlib.ft2font import FT2Font
font = FT2Font('/usr/local/share/matplotlib/cmr10.ttf')
items = font.get_charmap().items()
items.sort()

for charcode, glyphind in items:
    print charcode, glyphind
\"\"\"" code nil nil [205 418])
            ("latex_to_bakoma" variable nil nil [420 12432])
            ("latex_to_cmex" variable nil nil [12434 12959])
            ("latex_to_standard" variable nil nil [12961 20194])
            ("type12uni" variable nil nil [20224 58454])
            ("uni2type1" variable nil nil [58456 58510])
            ("tex2uni" variable nil nil [58512 80837])
            ("stix_virtual_fonts" variable nil nil [80926 89917]))          
      :file "_mathtext_data.py"
      :pointmax 89918
      :fsize 89917
      :lastmodtime '(20373 43810 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!pyshared!matplotlib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
