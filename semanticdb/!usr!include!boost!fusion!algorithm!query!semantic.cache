;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c++-mode
      :tags 
        '( ("FUSION_ANY_05052005_1230" variable (:constant-flag t) nil [480 504])
            ("boost/fusion/support/category_of.hpp" include (:system-flag t) nil [506 553])
            ("boost/fusion/algorithm/query/detail/any.hpp" include (:system-flag t) nil [554 608])
            ("boost" type
               (:members 
                  ( ("fusion" type
                       (:members 
                          ( ("result_of" type
                               (:members 
                                  ( ("any" type
                                       (:template 
                                          ( ("Sequence" type (:type "class") nil nil)
                                            ("F" type (:type "class") nil nil))                                          
                                        :type "struct"
                                        :members 
                                          ( ("type" type
                                               (:typedef ("bool")
                                                :type "typedef")
                                                (reparse-symbol classsubparts) [767 785]))                                          )
                                        (reparse-symbol namespacesubparts) [685 796]))                                  
                                :type "namespace")
                                (reparse-symbol namespacesubparts) [651 802])
                            ("any" function
                               (:template 
                                  ( ("Sequence" type (:type "class") nil nil)
                                    ("F" type (:type "class") nil nil))                                  
                                :type "bool"
                                :arguments 
                                  ( ("seq" variable
                                       (:reference 1
                                        :constant-flag t
                                        :type ("Sequence" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [873 893])
                                    ("f" variable (:type ("F" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [894 898]))                                  
                                :typemodifiers ("inline"))
                                (reparse-symbol namespacesubparts) [808 994]))                          
                        :type "namespace")
                        (reparse-symbol namespacesubparts) [628 996]))                  
                :type "namespace")
                nil [610 997]))          
      :file "any.hpp"
      :pointmax 1007
      :fsize 1006
      :lastmodtime '(20225 54185 0 0)
      :unmatched-syntax nil
      :lexical-table 
        '(("FUSION_ANY_05052005_1230")
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c++-mode
      :tags 
        '( ("FUSION_FIND_IF_05052005_1108" variable (:constant-flag t) nil [413 441])
            ("boost/fusion/algorithm/query/detail/find_if.hpp" include (:system-flag t) nil [443 501])
            ("boost/fusion/sequence/intrinsic/begin.hpp" include (:system-flag t) nil [502 554])
            ("boost/fusion/sequence/intrinsic/end.hpp" include (:system-flag t) nil [555 605])
            ("boost/fusion/iterator/value_of.hpp" include (:system-flag t) nil [606 651])
            ("boost/mpl/bind.hpp" include (:system-flag t) nil [652 681])
            ("boost/mpl/lambda.hpp" include (:system-flag t) nil [682 713])
            ("boost/mpl/quote.hpp" include (:system-flag t) nil [714 744])
            ("boost/utility/enable_if.hpp" include (:system-flag t) nil [745 783])
            ("boost/type_traits/is_const.hpp" include (:system-flag t) nil [784 825])
            ("boost" type
               (:members 
                  ( ("fusion" type
                       (:members 
                          ( ("result_of" type
                               (:members 
                                  ( ("find_if" type
                                       (:template 
                                          ( ("Sequence" type (:type "class") nil nil)
                                            ("Pred" type (:type "class") nil nil))                                          
                                        :type "struct"
                                        :members 
                                          ( ("filter" variable (:type "int") (reparse-symbol classsubparts) [1368 1375])
                                            ("type" type
                                               (:typedef ("filter::type" type (:type "class") nil nil)
                                                :type "typedef")
                                                (reparse-symbol classsubparts) [1389 1424]))                                          )
                                        (reparse-symbol namespacesubparts) [902 1435]))                                  
                                :type "namespace")
                                (reparse-symbol namespacesubparts) [868 1441])
                            ("find_if" function
                               (:arguments 
                                  ( ("seq" variable
                                       (:reference 1
                                        :type ("Sequence" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [1643 1657]))                                  
                                :type ("type" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [1626 1794])
                            ("find_if" function
                               (:template 
                                  ( ("Pred" type (:type "class") nil nil)
                                    ("Sequence" type (:type "class") nil nil))                                  
                                :type ("result_of::find_if::type" type (:type "class") nil nil)
                                :arguments 
                                  ( ("seq" variable
                                       (:reference 1
                                        :constant-flag t
                                        :type ("Sequence" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [1929 1949]))                                  
                                :typemodifiers ("inline" "typename"))
                                (reparse-symbol namespacesubparts) [1800 2092]))                          
                        :type "namespace")
                        (reparse-symbol namespacesubparts) [845 2094]))                  
                :type "namespace")
                nil [827 2095]))          
      :file "find_if.hpp"
      :pointmax 2105
      :fsize 2104
      :lastmodtime '(20225 54185 0 0)
      :unmatched-syntax '((punctuation 1625 . 1626) (punctuation 1624 . 1625) (punctuation 1623 . 1624) (punctuation 1613 . 1614) (symbol 1609 . 1613) (punctuation 1607 . 1608) (symbol 1599 . 1607) (punctuation 1598 . 1599) (symbol 1591 . 1598) (punctuation 1590 . 1591) (punctuation 1589 . 1590) (symbol 1580 . 1589) (punctuation 1578 . 1579) (punctuation 1566 . 1567) (symbol 1558 . 1566) (punctuation 1557 . 1558) (symbol 1549 . 1557) (punctuation 1535 . 1536) (symbol 1520 . 1535) (TYPENAME 1502 . 1510) (INLINE 1495 . 1501) (punctuation 1489 . 1490) (symbol 1481 . 1489) (TYPENAME 1472 . 1480) (punctuation 1470 . 1471) (symbol 1466 . 1470) (TYPENAME 1457 . 1465) (punctuation 1456 . 1457) (TEMPLATE 1447 . 1455) (punctuation 1354 . 1355) (punctuation 1336 . 1337) (punctuation 1314 . 1315) (symbol 1312 . 1314) (punctuation 1311 . 1312) (punctuation 1310 . 1311) (symbol 1307 . 1310) (punctuation 1306 . 1307) (punctuation 1305 . 1306) (symbol 1297 . 1305) (punctuation 1296 . 1297) (symbol 1290 . 1296) (punctuation 1289 . 1290) (punctuation 1288 . 1289) (symbol 1285 . 1288) (punctuation 1284 . 1285) (symbol 1279 . 1284) (punctuation 1278 . 1279) (punctuation 1277 . 1278) (symbol 1274 . 1277) (punctuation 1272 . 1273) (symbol 1245 . 1249) (punctuation 1244 . 1245) (punctuation 1243 . 1244) (punctuation 1242 . 1243) (symbol 1238 . 1242) (punctuation 1237 . 1238) (symbol 1231 . 1237) (punctuation 1230 . 1231) (punctuation 1229 . 1230) (symbol 1226 . 1229) (TYPENAME 1217 . 1225) (punctuation 1191 . 1192) (symbol 1186 . 1191) (punctuation 1185 . 1186) (punctuation 1184 . 1185) (symbol 1181 . 1184) (punctuation 1179 . 1180) (symbol 1156 . 1160) (punctuation 1155 . 1156) (punctuation 1154 . 1155) (punctuation 1153 . 1154) (symbol 1145 . 1153) (punctuation 1144 . 1145) (symbol 1141 . 1144) (punctuation 1140 . 1141) (punctuation 1139 . 1140) (symbol 1130 . 1139) (TYPENAME 1121 . 1129) (punctuation 1119 . 1120) (symbol 1096 . 1100) (punctuation 1095 . 1096) (punctuation 1094 . 1095) (punctuation 1093 . 1094) (symbol 1085 . 1093) (punctuation 1084 . 1085) (symbol 1079 . 1084) (punctuation 1078 . 1079) (punctuation 1077 . 1078) (symbol 1068 . 1077) (TYPENAME 1059 . 1067) (punctuation 1037 . 1038) (symbol 1023 . 1037) (punctuation 1022 . 1023) (punctuation 1021 . 1022) (symbol 1015 . 1021) (TYPEDEF 991 . 998))
      :lexical-table 
        '(("FUSION_FIND_IF_05052005_1108")
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c++-mode
      :tags 
        '( ("FUSION_FIND_05052005_1107" variable (:constant-flag t) nil [410 435])
            ("boost/fusion/algorithm/query/detail/find_if.hpp" include (:system-flag t) nil [437 495])
            ("boost/fusion/sequence/intrinsic/begin.hpp" include (:system-flag t) nil [496 548])
            ("boost/fusion/sequence/intrinsic/end.hpp" include (:system-flag t) nil [549 599])
            ("boost/fusion/iterator/key_of.hpp" include (:system-flag t) nil [600 643])
            ("boost/fusion/iterator/value_of.hpp" include (:system-flag t) nil [644 689])
            ("boost/fusion/support/category_of.hpp" include (:system-flag t) nil [690 737])
            ("boost/mpl/if.hpp" include (:system-flag t) nil [738 765])
            ("boost/type_traits/is_same.hpp" include (:system-flag t) nil [766 806])
            ("boost/type_traits/is_const.hpp" include (:system-flag t) nil [807 848])
            ("boost/utility/enable_if.hpp" include (:system-flag t) nil [849 887])
            ("boost" type
               (:members 
                  ( ("fusion" type
                       (:members 
                          ( ("result_of" type
                               (:members 
                                  ( ("find" type
                                       (:template 
                                          ( ("Sequence" type (:type "class") nil nil)
                                            ("T" type (:type "class") nil nil))                                          
                                        :type "struct"
                                        :members 
                                          ( ("filter" variable (:type "int") (reparse-symbol classsubparts) [1583 1590])
                                            ("type" type
                                               (:typedef ("filter::type" type (:type "class") nil nil)
                                                :type "typedef")
                                                (reparse-symbol classsubparts) [1604 1639]))                                          )
                                        (reparse-symbol namespacesubparts) [964 1650]))                                  
                                :type "namespace")
                                (reparse-symbol namespacesubparts) [930 1656])
                            ("find" function
                               (:arguments 
                                  ( ("seq" variable
                                       (:reference 1
                                        :type ("Sequence" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [1852 1866]))                                  
                                :type ("type" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [1832 1997])
                            ("find" function
                               (:template 
                                  ( ("T" type (:type "class") nil nil)
                                    ("Sequence" type (:type "class") nil nil))                                  
                                :type ("result_of::find::type" type (:type "class") nil nil)
                                :arguments 
                                  ( ("seq" variable
                                       (:reference 1
                                        :constant-flag t
                                        :type ("Sequence" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [2120 2140]))                                  
                                :typemodifiers ("inline" "typename"))
                                (reparse-symbol namespacesubparts) [2003 2277]))                          
                        :type "namespace")
                        (reparse-symbol namespacesubparts) [907 2279]))                  
                :type "namespace")
                nil [889 2280]))          
      :file "find.hpp"
      :pointmax 2290
      :fsize 2289
      :lastmodtime '(20225 54185 0 0)
      :unmatched-syntax '((punctuation 1831 . 1832) (punctuation 1830 . 1831) (punctuation 1829 . 1830) (punctuation 1819 . 1820) (symbol 1818 . 1819) (punctuation 1816 . 1817) (symbol 1808 . 1816) (punctuation 1807 . 1808) (symbol 1803 . 1807) (punctuation 1802 . 1803) (punctuation 1801 . 1802) (symbol 1792 . 1801) (punctuation 1790 . 1791) (punctuation 1778 . 1779) (symbol 1770 . 1778) (punctuation 1769 . 1770) (symbol 1761 . 1769) (punctuation 1747 . 1748) (symbol 1732 . 1747) (TYPENAME 1714 . 1722) (INLINE 1707 . 1713) (punctuation 1701 . 1702) (symbol 1693 . 1701) (TYPENAME 1684 . 1692) (punctuation 1682 . 1683) (symbol 1681 . 1682) (TYPENAME 1672 . 1680) (punctuation 1671 . 1672) (TEMPLATE 1662 . 1670) (punctuation 1569 . 1570) (punctuation 1551 . 1552) (symbol 1529 . 1530) (punctuation 1527 . 1528) (symbol 1500 . 1504) (punctuation 1499 . 1500) (punctuation 1498 . 1499) (punctuation 1497 . 1498) (punctuation 1471 . 1472) (symbol 1469 . 1471) (punctuation 1468 . 1469) (punctuation 1467 . 1468) (symbol 1464 . 1467) (punctuation 1463 . 1464) (symbol 1455 . 1463) (punctuation 1453 . 1454) (punctuation 1425 . 1426) (symbol 1423 . 1425) (punctuation 1422 . 1423) (punctuation 1421 . 1422) (symbol 1418 . 1421) (punctuation 1417 . 1418) (symbol 1411 . 1417) (punctuation 1409 . 1410) (punctuation 1381 . 1382) (symbol 1373 . 1381) (punctuation 1372 . 1373) (symbol 1358 . 1372) (punctuation 1357 . 1358) (punctuation 1356 . 1357) (symbol 1350 . 1356) (punctuation 1320 . 1321) (symbol 1317 . 1320) (punctuation 1316 . 1317) (punctuation 1315 . 1316) (symbol 1312 . 1315) (TYPENAME 1303 . 1311) (punctuation 1277 . 1278) (symbol 1270 . 1277) (punctuation 1268 . 1269) (symbol 1245 . 1249) (punctuation 1244 . 1245) (punctuation 1243 . 1244) (punctuation 1242 . 1243) (symbol 1234 . 1242) (punctuation 1233 . 1234) (symbol 1230 . 1233) (punctuation 1229 . 1230) (punctuation 1228 . 1229) (symbol 1219 . 1228) (TYPENAME 1210 . 1218) (punctuation 1208 . 1209) (symbol 1185 . 1189) (punctuation 1184 . 1185) (punctuation 1183 . 1184) (punctuation 1182 . 1183) (symbol 1174 . 1182) (punctuation 1173 . 1174) (symbol 1168 . 1173) (punctuation 1167 . 1168) (punctuation 1166 . 1167) (symbol 1157 . 1166) (TYPENAME 1148 . 1156) (punctuation 1126 . 1127) (symbol 1112 . 1126) (punctuation 1111 . 1112) (punctuation 1110 . 1111) (symbol 1104 . 1110) (TYPEDEF 1080 . 1087))
      :lexical-table 
        '(("FUSION_FIND_05052005_1107")
          )
))
  :file "!usr!include!boost!fusion!algorithm!query!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
