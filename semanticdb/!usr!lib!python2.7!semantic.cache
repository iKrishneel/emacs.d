;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for numbers, according to PEP 3141.

TODO: Fill out more detailed documentation on the operators.\"\"\"" code nil nil [102 234])
            ("__future__" include nil nil [236 267])
            ("abc" include nil nil [268 325])
            ("__all__" variable nil nil [327 390])
            ("Number" type
               (:documentation "All numbers inherit from this class.

    If you just want to check if an argument x is a number, without
    caring what kind, use isinstance(x, Number).
    "
                :superclasses ("object")
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [588 611])
                    ("__slots__" variable nil (reparse-symbol indented_block_body) [616 630])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [708 723]))                  
                :type "class")
                nil [392 724])
            ("Complex" type
               (:documentation "Complex defines the operations that work on the builtin complex type.

    In short, those are: a conversion to complex, .real, .imag, +, -,
    *, /, abs(), .conjugate, ==, and !=.

    If it is given heterogenous arguments, and doesn't have special
    knowledge about them, it should fall back to the builtin complex
    type as described below.
    "
                :superclasses ("Number")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [1499 1513])
                    ("__complex__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1555 1559]))                          
                        :documentation "Return a builtin complex instance. Called for complex(self).")
                        (reparse-symbol indented_block_body) [1519 1637])
                    ("__nonzero__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1689 1693]))                          
                        :documentation "True if self != 0. Called for bool(self).")
                        (reparse-symbol indented_block_body) [1673 1777])
                    ("real" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractproperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1813 1817]))                          
                        :documentation "Retrieve the real component of this number.

        This should subclass Real.
        ")
                        (reparse-symbol indented_block_body) [1782 1957])
                    ("imag" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractproperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1993 1997]))                          
                        :documentation "Retrieve the imaginary component of this number.

        This should subclass Real.
        ")
                        (reparse-symbol indented_block_body) [1962 2142])
                    ("__add__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2179 2183])
                            ("other" variable nil (reparse-symbol function_parameters) [2185 2190]))                          
                        :documentation "self + other")
                        (reparse-symbol indented_block_body) [2147 2254])
                    ("__radd__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2292 2296])
                            ("other" variable nil (reparse-symbol function_parameters) [2298 2303]))                          
                        :documentation "other + self")
                        (reparse-symbol indented_block_body) [2259 2367])
                    ("__neg__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2404 2408]))                          
                        :documentation "-self")
                        (reparse-symbol indented_block_body) [2372 2465])
                    ("__pos__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2502 2506]))                          
                        :documentation "+self")
                        (reparse-symbol indented_block_body) [2470 2563])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2580 2584])
                            ("other" variable nil (reparse-symbol function_parameters) [2586 2591]))                          
                        :documentation "self - other")
                        (reparse-symbol indented_block_body) [2568 2650])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2668 2672])
                            ("other" variable nil (reparse-symbol function_parameters) [2674 2679]))                          
                        :documentation "other - self")
                        (reparse-symbol indented_block_body) [2655 2738])
                    ("__mul__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2775 2779])
                            ("other" variable nil (reparse-symbol function_parameters) [2781 2786]))                          
                        :documentation "self * other")
                        (reparse-symbol indented_block_body) [2743 2850])
                    ("__rmul__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2888 2892])
                            ("other" variable nil (reparse-symbol function_parameters) [2894 2899]))                          
                        :documentation "other * self")
                        (reparse-symbol indented_block_body) [2855 2963])
                    ("__div__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3000 3004])
                            ("other" variable nil (reparse-symbol function_parameters) [3006 3011]))                          
                        :documentation "self / other without __future__ division

        May promote to float.
        ")
                        (reparse-symbol indented_block_body) [2968 3143])
                    ("__rdiv__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3181 3185])
                            ("other" variable nil (reparse-symbol function_parameters) [3187 3192]))                          
                        :documentation "other / self without __future__ division")
                        (reparse-symbol indented_block_body) [3148 3284])
                    ("__truediv__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3325 3329])
                            ("other" variable nil (reparse-symbol function_parameters) [3331 3336]))                          
                        :documentation "self / other with __future__ division.

        Should promote to float when necessary.
        ")
                        (reparse-symbol indented_block_body) [3289 3484])
                    ("__rtruediv__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3526 3530])
                            ("other" variable nil (reparse-symbol function_parameters) [3532 3537]))                          
                        :documentation "other / self with __future__ division")
                        (reparse-symbol indented_block_body) [3489 3626])
                    ("__pow__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3663 3667])
                            ("exponent" variable nil (reparse-symbol function_parameters) [3669 3677]))                          
                        :documentation "self**exponent; should promote to float or complex when necessary.")
                        (reparse-symbol indented_block_body) [3631 3795])
                    ("__rpow__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3833 3837])
                            ("base" variable nil (reparse-symbol function_parameters) [3839 3843]))                          
                        :documentation "base ** self")
                        (reparse-symbol indented_block_body) [3800 3907])
                    ("__abs__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3944 3948]))                          
                        :documentation "Returns the Real distance from 0. Called for abs(self).")
                        (reparse-symbol indented_block_body) [3912 4055])
                    ("conjugate" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4094 4098]))                          
                        :documentation "(x+y*i).conjugate() returns (x-y*i).")
                        (reparse-symbol indented_block_body) [4060 4186])
                    ("__eq__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4222 4226])
                            ("other" variable nil (reparse-symbol function_parameters) [4228 4233]))                          
                        :documentation "self == other")
                        (reparse-symbol indented_block_body) [4191 4298])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4314 4318])
                            ("other" variable nil (reparse-symbol function_parameters) [4320 4325]))                          
                        :documentation "self != other")
                        (reparse-symbol indented_block_body) [4303 4453]))                  
                :type "class")
                nil [1107 4453])
            ("Complex" code nil nil [4454 4479])
            ("Real" type
               (:documentation "To Complex, Real adds the operations that work on real numbers.

    In short, those are: a conversion to float, trunc(), divmod,
    %, <, <=, >, and >=.

    Real also provides defaults for the derived operations.
    "
                :superclasses ("Complex")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4739 4753])
                    ("__float__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4793 4797]))                          
                        :documentation "Any Real can be converted to a native float object.

        Called for float(self).")
                        (reparse-symbol indented_block_body) [4759 4933])
                    ("__trunc__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4972 4976]))                          
                        :documentation "trunc(self): Truncates self to an Integral.

        Returns an Integral i such that:
          * i>0 iff self>0;
          * abs(i) <= abs(self);
          * for any Integral j satisfying the first two conditions,
            abs(i) >= abs(j) [i.e. i has \"maximal\" abs among those].
        i.e. \"truncate towards 0\".
        ")
                        (reparse-symbol indented_block_body) [4938 5355])
                    ("__divmod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5375 5379])
                            ("other" variable nil (reparse-symbol function_parameters) [5381 5386]))                          
                        :documentation "divmod(self, other): The pair (self // other, self % other).

        Sometimes this can be computed faster than the pair of
        operations.
        ")
                        (reparse-symbol indented_block_body) [5360 5602])
                    ("__rdivmod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5623 5627])
                            ("other" variable nil (reparse-symbol function_parameters) [5629 5634]))                          
                        :documentation "divmod(other, self): The pair (self // other, self % other).

        Sometimes this can be computed faster than the pair of
        operations.
        ")
                        (reparse-symbol indented_block_body) [5607 5850])
                    ("__floordiv__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5892 5896])
                            ("other" variable nil (reparse-symbol function_parameters) [5898 5903]))                          
                        :documentation "self // other: The floor() of self/other.")
                        (reparse-symbol indented_block_body) [5855 5996])
                    ("__rfloordiv__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6039 6043])
                            ("other" variable nil (reparse-symbol function_parameters) [6045 6050]))                          
                        :documentation "other // self: The floor() of other/self.")
                        (reparse-symbol indented_block_body) [6001 6143])
                    ("__mod__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6180 6184])
                            ("other" variable nil (reparse-symbol function_parameters) [6186 6191]))                          
                        :documentation "self % other")
                        (reparse-symbol indented_block_body) [6148 6255])
                    ("__rmod__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6293 6297])
                            ("other" variable nil (reparse-symbol function_parameters) [6299 6304]))                          
                        :documentation "other % self")
                        (reparse-symbol indented_block_body) [6260 6368])
                    ("__lt__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6404 6408])
                            ("other" variable nil (reparse-symbol function_parameters) [6410 6415]))                          
                        :documentation "self < other

        < on Reals defines a total ordering, except perhaps for NaN.")
                        (reparse-symbol indented_block_body) [6373 6549])
                    ("__le__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6585 6589])
                            ("other" variable nil (reparse-symbol function_parameters) [6591 6596]))                          
                        :documentation "self <= other")
                        (reparse-symbol indented_block_body) [6554 6661])
                    ("__complex__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6742 6746]))                          
                        :documentation "complex(self) == complex(float(self), 0)")
                        (reparse-symbol indented_block_body) [6726 6840])
                    ("real" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6868 6872]))                          
                        :documentation "Real numbers are their real component.")
                        (reparse-symbol indented_block_body) [6845 6949])
                    ("imag" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6977 6981]))                          
                        :documentation "Real numbers have no imaginary component.")
                        (reparse-symbol indented_block_body) [6954 7057])
                    ("conjugate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7076 7080]))                          
                        :documentation "Conjugate is a no-op for Reals.")
                        (reparse-symbol indented_block_body) [7062 7150]))                  
                :type "class")
                nil [4482 7150])
            ("Real" code nil nil [7151 7171])
            ("Rational" type
               (:documentation ".numerator and .denominator should be in lowest terms."
                :superclasses ("Real")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [7266 7280])
                    ("numerator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7322 7326]))                          
                        :decorators 
                          ( ("abstractproperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7286 7363])
                    ("denominator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7406 7410]))                          
                        :decorators 
                          ( ("abstractproperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7368 7447])
                    ("__float__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7527 7531]))                          
                        :documentation "float(self) = self.numerator / self.denominator

        It's important that this conversion use the integer's \"true\"
        division rather than casting one side to float before dividing
        so that ratios of huge integers convert without overflowing.

        ")
                        (reparse-symbol indented_block_body) [7513 7865]))                  
                :type "class")
                nil [7174 7865])
            ("Integral" type
               (:documentation "Integral adds a conversion to long and the bit-string operations."
                :superclasses ("Rational")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [7974 7988])
                    ("__long__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8027 8031]))                          
                        :documentation "long(self)")
                        (reparse-symbol indented_block_body) [7994 8093])
                    ("__index__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8112 8116]))                          
                        :documentation "index(self)")
                        (reparse-symbol indented_block_body) [8098 8171])
                    ("__pow__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8208 8212])
                            ("exponent" variable nil (reparse-symbol function_parameters) [8214 8222])
                            ("modulus" variable nil (reparse-symbol function_parameters) [8224 8231]))                          
                        :documentation "self ** exponent % modulus, but maybe faster.

        Accept the modulus argument if you want to support the
        3-argument version of pow(). Raise a TypeError if exponent < 0
        or any argument isn't Integral. Otherwise, just implement the
        2-argument version described in Complex.
        ")
                        (reparse-symbol indented_block_body) [8176 8596])
                    ("__lshift__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8636 8640])
                            ("other" variable nil (reparse-symbol function_parameters) [8642 8647]))                          
                        :documentation "self << other")
                        (reparse-symbol indented_block_body) [8601 8712])
                    ("__rlshift__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8753 8757])
                            ("other" variable nil (reparse-symbol function_parameters) [8759 8764]))                          
                        :documentation "other << self")
                        (reparse-symbol indented_block_body) [8717 8829])
                    ("__rshift__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8869 8873])
                            ("other" variable nil (reparse-symbol function_parameters) [8875 8880]))                          
                        :documentation "self >> other")
                        (reparse-symbol indented_block_body) [8834 8945])
                    ("__rrshift__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8986 8990])
                            ("other" variable nil (reparse-symbol function_parameters) [8992 8997]))                          
                        :documentation "other >> self")
                        (reparse-symbol indented_block_body) [8950 9062])
                    ("__and__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9099 9103])
                            ("other" variable nil (reparse-symbol function_parameters) [9105 9110]))                          
                        :documentation "self & other")
                        (reparse-symbol indented_block_body) [9067 9174])
                    ("__rand__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9212 9216])
                            ("other" variable nil (reparse-symbol function_parameters) [9218 9223]))                          
                        :documentation "other & self")
                        (reparse-symbol indented_block_body) [9179 9287])
                    ("__xor__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9324 9328])
                            ("other" variable nil (reparse-symbol function_parameters) [9330 9335]))                          
                        :documentation "self ^ other")
                        (reparse-symbol indented_block_body) [9292 9399])
                    ("__rxor__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9437 9441])
                            ("other" variable nil (reparse-symbol function_parameters) [9443 9448]))                          
                        :documentation "other ^ self")
                        (reparse-symbol indented_block_body) [9404 9512])
                    ("__or__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9548 9552])
                            ("other" variable nil (reparse-symbol function_parameters) [9554 9559]))                          
                        :documentation "self | other")
                        (reparse-symbol indented_block_body) [9517 9623])
                    ("__ror__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9660 9664])
                            ("other" variable nil (reparse-symbol function_parameters) [9666 9671]))                          
                        :documentation "other | self")
                        (reparse-symbol indented_block_body) [9628 9735])
                    ("__invert__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9775 9779]))                          
                        :documentation "~self")
                        (reparse-symbol indented_block_body) [9740 9836])
                    ("__float__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9925 9929]))                          
                        :documentation "float(self) == float(long(self))")
                        (reparse-symbol indented_block_body) [9911 10012])
                    ("numerator" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10045 10049]))                          
                        :documentation "Integers are their own numerators.")
                        (reparse-symbol indented_block_body) [10017 10122])
                    ("denominator" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10157 10161]))                          
                        :documentation "Integers have a denominator of 1.")
                        (reparse-symbol indented_block_body) [10127 10229]))                  
                :type "class")
                nil [7867 10229])
            ("Integral" code nil nil [10230 10252])
            ("Integral" code nil nil [10253 10276]))          
      :file "numbers.py"
      :pointmax 10277
      :fsize 10276
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("linecache" include nil nil [172 188])
            ("sys" include nil nil [189 199])
            ("types" include nil nil [200 212])
            ("__all__" variable nil nil [214 328])
            ("warnpy3k" function
               (:documentation "Issue a deprecation warning for Python 3.x related changes.

    Warnings are omitted unless Python is started with the -3 option.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [344 351])
                    ("category" variable nil (reparse-symbol function_parameters) [353 361])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [368 378]))                  )
                nil [331 670])
            ("_show_warning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [689 696])
                    ("category" variable nil (reparse-symbol function_parameters) [698 706])
                    ("filename" variable nil (reparse-symbol function_parameters) [708 716])
                    ("lineno" variable nil (reparse-symbol function_parameters) [718 724])
                    ("file" variable nil (reparse-symbol function_parameters) [726 730])
                    ("line" variable nil (reparse-symbol function_parameters) [737 741]))                  )
                nil [671 1047])
            ("showwarning" variable nil nil [1134 1161])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [1181 1188])
                    ("category" variable nil (reparse-symbol function_parameters) [1190 1198])
                    ("filename" variable nil (reparse-symbol function_parameters) [1200 1208])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1210 1216])
                    ("line" variable nil (reparse-symbol function_parameters) [1218 1222]))                  )
                nil [1163 1519])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [1539 1545])
                    ("message" variable nil (reparse-symbol function_parameters) [1547 1554])
                    ("category" variable nil (reparse-symbol function_parameters) [1559 1567])
                    ("module" variable nil (reparse-symbol function_parameters) [1577 1583])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1588 1594])
                    ("append" variable nil (reparse-symbol function_parameters) [1617 1623]))                  )
                nil [1520 2854])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2872 2878])
                    ("category" variable nil (reparse-symbol function_parameters) [2880 2888])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2898 2904])
                    ("append" variable nil (reparse-symbol function_parameters) [2908 2914]))                  )
                nil [2855 3709])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [3710 3827])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3918 3922]))                  
                :type "class")
                nil [3828 3923])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [4002 4006]))              ) nil [3982 4171])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [4218 4221]))              ) nil [4203 5029])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [5071 5077]))              ) nil [5056 5356])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [5400 5408]))              ) nil [5383 6216])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [6266 6273])
                    ("category" variable nil (reparse-symbol function_parameters) [6275 6283])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [6290 6300]))                  )
                nil [6257 7596])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [7615 7622])
                ("category" variable nil (reparse-symbol function_parameters) [7624 7632])
                ("filename" variable nil (reparse-symbol function_parameters) [7634 7642])
                ("lineno" variable nil (reparse-symbol function_parameters) [7644 7650])
                ("module" variable nil (reparse-symbol function_parameters) [7670 7676])
                ("registry" variable nil (reparse-symbol function_parameters) [7683 7691])
                ("module_globals" variable nil (reparse-symbol function_parameters) [7698 7712]))              ) nil [7597 9607])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [9704 9808])
                    ("__init__" function
                       (:suite 
                          ( ("local_values" variable nil (reparse-symbol indented_block_body) [9921 9944])
                            ("for" code nil (reparse-symbol indented_block_body) [9953 10040])
                            ("None" code nil (reparse-symbol indented_block_body) [10105 10109]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9827 9831])
                            ("message" variable nil (reparse-symbol function_parameters) [9833 9840])
                            ("category" variable nil (reparse-symbol function_parameters) [9842 9850])
                            ("filename" variable nil (reparse-symbol function_parameters) [9852 9860])
                            ("lineno" variable nil (reparse-symbol function_parameters) [9862 9868])
                            ("file" variable nil (reparse-symbol function_parameters) [9870 9874])
                            ("line" variable nil (reparse-symbol function_parameters) [9901 9905]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9814 10110])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10127 10131]))                          )
                        (reparse-symbol indented_block_body) [10115 10358]))                  
                :type "class")
                nil [9609 10358])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11117 11357])
                            ("self" variable nil (reparse-symbol indented_block_body) [11366 11387])
                            ("module" code nil (reparse-symbol indented_block_body) [11458 11464])
                            ("self" variable nil (reparse-symbol indented_block_body) [11473 11494]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11075 11079])
                            ("record" variable nil (reparse-symbol function_parameters) [11081 11087])
                            ("module" variable nil (reparse-symbol function_parameters) [11095 11101]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11062 11495])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11513 11517]))                          )
                        (reparse-symbol indented_block_body) [11500 11795])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11814 11818]))                          )
                        (reparse-symbol indented_block_body) [11800 12349])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12367 12371])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [12373 12382]))                          )
                        (reparse-symbol indented_block_body) [12354 12592]))                  
                :type "class")
                nil [10360 12592])
            ("_warnings_defaults" variable nil nil [13044 13070])
            ("try" code nil nil [13071 13379])
            ("_processoptions" code nil nil [13405 13437])
            ("if" code nil nil [13438 14022])
            ("del" code nil nil [14022 14044]))          
      :file "warnings.py"
      :pointmax 14045
      :fsize 14044
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax '((NAME 11396 . 11400) (IF 11435 . 11437) (ELSE 11453 . 11457) (NAME 10048 . 10052) (IF 10088 . 10090) (ELSE 10100 . 10104) (NAME 1367 . 1371) (IF 1410 . 1412) (ELSE 1426 . 1430)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"
                              CompilerFlag \")\"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
\"\"\"" code nil nil [1 1645])
            ("all_feature_names" variable nil nil [1647 1816])
            ("__all__" code nil nil [1818 1869])
            ("CO_NESTED" variable nil nil [2093 2122])
            ("CO_GENERATOR_ALLOWED" variable nil nil [2141 2165])
            ("CO_FUTURE_DIVISION" variable nil nil [2209 2238])
            ("CO_FUTURE_ABSOLUTE_IMPORT" variable nil nil [2252 2286])
            ("CO_FUTURE_WITH_STATEMENT" variable nil nil [2325 2359])
            ("CO_FUTURE_PRINT_FUNCTION" variable nil nil [2379 2414])
            ("CO_FUTURE_UNICODE_LITERALS" variable nil nil [2434 2470])
            ("_Feature" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2596 2627])
                            ("self" variable nil (reparse-symbol indented_block_body) [2636 2669])
                            ("self" variable nil (reparse-symbol indented_block_body) [2678 2712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2531 2535])
                            ("optionalRelease" variable nil (reparse-symbol function_parameters) [2537 2552])
                            ("mandatoryRelease" variable nil (reparse-symbol function_parameters) [2554 2570])
                            ("compiler_flag" variable nil (reparse-symbol function_parameters) [2572 2585]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2518 2713])
                    ("getOptionalRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2741 2745]))                          
                        :documentation "Return first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        ")
                        (reparse-symbol indented_block_body) [2718 2926])
                    ("getMandatoryRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2955 2959]))                          
                        :documentation "Return release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        ")
                        (reparse-symbol indented_block_body) [2931 3191])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3209 3213]))                          )
                        (reparse-symbol indented_block_body) [3196 3370]))                  
                :type "class")
                nil [2498 3370])
            ("nested_scopes" variable nil nil [3371 3502])
            ("generators" variable nil nil [3504 3637])
            ("division" variable nil nil [3639 3764])
            ("absolute_import" variable nil nil [3766 3919])
            ("with_statement" variable nil nil [3921 4070])
            ("print_function" variable nil nil [4072 4221])
            ("unicode_literals" variable nil nil [4223 4380]))          
      :file "__future__.py"
      :pointmax 4381
      :fsize 4380
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("types" include nil nil [161 173])
            ("_weakrefset" include nil nil [175 206])
            ("_C" type
               (:members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [238 253])
            ("_InstanceType" variable nil nil [253 279])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [301 308]))                  )
                nil [282 876])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C:
            __metaclass__ = ABCMeta
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1742 1769]))                  
                :type "class")
                nil [878 1770])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [2614 2643])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [2661 2665])
                        ("name" variable nil (reparse-symbol function_parameters) [2667 2671])
                        ("bases" variable nil (reparse-symbol function_parameters) [2673 2678])
                        ("namespace" variable nil (reparse-symbol function_parameters) [2680 2689]))                      ) (reparse-symbol indented_block_body) [2649 3526])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3544 3547])
                            ("subclass" variable nil (reparse-symbol function_parameters) [3549 3557]))                          )
                        (reparse-symbol indented_block_body) [3531 4266])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4290 4293])
                            ("file" variable nil (reparse-symbol function_parameters) [4295 4299]))                          )
                        (reparse-symbol indented_block_body) [4271 4698])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4725 4728])
                            ("instance" variable nil (reparse-symbol function_parameters) [4730 4738]))                          )
                        (reparse-symbol indented_block_body) [4703 5559])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5586 5589])
                            ("subclass" variable nil (reparse-symbol function_parameters) [5591 5599]))                          )
                        (reparse-symbol indented_block_body) [5564 7146]))                  
                :type "class")
                nil [1772 7146]))          
      :file "abc.py"
      :pointmax 7146
      :fsize 7145
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 188])
            ("sys" include nil nil [190 200])
            ("os" include nil nil [201 210])
            ("__all__" variable nil nil [212 261])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [275 283])
                ("lineno" variable nil (reparse-symbol function_parameters) [285 291])
                ("module_globals" variable nil (reparse-symbol function_parameters) [293 307]))              ) nil [263 455])
            ("cache" variable nil nil [470 480])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [495 582])
            ("getlines" function
               (:documentation "Get the lines for a file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [597 605])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [607 621]))                  )
                nil [584 879])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [896 904]))                  )
                nil [881 1572])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1590 1598])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [1600 1614]))                  )
                nil [1574 4119]))          
      :file "linecache.py"
      :pointmax 4119
      :fsize 4118
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("CodeType" variable nil nil [1118 1147])
            ("_g" function nil nil [1149 1171])
            ("GeneratorType" variable nil nil [1171 1197])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1220 1224]))                          )
                        (reparse-symbol indented_block_body) [1213 1232]))                  
                :type "class")
                nil [1199 1232])
            ("ClassType" variable nil nil [1232 1252])
            ("UnboundMethodType" variable nil nil [1253 1284])
            ("_x" variable nil nil [1314 1323])
            ("InstanceType" variable nil nil [1324 1347])
            ("MethodType" variable nil nil [1348 1372])
            ("BuiltinFunctionType" variable nil nil [1374 1405])
            ("BuiltinMethodType" variable nil nil [1406 1441])
            ("ModuleType" variable nil nil [1477 1499])
            ("FileType" variable nil nil [1500 1515])
            ("XRangeType" variable nil nil [1516 1535])
            ("try" code nil nil [1537 1681])
            ("SliceType" variable nil nil [1682 1699])
            ("EllipsisType" variable nil nil [1700 1729])
            ("DictProxyType" variable nil nil [1731 1770])
            ("NotImplementedType" variable nil nil [1771 1812])
            ("GetSetDescriptorType" variable nil nil [1866 1917])
            ("MemberDescriptorType" variable nil nil [1918 1972])
            ("del" code nil nil [1974 1997]))          
      :file "types.py"
      :pointmax 2041
      :fsize 2040
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("_functools" include nil nil [358 396])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [510 569])
            ("WRAPPER_UPDATES" variable nil nil [570 601])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [621 628])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [649 656])
                    ("assigned" variable nil (reparse-symbol function_parameters) [677 685])
                    ("updated" variable nil (reparse-symbol function_parameters) [728 735]))                  )
                nil [602 1550])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [1561 1568])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1580 1588])
                    ("updated" variable nil (reparse-symbol function_parameters) [1622 1629]))                  )
                nil [1551 2163])
            ("total_ordering" function
               (:documentation "Class decorator that fills in missing ordering methods"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2183 2186]))                  )
                nil [2164 3689])
            ("cmp_to_key" function
               (:documentation "Convert a cmp= function into a key= function"
                :arguments 
                  ( ("mycmp" variable nil (reparse-symbol function_parameters) [3705 3710]))                  )
                nil [3690 4479]))          
      :file "functools.py"
      :pointmax 4479
      :fsize 4478
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"" code nil nil [1 66])
            ("sys" include nil nil [68 86])
            ("try" code nil nil [88 172])
            ("warnings" include nil nil [173 188])
            ("time" include nil nil [190 237])
            ("traceback" include nil nil [238 285])
            ("__all__" variable nil nil [866 1128])
            ("_start_new_thread" variable nil nil [1130 1173])
            ("_allocate_lock" variable nil nil [1174 1211])
            ("_get_ident" variable nil nil [1212 1241])
            ("ThreadError" variable nil nil [1242 1268])
            ("del" code nil nil [1269 1279])
            ("warnings" code nil nil [1394 1525])
            ("_VERBOSE" variable nil nil [1808 1824])
            ("if" code nil nil [1826 2749])
            ("_profile_hook" variable nil nil [2789 2809])
            ("_trace_hook" variable nil nil [2810 2828])
            ("setprofile" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [2845 2849]))              ) nil [2830 2902])
            ("settrace" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [2916 2920]))              ) nil [2903 2969])
            ("Lock" variable nil nil [2997 3018])
            ("RLock" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [3030 3035])
                ("kwargs" variable nil (reparse-symbol function_parameters) [3037 3045]))              ) nil [3020 3083])
            ("_RLock" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [3155 3187])
                            ("self" variable nil (reparse-symbol indented_block_body) [3196 3227])
                            ("self" variable nil (reparse-symbol indented_block_body) [3236 3255])
                            ("self" variable nil (reparse-symbol indented_block_body) [3264 3280]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3126 3130])
                            ("verbose" variable nil (reparse-symbol function_parameters) [3132 3139]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3113 3281])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3299 3303]))                          )
                        (reparse-symbol indented_block_body) [3286 3536])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3553 3557])
                            ("blocking" variable nil (reparse-symbol function_parameters) [3559 3567]))                          )
                        (reparse-symbol indented_block_body) [3541 4150])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [4155 4174])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4192 4196]))                          )
                        (reparse-symbol indented_block_body) [4180 4641])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4659 4663])
                            ("t" variable nil (reparse-symbol function_parameters) [4665 4666])
                            ("v" variable nil (reparse-symbol function_parameters) [4668 4669])
                            ("tb" variable nil (reparse-symbol function_parameters) [4671 4673]))                          )
                        (reparse-symbol indented_block_body) [4646 4699])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4777 4781])
                            ("count_owner" variable nil (reparse-symbol function_parameters) [4783 4794]))                          )
                        (reparse-symbol indented_block_body) [4756 4997])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5020 5024]))                          )
                        (reparse-symbol indented_block_body) [5002 5272])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5291 5295]))                          )
                        (reparse-symbol indented_block_body) [5277 5342]))                  
                :type "class")
                nil [3084 5342])
            ("Condition" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [5358 5363])
                ("kwargs" variable nil (reparse-symbol function_parameters) [5365 5373]))              ) nil [5344 5415])
            ("_Condition" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [5502 5534])
                            ("if" code nil (reparse-symbol indented_block_body) [5543 5587])
                            ("self" variable nil (reparse-symbol indented_block_body) [5595 5613])
                            ("self" variable nil (reparse-symbol indented_block_body) [5682 5709])
                            ("self" variable nil (reparse-symbol indented_block_body) [5718 5745])
                            ("try" code nil (reparse-symbol indented_block_body) [5969 6074])
                            ("try" code nil (reparse-symbol indented_block_body) [6082 6193])
                            ("try" code nil (reparse-symbol indented_block_body) [6201 6298])
                            ("self" variable nil (reparse-symbol indented_block_body) [6306 6325]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5462 5466])
                            ("lock" variable nil (reparse-symbol function_parameters) [5468 5472])
                            ("verbose" variable nil (reparse-symbol function_parameters) [5479 5486]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5449 6326])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6345 6349]))                          )
                        (reparse-symbol indented_block_body) [6331 6391])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6409 6413])
                            ("args" variable nil (reparse-symbol function_parameters) [6415 6420]))                          )
                        (reparse-symbol indented_block_body) [6396 6466])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6484 6488]))                          )
                        (reparse-symbol indented_block_body) [6471 6565])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6588 6592]))                          )
                        (reparse-symbol indented_block_body) [6570 6654])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6680 6684])
                            ("x" variable nil (reparse-symbol function_parameters) [6686 6687]))                          )
                        (reparse-symbol indented_block_body) [6659 6751])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6770 6774]))                          )
                        (reparse-symbol indented_block_body) [6756 7040])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7054 7058])
                            ("timeout" variable nil (reparse-symbol function_parameters) [7060 7067]))                          )
                        (reparse-symbol indented_block_body) [7045 8862])
                    ("notify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8878 8882])
                            ("n" variable nil (reparse-symbol function_parameters) [8884 8885]))                          )
                        (reparse-symbol indented_block_body) [8867 9462])
                    ("notifyAll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9481 9485]))                          )
                        (reparse-symbol indented_block_body) [9467 9529])
                    ("notify_all" variable nil (reparse-symbol indented_block_body) [9534 9556]))                  
                :type "class")
                nil [5416 9557])
            ("Semaphore" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [9573 9578])
                ("kwargs" variable nil (reparse-symbol function_parameters) [9580 9588]))              ) nil [9559 9630])
            ("_Semaphore" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [9793 9876])
                            ("_Verbose" code nil (reparse-symbol indented_block_body) [9884 9916])
                            ("self" variable nil (reparse-symbol indented_block_body) [9925 9956])
                            ("self" variable nil (reparse-symbol indented_block_body) [9965 9985]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9755 9759])
                            ("value" variable nil (reparse-symbol function_parameters) [9761 9766])
                            ("verbose" variable nil (reparse-symbol function_parameters) [9770 9777]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9742 9986])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10003 10007])
                            ("blocking" variable nil (reparse-symbol function_parameters) [10009 10017]))                          )
                        (reparse-symbol indented_block_body) [9991 10602])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [10607 10626])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10644 10648]))                          )
                        (reparse-symbol indented_block_body) [10632 10901])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10919 10923])
                            ("t" variable nil (reparse-symbol function_parameters) [10925 10926])
                            ("v" variable nil (reparse-symbol function_parameters) [10928 10929])
                            ("tb" variable nil (reparse-symbol function_parameters) [10931 10933]))                          )
                        (reparse-symbol indented_block_body) [10906 10959]))                  
                :type "class")
                nil [9631 10959])
            ("BoundedSemaphore" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [10982 10987])
                ("kwargs" variable nil (reparse-symbol function_parameters) [10989 10997]))              ) nil [10961 11046])
            ("_BoundedSemaphore" type
               (:documentation "Semaphore that checks that # releases is <= # acquires"
                :superclasses ("_Semaphore")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Semaphore" code nil (reparse-symbol indented_block_body) [11204 11245])
                            ("self" variable nil (reparse-symbol indented_block_body) [11254 11281]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11166 11170])
                            ("value" variable nil (reparse-symbol function_parameters) [11172 11177])
                            ("verbose" variable nil (reparse-symbol function_parameters) [11181 11188]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11153 11282])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11299 11303]))                          )
                        (reparse-symbol indented_block_body) [11287 11470]))                  
                :type "class")
                nil [11047 11470])
            ("Event" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [11482 11487])
                ("kwargs" variable nil (reparse-symbol function_parameters) [11489 11497]))              ) nil [11472 11535])
            ("_Event" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [11666 11698])
                            ("self" variable nil (reparse-symbol indented_block_body) [11707 11738])
                            ("self" variable nil (reparse-symbol indented_block_body) [11747 11766]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11637 11641])
                            ("verbose" variable nil (reparse-symbol function_parameters) [11643 11650]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11624 11767])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11798 11802]))                          )
                        (reparse-symbol indented_block_body) [11772 11912])
                    ("isSet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11927 11931]))                          )
                        (reparse-symbol indented_block_body) [11917 11961])
                    ("is_set" variable nil (reparse-symbol indented_block_body) [11966 11980])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11994 11998]))                          )
                        (reparse-symbol indented_block_body) [11986 12163])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12178 12182]))                          )
                        (reparse-symbol indented_block_body) [12168 12311])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12325 12329])
                            ("timeout" variable nil (reparse-symbol function_parameters) [12331 12338]))                          )
                        (reparse-symbol indented_block_body) [12316 12545]))                  
                :type "class")
                nil [11536 12545])
            ("_counter" variable nil nil [12584 12596])
            ("_newname" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [12610 12618]))              ) nil [12597 12712])
            ("_active_limbo_lock" variable nil nil [12744 12781])
            ("_active" variable nil nil [12782 12794])
            ("_limbo" variable nil nil [12832 12843])
            ("Thread" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__initialized" variable nil (reparse-symbol indented_block_body) [12901 12922])
                    ("__exc_info" variable nil (reparse-symbol indented_block_body) [13173 13199])
                    ("__exc_clear" variable nil (reparse-symbol indented_block_body) [13302 13330])
                    ("__init__" function
                       (:suite 
                          ( ("assert" code nil (reparse-symbol indented_block_body) [13453 13512])
                            ("_Verbose" code nil (reparse-symbol indented_block_body) [13521 13553])
                            ("if" code nil (reparse-symbol indented_block_body) [13562 13605])
                            ("self" variable nil (reparse-symbol indented_block_body) [13613 13635])
                            ("self" variable nil (reparse-symbol indented_block_body) [13644 13681])
                            ("self" variable nil (reparse-symbol indented_block_body) [13690 13708])
                            ("self" variable nil (reparse-symbol indented_block_body) [13717 13739])
                            ("self" variable nil (reparse-symbol indented_block_body) [13748 13784])
                            ("self" variable nil (reparse-symbol indented_block_body) [13793 13812])
                            ("self" variable nil (reparse-symbol indented_block_body) [13821 13845])
                            ("self" variable nil (reparse-symbol indented_block_body) [13854 13876])
                            ("self" variable nil (reparse-symbol indented_block_body) [13885 13917])
                            ("self" variable nil (reparse-symbol indented_block_body) [13926 13951])
                            ("self" variable nil (reparse-symbol indented_block_body) [14078 14105]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13349 13353])
                            ("group" variable nil (reparse-symbol function_parameters) [13355 13360])
                            ("target" variable nil (reparse-symbol function_parameters) [13367 13373])
                            ("name" variable nil (reparse-symbol function_parameters) [13380 13384])
                            ("args" variable nil (reparse-symbol function_parameters) [13408 13412])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [13417 13423])
                            ("verbose" variable nil (reparse-symbol function_parameters) [13430 13437]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13336 14106])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14137 14141]))                          )
                        (reparse-symbol indented_block_body) [14111 14456])
                    ("_block" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14486 14490]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14461 14550])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14571 14575]))                          )
                        (reparse-symbol indented_block_body) [14555 14670])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14688 14692]))                          )
                        (reparse-symbol indented_block_body) [14675 15136])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15151 15155]))                          )
                        (reparse-symbol indented_block_body) [15141 15715])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15728 15732]))                          )
                        (reparse-symbol indented_block_body) [15720 16057])
                    ("__bootstrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16078 16082]))                          )
                        (reparse-symbol indented_block_body) [16062 17061])
                    ("_set_ident" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17081 17085]))                          )
                        (reparse-symbol indented_block_body) [17066 17124])
                    ("__bootstrap_inner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17151 17155]))                          )
                        (reparse-symbol indented_block_body) [17129 20504])
                    ("__stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20520 20524]))                          )
                        (reparse-symbol indented_block_body) [20509 20847])
                    ("__delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20865 20869]))                          )
                        (reparse-symbol indented_block_body) [20852 22666])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22680 22684])
                            ("timeout" variable nil (reparse-symbol function_parameters) [22686 22693]))                          )
                        (reparse-symbol indented_block_body) [22671 23944])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23972 23976]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23949 24072])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24103 24107])
                            ("name" variable nil (reparse-symbol function_parameters) [24109 24113]))                          
                        :decorators 
                          ( ("name.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24077 24214])
                    ("ident" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24243 24247]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24219 24344])
                    ("isAlive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24361 24365]))                          )
                        (reparse-symbol indented_block_body) [24349 24496])
                    ("is_alive" variable nil (reparse-symbol indented_block_body) [24501 24519])
                    ("daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24550 24554]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24525 24654])
                    ("daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24689 24693])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [24695 24703]))                          
                        :decorators 
                          ( ("daemon.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24659 24952])
                    ("isDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24970 24974]))                          )
                        (reparse-symbol indented_block_body) [24957 25004])
                    ("setDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25023 25027])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [25029 25037]))                          )
                        (reparse-symbol indented_block_body) [25009 25071])
                    ("getName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25088 25092]))                          )
                        (reparse-symbol indented_block_body) [25076 25120])
                    ("setName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25137 25141])
                            ("name" variable nil (reparse-symbol function_parameters) [25143 25147]))                          )
                        (reparse-symbol indented_block_body) [25125 25175]))                  
                :type "class")
                nil [12872 25175])
            ("Timer" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [25247 25252])
                ("kwargs" variable nil (reparse-symbol function_parameters) [25254 25262]))              ) nil [25237 25300])
            ("_Timer" type
               (:documentation "Call a function after a specified number of seconds:

    t = Timer(30.0, f, args=[], kwargs={})
    t.start()
    t.cancel() # stop the timer's action if it's still waiting
    "
                :superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [25585 25606])
                            ("self" variable nil (reparse-symbol indented_block_body) [25615 25639])
                            ("self" variable nil (reparse-symbol indented_block_body) [25648 25672])
                            ("self" variable nil (reparse-symbol indented_block_body) [25681 25697])
                            ("self" variable nil (reparse-symbol indented_block_body) [25706 25726])
                            ("self" variable nil (reparse-symbol indented_block_body) [25735 25758]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25530 25534])
                            ("interval" variable nil (reparse-symbol function_parameters) [25536 25544])
                            ("function" variable nil (reparse-symbol function_parameters) [25546 25554])
                            ("args" variable nil (reparse-symbol function_parameters) [25556 25560])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [25565 25571]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25517 25759])
                    ("cancel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25775 25779]))                          
                        :documentation "Stop the timer if it hasn't finished yet")
                        (reparse-symbol indented_block_body) [25764 25865])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25878 25882]))                          )
                        (reparse-symbol indented_block_body) [25870 26047]))                  
                :type "class")
                nil [25301 26047])
            ("_MainThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [26213 26253])
                            ("self" code nil (reparse-symbol indented_block_body) [26262 26289])
                            ("self" code nil (reparse-symbol indented_block_body) [26298 26315])
                            ("with" code nil (reparse-symbol indented_block_body) [26324 26390]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26198 26202]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26185 26390])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26411 26415]))                          )
                        (reparse-symbol indented_block_body) [26395 26439])
                    ("_exitfunc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26458 26462]))                          )
                        (reparse-symbol indented_block_body) [26444 26817]))                  
                :type "class")
                nil [26153 26817])
            ("_pickSomeNonDaemonThread" function nil nil [26818 26955])
            ("_DummyThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [27454 27502])
                            ("del" code nil (reparse-symbol indented_block_body) [27722 27745])
                            ("self" code nil (reparse-symbol indented_block_body) [27755 27782])
                            ("self" code nil (reparse-symbol indented_block_body) [27791 27808])
                            ("with" code nil (reparse-symbol indented_block_body) [27817 27883]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27439 27443]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [27426 27883])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27904 27908]))                          )
                        (reparse-symbol indented_block_body) [27888 27931])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27945 27949])
                            ("timeout" variable nil (reparse-symbol function_parameters) [27951 27958]))                          )
                        (reparse-symbol indented_block_body) [27936 28017]))                  
                :type "class")
                nil [27393 28017])
            ("currentThread" function nil nil [28043 28233])
            ("current_thread" variable nil nil [28234 28264])
            ("activeCount" function nil nil [28266 28356])
            ("active_count" variable nil nil [28357 28383])
            ("_enumerate" function nil nil [28385 28517])
            ("enumerate" function nil nil [28518 28614])
            ("thread" include nil nil [28615 28644])
            ("_shutdown" variable nil nil [28760 28795])
            ("try" code nil nil [28894 28997])
            ("_after_fork" function nil nil [28999 30383])
            ("_test" function nil nil [30403 32629])
            ("if" code nil nil [32630 32669]))          
      :file "threading.py"
      :pointmax 32669
      :fsize 32668
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax '((INDENT_BLOCK 20153 . 20188) (NEWLINE 19937 . 19938) (COLON 19936 . 19937) (FINALLY 19929 . 19936)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\" Locale support.

    The module provides low-level access to the C lib's locale APIs
    and adds high level number formatting APIs as well as a locale
    aliasing engine to complement these.

    The aliasing engine includes support for many commonly used locale
    names and maps them to values suitable for passing to the C lib's
    setlocale() function. It also includes default encodings for all
    supported locale names.

\"\"\"" code nil nil [1 441])
            ("sys" include nil nil [443 453])
            ("encodings" include nil nil [454 470])
            ("encodings.aliases" include nil nil [471 495])
            ("re" include nil nil [496 505])
            ("operator" include nil nil [506 521])
            ("functools" include nil nil [522 538])
            ("__all__" variable nil nil [787 1134])
            ("try" code nil nil [1136 2838])
            ("_localeconv" variable nil nil [2840 2864])
            ("_override_localeconv" variable nil nil [2981 3006])
            ("" code nil nil [3024 3037])
            ("localeconv" function nil nil [3038 3159])
            ("_grouping_intervals" function (:arguments 
              ( ("grouping" variable nil (reparse-symbol function_parameters) [3303 3311]))              ) nil [3279 3739])
            ("_group" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [3792 3793])
                ("monetary" variable nil (reparse-symbol function_parameters) [3795 3803]))              ) nil [3781 4681])
            ("_strip_padding" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4764 4765])
                ("amount" variable nil (reparse-symbol function_parameters) [4767 4773]))              ) nil [4745 4987])
            ("_percent_re" variable nil nil [4988 5117])
            ("format" function
               (:documentation "Returns the locale-aware substitution of a %? specifier
    (percent).

    additional is for format strings which contain one or more
    '*' modifiers."
                :arguments 
                  ( ("percent" variable nil (reparse-symbol function_parameters) [5130 5137])
                    ("value" variable nil (reparse-symbol function_parameters) [5139 5144])
                    ("grouping" variable nil (reparse-symbol function_parameters) [5146 5154])
                    ("monetary" variable nil (reparse-symbol function_parameters) [5162 5170])
                    ("additional" variable nil (reparse-symbol function_parameters) [5178 5189]))                  )
                nil [5119 5745])
            ("_format" function (:arguments 
              ( ("percent" variable nil (reparse-symbol function_parameters) [5758 5765])
                ("value" variable nil (reparse-symbol function_parameters) [5767 5772])
                ("grouping" variable nil (reparse-symbol function_parameters) [5774 5782])
                ("monetary" variable nil (reparse-symbol function_parameters) [5790 5798])
                ("additional" variable nil (reparse-symbol function_parameters) [5806 5817]))              ) nil [5746 6647])
            ("format_string" function
               (:documentation "Formats a string in the same way that the % formatting would use,
    but takes the current locale into account.
    Grouping is applied if the third parameter is true."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [6666 6667])
                    ("val" variable nil (reparse-symbol function_parameters) [6669 6672])
                    ("grouping" variable nil (reparse-symbol function_parameters) [6674 6682]))                  )
                nil [6648 7836])
            ("currency" function
               (:documentation "Formats val according to the currency settings
    in the current locale."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [7850 7853])
                    ("symbol" variable nil (reparse-symbol function_parameters) [7855 7861])
                    ("grouping" variable nil (reparse-symbol function_parameters) [7868 7876])
                    ("international" variable nil (reparse-symbol function_parameters) [7884 7897]))                  )
                nil [7837 9363])
            ("str" function
               (:documentation "Convert float to integer, taking the locale into account."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [9372 9375]))                  )
                nil [9364 9478])
            ("atof" function (:arguments 
              ( ("string" variable nil (reparse-symbol function_parameters) [9488 9494])
                ("func" variable nil (reparse-symbol function_parameters) [9496 9500]))              ) nil [9479 9896])
            ("atoi" function (:arguments 
              ( ("str" variable nil (reparse-symbol function_parameters) [9906 9909]))              ) nil [9897 10010])
            ("_test" function nil nil [10011 10204])
            ("_setlocale" variable nil nil [10418 10440])
            ("_ascii_lower_map" variable nil nil [10519 10630])
            ("normalize" function
               (:documentation " Returns a normalized locale code for the given locale
        name.

        The returned locale code is formatted for use with
        setlocale().

        If normalization fails, the original name is returned
        unchanged.

        If the given encoding is not known, the function defaults to
        the default encoding for the locale code just like setlocale()
        does.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [10646 10656]))                  )
                nil [10632 12969])
            ("_parse_localename" function
               (:documentation " Parses the locale code for localename and returns the
        result as tuple (language code, encoding).

        The localename is normalized and passed through the locale
        alias engine. A ValueError is raised in case the locale name
        cannot be parsed.

        The language code corresponds to RFC 1766.  code and encoding
        can be None in case the values cannot be determined or are
        unknown to this implementation.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [12992 13002]))                  )
                nil [12970 14043])
            ("_build_localename" function
               (:documentation " Builds a locale code from the given tuple (language code,
        encoding).

        No aliasing or normalizing takes place.

    "
                :arguments 
                  ( ("localetuple" variable nil (reparse-symbol function_parameters) [14066 14077]))                  )
                nil [14044 14409])
            ("getdefaultlocale" function
               (:documentation " Tries to determine the default locale settings and returns
        them as tuple (language code, encoding).

        According to POSIX, a program which has not called
        setlocale(LC_ALL, \"\") runs using the portable 'C' locale.
        Calling setlocale(LC_ALL, \"\") lets it use the default locale as
        defined by the LANG variable. Since we don't want to interfere
        with the current locale setting we thus emulate the behavior
        in the way described above.

        To maintain compatibility with other platforms, not only the
        LANG variable is tested, but a list of variables given as
        envvars parameter. The first found to be defined will be
        used. envvars defaults to the search path used in GNU gettext;
        it must always contain the variable name 'LANG'.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("envvars" variable nil (reparse-symbol function_parameters) [14431 14438]))                  )
                nil [14410 16395])
            ("getlocale" function
               (:documentation " Returns the current setting for the given locale category as
        tuple (language code, encoding).

        category may be one of the LC_* value except LC_ALL. It
        defaults to LC_CTYPE.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [16411 16419]))                  )
                nil [16397 16999])
            ("setlocale" function
               (:documentation " Set the locale for the given category.  The locale can be
        a string, an iterable of two strings (language code and encoding),
        or None.

        Iterables are converted to strings using the locale aliasing
        engine.  Locale strings are passed directly to the C lib.

        category may be given as one of the LC_* values.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [17014 17022])
                    ("locale" variable nil (reparse-symbol function_parameters) [17024 17030]))                  )
                nil [17000 17570])
            ("resetlocale" function
               (:documentation " Sets the locale for category to the default setting.

        The default setting is determined by calling
        getdefaultlocale(). category defaults to LC_ALL.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [17587 17595]))                  )
                nil [17571 17851])
            ("if" code nil nil [17852 19056])
            ("locale_encoding_alias" variable nil nil [19617 21349])
            ("locale_alias" variable nil nil [26002 78679])
            ("windows_locale" variable nil nil [79180 87340])
            ("_print_locale" function (:documentation " Test function.
    ") nil [87342 89030])
            ("try" code nil nil [89036 89124])
            ("if" code nil nil [89125 89272]))          
      :file "locale.py"
      :pointmax 89272
      :fsize 89271
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Extract, format and print information about Python stack traces.\"\"\"" code nil nil [1 71])
            ("linecache" include nil nil [73 89])
            ("sys" include nil nil [90 100])
            ("types" include nil nil [101 113])
            ("__all__" variable nil nil [115 378])
            ("_print" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [391 395])
                ("str" variable nil (reparse-symbol function_parameters) [397 400])
                ("terminator" variable nil (reparse-symbol function_parameters) [405 415]))              ) nil [380 454])
            ("print_list" function
               (:documentation "Print the list of tuples as returned by extract_tb() or
    extract_stack() as a formatted stack trace to the given file."
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [471 485])
                    ("file" variable nil (reparse-symbol function_parameters) [487 491]))                  )
                nil [456 893])
            ("format_list" function
               (:documentation "Format a list of traceback entry tuples for printing.

    Given a list of tuples as returned by extract_tb() or
    extract_stack(), return a list of strings ready for printing.
    Each string in the resulting list corresponds to the item with the
    same index in the argument list.  Each string ends in a newline;
    the strings may contain internal newlines as well, for those items
    whose source text line is not None.
    "
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [910 924]))                  )
                nil [894 1625])
            ("print_tb" function
               (:documentation "Print up to 'limit' stack trace entries from the traceback 'tb'.

    If 'limit' is omitted or None, all entries are printed.  If 'file'
    is omitted or None, the output goes to sys.stderr; otherwise
    'file' should be an open file or file-like object with a write()
    method.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1640 1642])
                    ("limit" variable nil (reparse-symbol function_parameters) [1644 1649])
                    ("file" variable nil (reparse-symbol function_parameters) [1656 1660]))                  )
                nil [1627 2612])
            ("format_tb" function
               (:documentation "A shorthand for 'format_list(extract_stack(f, limit))."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2627 2629])
                    ("limit" variable nil (reparse-symbol function_parameters) [2631 2636]))                  )
                nil [2613 2757])
            ("extract_tb" function
               (:documentation "Return list of up to limit pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a quadruple (filename, line
    number, function name, text) representing the information that is
    usually printed for a stack trace.  The text is a string with
    leading and trailing whitespace stripped; if the source is not
    available it is None.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2773 2775])
                    ("limit" variable nil (reparse-symbol function_parameters) [2777 2782]))                  )
                nil [2758 3893])
            ("print_exception" function
               (:documentation "Print exception up to 'limit' stack trace entries from 'tb' to 'file'.

    This differs from print_tb() in the following ways: (1) if
    traceback is not None, it prints a header \"Traceback (most recent
    call last):\"; (2) it prints the exception type and value after the
    stack trace; (3) if type is SyntaxError and value has the
    appropriate format, it prints the line where the syntax error
    occurred with a caret on the next line indicating the approximate
    position of the error.
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [3915 3920])
                    ("value" variable nil (reparse-symbol function_parameters) [3922 3927])
                    ("tb" variable nil (reparse-symbol function_parameters) [3929 3931])
                    ("limit" variable nil (reparse-symbol function_parameters) [3933 3938])
                    ("file" variable nil (reparse-symbol function_parameters) [3945 3949]))                  )
                nil [3895 4726])
            ("format_exception" function
               (:documentation "Format a stack trace and the exception information.

    The arguments have the same meaning as the corresponding arguments
    to print_exception().  The return value is a list of strings, each
    ending in a newline and some containing internal newlines.  When
    these lines are concatenated and printed, exactly the same text is
    printed as does print_exception().
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [4748 4753])
                    ("value" variable nil (reparse-symbol function_parameters) [4755 4760])
                    ("tb" variable nil (reparse-symbol function_parameters) [4762 4764])
                    ("limit" variable nil (reparse-symbol function_parameters) [4766 4771]))                  )
                nil [4727 5378])
            ("format_exception_only" function
               (:documentation "Format the exception part of a traceback.

    The arguments are the exception type and value such as given by
    sys.last_type and sys.last_value. The return value is a list of
    strings, each ending in a newline.

    Normally, the list contains a single string; however, for
    SyntaxError exceptions, it contains several lines that (when
    printed) display detailed information about where the syntax
    error occurred.

    The message indicating which exception occurred is always the last
    string in the list.

    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [5405 5410])
                    ("value" variable nil (reparse-symbol function_parameters) [5412 5417]))                  )
                nil [5379 7489])
            ("_format_final_exc_line" function
               (:documentation "Return a list of a single line -- normal case for format_exception_only"
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [7517 7522])
                    ("value" variable nil (reparse-symbol function_parameters) [7524 7529]))                  )
                nil [7490 7786])
            ("_some_str" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [7801 7806]))              ) nil [7787 8071])
            ("print_exc" function
               (:documentation "Shorthand for 'print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, limit, file)'.
    (In fact, it uses sys.exc_info() to retrieve the same information
    in a thread-safe way.)"
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8087 8092])
                    ("file" variable nil (reparse-symbol function_parameters) [8099 8103]))                  )
                nil [8073 8512])
            ("format_exc" function
               (:documentation "Like print_exc() but return a string."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8529 8534]))                  )
                nil [8514 8754])
            ("print_last" function
               (:documentation "This is a shorthand for 'print_exception(sys.last_type,
    sys.last_value, sys.last_traceback, limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8771 8776])
                    ("file" variable nil (reparse-symbol function_parameters) [8783 8787]))                  )
                nil [8756 9151])
            ("print_stack" function
               (:documentation "Print a stack trace from its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'limit' and 'file'
    arguments have the same meaning as for print_exception().
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9169 9170])
                    ("limit" variable nil (reparse-symbol function_parameters) [9177 9182])
                    ("file" variable nil (reparse-symbol function_parameters) [9189 9193]))                  )
                nil [9153 9656])
            ("format_stack" function
               (:documentation "Shorthand for 'format_list(extract_stack(f, limit))'."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9674 9675])
                    ("limit" variable nil (reparse-symbol function_parameters) [9682 9687]))                  )
                nil [9657 9958])
            ("extract_stack" function
               (:documentation "Extract the raw traceback from the current stack frame.

    The return value has the same format as for extract_tb().  The
    optional 'f' and 'limit' arguments have the same meaning as for
    print_stack().  Each item in the list is a quadruple (filename,
    line number, function name, text), and the entries are in order
    from oldest to newest stack frame.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9977 9978])
                    ("limit" variable nil (reparse-symbol function_parameters) [9985 9990]))                  )
                nil [9959 11119])
            ("tb_lineno" function
               (:documentation "Calculate correct line number of traceback given in tb.

    Obsolete in 2.3.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [11134 11136]))                  )
                nil [11120 11256]))          
      :file "traceback.py"
      :pointmax 11256
      :fsize 11255
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"File-like objects that read from or write to a string buffer.

This implements (nearly) all stdio methods.

f = StringIO()      # ready for writing
f = StringIO(buf)   # ready for reading
f.close()           # explicitly release resources held
flag = f.isatty()   # always false
pos = f.tell()      # get current position
f.seek(pos)         # set current position
f.seek(pos, mode)   # mode 0: absolute; 1: relative; 2: relative to EOF
buf = f.read()      # read until EOF
buf = f.read(n)     # read up to n bytes
buf = f.readline()  # read until end of line ('\\n') or EOF
list = f.readlines()# list of f.readline() results until EOF
f.truncate([size])  # truncate file at to at most size (default: current pos)
f.write(buf)        # write at current position
f.writelines(list)  # for line in list: f.write(line)
f.getvalue()        # return whole file's contents as a string

Notes:
- Using a real file is often faster (but less convenient).
- There's also a much faster implementation in C, called cStringIO, but
  it's not subclassable.
- fileno() is left unimplemented so that code which uses it triggers
  an exception early.
- Seeking far beyond EOF and then writing will insert real null
  bytes that occupy space in the buffer.
- There's a simple test set (see end of this file).
\"\"\"" code nil nil [1 1298])
            ("try" code nil nil [1299 1369])
            ("__all__" variable nil nil [1370 1392])
            ("_complain_ifclosed" function (:arguments 
              ( ("closed" variable nil (reparse-symbol function_parameters) [1417 1423]))              ) nil [1394 1498])
            ("StringIO" type
               (:documentation "class StringIO([buffer])

    When a StringIO object is created, it can be initialized to an existing
    string by passing the string to the constructor. If no string is given,
    the StringIO will start empty.

    The StringIO object can accept either Unicode or 8-bit strings, but
    mixing the two may take some care. If both are used, 8-bit strings that
    cannot be interpreted as 7-bit ASCII (that use the 8th bit) will cause
    a UnicodeError to be raised when getvalue() is called.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [2119 2182])
                            ("self" variable nil (reparse-symbol indented_block_body) [2190 2204])
                            ("self" variable nil (reparse-symbol indented_block_body) [2213 2232])
                            ("self" variable nil (reparse-symbol indented_block_body) [2241 2258])
                            ("self" variable nil (reparse-symbol indented_block_body) [2267 2279])
                            ("self" variable nil (reparse-symbol indented_block_body) [2288 2307])
                            ("self" variable nil (reparse-symbol indented_block_body) [2316 2334]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2043 2047])
                            ("buf" variable nil (reparse-symbol function_parameters) [2049 2052]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2030 2335])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2353 2357]))                          )
                        (reparse-symbol indented_block_body) [2340 2380])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2394 2398]))                          
                        :documentation "A file object is its own iterator, for example iter(f) returns f
        (unless f is closed). When a file is used as an iterator, typically
        in a for loop (for example, for line in f: print line), the next()
        method is called repeatedly. This method returns the next input line,
        or raises StopIteration when EOF is hit.
        ")
                        (reparse-symbol indented_block_body) [2385 2902])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2917 2921]))                          
                        :documentation "Free the memory buffer.
        ")
                        (reparse-symbol indented_block_body) [2907 3065])
                    ("isatty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3081 3085]))                          
                        :documentation "Returns False because StringIO objects are not connected to a
        tty-like device.
        ")
                        (reparse-symbol indented_block_body) [3070 3259])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3273 3277])
                            ("pos" variable nil (reparse-symbol function_parameters) [3279 3282])
                            ("mode" variable nil (reparse-symbol function_parameters) [3284 3288]))                          
                        :documentation "Set the file's current position.

        The mode argument is optional and defaults to 0 (absolute file
        positioning); other values are 1 (seek relative to the current
        position) and 2 (seek relative to the file's end).

        There is no return value.
        ")
                        (reparse-symbol indented_block_body) [3264 3862])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3876 3880]))                          
                        :documentation "Return the file's current position.")
                        (reparse-symbol indented_block_body) [3867 3997])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4011 4015])
                            ("n" variable nil (reparse-symbol function_parameters) [4017 4018]))                          
                        :documentation "Read at most size bytes from the file
        (less if the read hits EOF before obtaining size bytes).

        If the size argument is negative or omitted, read all data until EOF
        is reached. The bytes are returned as a string object. An empty
        string is returned when EOF is encountered immediately.
        ")
                        (reparse-symbol indented_block_body) [4002 4710])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4728 4732])
                            ("length" variable nil (reparse-symbol function_parameters) [4734 4740]))                          )
                        (reparse-symbol indented_block_body) [4715 5796])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5815 5819])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [5821 5829]))                          
                        :documentation "Read until EOF using readline() and return a list containing the
        lines thus read.

        If the optional sizehint argument is present, instead of reading up
        to EOF, whole lines totalling approximately sizehint bytes (or more
        to accommodate a final whole line).
        ")
                        (reparse-symbol indented_block_body) [5801 6412])
                    ("truncate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6430 6434])
                            ("size" variable nil (reparse-symbol function_parameters) [6436 6440]))                          
                        :documentation "Truncate the file's size.

        If the optional size argument is present, the file is truncated to
        (at most) that size. The size defaults to the current position.
        The current file position is not changed unless the position
        is beyond the new file size.

        If the specified size exceeds the file's current size, the
        file remains unchanged.
        ")
                        (reparse-symbol indented_block_body) [6417 7154])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7169 7173])
                            ("s" variable nil (reparse-symbol function_parameters) [7175 7176]))                          
                        :documentation "Write a string to the file.

        There is no return value.
        ")
                        (reparse-symbol indented_block_body) [7159 8126])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8146 8150])
                            ("iterable" variable nil (reparse-symbol function_parameters) [8152 8160]))                          
                        :documentation "Write a sequence of strings to the file. The sequence can be any
        iterable object producing strings, typically a list of strings. There
        is no return value.

        (The name is intended to match readlines(); writelines() does not add
        line separators.)
        ")
                        (reparse-symbol indented_block_body) [8131 8543])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8558 8562]))                          
                        :documentation "Flush the internal buffer
        ")
                        (reparse-symbol indented_block_body) [8548 8654])
                    ("getvalue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8672 8676]))                          
                        :documentation "
        Retrieve the entire contents of the \"file\" at any time before
        the StringIO object's close() method is called.

        The StringIO object can accept either Unicode or 8-bit strings,
        but mixing the two may take some care. If both are used, 8-bit
        strings that cannot be interpreted as 7-bit ASCII (that use the
        8th bit) will cause a UnicodeError to be raised when getvalue()
        is called.
        ")
                        (reparse-symbol indented_block_body) [8659 9301]))                  
                :type "class")
                nil [1499 9301])
            ("test" function nil nil [9326 10623])
            ("if" code nil nil [10624 10662]))          
      :file "StringIO.py"
      :pointmax 10662
      :fsize 10661
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"OS routines for Mac, NT, or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1163])
            ("errno" include nil nil [1169 1186])
            ("sys" include nil nil [1169 1186])
            ("_names" variable nil nil [1188 1221])
            ("__all__" variable nil nil [1271 1446])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1470 1476]))              ) nil [1448 1606])
            ("if" code nil nil [1607 3137])
            ("sys" variable nil nil [3138 3167])
            ("" code nil nil [3188 3256])
            ("del" code nil nil [3258 3268])
            ("SEEK_SET" variable nil nil [3390 3402])
            ("SEEK_CUR" variable nil nil [3403 3415])
            ("SEEK_END" variable nil nil [3416 3428])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0777])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist.  This is
    recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3538 3542])
                    ("mode" variable nil (reparse-symbol function_parameters) [3544 3548]))                  )
                nil [3525 4277])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4293 4297]))                  )
                nil [4278 4984])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned way until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [4997 5000])
                    ("new" variable nil (reparse-symbol function_parameters) [5002 5005]))                  )
                nil [4985 5856])
            ("__all__" code nil nil [5857 5910])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune
    the search, or to impose a specific order of visiting.  Modifying
    dirnames when topdown is false is ineffective, since the directories in
    dirnames have already been generated by the time dirnames itself is
    generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print root, \"consumes\",
        print sum([getsize(join(root, name)) for name in files]),
        print \"bytes in\", len(files), \"non-directory files\"
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories
    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [5921 5924])
                    ("topdown" variable nil (reparse-symbol function_parameters) [5926 5933])
                    ("onerror" variable nil (reparse-symbol function_parameters) [5940 5947])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [5954 5965]))                  )
                nil [5912 9693])
            ("__all__" code nil nil [9694 9716])
            ("try" code nil nil [9758 9810])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9821 9825])
                    ("args" variable nil (reparse-symbol function_parameters) [9827 9832]))                  )
                nil [9811 9980])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9992 9996])
                    ("args" variable nil (reparse-symbol function_parameters) [9998 10003]))                  )
                nil [9981 10207])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10219 10223])
                    ("args" variable nil (reparse-symbol function_parameters) [10225 10230]))                  )
                nil [10208 10416])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10429 10433])
                    ("args" variable nil (reparse-symbol function_parameters) [10435 10440]))                  )
                nil [10417 10686])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10698 10702])
                    ("args" variable nil (reparse-symbol function_parameters) [10704 10708]))                  )
                nil [10687 10939])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10952 10956])
                    ("args" variable nil (reparse-symbol function_parameters) [10958 10962])
                    ("env" variable nil (reparse-symbol function_parameters) [10964 10967]))                  )
                nil [10940 11234])
            ("__all__" code nil nil [11235 11307])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11322 11326])
                ("args" variable nil (reparse-symbol function_parameters) [11328 11332])
                ("env" variable nil (reparse-symbol function_parameters) [11334 11337]))              ) nil [11309 12177])
            ("try" code nil nil [12239 16448])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [16460 16463])
                    ("default" variable nil (reparse-symbol function_parameters) [16465 16472]))                  )
                nil [16449 16656])
            ("__all__" code nil nil [16656 16680])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16694 16698]))              ) nil [16682 16730])
            ("if" code nil nil [16774 19677])
            ("if" code nil nil [19678 20675])
            ("if" code nil nil [20677 21783])
            ("if" code nil nil [21817 25083])
            ("copy_reg" include nil nil [25084 25112])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25136 25139])
                ("dict" variable nil (reparse-symbol function_parameters) [25141 25145]))              ) nil [25114 25182])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25207 25209]))              ) nil [25183 25284])
            ("try" code nil nil [25285 25419])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25445 25448])
                ("dict" variable nil (reparse-symbol function_parameters) [25450 25454]))              ) nil [25420 25494])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25522 25524]))              ) nil [25495 25602])
            ("try" code nil nil [25603 25770]))          
      :file "os.py"
      :pointmax 25770
      :fsize 25769
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9].
    \\D       Matches any non-digit character; equivalent to the set [^0-9].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].
    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 5342])
            ("sys" include nil nil [5344 5354])
            ("sre_compile" include nil nil [5355 5373])
            ("sre_parse" include nil nil [5374 5390])
            ("__all__" variable nil nil [5409 5637])
            ("__version__" variable nil nil [5639 5660])
            ("I" variable nil nil [5670 5718])
            ("L" variable nil nil [5733 5773])
            ("U" variable nil nil [5804 5846])
            ("M" variable nil nil [5871 5917])
            ("S" variable nil nil [5950 5990])
            ("X" variable nil nil [6016 6058])
            ("T" variable nil nil [6146 6190])
            ("DEBUG" variable nil nil [6214 6248])
            ("error" variable nil nil [6299 6324])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6427 6434])
                    ("string" variable nil (reparse-symbol function_parameters) [6436 6442])
                    ("flags" variable nil (reparse-symbol function_parameters) [6444 6449]))                  )
                nil [6417 6628])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6640 6647])
                    ("string" variable nil (reparse-symbol function_parameters) [6649 6655])
                    ("flags" variable nil (reparse-symbol function_parameters) [6657 6662]))                  )
                nil [6629 6845])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6854 6861])
                    ("repl" variable nil (reparse-symbol function_parameters) [6863 6867])
                    ("string" variable nil (reparse-symbol function_parameters) [6869 6875])
                    ("count" variable nil (reparse-symbol function_parameters) [6877 6882])
                    ("flags" variable nil (reparse-symbol function_parameters) [6886 6891]))                  )
                nil [6846 7314])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7324 7331])
                    ("repl" variable nil (reparse-symbol function_parameters) [7333 7337])
                    ("string" variable nil (reparse-symbol function_parameters) [7339 7345])
                    ("count" variable nil (reparse-symbol function_parameters) [7347 7352])
                    ("flags" variable nil (reparse-symbol function_parameters) [7356 7361]))                  )
                nil [7315 7914])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7925 7932])
                    ("string" variable nil (reparse-symbol function_parameters) [7934 7940])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [7942 7950])
                    ("flags" variable nil (reparse-symbol function_parameters) [7954 7959]))                  )
                nil [7915 8151])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8164 8171])
                    ("string" variable nil (reparse-symbol function_parameters) [8173 8179])
                    ("flags" variable nil (reparse-symbol function_parameters) [8181 8186]))                  )
                nil [8152 8518])
            ("if" code nil nil [8519 8878])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [8891 8898])
                ("flags" variable nil (reparse-symbol function_parameters) [8900 8905]))              ) nil [8879 9018])
            ("purge" function nil nil [9019 9116])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9130 9137])
                ("flags" variable nil (reparse-symbol function_parameters) [9139 9144]))              ) nil [9117 9248])
            ("_alphanum" variable nil nil [9249 9341])
            ("escape" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9354 9361]))              ) nil [9343 12960]))          
      :file "re.py"
      :pointmax 12960
      :fsize 12959
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Weak reference support for Python.

This module is an implementation of PEP 205:

http://www.python.org/dev/peps/pep-0205/
\"\"\"" code nil nil [1 130])
            ("UserDict" include nil nil [332 347])
            ("" code nil nil [370 493])
            ("_weakrefset" include nil nil [495 526])
            ("exceptions" include nil nil [528 565])
            ("ProxyTypes" variable nil nil [568 611])
            ("__all__" variable nil nil [613 833])
            ("WeakValueDictionary" type
               (:documentation "Mapping class that references values weakly.

    Entries in the dictionary will be discarded when no strong
    reference to the value exists anymore
    "
                :superclasses ("UserDict.UserDict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("remove" function (:arguments 
                              ( ("wr" variable nil (reparse-symbol function_parameters) [1391 1393])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1395 1402]))                              ) (reparse-symbol indented_block_body) [1380 1515])
                            ("self" variable nil (reparse-symbol indented_block_body) [1523 1544])
                            ("UserDict" code nil (reparse-symbol indented_block_body) [1553 1598]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1352 1356])
                            ("args" variable nil (reparse-symbol function_parameters) [1358 1363])
                            ("kw" variable nil (reparse-symbol function_parameters) [1365 1369]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1339 1599])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1620 1624])
                            ("key" variable nil (reparse-symbol function_parameters) [1626 1629]))                          )
                        (reparse-symbol indented_block_body) [1604 1750])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1772 1776])
                            ("key" variable nil (reparse-symbol function_parameters) [1778 1781]))                          )
                        (reparse-symbol indented_block_body) [1755 1909])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1926 1930])
                            ("key" variable nil (reparse-symbol function_parameters) [1932 1935]))                          )
                        (reparse-symbol indented_block_body) [1914 2063])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2081 2085]))                          )
                        (reparse-symbol indented_block_body) [2068 2144])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2165 2169])
                            ("key" variable nil (reparse-symbol function_parameters) [2171 2174])
                            ("value" variable nil (reparse-symbol function_parameters) [2176 2181]))                          )
                        (reparse-symbol indented_block_body) [2149 2244])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2258 2262]))                          )
                        (reparse-symbol indented_block_body) [2249 2442])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [2447 2462])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2485 2489])
                            ("memo" variable nil (reparse-symbol function_parameters) [2491 2495]))                          )
                        (reparse-symbol indented_block_body) [2468 2720])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2733 2737])
                            ("key" variable nil (reparse-symbol function_parameters) [2739 2742])
                            ("default" variable nil (reparse-symbol function_parameters) [2744 2751]))                          )
                        (reparse-symbol indented_block_body) [2725 3033])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3048 3052]))                          )
                        (reparse-symbol indented_block_body) [3038 3215])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3234 3238]))                          )
                        (reparse-symbol indented_block_body) [3220 3378])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3396 3400]))                          )
                        (reparse-symbol indented_block_body) [3383 3439])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3457 3461]))                          )
                        (reparse-symbol indented_block_body) [3444 3500])
                    ("itervaluerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3523 3527]))                          
                        :documentation "Return an iterator that yields the weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [3505 3983])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4003 4007]))                          )
                        (reparse-symbol indented_block_body) [3988 4133])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4150 4154]))                          )
                        (reparse-symbol indented_block_body) [4138 4297])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4310 4314])
                            ("key" variable nil (reparse-symbol function_parameters) [4316 4319])
                            ("args" variable nil (reparse-symbol function_parameters) [4321 4326]))                          )
                        (reparse-symbol indented_block_body) [4302 4563])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4583 4587])
                            ("key" variable nil (reparse-symbol function_parameters) [4589 4592])
                            ("default" variable nil (reparse-symbol function_parameters) [4594 4601]))                          )
                        (reparse-symbol indented_block_body) [4568 4810])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4826 4830])
                            ("dict" variable nil (reparse-symbol function_parameters) [4832 4836])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4843 4851]))                          )
                        (reparse-symbol indented_block_body) [4815 5138])
                    ("valuerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5157 5161]))                          
                        :documentation "Return a list of weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [5143 5595])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5611 5615]))                          )
                        (reparse-symbol indented_block_body) [5600 5767]))                  
                :type "class")
                nil [836 5767])
            ("KeyedRef" type
               (:documentation "Specialized reference that includes a key corresponding to the value.

    This is used in the WeakValueDictionary to avoid having to create
    a function object for each key stored in the mapping.  A shared
    callback object can use the 'key' attribute of a KeyedRef instead
    of getting a reference to the key from an enclosing scope.

    "
                :superclasses ("ref")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [6153 6171])
                    ("__new__" function (:arguments 
                      ( ("type" variable nil (reparse-symbol function_parameters) [6189 6193])
                        ("ob" variable nil (reparse-symbol function_parameters) [6195 6197])
                        ("callback" variable nil (reparse-symbol function_parameters) [6199 6207])
                        ("key" variable nil (reparse-symbol function_parameters) [6209 6212]))                      ) (reparse-symbol indented_block_body) [6177 6305])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [6357 6402]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6323 6327])
                            ("ob" variable nil (reparse-symbol function_parameters) [6329 6331])
                            ("callback" variable nil (reparse-symbol function_parameters) [6333 6341])
                            ("key" variable nil (reparse-symbol function_parameters) [6343 6346]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6310 6403]))                  
                :type "class")
                nil [5769 6403])
            ("WeakKeyDictionary" type
               (:documentation " Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    "
                :superclasses ("UserDict.UserDict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6897 6911])
                            ("remove" function (:arguments 
                              ( ("k" variable nil (reparse-symbol function_parameters) [6931 6932])
                                ("selfref" variable nil (reparse-symbol function_parameters) [6934 6941]))                              ) (reparse-symbol indented_block_body) [6920 7049])
                            ("self" variable nil (reparse-symbol indented_block_body) [7057 7078])
                            ("if" code nil (reparse-symbol indented_block_body) [7087 7126]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6871 6875])
                            ("dict" variable nil (reparse-symbol function_parameters) [6877 6881]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6858 7126])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7147 7151])
                            ("key" variable nil (reparse-symbol function_parameters) [7153 7156]))                          )
                        (reparse-symbol indented_block_body) [7131 7191])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7212 7216])
                            ("key" variable nil (reparse-symbol function_parameters) [7218 7221]))                          )
                        (reparse-symbol indented_block_body) [7196 7259])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7277 7281]))                          )
                        (reparse-symbol indented_block_body) [7264 7338])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7359 7363])
                            ("key" variable nil (reparse-symbol function_parameters) [7365 7368])
                            ("value" variable nil (reparse-symbol function_parameters) [7370 7375]))                          )
                        (reparse-symbol indented_block_body) [7343 7428])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7442 7446]))                          )
                        (reparse-symbol indented_block_body) [7433 7630])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [7635 7650])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7673 7677])
                            ("memo" variable nil (reparse-symbol function_parameters) [7679 7683]))                          )
                        (reparse-symbol indented_block_body) [7656 7914])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7927 7931])
                            ("key" variable nil (reparse-symbol function_parameters) [7933 7936])
                            ("default" variable nil (reparse-symbol function_parameters) [7938 7945]))                          )
                        (reparse-symbol indented_block_body) [7919 8000])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8017 8021])
                            ("key" variable nil (reparse-symbol function_parameters) [8023 8026]))                          )
                        (reparse-symbol indented_block_body) [8005 8146])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8168 8172])
                            ("key" variable nil (reparse-symbol function_parameters) [8174 8177]))                          )
                        (reparse-symbol indented_block_body) [8151 8297])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8312 8316]))                          )
                        (reparse-symbol indented_block_body) [8302 8485])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8504 8508]))                          )
                        (reparse-symbol indented_block_body) [8490 8647])
                    ("iterkeyrefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8668 8672]))                          
                        :documentation "Return an iterator that yields the weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [8652 9122])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9140 9144]))                          )
                        (reparse-symbol indented_block_body) [9127 9268])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9286 9290]))                          )
                        (reparse-symbol indented_block_body) [9273 9324])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9344 9348]))                          )
                        (reparse-symbol indented_block_body) [9329 9389])
                    ("keyrefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9406 9410]))                          
                        :documentation "Return a list of weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [9394 9838])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9852 9856]))                          )
                        (reparse-symbol indented_block_body) [9843 10006])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10023 10027]))                          )
                        (reparse-symbol indented_block_body) [10011 10176])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10189 10193])
                            ("key" variable nil (reparse-symbol function_parameters) [10195 10198])
                            ("args" variable nil (reparse-symbol function_parameters) [10200 10205]))                          )
                        (reparse-symbol indented_block_body) [10181 10254])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10274 10278])
                            ("key" variable nil (reparse-symbol function_parameters) [10280 10283])
                            ("default" variable nil (reparse-symbol function_parameters) [10285 10292]))                          )
                        (reparse-symbol indented_block_body) [10259 10368])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10384 10388])
                            ("dict" variable nil (reparse-symbol function_parameters) [10390 10394])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10401 10409]))                          )
                        (reparse-symbol indented_block_body) [10373 10694]))                  
                :type "class")
                nil [6405 10694]))          
      :file "weakref.py"
      :pointmax 10694
      :fsize 10693
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* Without a direct way to compute N steps forward, the semantics of
  jumpahead(n) are weakened to simply jump to another distant state and rely
  on the large period to avoid overlapping sequences.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

\"\"\"" code nil nil [1 1111])
            ("__future__" include nil nil [1113 1144])
            ("warnings" include nil nil [1145 1179])
            ("types" include nil nil [1180 1264])
            ("math" include nil nil [1265 1341])
            ("math" include nil nil [1342 1413])
            ("os" include nil nil [1414 1448])
            ("binascii" include nil nil [1449 1489])
            ("hashlib" include nil nil [1490 1516])
            ("__all__" variable nil nil [1518 1902])
            ("NV_MAGICCONST" code nil nil [1904 1945])
            ("TWOPI" code nil nil [1946 1961])
            ("LOG4" variable nil nil [1962 1978])
            ("SG_MAGICCONST" code nil nil [1979 2010])
            ("BPF" variable nil nil [2011 2019])
            ("RECIP_BPF" variable nil nil [2055 2074])
            ("_random" include nil nil [2257 2271])
            ("Random" type
               (:documentation "Random number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.  Especially useful for multi-threaded programs, creating
    a different instance of Random for each thread, and using the jumpahead()
    method to ensure that the generated sequences seen by each thread don't
    overlap.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods: random(), seed(), getstate(), setstate() and jumpahead().
    Optionally, implement a getrandbits() method so that randrange() can cover
    arbitrarily large ranges.

    "
                :superclasses ("_random.Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [3037 3048])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        \"\"\"" code nil (reparse-symbol indented_block_body) [3122 3229])
                            ("self" code nil (reparse-symbol indented_block_body) [3239 3251])
                            ("self" variable nil (reparse-symbol indented_block_body) [3260 3282]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3099 3103])
                            ("x" variable nil (reparse-symbol function_parameters) [3105 3106]))                          
                        :documentation "Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3086 3283])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3297 3301])
                            ("a" variable nil (reparse-symbol function_parameters) [3303 3304]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.
        ")
                        (reparse-symbol indented_block_body) [3288 3881])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3899 3903]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [3886 4055])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4073 4077])
                            ("state" variable nil (reparse-symbol function_parameters) [4079 4084]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [4060 5122])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5141 5145])
                            ("n" variable nil (reparse-symbol function_parameters) [5147 5148]))                          
                        :documentation "Change the internal state to one that is likely far away
        from the current state.  This method will not be in Py3.x,
        so it is better to simply reseed.
        ")
                        (reparse-symbol indented_block_body) [5127 5688])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5912 5916]))                          )
                        (reparse-symbol indented_block_body) [5895 5963])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5985 5989])
                            ("state" variable nil (reparse-symbol function_parameters) [5991 5996]))                          )
                        (reparse-symbol indented_block_body) [5968 6042])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6062 6066]))                          )
                        (reparse-symbol indented_block_body) [6047 6120])
                    ("randrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6201 6205])
                            ("start" variable nil (reparse-symbol function_parameters) [6207 6212])
                            ("stop" variable nil (reparse-symbol function_parameters) [6214 6218])
                            ("step" variable nil (reparse-symbol function_parameters) [6225 6229])
                            ("int" variable nil (reparse-symbol function_parameters) [6233 6236])
                            ("default" variable nil (reparse-symbol function_parameters) [6242 6249])
                            ("maxwidth" variable nil (reparse-symbol function_parameters) [6274 6282]))                          
                        :documentation "Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.
        Do not supply the 'int', 'default', and 'maxwidth' arguments.
        ")
                        (reparse-symbol indented_block_body) [6187 8865])
                    ("randint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8882 8886])
                            ("a" variable nil (reparse-symbol function_parameters) [8888 8889])
                            ("b" variable nil (reparse-symbol function_parameters) [8891 8892]))                          
                        :documentation "Return random integer in range [a, b], including both end points.
        ")
                        (reparse-symbol indented_block_body) [8870 9023])
                    ("_randbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9043 9047])
                            ("n" variable nil (reparse-symbol function_parameters) [9049 9050])
                            ("_log" variable nil (reparse-symbol function_parameters) [9052 9056])
                            ("int" variable nil (reparse-symbol function_parameters) [9063 9066])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [9072 9081])
                            ("_Method" variable nil (reparse-symbol function_parameters) [9110 9117])
                            ("_BuiltinMethod" variable nil (reparse-symbol function_parameters) [9131 9145]))                          
                        :documentation "Return a random int in the range [0,n)

        Handles the case where n has more bits than returned
        by a single call to the underlying generator.
        ")
                        (reparse-symbol indented_block_body) [9028 10182])
                    ("choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10261 10265])
                            ("seq" variable nil (reparse-symbol function_parameters) [10267 10270]))                          
                        :documentation "Choose a random element from a non-empty sequence.")
                        (reparse-symbol indented_block_body) [10250 10425])
                    ("shuffle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10442 10446])
                            ("x" variable nil (reparse-symbol function_parameters) [10448 10449])
                            ("random" variable nil (reparse-symbol function_parameters) [10451 10457])
                            ("int" variable nil (reparse-symbol function_parameters) [10464 10467]))                          
                        :documentation "x, random=random.random -> shuffle list x in place; return None.

        Optional arg random is a 0-argument function returning a random
        float in [0.0, 1.0); by default, the standard random.random.
        ")
                        (reparse-symbol indented_block_body) [10430 10954])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10970 10974])
                            ("population" variable nil (reparse-symbol function_parameters) [10976 10986])
                            ("k" variable nil (reparse-symbol function_parameters) [10988 10989]))                          
                        :documentation "Chooses k unique random elements from a population sequence.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use xrange as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(xrange(10000000), 60)
        ")
                        (reparse-symbol indented_block_body) [10959 13789])
                    ("uniform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13944 13948])
                            ("a" variable nil (reparse-symbol function_parameters) [13950 13951])
                            ("b" variable nil (reparse-symbol function_parameters) [13953 13954]))                          )
                        (reparse-symbol indented_block_body) [13932 14081])
                    ("triangular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14158 14162])
                            ("low" variable nil (reparse-symbol function_parameters) [14164 14167])
                            ("high" variable nil (reparse-symbol function_parameters) [14173 14177])
                            ("mode" variable nil (reparse-symbol function_parameters) [14183 14187]))                          
                        :documentation "Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        ")
                        (reparse-symbol indented_block_body) [14143 14672])
                    ("normalvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14761 14765])
                            ("mu" variable nil (reparse-symbol function_parameters) [14767 14769])
                            ("sigma" variable nil (reparse-symbol function_parameters) [14771 14776]))                          
                        :documentation "Normal distribution.

        mu is the mean, and sigma is the standard deviation.

        ")
                        (reparse-symbol indented_block_body) [14743 15436])
                    ("lognormvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15529 15533])
                            ("mu" variable nil (reparse-symbol function_parameters) [15535 15537])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15539 15544]))                          
                        :documentation "Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        ")
                        (reparse-symbol indented_block_body) [15510 15864])
                    ("expovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15956 15960])
                            ("lambd" variable nil (reparse-symbol function_parameters) [15962 15967]))                          
                        :documentation "Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called \"lambda\", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        ")
                        (reparse-symbol indented_block_body) [15940 16581])
                    ("vonmisesvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16675 16679])
                            ("mu" variable nil (reparse-symbol function_parameters) [16681 16683])
                            ("kappa" variable nil (reparse-symbol function_parameters) [16685 16690]))                          
                        :documentation "Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        ")
                        (reparse-symbol indented_block_body) [16655 18108])
                    ("gammavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18195 18199])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18201 18206])
                            ("beta" variable nil (reparse-symbol function_parameters) [18208 18212]))                          
                        :documentation "Gamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        The probability distribution function is:

                    x ** (alpha - 1) * math.exp(-x / beta)
          pdf(x) =  --------------------------------------
                      math.gamma(alpha) * beta ** alpha

        ")
                        (reparse-symbol indented_block_body) [18178 20402])
                    ("gauss" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20490 20494])
                            ("mu" variable nil (reparse-symbol function_parameters) [20496 20498])
                            ("sigma" variable nil (reparse-symbol function_parameters) [20500 20505]))                          
                        :documentation "Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        ")
                        (reparse-symbol indented_block_body) [20480 21816])
                    ("betavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22312 22316])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22318 22323])
                            ("beta" variable nil (reparse-symbol function_parameters) [22325 22329]))                          
                        :documentation "Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        ")
                        (reparse-symbol indented_block_body) [22296 22787])
                    ("paretovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22863 22867])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22869 22874]))                          
                        :documentation "Pareto distribution.  alpha is the shape parameter.")
                        (reparse-symbol indented_block_body) [22845 23039])
                    ("weibullvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23117 23121])
                            ("alpha" variable nil (reparse-symbol function_parameters) [23123 23128])
                            ("beta" variable nil (reparse-symbol function_parameters) [23130 23134]))                          
                        :documentation "Weibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        ")
                        (reparse-symbol indented_block_body) [23098 23386]))                  
                :type "class")
                nil [2273 23386])
            ("WichmannHill" type
               (:superclasses ("Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [23479 23490])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23537 23541])
                            ("a" variable nil (reparse-symbol function_parameters) [23543 23544]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.

        If a is an int or long, a is used directly.  Distinct values between
        0 and 27814431486575L inclusive are guaranteed to yield distinct
        internal states (this guarantee is specific to the default
        Wichmann-Hill generator).
        ")
                        (reparse-symbol indented_block_body) [23528 24552])
                    ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24568 24572]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [24557 25624])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25642 25646]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [25629 25778])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25796 25800])
                            ("state" variable nil (reparse-symbol function_parameters) [25802 25807]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [25783 26189])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26208 26212])
                            ("n" variable nil (reparse-symbol function_parameters) [26214 26215]))                          
                        :documentation "Act as if n calls to random() were made, but quickly.

        n is an int, greater than or equal to 0.

        Example use:  If you have 2 threads and know that each will
        consume no more than a million random numbers, create two Random
        objects r1 and r2, then do
            r2.setstate(r1.getstate())
            r2.jumpahead(1000000)
        Then r1 and r2 will use guaranteed-disjoint segments of the full
        period.
        ")
                        (reparse-symbol indented_block_body) [26194 26957])
                    ("__whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26975 26979])
                            ("x" variable nil (reparse-symbol function_parameters) [26981 26982])
                            ("y" variable nil (reparse-symbol function_parameters) [26986 26987])
                            ("z" variable nil (reparse-symbol function_parameters) [26991 26992]))                          
                        :documentation "Set the Wichmann-Hill seed from (x, y, z).

        These must be integers in the range [0, 256).
        ")
                        (reparse-symbol indented_block_body) [26962 27761])
                    ("whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27777 27781])
                            ("a" variable nil (reparse-symbol function_parameters) [27783 27784]))                          
                        :documentation "Seed from hashable object's hash code.

        None or no argument seeds from current time.  It is not guaranteed
        that objects with distinct hash codes lead to distinct internal
        states.

        This is obsolete, provided for compatibility with the seed routine
        used prior to Python 2.1.  Use the .seed() method instead.
        ")
                        (reparse-symbol indented_block_body) [27766 28465]))                  
                :type "class")
                nil [23446 28465])
            ("SystemRandom" type
               (:documentation "Alternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    "
                :superclasses ("Random")
                :members 
                  ( ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28813 28817]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [28802 28952])
                    ("getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28973 28977])
                            ("k" variable nil (reparse-symbol function_parameters) [28979 28980]))                          
                        :documentation "getrandbits(k) -> x.  Generates a long int with k random bits.")
                        (reparse-symbol indented_block_body) [28957 29432])
                    ("_stub" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29447 29451])
                            ("args" variable nil (reparse-symbol function_parameters) [29453 29458])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29460 29466]))                          )
                        (reparse-symbol indented_block_body) [29437 29560])
                    ("seed" variable nil (reparse-symbol indented_block_body) [29564 29588])
                    ("_notimplemented" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29614 29618])
                            ("args" variable nil (reparse-symbol function_parameters) [29620 29625])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29627 29633]))                          )
                        (reparse-symbol indented_block_body) [29594 29792])
                    ("getstate" variable nil (reparse-symbol indented_block_body) [29796 29833]))                  
                :type "class")
                nil [28537 29834])
            ("_test_generator" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [29914 29915])
                ("func" variable nil (reparse-symbol function_parameters) [29917 29921])
                ("args" variable nil (reparse-symbol function_parameters) [29923 29927]))              ) nil [29894 30448])
            ("_test" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [30460 30461]))              ) nil [30450 31248])
            ("_inst" variable nil nil [31580 31596])
            ("seed" variable nil nil [31597 31614])
            ("random" variable nil nil [31615 31636])
            ("uniform" variable nil nil [31637 31660])
            ("triangular" variable nil nil [31661 31690])
            ("randint" variable nil nil [31691 31714])
            ("choice" variable nil nil [31715 31736])
            ("randrange" variable nil nil [31737 31764])
            ("sample" variable nil nil [31765 31786])
            ("shuffle" variable nil nil [31787 31810])
            ("normalvariate" variable nil nil [31811 31846])
            ("lognormvariate" variable nil nil [31847 31884])
            ("expovariate" variable nil nil [31885 31916])
            ("vonmisesvariate" variable nil nil [31917 31956])
            ("gammavariate" variable nil nil [31957 31990])
            ("gauss" variable nil nil [31991 32010])
            ("betavariate" variable nil nil [32011 32042])
            ("paretovariate" variable nil nil [32043 32078])
            ("weibullvariate" variable nil nil [32079 32116])
            ("getstate" variable nil nil [32117 32142])
            ("setstate" variable nil nil [32143 32168])
            ("jumpahead" variable nil nil [32169 32196])
            ("getrandbits" variable nil nil [32197 32228])
            ("if" code nil nil [32230 32269]))          
      :file "random.py"
      :pointmax 32269
      :fsize 32268
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax '((NAME 14464 . 14465) (IF 14472 . 14474) (ELSE 14488 . 14492)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Create new objects of various types.  Deprecated.

This module is no longer required except for backward compatibility.
Objects of most types can now be created by calling the type object.
\"\"\"" code nil nil [1 196])
            ("warnings" include nil nil [197 226])
            ("warnpy3k" code nil nil [227 348])
            ("del" code nil nil [349 361])
            ("types" include nil nil [363 402])
            ("types" include nil nil [403 445])
            ("types" include nil nil [446 488])
            ("types" include nil nil [489 535])
            ("types" include nil nil [536 574])
            ("types" include nil nil [576 610]))          
      :file "new.py"
      :pointmax 611
      :fsize 610
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Text wrapping and filling.
\"\"\"" code nil nil [1 34])
            ("__revision__" variable nil nil [177 198])
            ("re" include nil nil [200 217])
            ("string" include nil nil [200 217])
            ("__all__" variable nil nil [506 557])
            ("_whitespace" variable nil nil [1062 1093])
            ("TextWrapper" type
               (:documentation "
    Object for wrapping/filling text.  The public interface consists of
    the wrap() and fill() methods; the other methods are just there for
    subclasses to override in order to tweak the default behaviour.
    If you want to completely replace the main wrapping algorithm,
    you'll probably have to override _wrap_chunks().

    Several instance attributes control various aspects of wrapping:
      width (default: 70)
        the maximum width of wrapped lines (unless break_long_words
        is false)
      initial_indent (default: \"\")
        string that will be prepended to the first line of wrapped
        output.  Counts towards the line's width.
      subsequent_indent (default: \"\")
        string that will be prepended to all lines save the first
        of wrapped output; also counts towards each line's width.
      expand_tabs (default: true)
        Expand tabs in input text to spaces before further processing.
        Each tab will become 1 .. 8 spaces, depending on its position in
        its line.  If false, each tab is treated as a single character.
      replace_whitespace (default: true)
        Replace all whitespace characters in the input text by spaces
        after tab expansion.  Note that if expand_tabs is false and
        replace_whitespace is true, every tab will be converted to a
        single space!
      fix_sentence_endings (default: false)
        Ensure that sentence-ending punctuation is always followed
        by two spaces.  Off by default because the algorithm is
        (unavoidably) imperfect.
      break_long_words (default: true)
        Break words longer than 'width'.  If false, those words will not
        be broken, and some lines might be longer than 'width'.
      break_on_hyphens (default: true)
        Allow breaking hyphenated words. If true, wrapping will occur
        preferably on whitespaces and right after hyphens part of
        compound words.
      drop_whitespace (default: true)
        Drop leading and trailing whitespace from lines.
    "
                :members 
                  ( ("whitespace_trans" variable nil (reparse-symbol indented_block_body) [3169 3241])
                    ("unicode_whitespace_trans" variable nil (reparse-symbol indented_block_body) [3247 3276])
                    ("uspace" variable nil (reparse-symbol indented_block_body) [3281 3299])
                    ("for" code nil (reparse-symbol indented_block_body) [3304 3381])
                    ("wordsep_re" variable nil (reparse-symbol indented_block_body) [3690 3898])
                    ("wordsep_simple_re" variable nil (reparse-symbol indented_block_body) [4140 4180])
                    ("sentence_end_re" variable nil (reparse-symbol indented_block_body) [4305 4652])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5030 5048])
                            ("self" variable nil (reparse-symbol indented_block_body) [5057 5093])
                            ("self" variable nil (reparse-symbol indented_block_body) [5102 5144])
                            ("self" variable nil (reparse-symbol indented_block_body) [5153 5183])
                            ("self" variable nil (reparse-symbol indented_block_body) [5192 5236])
                            ("self" variable nil (reparse-symbol indented_block_body) [5245 5293])
                            ("self" variable nil (reparse-symbol indented_block_body) [5302 5342])
                            ("self" variable nil (reparse-symbol indented_block_body) [5351 5389])
                            ("self" variable nil (reparse-symbol indented_block_body) [5398 5438])
                            ("self" variable nil (reparse-symbol indented_block_body) [5660 5723])
                            ("self" variable nil (reparse-symbol indented_block_body) [5732 5822]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4672 4676])
                            ("width" variable nil (reparse-symbol function_parameters) [4695 4700])
                            ("initial_indent" variable nil (reparse-symbol function_parameters) [4722 4736])
                            ("subsequent_indent" variable nil (reparse-symbol function_parameters) [4758 4775])
                            ("expand_tabs" variable nil (reparse-symbol function_parameters) [4797 4808])
                            ("replace_whitespace" variable nil (reparse-symbol function_parameters) [4832 4850])
                            ("fix_sentence_endings" variable nil (reparse-symbol function_parameters) [4874 4894])
                            ("break_long_words" variable nil (reparse-symbol function_parameters) [4919 4935])
                            ("drop_whitespace" variable nil (reparse-symbol function_parameters) [4959 4974])
                            ("break_on_hyphens" variable nil (reparse-symbol function_parameters) [4998 5014]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4659 5823])
                    ("_munge_whitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5976 5980])
                            ("text" variable nil (reparse-symbol function_parameters) [5982 5986]))                          
                        :documentation "_munge_whitespace(text : string) -> string

        Munge whitespace in text: expand tabs and convert all other
        whitespace characters to spaces.  Eg. \" foo\\tbar\\n\\nbaz\"
        becomes \" foo    bar  baz\".
        ")
                        (reparse-symbol indented_block_body) [5954 6559])
                    ("_split" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6576 6580])
                            ("text" variable nil (reparse-symbol function_parameters) [6582 6586]))                          
                        :documentation "_split(text : string) -> [string]

        Split the text to wrap into indivisible chunks.  Chunks are
        not quite the same as words; see _wrap_chunks() for full
        details.  As an example, the text
          Look, goof-ball -- use the -b option!
        breaks into the following chunks:
          'Look,', ' ', 'goof-', 'ball', ' ', '--', ' ',
          'use', ' ', 'the', ' ', '-b', ' ', 'option!'
        if break_on_hyphens is True, or in:
          'Look,', ' ', 'goof-ball', ' ', '--', ' ',
          'use', ' ', 'the', ' ', '-b', ' ', option!'
        otherwise.
        ")
                        (reparse-symbol indented_block_body) [6565 7648])
                    ("_fix_sentence_endings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7679 7683])
                            ("chunks" variable nil (reparse-symbol function_parameters) [7685 7691]))                          
                        :documentation "_fix_sentence_endings(chunks : [string])

        Correct for sentence endings buried in 'chunks'.  Eg. when the
        original text contains \"... foo.\\nBar ...\", munge_whitespace()
        and split() will convert that to [..., \"foo.\", \" \", \"Bar\", ...]
        which has one too few spaces; this method simply changes the one
        space to two.
        ")
                        (reparse-symbol indented_block_body) [7653 8322])
                    ("_handle_long_word" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8349 8353])
                            ("reversed_chunks" variable nil (reparse-symbol function_parameters) [8355 8370])
                            ("cur_line" variable nil (reparse-symbol function_parameters) [8372 8380])
                            ("cur_len" variable nil (reparse-symbol function_parameters) [8382 8389])
                            ("width" variable nil (reparse-symbol function_parameters) [8391 8396]))                          
                        :documentation "_handle_long_word(chunks : [string],
                             cur_line : [string],
                             cur_len : int, width : int)

        Handle a chunk of text (most likely a word, not whitespace) that
        is too long to fit in any line.
        ")
                        (reparse-symbol indented_block_body) [8327 9517])
                    ("_wrap_chunks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9885 9889])
                            ("chunks" variable nil (reparse-symbol function_parameters) [9891 9897]))                          
                        :documentation "_wrap_chunks(chunks : [string]) -> [string]

        Wrap a sequence of text chunks and return a list of lines of
        length 'self.width' or less.  (If 'break_long_words' is false,
        some lines may be longer than this.)  Chunks correspond roughly
        to words and the whitespace between them: each chunk is
        indivisible (modulo 'break_long_words'), but a line break can
        come between any two chunks.  Chunks should not have internal
        whitespace; ie. a chunk is either all whitespace or a \"word\".
        Whitespace chunks will be removed from the beginning and end of
        lines, but apart from that whitespace is preserved.
        ")
                        (reparse-symbol indented_block_body) [9868 12620])
                    ("wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12709 12713])
                            ("text" variable nil (reparse-symbol function_parameters) [12715 12719]))                          
                        :documentation "wrap(text : string) -> [string]

        Reformat the single paragraph in 'text' so it fits in lines of
        no more than 'self.width' columns, and return a list of wrapped
        lines.  Tabs in 'text' are expanded with string.expandtabs(),
        and all other whitespace characters (including newline) are
        converted to space.
        ")
                        (reparse-symbol indented_block_body) [12700 13292])
                    ("fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13306 13310])
                            ("text" variable nil (reparse-symbol function_parameters) [13312 13316]))                          
                        :documentation "fill(text : string) -> string

        Reformat the single paragraph in 'text' to fit in lines of no
        more than 'self.width' columns, and return a new string
        containing the entire wrapped paragraph.
        ")
                        (reparse-symbol indented_block_body) [13297 13598]))                  
                :type "class")
                nil [1095 13598])
            ("wrap" function
               (:documentation "Wrap a single paragraph of text, returning a list of wrapped lines.

    Reformat the single paragraph in 'text' so it fits in lines of no
    more than 'width' columns, and return a list of wrapped lines.  By
    default, tabs in 'text' are expanded with string.expandtabs(), and
    all other whitespace characters (including newline) are converted to
    space.  See TextWrapper class for available keyword args to customize
    wrapping behaviour.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [13683 13687])
                    ("width" variable nil (reparse-symbol function_parameters) [13689 13694])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [13699 13707]))                  )
                nil [13674 14244])
            ("fill" function
               (:documentation "Fill a single paragraph of text, returning a new string.

    Reformat the single paragraph in 'text' to fit in lines of no more
    than 'width' columns, and return a new string containing the entire
    wrapped paragraph.  As with wrap(), tabs are expanded and other
    whitespace characters converted to space.  See TextWrapper class for
    available keyword args to customize wrapping behaviour.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [14254 14258])
                    ("width" variable nil (reparse-symbol function_parameters) [14260 14265])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [14270 14278]))                  )
                nil [14245 14765])
            ("_whitespace_only_re" variable nil nil [14841 14899])
            ("_leading_whitespace_re" variable nil nil [14900 14974])
            ("dedent" function
               (:documentation "Remove any common leading whitespace from every line in `text`.

    This can be used to make triple-quoted strings line up with the left
    edge of the display, while still presenting them in the source code
    in indented form.

    Note that tabs and spaces are both treated as whitespace, but they
    are not equal: the lines \"  hello\" and \"\\thello\" are
    considered to have no common leading whitespace.  (This behaviour is
    new in Python 2.5; older versions of this module incorrectly
    expanded tabs before searching for common leading whitespace.)
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [14987 14991]))                  )
                nil [14976 16676])
            ("if" code nil nil [16677 16849]))          
      :file "textwrap.py"
      :pointmax 16849
      :fsize 16848
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
This is a Py2.3 implementation of decimal floating point arithmetic based on
the General Decimal Arithmetic Specification:

    http://speleotrove.com/decimal/decarith.html

and IEEE standard 854-1987:

    www.cs.berkeley.edu/~ejr/projects/754/private/drafts/854-1987/dir.html

Decimal floating point has finite precision with arbitrarily large bounds.

The purpose of this module is to support arithmetic using familiar
\"schoolhouse\" rules and to avoid some of the tricky representation
issues associated with binary floating point.  The package is especially
useful for financial applications or for contexts where users have
expectations that are at odds with binary floating point (for instance,
in binary floating point, 1.00 % 0.1 gives 0.09999999999999995 instead
of the expected Decimal('0.00') returned by decimal floating point).

Here are some examples of using the decimal module:

>>> from decimal import *
>>> setcontext(ExtendedContext)
>>> Decimal(0)
Decimal('0')
>>> Decimal('1')
Decimal('1')
>>> Decimal('-.0123')
Decimal('-0.0123')
>>> Decimal(123456)
Decimal('123456')
>>> Decimal('123.45e12345678901234567890')
Decimal('1.2345E+12345678901234567892')
>>> Decimal('1.33') + Decimal('1.27')
Decimal('2.60')
>>> Decimal('12.34') + Decimal('3.87') - Decimal('18.41')
Decimal('-2.20')
>>> dig = Decimal(1)
>>> print dig / Decimal(3)
0.333333333
>>> getcontext().prec = 18
>>> print dig / Decimal(3)
0.333333333333333333
>>> print dig.sqrt()
1
>>> print Decimal(3).sqrt()
1.73205080756887729
>>> print Decimal(3) ** 123
4.85192780976896427E+58
>>> inf = Decimal(1) / Decimal(0)
>>> print inf
Infinity
>>> neginf = Decimal(-1) / Decimal(0)
>>> print neginf
-Infinity
>>> print neginf + inf
NaN
>>> print neginf * inf
-Infinity
>>> print dig / 0
Infinity
>>> getcontext().traps[DivisionByZero] = 1
>>> print dig / 0
Traceback (most recent call last):
  ...
  ...
  ...
DivisionByZero: x / 0
>>> c = Context()
>>> c.traps[InvalidOperation] = 0
>>> print c.flags[InvalidOperation]
0
>>> c.divide(Decimal(0), Decimal(0))
Decimal('NaN')
>>> c.traps[InvalidOperation] = 1
>>> print c.flags[InvalidOperation]
1
>>> c.flags[InvalidOperation] = 0
>>> print c.flags[InvalidOperation]
0
>>> print c.divide(Decimal(0), Decimal(0))
Traceback (most recent call last):
  ...
  ...
  ...
InvalidOperation: 0 / 0
>>> print c.flags[InvalidOperation]
1
>>> c.flags[InvalidOperation] = 0
>>> c.traps[InvalidOperation] = 0
>>> print c.divide(Decimal(0), Decimal(0))
NaN
>>> print c.flags[InvalidOperation]
1
>>>
\"\"\"" code nil nil [817 3330])
            ("__all__" variable nil nil [3332 3896])
            ("__version__" variable nil nil [3898 3918])
            ("copy" include nil nil [3972 3992])
            ("math" include nil nil [3993 4013])
            ("numbers" include nil nil [4014 4040])
            ("try" code nil nil [4042 4230])
            ("ROUND_DOWN" variable nil nil [4242 4267])
            ("ROUND_HALF_UP" variable nil nil [4268 4299])
            ("ROUND_HALF_EVEN" variable nil nil [4300 4335])
            ("ROUND_CEILING" variable nil nil [4336 4367])
            ("ROUND_FLOOR" variable nil nil [4368 4395])
            ("ROUND_UP" variable nil nil [4396 4417])
            ("ROUND_HALF_DOWN" variable nil nil [4418 4453])
            ("ROUND_05UP" variable nil nil [4454 4479])
            ("DecimalException" type
               (:documentation "Base exception class.

    Used exceptions derive from this.
    If an exception derives from another exception besides this (such as
    Underflow (Inexact, Rounded, Subnormal) that indicates that it is only
    called if the others are present.  This isn't actually used for
    anything, though.

    handle  -- Called when context._raise_error is called and the
               trap_enabler is not set.  First argument is self, second is the
               context.  More arguments can be given, those being after
               the explanation in _raise_error (For example,
               context._raise_error(NewError, '(-x)!', self._sign) would
               call NewError().handle(context, self._sign).)

    To define a new exception, it should be sufficient to have it derive
    from DecimalException.
    "
                :superclasses ("ArithmeticError")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5375 5379])
                            ("context" variable nil (reparse-symbol function_parameters) [5381 5388])
                            ("args" variable nil (reparse-symbol function_parameters) [5390 5395]))                          )
                        (reparse-symbol indented_block_body) [5364 5411]))                  
                :type "class")
                nil [4491 5411])
            ("Clamped" type
               (:documentation "Exponent of a 0 changed to fit bounds.

    This occurs and signals clamped if the exponent of a result has been
    altered in order to fit the constraints of a specific concrete
    representation.  This may occur when the exponent of a zero result would
    be outside the bounds of a representation, or when a large normal
    number would have an encoded exponent that cannot be represented.  In
    this latter case, the exponent is reduced to fit and the corresponding
    number of zero digits are appended to the coefficient (\"fold-down\").
    "
                :superclasses ("DecimalException")
                :type "class")
                nil [5413 6010])
            ("InvalidOperation" type
               (:documentation "An invalid operation was performed.

    Various bad things cause this:

    Something creates a signaling NaN
    -INF + INF
    0 * (+-)INF
    (+-)INF / (+-)INF
    x % 0
    (+-)INF % x
    x._rescale( non-integer )
    sqrt(-x) , x > 0
    0 ** 0
    x ** (non-integer)
    x ** (+-)INF
    An operand is invalid

    The result of the operation after these is a quiet positive NaN,
    except when the cause is a signaling NaN, in which case the result is
    also a quiet NaN, but with the original sign, and an optional
    diagnostic information.
    "
                :superclasses ("DecimalException")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6639 6643])
                            ("context" variable nil (reparse-symbol function_parameters) [6645 6652])
                            ("args" variable nil (reparse-symbol function_parameters) [6654 6659]))                          )
                        (reparse-symbol indented_block_body) [6628 6815]))                  
                :type "class")
                nil [6011 6815])
            ("ConversionSyntax" type
               (:documentation "Trying to convert badly formed string.

    This occurs and signals invalid-operation if an string is being
    converted to a number and it does not conform to the numeric string
    syntax.  The result is [0,qNaN].
    "
                :superclasses ("InvalidOperation")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7105 7109])
                            ("context" variable nil (reparse-symbol function_parameters) [7111 7118])
                            ("args" variable nil (reparse-symbol function_parameters) [7120 7125]))                          )
                        (reparse-symbol indented_block_body) [7094 7148]))                  
                :type "class")
                nil [6816 7148])
            ("DivisionByZero" type
               (:documentation "Division by 0.

    This occurs and signals division-by-zero if division of a finite number
    by zero was attempted (during a divide-integer or divide operation, or a
    power operation with negative right-hand operand), and the dividend was
    not zero.

    The result of the operation is [sign,inf], where sign is the exclusive
    or of the signs of the operands for divide, or is 1 for an odd power of
    -0, for power.
    "
                :superclasses ("DecimalException" "ZeroDivisionError")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7669 7673])
                            ("context" variable nil (reparse-symbol function_parameters) [7675 7682])
                            ("sign" variable nil (reparse-symbol function_parameters) [7684 7688])
                            ("args" variable nil (reparse-symbol function_parameters) [7690 7695]))                          )
                        (reparse-symbol indented_block_body) [7658 7735]))                  
                :type "class")
                nil [7149 7735])
            ("DivisionImpossible" type
               (:documentation "Cannot perform the division adequately.

    This occurs and signals invalid-operation if the integer result of a
    divide-integer or remainder operation had too many digits (would be
    longer than precision).  The result is [0,qNaN].
    "
                :superclasses ("InvalidOperation")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8050 8054])
                            ("context" variable nil (reparse-symbol function_parameters) [8056 8063])
                            ("args" variable nil (reparse-symbol function_parameters) [8065 8070]))                          )
                        (reparse-symbol indented_block_body) [8039 8093]))                  
                :type "class")
                nil [7736 8093])
            ("DivisionUndefined" type
               (:documentation "Undefined result of division.

    This occurs and signals invalid-operation if division by zero was
    attempted (during a divide-integer, divide, or remainder operation), and
    the dividend is also zero.  The result is [0,qNaN].
    "
                :superclasses ("InvalidOperation" "ZeroDivisionError")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8421 8425])
                            ("context" variable nil (reparse-symbol function_parameters) [8427 8434])
                            ("args" variable nil (reparse-symbol function_parameters) [8436 8441]))                          )
                        (reparse-symbol indented_block_body) [8410 8464]))                  
                :type "class")
                nil [8094 8464])
            ("Inexact" type
               (:documentation "Had to round, losing information.

    This occurs and signals inexact whenever the result of an operation is
    not exact (that is, it needed to be rounded and any discarded digits
    were non-zero), or if an overflow or underflow condition occurs.  The
    result in all cases is unchanged.

    The inexact signal may be tested (or trapped) to determine if a given
    operation (or sequence of operations) was inexact.
    "
                :superclasses ("DecimalException")
                :type "class")
                nil [8465 8938])
            ("InvalidContext" type
               (:documentation "Invalid context.  Unknown rounding, for example.

    This occurs and signals invalid-operation if an invalid context was
    detected during an operation.  This can occur if contexts are not checked
    on creation and either the precision exceeds the capability of the
    underlying concrete representation or an unknown or unsupported rounding
    was specified.  These aspects of the context need only be checked when
    the values are required to be used.  The result is [0,qNaN].
    "
                :superclasses ("InvalidOperation")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9498 9502])
                            ("context" variable nil (reparse-symbol function_parameters) [9504 9511])
                            ("args" variable nil (reparse-symbol function_parameters) [9513 9518]))                          )
                        (reparse-symbol indented_block_body) [9487 9541]))                  
                :type "class")
                nil [8939 9541])
            ("Rounded" type
               (:documentation "Number got rounded (not  necessarily changed during rounding).

    This occurs and signals rounded whenever the result of an operation is
    rounded (that is, some zero or non-zero digits were discarded from the
    coefficient), or if an overflow or underflow condition occurs.  The
    result in all cases is unchanged.

    The rounded signal may be tested (or trapped) to determine if a given
    operation (or sequence of operations) caused a loss of precision.
    "
                :superclasses ("DecimalException")
                :type "class")
                nil [9542 10059])
            ("Subnormal" type
               (:documentation "Exponent < Emin before rounding.

    This occurs and signals subnormal whenever the result of a conversion or
    operation is subnormal (that is, its adjusted exponent is less than
    Emin, before any rounding).  The result in all cases is unchanged.

    The subnormal signal may be tested (or trapped) to determine if a given
    or operation (or sequence of operations) yielded a subnormal result.
    "
                :superclasses ("DecimalException")
                :type "class")
                nil [10060 10514])
            ("Overflow" type
               (:documentation "Numerical overflow.

    This occurs and signals overflow if the adjusted exponent of a result
    (from a conversion or from an operation that is not an attempt to divide
    by zero), after rounding, would be greater than the largest value that
    can be handled by the implementation (the value Emax).

    The result depends on the rounding mode:

    For round-half-up and round-half-even (and for round-half-down and
    round-up, if implemented), the result of the operation is [sign,inf],
    where sign is the sign of the intermediate result.  For round-down, the
    result is the largest finite number that can be represented in the
    current precision, with the sign of the intermediate result.  For
    round-ceiling, the result is the same as for round-down if the sign of
    the intermediate result is 1, or is [0,inf] otherwise.  For round-floor,
    the result is the same as for round-down if the sign of the intermediate
    result is 0, or is [1,inf] otherwise.  In all cases, Inexact and Rounded
    will also be raised.
    "
                :superclasses ("Inexact" "Rounded")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11626 11630])
                            ("context" variable nil (reparse-symbol function_parameters) [11632 11639])
                            ("sign" variable nil (reparse-symbol function_parameters) [11641 11645])
                            ("args" variable nil (reparse-symbol function_parameters) [11647 11652]))                          )
                        (reparse-symbol indented_block_body) [11615 12287]))                  
                :type "class")
                nil [10515 12287])
            ("Underflow" type
               (:documentation "Numerical underflow with result rounded to 0.

    This occurs and signals underflow if a result is inexact and the
    adjusted exponent of the result would be smaller (more negative) than
    the smallest value that can be handled by the implementation (the value
    Emin).  That is, the result is both inexact and subnormal.

    The result after an underflow will be a subnormal number rounded, if
    necessary, so that its exponent is not less than Etiny.  This may result
    in 0 with the sign of the intermediate result and an exponent of Etiny.

    In all cases, Inexact, Rounded, and Subnormal will also be raised.
    "
                :superclasses ("Inexact" "Rounded" "Subnormal")
                :type "class")
                nil [12289 12978])
            ("_signals" variable nil nil [13012 13127])
            ("_condition_map" variable nil nil [13172 13384])
            ("try" code nil nil [13844 14144])
            ("try" code nil nil [14145 16146])
            ("localcontext" function
               (:documentation "Return a context manager for a copy of the supplied context

    Uses a copy of the current context if no context is specified
    The returned context manager creates a local decimal context
    in a with statement:
        def sin(x):
             with localcontext() as ctx:
                 ctx.prec += 2
                 # Rest of sin calculation algorithm
                 # uses a precision 2 greater than normal
             return +s  # Convert result to normal precision

         def sin(x):
             with localcontext(ExtendedContext):
                 # Rest of sin calculation algorithm
                 # uses the Extended Context from the
                 # General Decimal Arithmetic Specification
             return +s  # Convert result to normal context

    >>> setcontext(DefaultContext)
    >>> print getcontext().prec
    28
    >>> with localcontext():
    ...     ctx = getcontext()
    ...     ctx.prec += 2
    ...     print ctx.prec
    ...
    30
    >>> with localcontext(ExtendedContext):
    ...     print getcontext().prec
    ...
    9
    >>> print getcontext().prec
    28
    "
                :arguments 
                  ( ("ctx" variable nil (reparse-symbol function_parameters) [16164 16167]))                  )
                nil [16147 17375])
            ("Decimal" type
               (:documentation "Floating point class for decimal arithmetic."
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [17537 17587])
                    ("__new__" function
                       (:documentation "Create a decimal point instance.

        >>> Decimal('3.14')              # string input
        Decimal('3.14')
        >>> Decimal((0, (3, 1, 4), -2))  # tuple (sign, digit_tuple, exponent)
        Decimal('3.14')
        >>> Decimal(314)                 # int or long
        Decimal('314')
        >>> Decimal(Decimal(314))        # another decimal instance
        Decimal('314')
        >>> Decimal('  3.14  \\\\n')        # leading and trailing whitespace okay
        Decimal('3.14')
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [17814 17817])
                            ("value" variable nil (reparse-symbol function_parameters) [17819 17824])
                            ("context" variable nil (reparse-symbol function_parameters) [17830 17837]))                          )
                        (reparse-symbol indented_block_body) [17802 23690])
                    ("from_float" function
                       (:documentation "Converts a float to a decimal number, exactly.

        Note that Decimal.from_float(0.1) is not the same as Decimal('0.1').
        Since 0.1 is not exactly representable in binary floating point, the
        value is stored as the nearest representable value which is
        0x1.999999999999ap-4.  The exact equivalent of the value in decimal
        is 0.1000000000000000055511151231257827021181583404541015625.

        >>> Decimal.from_float(0.1)
        Decimal('0.1000000000000000055511151231257827021181583404541015625')
        >>> Decimal.from_float(float('nan'))
        Decimal('NaN')
        >>> Decimal.from_float(float('inf'))
        Decimal('Infinity')
        >>> Decimal.from_float(-float('inf'))
        Decimal('-Infinity')
        >>> Decimal.from_float(-0.0)
        Decimal('-0')

        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [23849 23852])
                            ("f" variable nil (reparse-symbol function_parameters) [23854 23855]))                          )
                        (reparse-symbol indented_block_body) [23834 25220])
                    ("from_float" variable nil (reparse-symbol indented_block_body) [25224 25260])
                    ("_isnan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25277 25281]))                          
                        :documentation "Returns whether the number is not actually one.

        0 if a number
        1 if NaN
        2 if sNaN
        ")
                        (reparse-symbol indented_block_body) [25266 25593])
                    ("_isinfinity" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25614 25618]))                          
                        :documentation "Returns whether the number is infinite

        0 if finite or not a number
        1 if +INF
        -1 if -INF
        ")
                        (reparse-symbol indented_block_body) [25598 25877])
                    ("_check_nans" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25898 25902])
                            ("other" variable nil (reparse-symbol function_parameters) [25904 25909])
                            ("context" variable nil (reparse-symbol function_parameters) [25916 25923]))                          
                        :documentation "Returns whether the number is not actually one.

        if self, other are sNaN, signal
        if self, other are NaN return nan
        return 0

        Done before operations.
        ")
                        (reparse-symbol indented_block_body) [25882 26835])
                    ("_compare_check_nans" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26864 26868])
                            ("other" variable nil (reparse-symbol function_parameters) [26870 26875])
                            ("context" variable nil (reparse-symbol function_parameters) [26877 26884]))                          
                        :documentation "Version of _check_nans used for the signaling comparisons
        compare_signal, __le__, __lt__, __ge__, __gt__.

        Signal InvalidOperation if either self or other is a (quiet
        or signaling) NaN.  Signaling NaNs take precedence over quiet
        NaNs.

        Return 0 if neither operand is a NaN.

        ")
                        (reparse-symbol indented_block_body) [26840 28228])
                    ("__nonzero__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28249 28253]))                          
                        :documentation "Return True if self is nonzero; otherwise return False.

        NaNs and infinities are considered nonzero.
        ")
                        (reparse-symbol indented_block_body) [28233 28440])
                    ("_cmp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28454 28458])
                            ("other" variable nil (reparse-symbol function_parameters) [28460 28465]))                          
                        :documentation "Compare the two non-NaN decimal instances self and other.

        Returns -1 if self < other, 0 if self == other and 1
        if self > other.  This routine is for internal use only.")
                        (reparse-symbol indented_block_body) [28445 30033])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30890 30894])
                            ("other" variable nil (reparse-symbol function_parameters) [30896 30901])
                            ("context" variable nil (reparse-symbol function_parameters) [30903 30910]))                          )
                        (reparse-symbol indented_block_body) [30879 31142])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31158 31162])
                            ("other" variable nil (reparse-symbol function_parameters) [31164 31169])
                            ("context" variable nil (reparse-symbol function_parameters) [31171 31178]))                          )
                        (reparse-symbol indented_block_body) [31147 31409])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31425 31429])
                            ("other" variable nil (reparse-symbol function_parameters) [31431 31436])
                            ("context" variable nil (reparse-symbol function_parameters) [31438 31445]))                          )
                        (reparse-symbol indented_block_body) [31414 31702])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31718 31722])
                            ("other" variable nil (reparse-symbol function_parameters) [31724 31729])
                            ("context" variable nil (reparse-symbol function_parameters) [31731 31738]))                          )
                        (reparse-symbol indented_block_body) [31707 31996])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32012 32016])
                            ("other" variable nil (reparse-symbol function_parameters) [32018 32023])
                            ("context" variable nil (reparse-symbol function_parameters) [32025 32032]))                          )
                        (reparse-symbol indented_block_body) [32001 32289])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32305 32309])
                            ("other" variable nil (reparse-symbol function_parameters) [32311 32316])
                            ("context" variable nil (reparse-symbol function_parameters) [32318 32325]))                          )
                        (reparse-symbol indented_block_body) [32294 32583])
                    ("compare" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32600 32604])
                            ("other" variable nil (reparse-symbol function_parameters) [32606 32611])
                            ("context" variable nil (reparse-symbol function_parameters) [32613 32620]))                          
                        :documentation "Compares one to another.

        -1 => a < b
        0  => a = b
        1  => a > b
        NaN => one is NaN
        Like __cmp__, but returns Decimal instances.
        ")
                        (reparse-symbol indented_block_body) [32588 33105])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33123 33127]))                          
                        :documentation "x.__hash__() <==> hash(x)")
                        (reparse-symbol indented_block_body) [33110 35539])
                    ("as_tuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35557 35561]))                          
                        :documentation "Represents the number as a triple tuple.

        To show the internals exactly as they are.
        ")
                        (reparse-symbol indented_block_body) [35544 35759])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35777 35781]))                          
                        :documentation "Represents the number as an instance of Decimal.")
                        (reparse-symbol indented_block_body) [35764 35931])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35948 35952])
                            ("eng" variable nil (reparse-symbol function_parameters) [35954 35957])
                            ("context" variable nil (reparse-symbol function_parameters) [35965 35972]))                          
                        :documentation "Return string representation of the number in scientific notation.

        Captures all of the information in the underlying representation.
        ")
                        (reparse-symbol indented_block_body) [35936 37825])
                    ("to_eng_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37848 37852])
                            ("context" variable nil (reparse-symbol function_parameters) [37854 37861]))                          
                        :documentation "Convert to engineering-type string.

        Engineering notation has an exponent which is a multiple of 3, so there
        are up to 3 digits left of the decimal place.

        Same rules for when in exponential and when as a value as in __str__.
        ")
                        (reparse-symbol indented_block_body) [37830 38197])
                    ("__neg__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38214 38218])
                            ("context" variable nil (reparse-symbol function_parameters) [38220 38227]))                          
                        :documentation "Returns a copy with the sign switched.

        Rounds, if it has reason.
        ")
                        (reparse-symbol indented_block_body) [38202 38816])
                    ("__pos__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38833 38837])
                            ("context" variable nil (reparse-symbol function_parameters) [38839 38846]))                          
                        :documentation "Returns a copy, unless it is a sNaN.

        Rounds the number (if more then precision digits)
        ")
                        (reparse-symbol indented_block_body) [38821 39400])
                    ("__abs__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39417 39421])
                            ("round" variable nil (reparse-symbol function_parameters) [39423 39428])
                            ("context" variable nil (reparse-symbol function_parameters) [39435 39442]))                          
                        :documentation "Returns the absolute value of self.

        If the keyword argument 'round' is false, do not round.  The
        expression self.__abs__(round=False) is equivalent to
        self.copy_abs().
        ")
                        (reparse-symbol indented_block_body) [39405 40006])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40023 40027])
                            ("other" variable nil (reparse-symbol function_parameters) [40029 40034])
                            ("context" variable nil (reparse-symbol function_parameters) [40036 40043]))                          
                        :documentation "Returns self + other.

        -INF + INF (or the reverse) cause InvalidOperation errors.
        ")
                        (reparse-symbol indented_block_body) [40011 42879])
                    ("__radd__" variable nil (reparse-symbol indented_block_body) [42884 42902])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42920 42924])
                            ("other" variable nil (reparse-symbol function_parameters) [42926 42931])
                            ("context" variable nil (reparse-symbol function_parameters) [42933 42940]))                          
                        :documentation "Return self - other")
                        (reparse-symbol indented_block_body) [42908 43370])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43388 43392])
                            ("other" variable nil (reparse-symbol function_parameters) [43394 43399])
                            ("context" variable nil (reparse-symbol function_parameters) [43401 43408]))                          
                        :documentation "Return other - self")
                        (reparse-symbol indented_block_body) [43375 43602])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43619 43623])
                            ("other" variable nil (reparse-symbol function_parameters) [43625 43630])
                            ("context" variable nil (reparse-symbol function_parameters) [43632 43639]))                          
                        :documentation "Return self * other.

        (+-) INF * 0 (or its reverse) raise InvalidOperation.
        ")
                        (reparse-symbol indented_block_body) [43607 45378])
                    ("__rmul__" variable nil (reparse-symbol indented_block_body) [45382 45400])
                    ("__truediv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45422 45426])
                            ("other" variable nil (reparse-symbol function_parameters) [45428 45433])
                            ("context" variable nil (reparse-symbol function_parameters) [45435 45442]))                          
                        :documentation "Return self / other.")
                        (reparse-symbol indented_block_body) [45406 47513])
                    ("_divide" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47530 47534])
                            ("other" variable nil (reparse-symbol function_parameters) [47536 47541])
                            ("context" variable nil (reparse-symbol function_parameters) [47543 47550]))                          
                        :documentation "Return (self // other, self % other), to context.prec precision.

        Assumes that neither self nor other is a NaN, that self is not
        infinite and that other is nonzero.
        ")
                        (reparse-symbol indented_block_body) [47518 48847])
                    ("__rtruediv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48869 48873])
                            ("other" variable nil (reparse-symbol function_parameters) [48875 48880])
                            ("context" variable nil (reparse-symbol function_parameters) [48882 48889]))                          
                        :documentation "Swaps self/other and returns __truediv__.")
                        (reparse-symbol indented_block_body) [48852 49108])
                    ("__div__" variable nil (reparse-symbol indented_block_body) [49113 49134])
                    ("__rdiv__" variable nil (reparse-symbol indented_block_body) [49139 49162])
                    ("__divmod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49183 49187])
                            ("other" variable nil (reparse-symbol function_parameters) [49189 49194])
                            ("context" variable nil (reparse-symbol function_parameters) [49196 49203]))                          
                        :documentation "
        Return (self // other, self % other)
        ")
                        (reparse-symbol indented_block_body) [49168 50364])
                    ("__rdivmod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50385 50389])
                            ("other" variable nil (reparse-symbol function_parameters) [50391 50396])
                            ("context" variable nil (reparse-symbol function_parameters) [50398 50405]))                          
                        :documentation "Swaps self/other and returns __divmod__.")
                        (reparse-symbol indented_block_body) [50369 50622])
                    ("__mod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50639 50643])
                            ("other" variable nil (reparse-symbol function_parameters) [50645 50650])
                            ("context" variable nil (reparse-symbol function_parameters) [50652 50659]))                          
                        :documentation "
        self % other
        ")
                        (reparse-symbol indented_block_body) [50627 51391])
                    ("__rmod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51409 51413])
                            ("other" variable nil (reparse-symbol function_parameters) [51415 51420])
                            ("context" variable nil (reparse-symbol function_parameters) [51422 51429]))                          
                        :documentation "Swaps self/other and returns __mod__.")
                        (reparse-symbol indented_block_body) [51396 51640])
                    ("remainder_near" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51664 51668])
                            ("other" variable nil (reparse-symbol function_parameters) [51670 51675])
                            ("context" variable nil (reparse-symbol function_parameters) [51677 51684]))                          
                        :documentation "
        Remainder nearest to 0-  abs(remainder-near) <= other/2
        ")
                        (reparse-symbol indented_block_body) [51645 54329])
                    ("__floordiv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54351 54355])
                            ("other" variable nil (reparse-symbol function_parameters) [54357 54362])
                            ("context" variable nil (reparse-symbol function_parameters) [54364 54371]))                          
                        :documentation "self // other")
                        (reparse-symbol indented_block_body) [54334 55207])
                    ("__rfloordiv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55230 55234])
                            ("other" variable nil (reparse-symbol function_parameters) [55236 55241])
                            ("context" variable nil (reparse-symbol function_parameters) [55243 55250]))                          
                        :documentation "Swaps self/other and returns __floordiv__.")
                        (reparse-symbol indented_block_body) [55212 55471])
                    ("__float__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55490 55494]))                          
                        :documentation "Float representation.")
                        (reparse-symbol indented_block_body) [55476 55565])
                    ("__int__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55582 55586]))                          
                        :documentation "Converts self to an int, truncating if necessary.")
                        (reparse-symbol indented_block_body) [55570 56064])
                    ("__trunc__" variable nil (reparse-symbol indented_block_body) [56069 56088])
                    ("real" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56103 56107]))                          )
                        (reparse-symbol indented_block_body) [56094 56130])
                    ("real" variable nil (reparse-symbol indented_block_body) [56134 56155])
                    ("imag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56170 56174]))                          )
                        (reparse-symbol indented_block_body) [56161 56203])
                    ("imag" variable nil (reparse-symbol indented_block_body) [56207 56228])
                    ("conjugate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56248 56252]))                          )
                        (reparse-symbol indented_block_body) [56234 56275])
                    ("__complex__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56296 56300]))                          )
                        (reparse-symbol indented_block_body) [56280 56339])
                    ("__long__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56357 56361]))                          
                        :documentation "Converts to a long.

        Equivalent to long(int(self))
        ")
                        (reparse-symbol indented_block_body) [56344 56482])
                    ("_fix_nan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56500 56504])
                            ("context" variable nil (reparse-symbol function_parameters) [56506 56513]))                          
                        :documentation "Decapitate the payload of a NaN to fit the context")
                        (reparse-symbol indented_block_body) [56487 56982])
                    ("_fix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56996 57000])
                            ("context" variable nil (reparse-symbol function_parameters) [57002 57009]))                          
                        :documentation "Round if it is necessary to keep self within prec precision.

        Rounds and fixes the exponent.  Does not raise on a sNaN.

        Arguments:
        self - Decimal instance
        context - context used.
        ")
                        (reparse-symbol indented_block_body) [56987 60538])
                    ("_round_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61054 61058])
                            ("prec" variable nil (reparse-symbol function_parameters) [61060 61064]))                          
                        :documentation "Also known as round-towards-0, truncate.")
                        (reparse-symbol indented_block_body) [61038 61219])
                    ("_round_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61238 61242])
                            ("prec" variable nil (reparse-symbol function_parameters) [61244 61248]))                          
                        :documentation "Rounds away from 0.")
                        (reparse-symbol indented_block_body) [61224 61324])
                    ("_round_half_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61348 61352])
                            ("prec" variable nil (reparse-symbol function_parameters) [61354 61358]))                          
                        :documentation "Rounds 5 up (away from 0)")
                        (reparse-symbol indented_block_body) [61329 61560])
                    ("_round_half_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61586 61590])
                            ("prec" variable nil (reparse-symbol function_parameters) [61592 61596]))                          
                        :documentation "Round 5 down")
                        (reparse-symbol indented_block_body) [61565 61748])
                    ("_round_half_even" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61774 61778])
                            ("prec" variable nil (reparse-symbol function_parameters) [61780 61784]))                          
                        :documentation "Round 5 to even, rest to nearest.")
                        (reparse-symbol indented_block_body) [61753 62023])
                    ("_round_ceiling" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62047 62051])
                            ("prec" variable nil (reparse-symbol function_parameters) [62053 62057]))                          
                        :documentation "Rounds up (not away from 0 if negative.)")
                        (reparse-symbol indented_block_body) [62028 62237])
                    ("_round_floor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62259 62263])
                            ("prec" variable nil (reparse-symbol function_parameters) [62265 62269]))                          
                        :documentation "Rounds down (not towards 0 if negative)")
                        (reparse-symbol indented_block_body) [62242 62452])
                    ("_round_05up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62473 62477])
                            ("prec" variable nil (reparse-symbol function_parameters) [62479 62483]))                          
                        :documentation "Round down unless digit prec-1 is 0 or 5.")
                        (reparse-symbol indented_block_body) [62457 62692])
                    ("_pick_rounding_function" variable nil (reparse-symbol indented_block_body) [62697 63036])
                    ("fma" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63050 63054])
                            ("other" variable nil (reparse-symbol function_parameters) [63056 63061])
                            ("third" variable nil (reparse-symbol function_parameters) [63063 63068])
                            ("context" variable nil (reparse-symbol function_parameters) [63070 63077]))                          
                        :documentation "Fused multiply-add.

        Returns self*other+third with no rounding of the intermediate
        product self*other.

        self and other are multiplied together, with no rounding of
        the result.  The third operand is then added to the result,
        and a single final rounding is performed.
        ")
                        (reparse-symbol indented_block_body) [63042 64930])
                    ("_power_modulo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64953 64957])
                            ("other" variable nil (reparse-symbol function_parameters) [64959 64964])
                            ("modulo" variable nil (reparse-symbol function_parameters) [64966 64972])
                            ("context" variable nil (reparse-symbol function_parameters) [64974 64981]))                          
                        :documentation "Three argument version of __pow__")
                        (reparse-symbol indented_block_body) [64935 68673])
                    ("_power_exact" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68695 68699])
                            ("other" variable nil (reparse-symbol function_parameters) [68701 68706])
                            ("p" variable nil (reparse-symbol function_parameters) [68708 68709]))                          
                        :documentation "Attempt to compute self**other exactly.

        Given Decimals self and other and an integer p, attempt to
        compute an exact result for the power self**other, with p
        digits of precision.  Return None if self**other is not
        exactly representable in p digits.

        Assumes that elimination of special cases has already been
        performed: self and other must both be nonspecial; self must
        be positive and not numerically equal to 1; other must be
        nonzero.  For efficiency, other._exp should not be too large,
        so that 10**abs(other._exp) is a feasible calculation.")
                        (reparse-symbol indented_block_body) [68678 77716])
                    ("__pow__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77733 77737])
                            ("other" variable nil (reparse-symbol function_parameters) [77739 77744])
                            ("modulo" variable nil (reparse-symbol function_parameters) [77746 77752])
                            ("context" variable nil (reparse-symbol function_parameters) [77759 77766]))                          
                        :documentation "Return self ** other [ % modulo].

        With two arguments, compute self**other.

        With three arguments, compute (self**other) % modulo.  For the
        three argument form, the following restrictions on the
        arguments hold:

         - all three arguments must be integral
         - other must be nonnegative
         - either self or other (or both) must be nonzero
         - modulo must be nonzero and must have at most p digits,
           where p is the context precision.

        If any of these restrictions is violated the InvalidOperation
        flag is raised.

        The result of pow(self, other, modulo) is identical to the
        result that would be obtained by computing (self**other) %
        modulo with unbounded precision, but is computed more
        efficiently.  It is always exact.
        ")
                        (reparse-symbol indented_block_body) [77721 86398])
                    ("__rpow__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86416 86420])
                            ("other" variable nil (reparse-symbol function_parameters) [86422 86427])
                            ("context" variable nil (reparse-symbol function_parameters) [86429 86436]))                          
                        :documentation "Swaps self/other and returns __pow__.")
                        (reparse-symbol indented_block_body) [86403 86647])
                    ("normalize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86666 86670])
                            ("context" variable nil (reparse-symbol function_parameters) [86672 86679]))                          
                        :documentation "Normalize- strip trailing 0s, change anything equal to 0 to 0e0")
                        (reparse-symbol indented_block_body) [86652 87399])
                    ("quantize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87417 87421])
                            ("exp" variable nil (reparse-symbol function_parameters) [87423 87426])
                            ("rounding" variable nil (reparse-symbol function_parameters) [87428 87436])
                            ("context" variable nil (reparse-symbol function_parameters) [87443 87450])
                            ("watchexp" variable nil (reparse-symbol function_parameters) [87457 87465]))                          
                        :documentation "Quantize self so its exponent is the same as that of exp.

        Similar to self._rescale(exp._exp) but with error checking.
        ")
                        (reparse-symbol indented_block_body) [87404 90344])
                    ("same_quantum" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90366 90370])
                            ("other" variable nil (reparse-symbol function_parameters) [90372 90377]))                          
                        :documentation "Return True if self and other have the same exponent; otherwise
        return False.

        If either operand is a special value, the following rules are used:
           * return True if both operands are infinities
           * return True if both operands are NaNs
           * otherwise, return False.
        ")
                        (reparse-symbol indented_block_body) [90349 90973])
                    ("_rescale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90991 90995])
                            ("exp" variable nil (reparse-symbol function_parameters) [90997 91000])
                            ("rounding" variable nil (reparse-symbol function_parameters) [91002 91010]))                          
                        :documentation "Rescale self so that the exponent is exp, either by padding with zeros
        or by truncating digits, using the given rounding mode.

        Specials are returned without change.  This operation is
        quiet: it raises no flags, and uses no information from the
        context.

        exp = exp to scale to (an integer)
        rounding = rounding mode
        ")
                        (reparse-symbol indented_block_body) [90978 92305])
                    ("_round" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92321 92325])
                            ("places" variable nil (reparse-symbol function_parameters) [92327 92333])
                            ("rounding" variable nil (reparse-symbol function_parameters) [92335 92343]))                          
                        :documentation "Round a nonzero, nonspecial Decimal to a fixed number of
        significant figures, using the given rounding mode.

        Infinities, NaNs and zeros are returned unaltered.

        This operation is quiet: it raises no flags, and uses no
        information from the context.

        ")
                        (reparse-symbol indented_block_body) [92310 93274])
                    ("to_integral_exact" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93301 93305])
                            ("rounding" variable nil (reparse-symbol function_parameters) [93307 93315])
                            ("context" variable nil (reparse-symbol function_parameters) [93322 93329]))                          
                        :documentation "Rounds to a nearby integer.

        If no rounding mode is specified, take the rounding mode from
        the context.  This method raises the Rounded and Inexact flags
        when appropriate.

        See also: to_integral_value, which does exactly the same as
        this method except that it doesn't raise Inexact or Rounded.
        ")
                        (reparse-symbol indented_block_body) [93279 94288])
                    ("to_integral_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94315 94319])
                            ("rounding" variable nil (reparse-symbol function_parameters) [94321 94329])
                            ("context" variable nil (reparse-symbol function_parameters) [94336 94343]))                          
                        :documentation "Rounds to the nearest integer, without raising inexact, rounded.")
                        (reparse-symbol indented_block_body) [94293 94843])
                    ("to_integral" variable nil (reparse-symbol indented_block_body) [94930 94961])
                    ("sqrt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94976 94980])
                            ("context" variable nil (reparse-symbol function_parameters) [94982 94989]))                          
                        :documentation "Return the square root of self.")
                        (reparse-symbol indented_block_body) [94967 98493])
                    ("max" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98506 98510])
                            ("other" variable nil (reparse-symbol function_parameters) [98512 98517])
                            ("context" variable nil (reparse-symbol function_parameters) [98519 98526]))                          
                        :documentation "Returns the larger value.

        Like max(self, other) except if one is not a number, returns
        NaN (and signals if one is sNaN).  Also rounds.
        ")
                        (reparse-symbol indented_block_body) [98498 99966])
                    ("min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99979 99983])
                            ("other" variable nil (reparse-symbol function_parameters) [99985 99990])
                            ("context" variable nil (reparse-symbol function_parameters) [99992 99999]))                          
                        :documentation "Returns the smaller value.

        Like min(self, other) except if one is not a number, returns
        NaN (and signals if one is sNaN).  Also rounds.
        ")
                        (reparse-symbol indented_block_body) [99971 100992])
                    ("_isinteger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101012 101016]))                          
                        :documentation "Returns whether self is an integer")
                        (reparse-symbol indented_block_body) [100997 101247])
                    ("_iseven" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101264 101268]))                          
                        :documentation "Returns True if self is even.  Assumes self is an integer.")
                        (reparse-symbol indented_block_body) [101252 101456])
                    ("adjusted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101474 101478]))                          
                        :documentation "Return the adjusted exponent of self")
                        (reparse-symbol indented_block_body) [101461 101692])
                    ("canonical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101711 101715])
                            ("context" variable nil (reparse-symbol function_parameters) [101717 101724]))                          
                        :documentation "Returns the same Decimal object.

        As we do not have different encodings for the same number, the
        received object already is in its canonical form.
        ")
                        (reparse-symbol indented_block_body) [101697 101938])
                    ("compare_signal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101962 101966])
                            ("other" variable nil (reparse-symbol function_parameters) [101968 101973])
                            ("context" variable nil (reparse-symbol function_parameters) [101975 101982]))                          
                        :documentation "Compares self to the other operand numerically.

        It's pretty much like compare(), but all NaNs signal, with signaling
        NaNs taking precedence over quiet NaNs.
        ")
                        (reparse-symbol indented_block_body) [101943 102387])
                    ("compare_total" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [102410 102414])
                            ("other" variable nil (reparse-symbol function_parameters) [102416 102421]))                          
                        :documentation "Compares self to other using the abstract representations.

        This is not like the standard compare, which use their numerical
        value. Note that a total ordering is defined for all possible abstract
        representations.
        ")
                        (reparse-symbol indented_block_body) [102392 104711])
                    ("compare_total_mag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104739 104743])
                            ("other" variable nil (reparse-symbol function_parameters) [104745 104750]))                          
                        :documentation "Compares self to other using abstract repr., ignoring sign.

        Like compare_total, but with operand's sign ignored and assumed to be 0.
        ")
                        (reparse-symbol indented_block_body) [104717 105062])
                    ("copy_abs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105080 105084]))                          
                        :documentation "Returns a copy with the sign set to 0. ")
                        (reparse-symbol indented_block_body) [105067 105216])
                    ("copy_negate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105237 105241]))                          
                        :documentation "Returns a copy with the sign inverted.")
                        (reparse-symbol indented_block_body) [105221 105492])
                    ("copy_sign" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105511 105515])
                            ("other" variable nil (reparse-symbol function_parameters) [105517 105522]))                          
                        :documentation "Returns self with the sign of other.")
                        (reparse-symbol indented_block_body) [105497 105745])
                    ("exp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105758 105762])
                            ("context" variable nil (reparse-symbol function_parameters) [105764 105771]))                          
                        :documentation "Returns e ** self.")
                        (reparse-symbol indented_block_body) [105750 108432])
                    ("is_canonical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108454 108458]))                          
                        :documentation "Return True if self is canonical; otherwise return False.

        Currently, the encoding of a Decimal instance is always
        canonical, so this method returns True for any Decimal.
        ")
                        (reparse-symbol indented_block_body) [108437 108691])
                    ("is_finite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108710 108714]))                          
                        :documentation "Return True if self is finite; otherwise return False.

        A Decimal instance is considered finite if it is neither
        infinite nor a NaN.
        ")
                        (reparse-symbol indented_block_body) [108696 108925])
                    ("is_infinite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108946 108950]))                          
                        :documentation "Return True if self is infinite; otherwise return False.")
                        (reparse-symbol indented_block_body) [108930 109056])
                    ("is_nan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109072 109076]))                          
                        :documentation "Return True if self is a qNaN or sNaN; otherwise return False.")
                        (reparse-symbol indented_block_body) [109061 109195])
                    ("is_normal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109214 109218])
                            ("context" variable nil (reparse-symbol function_parameters) [109220 109227]))                          
                        :documentation "Return True if self is a normal number; otherwise return False.")
                        (reparse-symbol indented_block_body) [109200 109489])
                    ("is_qnan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109506 109510]))                          
                        :documentation "Return True if self is a quiet NaN; otherwise return False.")
                        (reparse-symbol indented_block_body) [109494 109619])
                    ("is_signed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109638 109642]))                          
                        :documentation "Return True if self is negative; otherwise return False.")
                        (reparse-symbol indented_block_body) [109624 109747])
                    ("is_snan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109764 109768]))                          
                        :documentation "Return True if self is a signaling NaN; otherwise return False.")
                        (reparse-symbol indented_block_body) [109752 109881])
                    ("is_subnormal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109903 109907])
                            ("context" variable nil (reparse-symbol function_parameters) [109909 109916]))                          
                        :documentation "Return True if self is subnormal; otherwise return False.")
                        (reparse-symbol indented_block_body) [109886 110171])
                    ("is_zero" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110188 110192]))                          
                        :documentation "Return True if self is a zero; otherwise return False.")
                        (reparse-symbol indented_block_body) [110176 110321])
                    ("_ln_exp_bound" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [110344 110348]))                          
                        :documentation "Compute a lower bound for the adjusted exponent of self.ln().
        In other words, compute r such that self.ln() >= 10**r.  Assumes
        that self is finite and positive and that self != 1.
        ")
                        (reparse-symbol indented_block_body) [110326 111232])
                    ("ln" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111245 111249])
                            ("context" variable nil (reparse-symbol function_parameters) [111251 111258]))                          
                        :documentation "Returns the natural (base e) logarithm of self.")
                        (reparse-symbol indented_block_body) [111238 112779])
                    ("_log10_exp_bound" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112805 112809]))                          
                        :documentation "Compute a lower bound for the adjusted exponent of self.log10().
        In other words, find r such that self.log10() >= 10**r.
        Assumes that self is finite and positive and that self != 1.
        ")
                        (reparse-symbol indented_block_body) [112784 113921])
                    ("log10" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113936 113940])
                            ("context" variable nil (reparse-symbol function_parameters) [113942 113949]))                          
                        :documentation "Returns the base 10 logarithm of self.")
                        (reparse-symbol indented_block_body) [113926 115652])
                    ("logb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115666 115670])
                            ("context" variable nil (reparse-symbol function_parameters) [115672 115679]))                          
                        :documentation " Returns the exponent of the magnitude of self's MSD.

        The result is the integer which is the exponent of the magnitude
        of the most significant digit of self (as though it were truncated
        to a single digit while maintaining the value of that digit and
        without limiting the resulting exponent).
        ")
                        (reparse-symbol indented_block_body) [115657 116683])
                    ("_islogical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116703 116707]))                          
                        :documentation "Return True if self is a logical operand.

        For being logical, it must be a finite number with a sign of 0,
        an exponent of 0, and a coefficient whose digits must all be
        either 0 or 1.
        ")
                        (reparse-symbol indented_block_body) [116688 117122])
                    ("_fill_logical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117145 117149])
                            ("context" variable nil (reparse-symbol function_parameters) [117151 117158])
                            ("opa" variable nil (reparse-symbol function_parameters) [117160 117163])
                            ("opb" variable nil (reparse-symbol function_parameters) [117165 117168]))                          )
                        (reparse-symbol indented_block_body) [117127 117495])
                    ("logical_and" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117516 117520])
                            ("other" variable nil (reparse-symbol function_parameters) [117522 117527])
                            ("context" variable nil (reparse-symbol function_parameters) [117529 117536]))                          
                        :documentation "Applies an 'and' operation between self and other's digits.")
                        (reparse-symbol indented_block_body) [117500 118150])
                    ("logical_invert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118174 118178])
                            ("context" variable nil (reparse-symbol function_parameters) [118180 118187]))                          
                        :documentation "Invert all its digits.")
                        (reparse-symbol indented_block_body) [118155 118408])
                    ("logical_or" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118428 118432])
                            ("other" variable nil (reparse-symbol function_parameters) [118434 118439])
                            ("context" variable nil (reparse-symbol function_parameters) [118441 118448]))                          
                        :documentation "Applies an 'or' operation between self and other's digits.")
                        (reparse-symbol indented_block_body) [118413 119061])
                    ("logical_xor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119082 119086])
                            ("other" variable nil (reparse-symbol function_parameters) [119088 119093])
                            ("context" variable nil (reparse-symbol function_parameters) [119095 119102]))                          
                        :documentation "Applies an 'xor' operation between self and other's digits.")
                        (reparse-symbol indented_block_body) [119066 119716])
                    ("max_mag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119733 119737])
                            ("other" variable nil (reparse-symbol function_parameters) [119739 119744])
                            ("context" variable nil (reparse-symbol function_parameters) [119746 119753]))                          
                        :documentation "Compares the values numerically with their sign ignored.")
                        (reparse-symbol indented_block_body) [119721 120663])
                    ("min_mag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120680 120684])
                            ("other" variable nil (reparse-symbol function_parameters) [120686 120691])
                            ("context" variable nil (reparse-symbol function_parameters) [120693 120700]))                          
                        :documentation "Compares the values numerically with their sign ignored.")
                        (reparse-symbol indented_block_body) [120668 121610])
                    ("next_minus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121630 121634])
                            ("context" variable nil (reparse-symbol function_parameters) [121636 121643]))                          
                        :documentation "Returns the largest representable number smaller than itself.")
                        (reparse-symbol indented_block_body) [121615 122380])
                    ("next_plus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122399 122403])
                            ("context" variable nil (reparse-symbol function_parameters) [122405 122412]))                          
                        :documentation "Returns the smallest representable number larger than itself.")
                        (reparse-symbol indented_block_body) [122385 123143])
                    ("next_toward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123164 123168])
                            ("other" variable nil (reparse-symbol function_parameters) [123170 123175])
                            ("context" variable nil (reparse-symbol function_parameters) [123177 123184]))                          
                        :documentation "Returns the number closest to self, in the direction towards other.

        The result is the closest representable number to self
        (excluding self) that is in the direction towards other,
        unless both have the same value.  If the two operands are
        numerically equal, then the result is a copy of self with the
        sign set to be the same as the sign of other.
        ")
                        (reparse-symbol indented_block_body) [123148 124791])
                    ("number_class" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124813 124817])
                            ("context" variable nil (reparse-symbol function_parameters) [124819 124826]))                          
                        :documentation "Returns an indication of the class of self.

        The class is one of the following strings:
          sNaN
          NaN
          -Infinity
          -Normal
          -Subnormal
          -Zero
          +Zero
          +Subnormal
          +Normal
          +Infinity
        ")
                        (reparse-symbol indented_block_body) [124796 125883])
                    ("radix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125898 125902]))                          
                        :documentation "Just returns 10, as this is Decimal, :)")
                        (reparse-symbol indented_block_body) [125888 125986])
                    ("rotate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [126002 126006])
                            ("other" variable nil (reparse-symbol function_parameters) [126008 126013])
                            ("context" variable nil (reparse-symbol function_parameters) [126015 126022]))                          
                        :documentation "Returns a rotated copy of self, value-of-other times.")
                        (reparse-symbol indented_block_body) [125991 127023])
                    ("scaleb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127039 127043])
                            ("other" variable nil (reparse-symbol function_parameters) [127045 127050])
                            ("context" variable nil (reparse-symbol function_parameters) [127052 127059]))                          
                        :documentation "Returns self operand after adding the second value to its exp.")
                        (reparse-symbol indented_block_body) [127028 127832])
                    ("shift" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127847 127851])
                            ("other" variable nil (reparse-symbol function_parameters) [127853 127858])
                            ("context" variable nil (reparse-symbol function_parameters) [127860 127867]))                          
                        :documentation "Returns a shifted copy of self, value-of-other times.")
                        (reparse-symbol indented_block_body) [127837 128982])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129049 129053]))                          )
                        (reparse-symbol indented_block_body) [129034 129102])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129120 129124]))                          )
                        (reparse-symbol indented_block_body) [129107 129275])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129297 129301])
                            ("memo" variable nil (reparse-symbol function_parameters) [129303 129307]))                          )
                        (reparse-symbol indented_block_body) [129280 129448])
                    ("__format__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [129602 129606])
                            ("specifier" variable nil (reparse-symbol function_parameters) [129608 129617])
                            ("context" variable nil (reparse-symbol function_parameters) [129619 129626])
                            ("_localeconv" variable nil (reparse-symbol function_parameters) [129633 129644]))                          
                        :documentation "Format a Decimal instance according to the given specifier.

        The specifier should be a standard format specifier, with the
        form described in PEP 3101.  Formatting types 'e', 'E', 'f',
        'F', 'g', 'G', 'n' and '%' are supported.  If the formatting
        type is omitted it defaults to 'g' or 'G', depending on the
        value of context.capitals.
        ")
                        (reparse-symbol indented_block_body) [129587 132961]))                  
                :type "class")
                nil [17454 132961])
            ("_dec_from_triple" function
               (:documentation "Create a decimal instance directly, without any validation,
    normalization (e.g. removal of leading zeros) or argument
    conversion.

    This function is for *internal use only*.
    "
                :arguments 
                  ( ("sign" variable nil (reparse-symbol function_parameters) [132983 132987])
                    ("coefficient" variable nil (reparse-symbol function_parameters) [132989 133000])
                    ("exponent" variable nil (reparse-symbol function_parameters) [133002 133010])
                    ("special" variable nil (reparse-symbol function_parameters) [133012 133019]))                  )
                nil [132962 133387])
            ("_numbers" code nil nil [133547 133580])
            ("_ContextManager" type
               (:documentation "Context manager class to support localcontext().

      Sets a copy of the supplied context in __enter__() and restores
      the previous decimal context in __exit__()
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [133920 133957]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133892 133896])
                            ("new_context" variable nil (reparse-symbol function_parameters) [133898 133909]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [133879 133958])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133976 133980]))                          )
                        (reparse-symbol indented_block_body) [133962 134094])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134111 134115])
                            ("t" variable nil (reparse-symbol function_parameters) [134117 134118])
                            ("v" variable nil (reparse-symbol function_parameters) [134120 134121])
                            ("tb" variable nil (reparse-symbol function_parameters) [134123 134125]))                          )
                        (reparse-symbol indented_block_body) [134098 134167]))                  
                :type "class")
                nil [133660 134167])
            ("Context" type
               (:documentation "Contains the context for a Decimal instance.

    Contains:
    prec - precision (for use in rounding, division, square roots..)
    rounding - rounding type (how you round)
    traps - If traps[exception] = 1, then the exception is
                    raised when it is caused.  Otherwise, a value is
                    substituted in.
    flags  - When an exception is caused, flags[exception] is set.
             (Whether or not the trap_enabler is set)
             Should be reset by user of Decimal instance.
    Emin -   Minimum exponent
    Emax -   Maximum exponent
    capitals -      If 1, 1*10^1 is printed as 1E+1.
                    If 0, printed as 1e1
    _clamp - If 1, change exponents if too high (Default 0)
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("try" code nil (reparse-symbol indented_block_body) [135267 135347])
                            ("dc" code nil (reparse-symbol indented_block_body) [135398 135405])
                            ("dc" code nil (reparse-symbol indented_block_body) [135468 135479])
                            ("dc" code nil (reparse-symbol indented_block_body) [135530 135537])
                            ("dc" code nil (reparse-symbol indented_block_body) [135588 135595])
                            ("dc" code nil (reparse-symbol indented_block_body) [135658 135669])
                            ("dc" code nil (reparse-symbol indented_block_body) [135726 135735])
                            ("if" code nil (reparse-symbol indented_block_body) [135745 135872])
                            ("if" code nil (reparse-symbol indented_block_body) [135881 136097])
                            ("if" code nil (reparse-symbol indented_block_body) [136106 136333]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134955 134959])
                            ("prec" variable nil (reparse-symbol function_parameters) [134961 134965])
                            ("rounding" variable nil (reparse-symbol function_parameters) [134972 134980])
                            ("traps" variable nil (reparse-symbol function_parameters) [135004 135009])
                            ("flags" variable nil (reparse-symbol function_parameters) [135016 135021])
                            ("Emin" variable nil (reparse-symbol function_parameters) [135045 135049])
                            ("Emax" variable nil (reparse-symbol function_parameters) [135056 135060])
                            ("capitals" variable nil (reparse-symbol function_parameters) [135084 135092])
                            ("_clamp" variable nil (reparse-symbol function_parameters) [135099 135105])
                            ("_ignored_flags" variable nil (reparse-symbol function_parameters) [135126 135140]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [134942 136333])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136351 136355]))                          
                        :documentation "Show the current context.")
                        (reparse-symbol indented_block_body) [136338 136851])
                    ("clear_flags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136872 136876]))                          
                        :documentation "Reset all flags to zero")
                        (reparse-symbol indented_block_body) [136856 136982])
                    ("_shallow_copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137005 137009]))                          
                        :documentation "Returns a shallow copy from self.")
                        (reparse-symbol indented_block_body) [136987 137262])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137276 137280]))                          
                        :documentation "Returns a deep copy from self.")
                        (reparse-symbol indented_block_body) [137267 137544])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [137548 137563])
                    ("_raise_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137586 137590])
                            ("condition" variable nil (reparse-symbol function_parameters) [137592 137601])
                            ("explanation" variable nil (reparse-symbol function_parameters) [137603 137614])
                            ("args" variable nil (reparse-symbol function_parameters) [137623 137628]))                          
                        :documentation "Handles an error

        If the flag is in _ignored_flags, returns the default response.
        Otherwise, it sets the flag, then, if the corresponding
        trap_enabler is set, it reraises the exception.  Otherwise, it returns
        the default value after setting the flag.
        ")
                        (reparse-symbol indented_block_body) [137569 138424])
                    ("_ignore_all_flags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138451 138455]))                          
                        :documentation "Ignore all flags, if they are raised")
                        (reparse-symbol indented_block_body) [138429 138554])
                    ("_ignore_flags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138577 138581])
                            ("flags" variable nil (reparse-symbol function_parameters) [138583 138589]))                          
                        :documentation "Ignore the flags, if they are raised")
                        (reparse-symbol indented_block_body) [138559 138828])
                    ("_regard_flags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138851 138855])
                            ("flags" variable nil (reparse-symbol function_parameters) [138857 138863]))                          
                        :documentation "Stop ignoring the flags, if they are raised")
                        (reparse-symbol indented_block_body) [138833 139082])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [139153 139168])
                    ("Etiny" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139184 139188]))                          
                        :documentation "Returns Etiny (= Emin - prec + 1)")
                        (reparse-symbol indented_block_body) [139174 139285])
                    ("Etop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139299 139303]))                          
                        :documentation "Returns maximum exponent (= Emax - prec + 1)")
                        (reparse-symbol indented_block_body) [139290 139411])
                    ("_set_rounding" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139434 139438])
                            ("type" variable nil (reparse-symbol function_parameters) [139440 139444]))                          
                        :documentation "Sets the rounding type.

        Sets the rounding type, and returns the current (previous)
        rounding type.  Often used like:

        context = context.copy()
        # so you don't change the calling context
        # if an error occurs in the middle.
        rounding = context._set_rounding(ROUND_UP)
        val = self.__sub__(other, context=context)
        context._set_rounding(rounding)

        This will make it round up for that operation.
        ")
                        (reparse-symbol indented_block_body) [139416 140014])
                    ("create_decimal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140038 140042])
                            ("num" variable nil (reparse-symbol function_parameters) [140044 140047]))                          
                        :documentation "Creates a new Decimal instance but using self as context.

        This method implements the to-number operation of the
        IBM Decimal specification.")
                        (reparse-symbol indented_block_body) [140019 140731])
                    ("create_decimal_from_float" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140766 140770])
                            ("f" variable nil (reparse-symbol function_parameters) [140772 140773]))                          
                        :documentation "Creates a new Decimal instance from a float but rounding using self
        as the context.

        >>> context = Context(prec=5, rounding=ROUND_DOWN)
        >>> context.create_decimal_from_float(3.1415926535897932)
        Decimal('3.1415')
        >>> context = Context(prec=5, traps=[Inexact])
        >>> context.create_decimal_from_float(3.1415926535897932)
        Traceback (most recent call last):
            ...
        Inexact: None

        ")
                        (reparse-symbol indented_block_body) [140736 141377])
                    ("abs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [141404 141408])
                            ("a" variable nil (reparse-symbol function_parameters) [141410 141411]))                          
                        :documentation "Returns the absolute value of the operand.

        If the operand is negative, the result is the same as using the minus
        operation on the operand.  Otherwise, the result is the same as using
        the plus operation on the operand.

        >>> ExtendedContext.abs(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.abs(Decimal('-100'))
        Decimal('100')
        >>> ExtendedContext.abs(Decimal('101.5'))
        Decimal('101.5')
        >>> ExtendedContext.abs(Decimal('-101.5'))
        Decimal('101.5')
        >>> ExtendedContext.abs(-1)
        Decimal('1')
        ")
                        (reparse-symbol indented_block_body) [141396 142115])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142128 142132])
                            ("a" variable nil (reparse-symbol function_parameters) [142134 142135])
                            ("b" variable nil (reparse-symbol function_parameters) [142137 142138]))                          
                        :documentation "Return the sum of the two operands.

        >>> ExtendedContext.add(Decimal('12'), Decimal('7.00'))
        Decimal('19.00')
        >>> ExtendedContext.add(Decimal('1E+2'), Decimal('1.01E+4'))
        Decimal('1.02E+4')
        >>> ExtendedContext.add(1, Decimal(2))
        Decimal('3')
        >>> ExtendedContext.add(Decimal(8), 5)
        Decimal('13')
        >>> ExtendedContext.add(5, 5)
        Decimal('10')
        ")
                        (reparse-symbol indented_block_body) [142120 142800])
                    ("_apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142816 142820])
                            ("a" variable nil (reparse-symbol function_parameters) [142822 142823]))                          )
                        (reparse-symbol indented_block_body) [142805 142859])
                    ("canonical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142878 142882])
                            ("a" variable nil (reparse-symbol function_parameters) [142884 142885]))                          
                        :documentation "Returns the same Decimal object.

        As we do not have different encodings for the same number, the
        received object already is in its canonical form.

        >>> ExtendedContext.canonical(Decimal('2.50'))
        Decimal('2.50')
        ")
                        (reparse-symbol indented_block_body) [142864 143195])
                    ("compare" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [143212 143216])
                            ("a" variable nil (reparse-symbol function_parameters) [143218 143219])
                            ("b" variable nil (reparse-symbol function_parameters) [143221 143222]))                          
                        :documentation "Compares values numerically.

        If the signs of the operands differ, a value representing each operand
        ('-1' if the operand is less than zero, '0' if the operand is zero or
        negative zero, or '1' if the operand is greater than zero) is used in
        place of that operand for the comparison instead of the actual
        operand.

        The comparison is then effected by subtracting the second operand from
        the first and then returning a value according to the result of the
        subtraction: '-1' if the result is less than zero, '0' if the result is
        zero or negative zero, or '1' if the result is greater than zero.

        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.1'))
        Decimal('0')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.10'))
        Decimal('0')
        >>> ExtendedContext.compare(Decimal('3'), Decimal('2.1'))
        Decimal('1')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('-3'))
        Decimal('1')
        >>> ExtendedContext.compare(Decimal('-3'), Decimal('2.1'))
        Decimal('-1')
        >>> ExtendedContext.compare(1, 2)
        Decimal('-1')
        >>> ExtendedContext.compare(Decimal(1), 2)
        Decimal('-1')
        >>> ExtendedContext.compare(1, Decimal(2))
        Decimal('-1')
        ")
                        (reparse-symbol indented_block_body) [143200 144739])
                    ("compare_signal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144763 144767])
                            ("a" variable nil (reparse-symbol function_parameters) [144769 144770])
                            ("b" variable nil (reparse-symbol function_parameters) [144772 144773]))                          
                        :documentation "Compares the values of the two operands numerically.

        It's pretty much like compare(), but all NaNs signal, with signaling
        NaNs taking precedence over quiet NaNs.

        >>> c = ExtendedContext
        >>> c.compare_signal(Decimal('2.1'), Decimal('3'))
        Decimal('-1')
        >>> c.compare_signal(Decimal('2.1'), Decimal('2.1'))
        Decimal('0')
        >>> c.flags[InvalidOperation] = 0
        >>> print c.flags[InvalidOperation]
        0
        >>> c.compare_signal(Decimal('NaN'), Decimal('2.1'))
        Decimal('NaN')
        >>> print c.flags[InvalidOperation]
        1
        >>> c.flags[InvalidOperation] = 0
        >>> print c.flags[InvalidOperation]
        0
        >>> c.compare_signal(Decimal('sNaN'), Decimal('2.1'))
        Decimal('NaN')
        >>> print c.flags[InvalidOperation]
        1
        >>> c.compare_signal(-1, 2)
        Decimal('-1')
        >>> c.compare_signal(Decimal(-1), 2)
        Decimal('-1')
        >>> c.compare_signal(-1, Decimal(2))
        Decimal('-1')
        ")
                        (reparse-symbol indented_block_body) [144744 145928])
                    ("compare_total" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145951 145955])
                            ("a" variable nil (reparse-symbol function_parameters) [145957 145958])
                            ("b" variable nil (reparse-symbol function_parameters) [145960 145961]))                          
                        :documentation "Compares two operands using their abstract representation.

        This is not like the standard compare, which use their numerical
        value. Note that a total ordering is defined for all possible abstract
        representations.

        >>> ExtendedContext.compare_total(Decimal('12.73'), Decimal('127.9'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('-127'),  Decimal('12'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.3'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.30'))
        Decimal('0')
        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('12.300'))
        Decimal('1')
        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('NaN'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(1, 2)
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal(1), 2)
        Decimal('-1')
        >>> ExtendedContext.compare_total(1, Decimal(2))
        Decimal('-1')
        ")
                        (reparse-symbol indented_block_body) [145933 147124])
                    ("compare_total_mag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147151 147155])
                            ("a" variable nil (reparse-symbol function_parameters) [147157 147158])
                            ("b" variable nil (reparse-symbol function_parameters) [147160 147161]))                          
                        :documentation "Compares two operands using their abstract representation ignoring sign.

        Like compare_total, but with operand's sign ignored and assumed to be 0.
        ")
                        (reparse-symbol indented_block_body) [147129 147424])
                    ("copy_abs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147442 147446])
                            ("a" variable nil (reparse-symbol function_parameters) [147448 147449]))                          
                        :documentation "Returns a copy of the operand with the sign set to 0.

        >>> ExtendedContext.copy_abs(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.copy_abs(Decimal('-100'))
        Decimal('100')
        >>> ExtendedContext.copy_abs(-1)
        Decimal('1')
        ")
                        (reparse-symbol indented_block_body) [147429 147817])
                    ("copy_decimal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147839 147843])
                            ("a" variable nil (reparse-symbol function_parameters) [147845 147846]))                          
                        :documentation "Returns a copy of the decimal object.

        >>> ExtendedContext.copy_decimal(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.copy_decimal(Decimal('-1.00'))
        Decimal('-1.00')
        >>> ExtendedContext.copy_decimal(1)
        Decimal('1')
        ")
                        (reparse-symbol indented_block_body) [147822 148210])
                    ("copy_negate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [148231 148235])
                            ("a" variable nil (reparse-symbol function_parameters) [148237 148238]))                          
                        :documentation "Returns a copy of the operand with the sign inverted.

        >>> ExtendedContext.copy_negate(Decimal('101.5'))
        Decimal('-101.5')
        >>> ExtendedContext.copy_negate(Decimal('-101.5'))
        Decimal('101.5')
        >>> ExtendedContext.copy_negate(1)
        Decimal('-1')
        ")
                        (reparse-symbol indented_block_body) [148215 148627])
                    ("copy_sign" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [148646 148650])
                            ("a" variable nil (reparse-symbol function_parameters) [148652 148653])
                            ("b" variable nil (reparse-symbol function_parameters) [148655 148656]))                          
                        :documentation "Copies the second operand's sign to the first one.

        In detail, it returns a copy of the first operand with the sign
        equal to the sign of the second operand.

        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('7.33'))
        Decimal('1.50')
        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('7.33'))
        Decimal('1.50')
        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('-7.33'))
        Decimal('-1.50')
        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('-7.33'))
        Decimal('-1.50')
        >>> ExtendedContext.copy_sign(1, -2)
        Decimal('-1')
        >>> ExtendedContext.copy_sign(Decimal(1), -2)
        Decimal('-1')
        >>> ExtendedContext.copy_sign(1, Decimal(-2))
        Decimal('-1')
        ")
                        (reparse-symbol indented_block_body) [148632 149541])
                    ("divide" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149557 149561])
                            ("a" variable nil (reparse-symbol function_parameters) [149563 149564])
                            ("b" variable nil (reparse-symbol function_parameters) [149566 149567]))                          
                        :documentation "Decimal division in a specified context.

        >>> ExtendedContext.divide(Decimal('1'), Decimal('3'))
        Decimal('0.333333333')
        >>> ExtendedContext.divide(Decimal('2'), Decimal('3'))
        Decimal('0.666666667')
        >>> ExtendedContext.divide(Decimal('5'), Decimal('2'))
        Decimal('2.5')
        >>> ExtendedContext.divide(Decimal('1'), Decimal('10'))
        Decimal('0.1')
        >>> ExtendedContext.divide(Decimal('12'), Decimal('12'))
        Decimal('1')
        >>> ExtendedContext.divide(Decimal('8.00'), Decimal('2'))
        Decimal('4.00')
        >>> ExtendedContext.divide(Decimal('2.400'), Decimal('2.0'))
        Decimal('1.20')
        >>> ExtendedContext.divide(Decimal('1000'), Decimal('100'))
        Decimal('10')
        >>> ExtendedContext.divide(Decimal('1000'), Decimal('1'))
        Decimal('1000')
        >>> ExtendedContext.divide(Decimal('2.40E+6'), Decimal('2'))
        Decimal('1.20E+6')
        >>> ExtendedContext.divide(5, 5)
        Decimal('1')
        >>> ExtendedContext.divide(Decimal(5), 5)
        Decimal('1')
        >>> ExtendedContext.divide(5, Decimal(5))
        Decimal('1')
        ")
                        (reparse-symbol indented_block_body) [149546 150962])
                    ("divide_int" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150982 150986])
                            ("a" variable nil (reparse-symbol function_parameters) [150988 150989])
                            ("b" variable nil (reparse-symbol function_parameters) [150991 150992]))                          
                        :documentation "Divides two numbers and returns the integer part of the result.

        >>> ExtendedContext.divide_int(Decimal('2'), Decimal('3'))
        Decimal('0')
        >>> ExtendedContext.divide_int(Decimal('10'), Decimal('3'))
        Decimal('3')
        >>> ExtendedContext.divide_int(Decimal('1'), Decimal('0.3'))
        Decimal('3')
        >>> ExtendedContext.divide_int(10, 3)
        Decimal('3')
        >>> ExtendedContext.divide_int(Decimal(10), 3)
        Decimal('3')
        >>> ExtendedContext.divide_int(10, Decimal(3))
        Decimal('3')
        ")
                        (reparse-symbol indented_block_body) [150967 151791])
                    ("divmod" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [151807 151811])
                            ("a" variable nil (reparse-symbol function_parameters) [151813 151814])
                            ("b" variable nil (reparse-symbol function_parameters) [151816 151817]))                          
                        :documentation "Return (a // b, a % b).

        >>> ExtendedContext.divmod(Decimal(8), Decimal(3))
        (Decimal('2'), Decimal('2'))
        >>> ExtendedContext.divmod(Decimal(8), Decimal(4))
        (Decimal('2'), Decimal('0'))
        >>> ExtendedContext.divmod(8, 4)
        (Decimal('2'), Decimal('0'))
        >>> ExtendedContext.divmod(Decimal(8), 4)
        (Decimal('2'), Decimal('0'))
        >>> ExtendedContext.divmod(8, Decimal(4))
        (Decimal('2'), Decimal('0'))
        ")
                        (reparse-symbol indented_block_body) [151796 152532])
                    ("exp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [152545 152549])
                            ("a" variable nil (reparse-symbol function_parameters) [152551 152552]))                          
                        :documentation "Returns e ** a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.exp(Decimal('-Infinity'))
        Decimal('0')
        >>> c.exp(Decimal('-1'))
        Decimal('0.367879441')
        >>> c.exp(Decimal('0'))
        Decimal('1')
        >>> c.exp(Decimal('1'))
        Decimal('2.71828183')
        >>> c.exp(Decimal('0.693147181'))
        Decimal('2.00000000')
        >>> c.exp(Decimal('+Infinity'))
        Decimal('Infinity')
        >>> c.exp(10)
        Decimal('22026.4658')
        ")
                        (reparse-symbol indented_block_body) [152537 153195])
                    ("fma" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153208 153212])
                            ("a" variable nil (reparse-symbol function_parameters) [153214 153215])
                            ("b" variable nil (reparse-symbol function_parameters) [153217 153218])
                            ("c" variable nil (reparse-symbol function_parameters) [153220 153221]))                          
                        :documentation "Returns a multiplied by b, plus c.

        The first two operands are multiplied together, using multiply,
        the third operand is then added to the result of that
        multiplication, using add, all with only one final rounding.

        >>> ExtendedContext.fma(Decimal('3'), Decimal('5'), Decimal('7'))
        Decimal('22')
        >>> ExtendedContext.fma(Decimal('3'), Decimal('-5'), Decimal('7'))
        Decimal('-8')
        >>> ExtendedContext.fma(Decimal('888565290'), Decimal('1557.96930'), Decimal('-86087.7578'))
        Decimal('1.38435736E+12')
        >>> ExtendedContext.fma(1, 3, 4)
        Decimal('7')
        >>> ExtendedContext.fma(1, Decimal(3), 4)
        Decimal('7')
        >>> ExtendedContext.fma(1, 3, Decimal(4))
        Decimal('7')
        ")
                        (reparse-symbol indented_block_body) [153200 154104])
                    ("is_canonical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154126 154130])
                            ("a" variable nil (reparse-symbol function_parameters) [154132 154133]))                          
                        :documentation "Return True if the operand is canonical; otherwise return False.

        Currently, the encoding of a Decimal instance is always
        canonical, so this method returns True for any Decimal.

        >>> ExtendedContext.is_canonical(Decimal('2.50'))
        True
        ")
                        (reparse-symbol indented_block_body) [154109 154457])
                    ("is_finite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154476 154480])
                            ("a" variable nil (reparse-symbol function_parameters) [154482 154483]))                          
                        :documentation "Return True if the operand is finite; otherwise return False.

        A Decimal instance is considered finite if it is neither
        infinite nor a NaN.

        >>> ExtendedContext.is_finite(Decimal('2.50'))
        True
        >>> ExtendedContext.is_finite(Decimal('-0.3'))
        True
        >>> ExtendedContext.is_finite(Decimal('0'))
        True
        >>> ExtendedContext.is_finite(Decimal('Inf'))
        False
        >>> ExtendedContext.is_finite(Decimal('NaN'))
        False
        >>> ExtendedContext.is_finite(1)
        True
        ")
                        (reparse-symbol indented_block_body) [154462 155130])
                    ("is_infinite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [155151 155155])
                            ("a" variable nil (reparse-symbol function_parameters) [155157 155158]))                          
                        :documentation "Return True if the operand is infinite; otherwise return False.

        >>> ExtendedContext.is_infinite(Decimal('2.50'))
        False
        >>> ExtendedContext.is_infinite(Decimal('-Inf'))
        True
        >>> ExtendedContext.is_infinite(Decimal('NaN'))
        False
        >>> ExtendedContext.is_infinite(1)
        False
        ")
                        (reparse-symbol indented_block_body) [155135 155592])
                    ("is_nan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [155608 155612])
                            ("a" variable nil (reparse-symbol function_parameters) [155614 155615]))                          
                        :documentation "Return True if the operand is a qNaN or sNaN;
        otherwise return False.

        >>> ExtendedContext.is_nan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_nan(Decimal('NaN'))
        True
        >>> ExtendedContext.is_nan(Decimal('-sNaN'))
        True
        >>> ExtendedContext.is_nan(1)
        False
        ")
                        (reparse-symbol indented_block_body) [155597 156038])
                    ("is_normal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [156057 156061])
                            ("a" variable nil (reparse-symbol function_parameters) [156063 156064]))                          
                        :documentation "Return True if the operand is a normal number;
        otherwise return False.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.is_normal(Decimal('2.50'))
        True
        >>> c.is_normal(Decimal('0.1E-999'))
        False
        >>> c.is_normal(Decimal('0.00'))
        False
        >>> c.is_normal(Decimal('-Inf'))
        False
        >>> c.is_normal(Decimal('NaN'))
        False
        >>> c.is_normal(1)
        True
        ")
                        (reparse-symbol indented_block_body) [156043 156662])
                    ("is_qnan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [156679 156683])
                            ("a" variable nil (reparse-symbol function_parameters) [156685 156686]))                          
                        :documentation "Return True if the operand is a quiet NaN; otherwise return False.

        >>> ExtendedContext.is_qnan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_qnan(Decimal('NaN'))
        True
        >>> ExtendedContext.is_qnan(Decimal('sNaN'))
        False
        >>> ExtendedContext.is_qnan(1)
        False
        ")
                        (reparse-symbol indented_block_body) [156667 157103])
                    ("is_signed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [157122 157126])
                            ("a" variable nil (reparse-symbol function_parameters) [157128 157129]))                          
                        :documentation "Return True if the operand is negative; otherwise return False.

        >>> ExtendedContext.is_signed(Decimal('2.50'))
        False
        >>> ExtendedContext.is_signed(Decimal('-12'))
        True
        >>> ExtendedContext.is_signed(Decimal('-0'))
        True
        >>> ExtendedContext.is_signed(8)
        False
        >>> ExtendedContext.is_signed(-8)
        True
        ")
                        (reparse-symbol indented_block_body) [157108 157605])
                    ("is_snan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [157622 157626])
                            ("a" variable nil (reparse-symbol function_parameters) [157628 157629]))                          
                        :documentation "Return True if the operand is a signaling NaN;
        otherwise return False.

        >>> ExtendedContext.is_snan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_snan(Decimal('NaN'))
        False
        >>> ExtendedContext.is_snan(Decimal('sNaN'))
        True
        >>> ExtendedContext.is_snan(1)
        False
        ")
                        (reparse-symbol indented_block_body) [157610 158058])
                    ("is_subnormal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [158080 158084])
                            ("a" variable nil (reparse-symbol function_parameters) [158086 158087]))                          
                        :documentation "Return True if the operand is subnormal; otherwise return False.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.is_subnormal(Decimal('2.50'))
        False
        >>> c.is_subnormal(Decimal('0.1E-999'))
        True
        >>> c.is_subnormal(Decimal('0.00'))
        False
        >>> c.is_subnormal(Decimal('-Inf'))
        False
        >>> c.is_subnormal(Decimal('NaN'))
        False
        >>> c.is_subnormal(1)
        False
        ")
                        (reparse-symbol indented_block_body) [158063 158693])
                    ("is_zero" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [158710 158714])
                            ("a" variable nil (reparse-symbol function_parameters) [158716 158717]))                          
                        :documentation "Return True if the operand is a zero; otherwise return False.

        >>> ExtendedContext.is_zero(Decimal('0'))
        True
        >>> ExtendedContext.is_zero(Decimal('2.50'))
        False
        >>> ExtendedContext.is_zero(Decimal('-0E+2'))
        True
        >>> ExtendedContext.is_zero(1)
        False
        >>> ExtendedContext.is_zero(0)
        True
        ")
                        (reparse-symbol indented_block_body) [158698 159179])
                    ("ln" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159191 159195])
                            ("a" variable nil (reparse-symbol function_parameters) [159197 159198]))                          
                        :documentation "Returns the natural (base e) logarithm of the operand.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.ln(Decimal('0'))
        Decimal('-Infinity')
        >>> c.ln(Decimal('1.000'))
        Decimal('0')
        >>> c.ln(Decimal('2.71828183'))
        Decimal('1.00000000')
        >>> c.ln(Decimal('10'))
        Decimal('2.30258509')
        >>> c.ln(Decimal('+Infinity'))
        Decimal('Infinity')
        >>> c.ln(1)
        Decimal('0')
        ")
                        (reparse-symbol indented_block_body) [159184 159804])
                    ("log10" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159819 159823])
                            ("a" variable nil (reparse-symbol function_parameters) [159825 159826]))                          
                        :documentation "Returns the base 10 logarithm of the operand.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.log10(Decimal('0'))
        Decimal('-Infinity')
        >>> c.log10(Decimal('0.001'))
        Decimal('-3')
        >>> c.log10(Decimal('1.000'))
        Decimal('0')
        >>> c.log10(Decimal('2'))
        Decimal('0.301029996')
        >>> c.log10(Decimal('10'))
        Decimal('1')
        >>> c.log10(Decimal('70'))
        Decimal('1.84509804')
        >>> c.log10(Decimal('+Infinity'))
        Decimal('Infinity')
        >>> c.log10(0)
        Decimal('-Infinity')
        >>> c.log10(1)
        Decimal('0')
        ")
                        (reparse-symbol indented_block_body) [159809 160604])
                    ("logb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [160618 160622])
                            ("a" variable nil (reparse-symbol function_parameters) [160624 160625]))                          
                        :documentation " Returns the exponent of the magnitude of the operand's MSD.

        The result is the integer which is the exponent of the magnitude
        of the most significant digit of the operand (as though the
        operand were truncated to a single digit while maintaining the
        value of that digit and without limiting the resulting exponent).

        >>> ExtendedContext.logb(Decimal('250'))
        Decimal('2')
        >>> ExtendedContext.logb(Decimal('2.50'))
        Decimal('0')
        >>> ExtendedContext.logb(Decimal('0.03'))
        Decimal('-2')
        >>> ExtendedContext.logb(Decimal('0'))
        Decimal('-Infinity')
        >>> ExtendedContext.logb(1)
        Decimal('0')
        >>> ExtendedContext.logb(10)
        Decimal('1')
        >>> ExtendedContext.logb(100)
        Decimal('2')
        ")
                        (reparse-symbol indented_block_body) [160609 161543])
                    ("logical_and" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161564 161568])
                            ("a" variable nil (reparse-symbol function_parameters) [161570 161571])
                            ("b" variable nil (reparse-symbol function_parameters) [161573 161574]))                          
                        :documentation "Applies the logical operation 'and' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('1'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_and(Decimal('1100'), Decimal('1010'))
        Decimal('1000')
        >>> ExtendedContext.logical_and(Decimal('1111'), Decimal('10'))
        Decimal('10')
        >>> ExtendedContext.logical_and(110, 1101)
        Decimal('100')
        >>> ExtendedContext.logical_and(Decimal(110), 1101)
        Decimal('100')
        >>> ExtendedContext.logical_and(110, Decimal(1101))
        Decimal('100')
        ")
                        (reparse-symbol indented_block_body) [161548 162598])
                    ("logical_invert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [162622 162626])
                            ("a" variable nil (reparse-symbol function_parameters) [162628 162629]))                          
                        :documentation "Invert all the digits in the operand.

        The operand must be a logical number.

        >>> ExtendedContext.logical_invert(Decimal('0'))
        Decimal('111111111')
        >>> ExtendedContext.logical_invert(Decimal('1'))
        Decimal('111111110')
        >>> ExtendedContext.logical_invert(Decimal('111111111'))
        Decimal('0')
        >>> ExtendedContext.logical_invert(Decimal('101010101'))
        Decimal('10101010')
        >>> ExtendedContext.logical_invert(1101)
        Decimal('111110010')
        ")
                        (reparse-symbol indented_block_body) [162603 163260])
                    ("logical_or" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163280 163284])
                            ("a" variable nil (reparse-symbol function_parameters) [163286 163287])
                            ("b" variable nil (reparse-symbol function_parameters) [163289 163290]))                          
                        :documentation "Applies the logical operation 'or' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('0'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1100'), Decimal('1010'))
        Decimal('1110')
        >>> ExtendedContext.logical_or(Decimal('1110'), Decimal('10'))
        Decimal('1110')
        >>> ExtendedContext.logical_or(110, 1101)
        Decimal('1111')
        >>> ExtendedContext.logical_or(Decimal(110), 1101)
        Decimal('1111')
        >>> ExtendedContext.logical_or(110, Decimal(1101))
        Decimal('1111')
        ")
                        (reparse-symbol indented_block_body) [163265 164308])
                    ("logical_xor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [164329 164333])
                            ("a" variable nil (reparse-symbol function_parameters) [164335 164336])
                            ("b" variable nil (reparse-symbol function_parameters) [164338 164339]))                          
                        :documentation "Applies the logical operation 'xor' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('0'))
        Decimal('1')
        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('1'))
        Decimal('0')
        >>> ExtendedContext.logical_xor(Decimal('1100'), Decimal('1010'))
        Decimal('110')
        >>> ExtendedContext.logical_xor(Decimal('1111'), Decimal('10'))
        Decimal('1101')
        >>> ExtendedContext.logical_xor(110, 1101)
        Decimal('1011')
        >>> ExtendedContext.logical_xor(Decimal(110), 1101)
        Decimal('1011')
        >>> ExtendedContext.logical_xor(110, Decimal(1101))
        Decimal('1011')
        ")
                        (reparse-symbol indented_block_body) [164313 165367])
                    ("max" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165380 165384])
                            ("a" variable nil (reparse-symbol function_parameters) [165386 165387])
                            ("b" variable nil (reparse-symbol function_parameters) [165389 165390]))                          
                        :documentation "max compares two values numerically and returns the maximum.

        If either operand is a NaN then the general rules apply.
        Otherwise, the operands are compared as though by the compare
        operation.  If they are numerically equal then the left-hand operand
        is chosen as the result.  Otherwise the maximum (closer to positive
        infinity) of the two operands is chosen as the result.

        >>> ExtendedContext.max(Decimal('3'), Decimal('2'))
        Decimal('3')
        >>> ExtendedContext.max(Decimal('-10'), Decimal('3'))
        Decimal('3')
        >>> ExtendedContext.max(Decimal('1.0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.max(Decimal('7'), Decimal('NaN'))
        Decimal('7')
        >>> ExtendedContext.max(1, 2)
        Decimal('2')
        >>> ExtendedContext.max(Decimal(1), 2)
        Decimal('2')
        >>> ExtendedContext.max(1, Decimal(2))
        Decimal('2')
        ")
                        (reparse-symbol indented_block_body) [165372 166437])
                    ("max_mag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [166454 166458])
                            ("a" variable nil (reparse-symbol function_parameters) [166460 166461])
                            ("b" variable nil (reparse-symbol function_parameters) [166463 166464]))                          
                        :documentation "Compares the values numerically with their sign ignored.

        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('NaN'))
        Decimal('7')
        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('-10'))
        Decimal('-10')
        >>> ExtendedContext.max_mag(1, -2)
        Decimal('-2')
        >>> ExtendedContext.max_mag(Decimal(1), -2)
        Decimal('-2')
        >>> ExtendedContext.max_mag(1, Decimal(-2))
        Decimal('-2')
        ")
                        (reparse-symbol indented_block_body) [166442 167023])
                    ("min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [167036 167040])
                            ("a" variable nil (reparse-symbol function_parameters) [167042 167043])
                            ("b" variable nil (reparse-symbol function_parameters) [167045 167046]))                          
                        :documentation "min compares two values numerically and returns the minimum.

        If either operand is a NaN then the general rules apply.
        Otherwise, the operands are compared as though by the compare
        operation.  If they are numerically equal then the left-hand operand
        is chosen as the result.  Otherwise the minimum (closer to negative
        infinity) of the two operands is chosen as the result.

        >>> ExtendedContext.min(Decimal('3'), Decimal('2'))
        Decimal('2')
        >>> ExtendedContext.min(Decimal('-10'), Decimal('3'))
        Decimal('-10')
        >>> ExtendedContext.min(Decimal('1.0'), Decimal('1'))
        Decimal('1.0')
        >>> ExtendedContext.min(Decimal('7'), Decimal('NaN'))
        Decimal('7')
        >>> ExtendedContext.min(1, 2)
        Decimal('1')
        >>> ExtendedContext.min(Decimal(1), 2)
        Decimal('1')
        >>> ExtendedContext.min(1, Decimal(29))
        Decimal('1')
        ")
                        (reparse-symbol indented_block_body) [167028 168098])
                    ("min_mag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [168115 168119])
                            ("a" variable nil (reparse-symbol function_parameters) [168121 168122])
                            ("b" variable nil (reparse-symbol function_parameters) [168124 168125]))                          
                        :documentation "Compares the values numerically with their sign ignored.

        >>> ExtendedContext.min_mag(Decimal('3'), Decimal('-2'))
        Decimal('-2')
        >>> ExtendedContext.min_mag(Decimal('-3'), Decimal('NaN'))
        Decimal('-3')
        >>> ExtendedContext.min_mag(1, -2)
        Decimal('1')
        >>> ExtendedContext.min_mag(Decimal(1), -2)
        Decimal('1')
        >>> ExtendedContext.min_mag(1, Decimal(-2))
        Decimal('1')
        ")
                        (reparse-symbol indented_block_body) [168103 168681])
                    ("minus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [168696 168700])
                            ("a" variable nil (reparse-symbol function_parameters) [168702 168703]))                          
                        :documentation "Minus corresponds to unary prefix minus in Python.

        The operation is evaluated using the same rules as subtract; the
        operation minus(a) is calculated as subtract('0', a) where the '0'
        has the same exponent as the operand.

        >>> ExtendedContext.minus(Decimal('1.3'))
        Decimal('-1.3')
        >>> ExtendedContext.minus(Decimal('-1.3'))
        Decimal('1.3')
        >>> ExtendedContext.minus(1)
        Decimal('-1')
        ")
                        (reparse-symbol indented_block_body) [168686 169266])
                    ("multiply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [169284 169288])
                            ("a" variable nil (reparse-symbol function_parameters) [169290 169291])
                            ("b" variable nil (reparse-symbol function_parameters) [169293 169294]))                          
                        :documentation "multiply multiplies two operands.

        If either operand is a special value then the general rules apply.
        Otherwise, the operands are multiplied together
        ('long multiplication'), resulting in a number which may be as long as
        the sum of the lengths of the two operands.

        >>> ExtendedContext.multiply(Decimal('1.20'), Decimal('3'))
        Decimal('3.60')
        >>> ExtendedContext.multiply(Decimal('7'), Decimal('3'))
        Decimal('21')
        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('0.8'))
        Decimal('0.72')
        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('-0'))
        Decimal('-0.0')
        >>> ExtendedContext.multiply(Decimal('654321'), Decimal('654321'))
        Decimal('4.28135971E+11')
        >>> ExtendedContext.multiply(7, 7)
        Decimal('49')
        >>> ExtendedContext.multiply(Decimal(7), 7)
        Decimal('49')
        >>> ExtendedContext.multiply(7, Decimal(7))
        Decimal('49')
        ")
                        (reparse-symbol indented_block_body) [169271 170521])
                    ("next_minus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [170541 170545])
                            ("a" variable nil (reparse-symbol function_parameters) [170547 170548]))                          
                        :documentation "Returns the largest representable number smaller than a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> ExtendedContext.next_minus(Decimal('1'))
        Decimal('0.999999999')
        >>> c.next_minus(Decimal('1E-1007'))
        Decimal('0E-1007')
        >>> ExtendedContext.next_minus(Decimal('-1.00000003'))
        Decimal('-1.00000004')
        >>> c.next_minus(Decimal('Infinity'))
        Decimal('9.99999999E+999')
        >>> c.next_minus(1)
        Decimal('0.999999999')
        ")
                        (reparse-symbol indented_block_body) [170526 171198])
                    ("next_plus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [171217 171221])
                            ("a" variable nil (reparse-symbol function_parameters) [171223 171224]))                          
                        :documentation "Returns the smallest representable number larger than a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> ExtendedContext.next_plus(Decimal('1'))
        Decimal('1.00000001')
        >>> c.next_plus(Decimal('-1E-1007'))
        Decimal('-0E-1007')
        >>> ExtendedContext.next_plus(Decimal('-1.00000003'))
        Decimal('-1.00000002')
        >>> c.next_plus(Decimal('-Infinity'))
        Decimal('-9.99999999E+999')
        >>> c.next_plus(1)
        Decimal('1.00000001')
        ")
                        (reparse-symbol indented_block_body) [171203 171870])
                    ("next_toward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [171891 171895])
                            ("a" variable nil (reparse-symbol function_parameters) [171897 171898])
                            ("b" variable nil (reparse-symbol function_parameters) [171900 171901]))                          
                        :documentation "Returns the number closest to a, in direction towards b.

        The result is the closest representable number from the first
        operand (but not the first operand) that is in the direction
        towards the second operand, unless the operands have the same
        value.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.next_toward(Decimal('1'), Decimal('2'))
        Decimal('1.00000001')
        >>> c.next_toward(Decimal('-1E-1007'), Decimal('1'))
        Decimal('-0E-1007')
        >>> c.next_toward(Decimal('-1.00000003'), Decimal('0'))
        Decimal('-1.00000002')
        >>> c.next_toward(Decimal('1'), Decimal('0'))
        Decimal('0.999999999')
        >>> c.next_toward(Decimal('1E-1007'), Decimal('-100'))
        Decimal('0E-1007')
        >>> c.next_toward(Decimal('-1.00000003'), Decimal('-10'))
        Decimal('-1.00000004')
        >>> c.next_toward(Decimal('0.00'), Decimal('-0.0000'))
        Decimal('-0.00')
        >>> c.next_toward(0, 1)
        Decimal('1E-1007')
        >>> c.next_toward(Decimal(0), 1)
        Decimal('1E-1007')
        >>> c.next_toward(0, Decimal(1))
        Decimal('1E-1007')
        ")
                        (reparse-symbol indented_block_body) [171875 173213])
                    ("normalize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [173232 173236])
                            ("a" variable nil (reparse-symbol function_parameters) [173238 173239]))                          
                        :documentation "normalize reduces an operand to its simplest form.

        Essentially a plus operation with all trailing zeros removed from the
        result.

        >>> ExtendedContext.normalize(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.normalize(Decimal('-2.0'))
        Decimal('-2')
        >>> ExtendedContext.normalize(Decimal('1.200'))
        Decimal('1.2')
        >>> ExtendedContext.normalize(Decimal('-120'))
        Decimal('-1.2E+2')
        >>> ExtendedContext.normalize(Decimal('120.00'))
        Decimal('1.2E+2')
        >>> ExtendedContext.normalize(Decimal('0.00'))
        Decimal('0')
        >>> ExtendedContext.normalize(6)
        Decimal('6')
        ")
                        (reparse-symbol indented_block_body) [173218 174033])
                    ("number_class" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [174055 174059])
                            ("a" variable nil (reparse-symbol function_parameters) [174061 174062]))                          
                        :documentation "Returns an indication of the class of the operand.

        The class is one of the following strings:
          -sNaN
          -NaN
          -Infinity
          -Normal
          -Subnormal
          -Zero
          +Zero
          +Subnormal
          +Normal
          +Infinity

        >>> c = Context(ExtendedContext)
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.number_class(Decimal('Infinity'))
        '+Infinity'
        >>> c.number_class(Decimal('1E-10'))
        '+Normal'
        >>> c.number_class(Decimal('2.50'))
        '+Normal'
        >>> c.number_class(Decimal('0.1E-999'))
        '+Subnormal'
        >>> c.number_class(Decimal('0'))
        '+Zero'
        >>> c.number_class(Decimal('-0'))
        '-Zero'
        >>> c.number_class(Decimal('-0.1E-999'))
        '-Subnormal'
        >>> c.number_class(Decimal('-1E-10'))
        '-Normal'
        >>> c.number_class(Decimal('-2.50'))
        '-Normal'
        >>> c.number_class(Decimal('-Infinity'))
        '-Infinity'
        >>> c.number_class(Decimal('NaN'))
        'NaN'
        >>> c.number_class(Decimal('-NaN'))
        'NaN'
        >>> c.number_class(Decimal('sNaN'))
        'sNaN'
        >>> c.number_class(123)
        '+Normal'
        ")
                        (reparse-symbol indented_block_body) [174038 175420])
                    ("plus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [175434 175438])
                            ("a" variable nil (reparse-symbol function_parameters) [175440 175441]))                          
                        :documentation "Plus corresponds to unary prefix plus in Python.

        The operation is evaluated using the same rules as add; the
        operation plus(a) is calculated as add('0', a) where the '0'
        has the same exponent as the operand.

        >>> ExtendedContext.plus(Decimal('1.3'))
        Decimal('1.3')
        >>> ExtendedContext.plus(Decimal('-1.3'))
        Decimal('-1.3')
        >>> ExtendedContext.plus(-1)
        Decimal('-1')
        ")
                        (reparse-symbol indented_block_body) [175425 175989])
                    ("power" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [176004 176008])
                            ("a" variable nil (reparse-symbol function_parameters) [176010 176011])
                            ("b" variable nil (reparse-symbol function_parameters) [176013 176014])
                            ("modulo" variable nil (reparse-symbol function_parameters) [176016 176022]))                          
                        :documentation "Raises a to the power of b, to modulo if given.

        With two arguments, compute a**b.  If a is negative then b
        must be integral.  The result will be inexact unless b is
        integral and the result is finite and can be expressed exactly
        in 'precision' digits.

        With three arguments, compute (a**b) % modulo.  For the
        three argument form, the following restrictions on the
        arguments hold:

         - all three arguments must be integral
         - b must be nonnegative
         - at least one of a or b must be nonzero
         - modulo must be nonzero and have at most 'precision' digits

        The result of pow(a, b, modulo) is identical to the result
        that would be obtained by computing (a**b) % modulo with
        unbounded precision, but is computed more efficiently.  It is
        always exact.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.power(Decimal('2'), Decimal('3'))
        Decimal('8')
        >>> c.power(Decimal('-2'), Decimal('3'))
        Decimal('-8')
        >>> c.power(Decimal('2'), Decimal('-3'))
        Decimal('0.125')
        >>> c.power(Decimal('1.7'), Decimal('8'))
        Decimal('69.7575744')
        >>> c.power(Decimal('10'), Decimal('0.301029996'))
        Decimal('2.00000000')
        >>> c.power(Decimal('Infinity'), Decimal('-1'))
        Decimal('0')
        >>> c.power(Decimal('Infinity'), Decimal('0'))
        Decimal('1')
        >>> c.power(Decimal('Infinity'), Decimal('1'))
        Decimal('Infinity')
        >>> c.power(Decimal('-Infinity'), Decimal('-1'))
        Decimal('-0')
        >>> c.power(Decimal('-Infinity'), Decimal('0'))
        Decimal('1')
        >>> c.power(Decimal('-Infinity'), Decimal('1'))
        Decimal('-Infinity')
        >>> c.power(Decimal('-Infinity'), Decimal('2'))
        Decimal('Infinity')
        >>> c.power(Decimal('0'), Decimal('0'))
        Decimal('NaN')

        >>> c.power(Decimal('3'), Decimal('7'), Decimal('16'))
        Decimal('11')
        >>> c.power(Decimal('-3'), Decimal('7'), Decimal('16'))
        Decimal('-11')
        >>> c.power(Decimal('-3'), Decimal('8'), Decimal('16'))
        Decimal('1')
        >>> c.power(Decimal('3'), Decimal('7'), Decimal('-16'))
        Decimal('11')
        >>> c.power(Decimal('23E12345'), Decimal('67E189'), Decimal('123456789'))
        Decimal('11729830')
        >>> c.power(Decimal('-0'), Decimal('17'), Decimal('1729'))
        Decimal('-0')
        >>> c.power(Decimal('-23'), Decimal('0'), Decimal('65537'))
        Decimal('1')
        >>> ExtendedContext.power(7, 7)
        Decimal('823543')
        >>> ExtendedContext.power(Decimal(7), 7)
        Decimal('823543')
        >>> ExtendedContext.power(7, Decimal(7), 2)
        Decimal('1')
        ")
                        (reparse-symbol indented_block_body) [175994 179093])
                    ("quantize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [179111 179115])
                            ("a" variable nil (reparse-symbol function_parameters) [179117 179118])
                            ("b" variable nil (reparse-symbol function_parameters) [179120 179121]))                          
                        :documentation "Returns a value equal to 'a' (rounded), having the exponent of 'b'.

        The coefficient of the result is derived from that of the left-hand
        operand.  It may be rounded using the current rounding setting (if the
        exponent is being increased), multiplied by a positive power of ten (if
        the exponent is being decreased), or is unchanged (if the exponent is
        already equal to that of the right-hand operand).

        Unlike other operations, if the length of the coefficient after the
        quantize operation would be greater than precision then an Invalid
        operation condition is raised.  This guarantees that, unless there is
        an error condition, the exponent of the result of a quantize is always
        equal to that of the right-hand operand.

        Also unlike other operations, quantize will never raise Underflow, even
        if the result is subnormal and inexact.

        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.001'))
        Decimal('2.170')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.01'))
        Decimal('2.17')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.1'))
        Decimal('2.2')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+0'))
        Decimal('2')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+1'))
        Decimal('0E+1')
        >>> ExtendedContext.quantize(Decimal('-Inf'), Decimal('Infinity'))
        Decimal('-Infinity')
        >>> ExtendedContext.quantize(Decimal('2'), Decimal('Infinity'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('-0.1'), Decimal('1'))
        Decimal('-0')
        >>> ExtendedContext.quantize(Decimal('-0'), Decimal('1e+5'))
        Decimal('-0E+5')
        >>> ExtendedContext.quantize(Decimal('+35236450.6'), Decimal('1e-2'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('-35236450.6'), Decimal('1e-2'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-1'))
        Decimal('217.0')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-0'))
        Decimal('217')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+1'))
        Decimal('2.2E+2')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+2'))
        Decimal('2E+2')
        >>> ExtendedContext.quantize(1, 2)
        Decimal('1')
        >>> ExtendedContext.quantize(Decimal(1), 2)
        Decimal('1')
        >>> ExtendedContext.quantize(1, Decimal(2))
        Decimal('1')
        ")
                        (reparse-symbol indented_block_body) [179098 181807])
                    ("radix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [181822 181826]))                          
                        :documentation "Just returns 10, as this is Decimal, :)

        >>> ExtendedContext.radix()
        Decimal('10')
        ")
                        (reparse-symbol indented_block_body) [181812 181978])
                    ("remainder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [181997 182001])
                            ("a" variable nil (reparse-symbol function_parameters) [182003 182004])
                            ("b" variable nil (reparse-symbol function_parameters) [182006 182007]))                          
                        :documentation "Returns the remainder from integer division.

        The result is the residue of the dividend after the operation of
        calculating integer division as described for divide-integer, rounded
        to precision digits if necessary.  The sign of the result, if
        non-zero, is the same as that of the original dividend.

        This operation will fail under the same conditions as integer division
        (that is, if integer division on the same two operands would fail, the
        remainder cannot be calculated).

        >>> ExtendedContext.remainder(Decimal('2.1'), Decimal('3'))
        Decimal('2.1')
        >>> ExtendedContext.remainder(Decimal('10'), Decimal('3'))
        Decimal('1')
        >>> ExtendedContext.remainder(Decimal('-10'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.remainder(Decimal('10.2'), Decimal('1'))
        Decimal('0.2')
        >>> ExtendedContext.remainder(Decimal('10'), Decimal('0.3'))
        Decimal('0.1')
        >>> ExtendedContext.remainder(Decimal('3.6'), Decimal('1.3'))
        Decimal('1.0')
        >>> ExtendedContext.remainder(22, 6)
        Decimal('4')
        >>> ExtendedContext.remainder(Decimal(22), 6)
        Decimal('4')
        >>> ExtendedContext.remainder(22, Decimal(6))
        Decimal('4')
        ")
                        (reparse-symbol indented_block_body) [181983 183544])
                    ("remainder_near" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [183568 183572])
                            ("a" variable nil (reparse-symbol function_parameters) [183574 183575])
                            ("b" variable nil (reparse-symbol function_parameters) [183577 183578]))                          
                        :documentation "Returns to be \"a - b * n\", where n is the integer nearest the exact
        value of \"x / b\" (if two integers are equally near then the even one
        is chosen).  If the result is equal to 0 then its sign will be the
        sign of a.

        This operation will fail under the same conditions as integer division
        (that is, if integer division on the same two operands would fail, the
        remainder cannot be calculated).

        >>> ExtendedContext.remainder_near(Decimal('2.1'), Decimal('3'))
        Decimal('-0.9')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('6'))
        Decimal('-2')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('3'))
        Decimal('1')
        >>> ExtendedContext.remainder_near(Decimal('-10'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.remainder_near(Decimal('10.2'), Decimal('1'))
        Decimal('0.2')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('0.3'))
        Decimal('0.1')
        >>> ExtendedContext.remainder_near(Decimal('3.6'), Decimal('1.3'))
        Decimal('-0.3')
        >>> ExtendedContext.remainder_near(3, 11)
        Decimal('3')
        >>> ExtendedContext.remainder_near(Decimal(3), 11)
        Decimal('3')
        >>> ExtendedContext.remainder_near(3, Decimal(11))
        Decimal('3')
        ")
                        (reparse-symbol indented_block_body) [183549 185040])
                    ("rotate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [185056 185060])
                            ("a" variable nil (reparse-symbol function_parameters) [185062 185063])
                            ("b" variable nil (reparse-symbol function_parameters) [185065 185066]))                          
                        :documentation "Returns a rotated copy of a, b times.

        The coefficient of the result is a rotated copy of the digits in
        the coefficient of the first operand.  The number of places of
        rotation is taken from the absolute value of the second operand,
        with the rotation being to the left if the second operand is
        positive or to the right otherwise.

        >>> ExtendedContext.rotate(Decimal('34'), Decimal('8'))
        Decimal('400000003')
        >>> ExtendedContext.rotate(Decimal('12'), Decimal('9'))
        Decimal('12')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('-2'))
        Decimal('891234567')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('0'))
        Decimal('123456789')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('+2'))
        Decimal('345678912')
        >>> ExtendedContext.rotate(1333333, 1)
        Decimal('13333330')
        >>> ExtendedContext.rotate(Decimal(1333333), 1)
        Decimal('13333330')
        >>> ExtendedContext.rotate(1333333, Decimal(1))
        Decimal('13333330')
        ")
                        (reparse-symbol indented_block_body) [185045 186271])
                    ("same_quantum" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [186293 186297])
                            ("a" variable nil (reparse-symbol function_parameters) [186299 186300])
                            ("b" variable nil (reparse-symbol function_parameters) [186302 186303]))                          
                        :documentation "Returns True if the two operands have the same exponent.

        The result is never affected by either the sign or the coefficient of
        either operand.

        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.001'))
        False
        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.01'))
        True
        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('1'))
        False
        >>> ExtendedContext.same_quantum(Decimal('Inf'), Decimal('-Inf'))
        True
        >>> ExtendedContext.same_quantum(10000, -1)
        True
        >>> ExtendedContext.same_quantum(Decimal(10000), -1)
        True
        >>> ExtendedContext.same_quantum(10000, Decimal(-1))
        True
        ")
                        (reparse-symbol indented_block_body) [186276 187131])
                    ("scaleb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [187148 187152])
                            ("a" variable nil (reparse-symbol function_parameters) [187154 187155])
                            ("b" variable nil (reparse-symbol function_parameters) [187157 187158]))                          
                        :documentation "Returns the first operand after adding the second value its exp.

        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('-2'))
        Decimal('0.0750')
        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('0'))
        Decimal('7.50')
        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('3'))
        Decimal('7.50E+3')
        >>> ExtendedContext.scaleb(1, 4)
        Decimal('1E+4')
        >>> ExtendedContext.scaleb(Decimal(1), 4)
        Decimal('1E+4')
        >>> ExtendedContext.scaleb(1, Decimal(4))
        Decimal('1E+4')
        ")
                        (reparse-symbol indented_block_body) [187136 187824])
                    ("shift" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [187839 187843])
                            ("a" variable nil (reparse-symbol function_parameters) [187845 187846])
                            ("b" variable nil (reparse-symbol function_parameters) [187848 187849]))                          
                        :documentation "Returns a shifted copy of a, b times.

        The coefficient of the result is a shifted copy of the digits
        in the coefficient of the first operand.  The number of places
        to shift is taken from the absolute value of the second operand,
        with the shift being to the left if the second operand is
        positive or to the right otherwise.  Digits shifted into the
        coefficient are zeros.

        >>> ExtendedContext.shift(Decimal('34'), Decimal('8'))
        Decimal('400000000')
        >>> ExtendedContext.shift(Decimal('12'), Decimal('9'))
        Decimal('0')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('-2'))
        Decimal('1234567')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('0'))
        Decimal('123456789')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('+2'))
        Decimal('345678900')
        >>> ExtendedContext.shift(88888888, 2)
        Decimal('888888800')
        >>> ExtendedContext.shift(Decimal(88888888), 2)
        Decimal('888888800')
        >>> ExtendedContext.shift(88888888, Decimal(2))
        Decimal('888888800')
        ")
                        (reparse-symbol indented_block_body) [187829 189098])
                    ("sqrt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [189112 189116])
                            ("a" variable nil (reparse-symbol function_parameters) [189118 189119]))                          
                        :documentation "Square root of a non-negative number to context precision.

        If the result must be inexact, it is rounded using the round-half-even
        algorithm.

        >>> ExtendedContext.sqrt(Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.sqrt(Decimal('-0'))
        Decimal('-0')
        >>> ExtendedContext.sqrt(Decimal('0.39'))
        Decimal('0.624499800')
        >>> ExtendedContext.sqrt(Decimal('100'))
        Decimal('10')
        >>> ExtendedContext.sqrt(Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.sqrt(Decimal('1.0'))
        Decimal('1.0')
        >>> ExtendedContext.sqrt(Decimal('1.00'))
        Decimal('1.0')
        >>> ExtendedContext.sqrt(Decimal('7'))
        Decimal('2.64575131')
        >>> ExtendedContext.sqrt(Decimal('10'))
        Decimal('3.16227766')
        >>> ExtendedContext.sqrt(2)
        Decimal('1.41421356')
        >>> ExtendedContext.prec
        9
        ")
                        (reparse-symbol indented_block_body) [189103 190151])
                    ("subtract" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [190169 190173])
                            ("a" variable nil (reparse-symbol function_parameters) [190175 190176])
                            ("b" variable nil (reparse-symbol function_parameters) [190178 190179]))                          
                        :documentation "Return the difference between the two operands.

        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.07'))
        Decimal('0.23')
        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.30'))
        Decimal('0.00')
        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('2.07'))
        Decimal('-0.77')
        >>> ExtendedContext.subtract(8, 5)
        Decimal('3')
        >>> ExtendedContext.subtract(Decimal(8), 5)
        Decimal('3')
        >>> ExtendedContext.subtract(8, Decimal(5))
        Decimal('3')
        ")
                        (reparse-symbol indented_block_body) [190156 190964])
                    ("to_eng_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [190987 190991])
                            ("a" variable nil (reparse-symbol function_parameters) [190993 190994]))                          
                        :documentation "Converts a number to a string, using scientific notation.

        The operation is not affected by the context.
        ")
                        (reparse-symbol indented_block_body) [190969 191222])
                    ("to_sci_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [191245 191249])
                            ("a" variable nil (reparse-symbol function_parameters) [191251 191252]))                          
                        :documentation "Converts a number to a string, using scientific notation.

        The operation is not affected by the context.
        ")
                        (reparse-symbol indented_block_body) [191227 191474])
                    ("to_integral_exact" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [191501 191505])
                            ("a" variable nil (reparse-symbol function_parameters) [191507 191508]))                          
                        :documentation "Rounds to an integer.

        When the operand has a negative exponent, the result is the same
        as using the quantize() operation using the given operand as the
        left-hand-operand, 1E+0 as the right-hand-operand, and the precision
        of the operand as the precision setting; Inexact and Rounded flags
        are allowed in this operation.  The rounding mode is taken from the
        context.

        >>> ExtendedContext.to_integral_exact(Decimal('2.1'))
        Decimal('2')
        >>> ExtendedContext.to_integral_exact(Decimal('100'))
        Decimal('100')
        >>> ExtendedContext.to_integral_exact(Decimal('100.0'))
        Decimal('100')
        >>> ExtendedContext.to_integral_exact(Decimal('101.5'))
        Decimal('102')
        >>> ExtendedContext.to_integral_exact(Decimal('-101.5'))
        Decimal('-102')
        >>> ExtendedContext.to_integral_exact(Decimal('10E+5'))
        Decimal('1.0E+6')
        >>> ExtendedContext.to_integral_exact(Decimal('7.89E+77'))
        Decimal('7.89E+77')
        >>> ExtendedContext.to_integral_exact(Decimal('-Inf'))
        Decimal('-Infinity')
        ")
                        (reparse-symbol indented_block_body) [191479 192750])
                    ("to_integral_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [192777 192781])
                            ("a" variable nil (reparse-symbol function_parameters) [192783 192784]))                          
                        :documentation "Rounds to an integer.

        When the operand has a negative exponent, the result is the same
        as using the quantize() operation using the given operand as the
        left-hand-operand, 1E+0 as the right-hand-operand, and the precision
        of the operand as the precision setting, except that no flags will
        be set.  The rounding mode is taken from the context.

        >>> ExtendedContext.to_integral_value(Decimal('2.1'))
        Decimal('2')
        >>> ExtendedContext.to_integral_value(Decimal('100'))
        Decimal('100')
        >>> ExtendedContext.to_integral_value(Decimal('100.0'))
        Decimal('100')
        >>> ExtendedContext.to_integral_value(Decimal('101.5'))
        Decimal('102')
        >>> ExtendedContext.to_integral_value(Decimal('-101.5'))
        Decimal('-102')
        >>> ExtendedContext.to_integral_value(Decimal('10E+5'))
        Decimal('1.0E+6')
        >>> ExtendedContext.to_integral_value(Decimal('7.89E+77'))
        Decimal('7.89E+77')
        >>> ExtendedContext.to_integral_value(Decimal('-Inf'))
        Decimal('-Infinity')
        ")
                        (reparse-symbol indented_block_body) [192755 193995])
                    ("to_integral" variable nil (reparse-symbol indented_block_body) [194082 194113]))                  
                :type "class")
                nil [134168 194114])
            ("_WorkRep" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [194143 194175])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [194297 194704]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [194270 194274])
                            ("value" variable nil (reparse-symbol function_parameters) [194276 194281]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [194257 194704])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [194722 194726]))                          )
                        (reparse-symbol indented_block_body) [194709 194793])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [194798 194816]))                  
                :type "class")
                nil [194115 194817])
            ("_normalize" function
               (:documentation "Normalizes op1, op2 to have the same exp and length of coefficient.

    Done during addition.
    "
                :arguments 
                  ( ("op1" variable nil (reparse-symbol function_parameters) [194835 194838])
                    ("op2" variable nil (reparse-symbol function_parameters) [194840 194843])
                    ("prec" variable nil (reparse-symbol function_parameters) [194845 194849]))                  )
                nil [194820 195721])
            ("_nbits" function
               (:documentation "Number of bits in binary representation of the positive integer n,
    or 0 if n == 0.
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [196092 196093])
                    ("correction" variable nil (reparse-symbol function_parameters) [196095 196105]))                  )
                nil [196081 196530])
            ("_decimal_lshift_exact" function
               (:documentation " Given integers n and e, return n * 10**e if it's an integer, else None.

    The computation is designed to avoid computing large powers of 10
    unnecessarily.

    >>> _decimal_lshift_exact(3, 4)
    30000
    >>> _decimal_lshift_exact(300, -999999999)  # returns None

    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [196557 196558])
                    ("e" variable nil (reparse-symbol function_parameters) [196560 196561]))                  )
                nil [196531 197118])
            ("_sqrt_nearest" function
               (:documentation "Closest integer to the square root of the positive integer n.  a is
    an initial approximation to the square root.  Any positive integer
    will do for a, but the closer a is to the square root of n the
    faster convergence will be.

    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [197137 197138])
                    ("a" variable nil (reparse-symbol function_parameters) [197140 197141]))                  )
                nil [197119 197572])
            ("_rshift_nearest" function
               (:documentation "Given an integer x and a nonnegative integer shift, return closest
    integer to x / 2**shift; use round-to-even in case of a tie.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [197593 197594])
                    ("shift" variable nil (reparse-symbol function_parameters) [197596 197601]))                  )
                nil [197573 197830])
            ("_div_nearest" function
               (:documentation "Closest integer to a/b, a and b positive integers; rounds to even
    in the case of a tie.

    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [197848 197849])
                    ("b" variable nil (reparse-symbol function_parameters) [197851 197852]))                  )
                nil [197831 198020])
            ("_ilog" function
               (:documentation "Integer approximation to M*log(x/M), with absolute error boundable
    in terms only of x/M.

    Given positive integers x and M, return an integer approximation to
    M * log(x/M).  For L = 8 and 0.1 <= x/M <= 10 the difference
    between the approximation and the exact result is at most 22.  For
    L = 8 and 1.0 <= x/M <= 10.0 the difference is at most 15.  In
    both cases these are upper bounds on the error; it will usually be
    much smaller."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [198031 198032])
                    ("M" variable nil (reparse-symbol function_parameters) [198034 198035])
                    ("L" variable nil (reparse-symbol function_parameters) [198037 198038]))                  )
                nil [198021 199891])
            ("_dlog10" function
               (:documentation "Given integers c, e and p with c > 0, p >= 0, compute an integer
    approximation to 10**p * log10(c*10**e), with an absolute error of
    at most 1.  Assumes that c*10**e is not exactly 1."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [199904 199905])
                    ("e" variable nil (reparse-symbol function_parameters) [199907 199908])
                    ("p" variable nil (reparse-symbol function_parameters) [199910 199911]))                  )
                nil [199892 200897])
            ("_dlog" function
               (:documentation "Given integers c, e and p with c > 0, compute an integer
    approximation to 10**p * log(c*10**e), with an absolute error of
    at most 1.  Assumes that c*10**e is not exactly 1."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [200908 200909])
                    ("e" variable nil (reparse-symbol function_parameters) [200911 200912])
                    ("p" variable nil (reparse-symbol function_parameters) [200914 200915]))                  )
                nil [200898 202456])
            ("_Log10Memoize" type
               (:documentation "Class to compute, store, and allow retrieval of, digits of the
    constant log(10) = 2.302585....  This constant is needed by
    Decimal.ln, Decimal.log10, Decimal.exp and Decimal.__pow__."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [202719 202782]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [202704 202708]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [202691 202783])
                    ("getdigits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [202802 202806])
                            ("p" variable nil (reparse-symbol function_parameters) [202808 202809]))                          
                        :documentation "Given an integer p >= 0, return floor(10**p)*log(10).

        For example, self.getdigits(3) returns 2302.
        ")
                        (reparse-symbol indented_block_body) [202788 203919]))                  
                :type "class")
                nil [202457 203919])
            ("_log10_digits" variable nil nil [203920 203961])
            ("_iexp" function
               (:documentation "Given integers x and M, M > 0, such that x/M is small in absolute
    value, compute an integer approximation to M*exp(x/M).  For 0 <=
    x/M <= 2.4, the absolute error in the result is bounded by 60 (and
    is usually much smaller)."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [203973 203974])
                    ("M" variable nil (reparse-symbol function_parameters) [203976 203977])
                    ("L" variable nil (reparse-symbol function_parameters) [203979 203980]))                  )
                nil [203963 205127])
            ("_dexp" function
               (:documentation "Compute an approximation to exp(c*10**e), with p decimal places of
    precision.

    Returns integers d, f such that:

      10**(p-1) <= d <= 10**p, and
      (d-1)*10**f < exp(c*10**e) < (d+1)*10**f

    In other words, d*10**f is an approximation to exp(c*10**e) with p
    digits of precision, and with an error in d of at most 1.  This is
    almost, but not quite, the same as the error being < 1ulp: when d
    = 10**(p-1) the error could be up to 10 ulp."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [205138 205139])
                    ("e" variable nil (reparse-symbol function_parameters) [205141 205142])
                    ("p" variable nil (reparse-symbol function_parameters) [205144 205145]))                  )
                nil [205128 206309])
            ("_dpower" function
               (:documentation "Given integers xc, xe, yc and ye representing Decimals x = xc*10**xe and
    y = yc*10**ye, compute x**y.  Returns a pair of integers (c, e) such that:

      10**(p-1) <= c <= 10**p, and
      (c-1)*10**e < x**y < (c+1)*10**e

    in other words, c*10**e is an approximation to x**y with p digits
    of precision, and with an error in c of at most 1.  (This is
    almost, but not quite, the same as the error being < 1ulp: when c
    == 10**(p-1) we can only guarantee error < 10ulp.)

    We assume that: x is positive and not equal to 1, and y is nonzero.
    "
                :arguments 
                  ( ("xc" variable nil (reparse-symbol function_parameters) [206322 206324])
                    ("xe" variable nil (reparse-symbol function_parameters) [206326 206328])
                    ("yc" variable nil (reparse-symbol function_parameters) [206330 206332])
                    ("ye" variable nil (reparse-symbol function_parameters) [206334 206336])
                    ("p" variable nil (reparse-symbol function_parameters) [206338 206339]))                  )
                nil [206310 207740])
            ("_log10_lb" function
               (:documentation "Compute a lower bound for 100*log10(c) for a positive integer c."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [207755 207756])
                    ("correction" variable nil (reparse-symbol function_parameters) [207758 207768]))                  )
                nil [207741 208107])
            ("_convert_other" function
               (:documentation "Convert other to Decimal.

    Verifies that it's ok to use in an implicit construction.
    If allow_float is true, allow conversion from float;  this
    is used in the comparison methods (__eq__ and friends).

    "
                :arguments 
                  ( ("other" variable nil (reparse-symbol function_parameters) [208204 208209])
                    ("raiseit" variable nil (reparse-symbol function_parameters) [208211 208218])
                    ("allow_float" variable nil (reparse-symbol function_parameters) [208226 208237]))                  )
                nil [208185 208799])
            ("DefaultContext" variable nil nil [208996 209212])
            ("BasicContext" variable nil nil [209422 209585])
            ("ExtendedContext" variable nil nil [209587 209693])
            ("re" include nil nil [210274 210283])
            ("_parser" variable nil nil [210284 211055])
            ("_all_zeros" variable nil nil [211057 211093])
            ("_exact_half" variable nil nil [211094 211132])
            ("_parse_format_specifier_regex" variable nil nil [211518 211769])
            ("del" code nil nil [211771 211777])
            ("try" code nil nil [211966 212029])
            ("_parse_format_specifier" function
               (:documentation "Parse and validate a format specifier.

    Turns a standard numeric format specifier into a dict, with the
    following entries:

      fill: fill character to pad field to minimum width
      align: alignment type, either '<', '>', '=' or '^'
      sign: either '+', '-' or ' '
      minimumwidth: nonnegative integer giving minimum width
      zeropad: boolean, indicating whether to pad with zeros
      thousands_sep: string to use as thousands separator, or ''
      grouping: grouping for thousands separators, in format
        used by localeconv
      decimal_point: string to use for decimal point
      precision: nonnegative integer giving precision, or None
      type: one of the characters 'eEfFgG%', or None
      unicode: boolean (always True for Python 3.x)

    "
                :arguments 
                  ( ("format_spec" variable nil (reparse-symbol function_parameters) [212058 212069])
                    ("_localeconv" variable nil (reparse-symbol function_parameters) [212071 212082]))                  )
                nil [212030 215720])
            ("_format_align" function
               (:documentation "Given an unpadded, non-aligned numeric string 'body' and sign
    string 'sign', add padding and alignment conforming to the given
    format specifier dictionary 'spec' (as produced by
    parse_format_specifier).

    Also converts result to unicode if necessary.

    "
                :arguments 
                  ( ("sign" variable nil (reparse-symbol function_parameters) [215739 215743])
                    ("body" variable nil (reparse-symbol function_parameters) [215745 215749])
                    ("spec" variable nil (reparse-symbol function_parameters) [215751 215755]))                  )
                nil [215721 216738])
            ("_group_lengths" function
               (:documentation "Convert a localeconv-style grouping into a (possibly infinite)
    iterable of integers representing group lengths.

    "
                :arguments 
                  ( ("grouping" variable nil (reparse-symbol function_parameters) [216758 216766]))                  )
                nil [216739 217542])
            ("_insert_thousands_sep" function
               (:documentation "Insert thousands separators into a digit string.

    spec is a dictionary whose keys should include 'thousands_sep' and
    'grouping'; typically it's the result of parsing the format
    specifier using _parse_format_specifier.

    The min_width keyword argument gives the minimum length of the
    result, which will be padded on the left with zeros if necessary.

    If necessary, the zero padding adds an extra '0' on the left to
    avoid a leading thousands separator.  For example, inserting
    commas every three digits in '123456', with min_width=8, gives
    '0,123,456', even though that has length 9.

    "
                :arguments 
                  ( ("digits" variable nil (reparse-symbol function_parameters) [217569 217575])
                    ("spec" variable nil (reparse-symbol function_parameters) [217577 217581])
                    ("min_width" variable nil (reparse-symbol function_parameters) [217583 217592]))                  )
                nil [217543 218909])
            ("_format_sign" function
               (:documentation "Determine sign character."
                :arguments 
                  ( ("is_negative" variable nil (reparse-symbol function_parameters) [218927 218938])
                    ("spec" variable nil (reparse-symbol function_parameters) [218940 218944]))                  )
                nil [218910 219110])
            ("_format_number" function
               (:documentation "Format a number, given the following data:

    is_negative: true if the number is negative, else false
    intpart: string of digits that must appear before the decimal point
    fracpart: string of digits that must come after the point
    exp: exponent, as an integer
    spec: dictionary resulting from parsing the format specifier

    This function uses the information in spec to:
      insert separators (decimal separator and thousands separators)
      format the sign
      format the exponent
      add trailing '%' for the '%' type
      zero-pad if necessary
      fill and align if necessary
    "
                :arguments 
                  ( ("is_negative" variable nil (reparse-symbol function_parameters) [219130 219141])
                    ("intpart" variable nil (reparse-symbol function_parameters) [219143 219150])
                    ("fracpart" variable nil (reparse-symbol function_parameters) [219152 219160])
                    ("exp" variable nil (reparse-symbol function_parameters) [219162 219165])
                    ("spec" variable nil (reparse-symbol function_parameters) [219167 219171]))                  )
                nil [219111 220369])
            ("_Infinity" variable nil nil [220468 220494])
            ("_NegativeInfinity" variable nil nil [220495 220530])
            ("_NaN" variable nil nil [220531 220552])
            ("_Zero" variable nil nil [220553 220571])
            ("_One" variable nil nil [220572 220589])
            ("_NegativeOne" variable nil nil [220590 220616])
            ("_SignedInfinity" variable nil nil [220667 220715])
            ("if" code nil nil [220719 220813]))          
      :file "decimal.py"
      :pointmax 220813
      :fsize 220812
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax '((RETURN 197075 . 197081) (IF 197087 . 197089) (ELSE 197101 . 197105) (NAME 135678 . 135682) (IF 135699 . 135701) (ELSE 135721 . 135725) (NAME 135604 . 135608) (IF 135629 . 135631) (ELSE 135653 . 135657) (NAME 135546 . 135550) (IF 135563 . 135565) (ELSE 135583 . 135587) (NAME 135488 . 135492) (IF 135505 . 135507) (ELSE 135525 . 135529) (NAME 135414 . 135418) (IF 135439 . 135441) (ELSE 135463 . 135467) (NAME 135356 . 135360) (IF 135373 . 135375) (ELSE 135393 . 135397)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [543 582]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [483 487])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [489 502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [470 583])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [602 606]))                          )
                        (reparse-symbol indented_block_body) [588 723])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [741 745])
                            ("e" variable nil (reparse-symbol function_parameters) [747 748])
                            ("t" variable nil (reparse-symbol function_parameters) [750 751])
                            ("b" variable nil (reparse-symbol function_parameters) [753 754]))                          )
                        (reparse-symbol indented_block_body) [728 931]))                  
                :type "class")
                nil [195 931])
            ("WeakSet" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [999 1016])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1037 1041])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1043 1050]))                              ) (reparse-symbol indented_block_body) [1025 1283])
                            ("self" variable nil (reparse-symbol indented_block_body) [1291 1313])
                            ("self" variable nil (reparse-symbol indented_block_body) [1361 1388])
                            ("self" variable nil (reparse-symbol indented_block_body) [1397 1420])
                            ("if" code nil (reparse-symbol indented_block_body) [1429 1480]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [973 977])
                            ("data" variable nil (reparse-symbol function_parameters) [979 983]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [960 1480])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1506 1510]))                          )
                        (reparse-symbol indented_block_body) [1485 1630])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1648 1652]))                          )
                        (reparse-symbol indented_block_body) [1635 1830])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1847 1851]))                          )
                        (reparse-symbol indented_block_body) [1835 1909])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1931 1935])
                            ("item" variable nil (reparse-symbol function_parameters) [1937 1941]))                          )
                        (reparse-symbol indented_block_body) [1914 2066])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2086 2090]))                          )
                        (reparse-symbol indented_block_body) [2071 2189])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [2194 2209])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2223 2227])
                            ("item" variable nil (reparse-symbol function_parameters) [2229 2233]))                          )
                        (reparse-symbol indented_block_body) [2215 2354])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2369 2373]))                          )
                        (reparse-symbol indented_block_body) [2359 2473])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2487 2491]))                          )
                        (reparse-symbol indented_block_body) [2478 2530])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2543 2547]))                          )
                        (reparse-symbol indented_block_body) [2535 2876])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2892 2896])
                            ("item" variable nil (reparse-symbol function_parameters) [2898 2902]))                          )
                        (reparse-symbol indented_block_body) [2881 3012])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3029 3033])
                            ("item" variable nil (reparse-symbol function_parameters) [3035 3039]))                          )
                        (reparse-symbol indented_block_body) [3017 3150])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3166 3170])
                            ("other" variable nil (reparse-symbol function_parameters) [3172 3177]))                          )
                        (reparse-symbol indented_block_body) [3155 3420])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3437 3441])
                            ("other" variable nil (reparse-symbol function_parameters) [3443 3448]))                          )
                        (reparse-symbol indented_block_body) [3425 3498])
                    ("_apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3568 3572])
                            ("other" variable nil (reparse-symbol function_parameters) [3574 3579])
                            ("method" variable nil (reparse-symbol function_parameters) [3581 3587]))                          )
                        (reparse-symbol indented_block_body) [3557 3805])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3825 3829])
                            ("other" variable nil (reparse-symbol function_parameters) [3831 3836]))                          )
                        (reparse-symbol indented_block_body) [3810 3895])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3899 3919])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3947 3951])
                            ("other" variable nil (reparse-symbol function_parameters) [3953 3958]))                          )
                        (reparse-symbol indented_block_body) [3925 4171])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4188 4192])
                            ("other" variable nil (reparse-symbol function_parameters) [4194 4199]))                          )
                        (reparse-symbol indented_block_body) [4175 4432])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4454 4458])
                            ("other" variable nil (reparse-symbol function_parameters) [4460 4465]))                          )
                        (reparse-symbol indented_block_body) [4437 4526])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [4530 4552])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4582 4586])
                            ("other" variable nil (reparse-symbol function_parameters) [4588 4593]))                          )
                        (reparse-symbol indented_block_body) [4558 4734])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4751 4755])
                            ("other" variable nil (reparse-symbol function_parameters) [4757 4762]))                          )
                        (reparse-symbol indented_block_body) [4738 4923])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4941 4945])
                            ("other" variable nil (reparse-symbol function_parameters) [4947 4952]))                          )
                        (reparse-symbol indented_block_body) [4928 5018])
                    ("__lt__" variable nil (reparse-symbol indented_block_body) [5022 5039])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5056 5060])
                            ("other" variable nil (reparse-symbol function_parameters) [5062 5067]))                          )
                        (reparse-symbol indented_block_body) [5045 5131])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5151 5155])
                            ("other" variable nil (reparse-symbol function_parameters) [5157 5162]))                          )
                        (reparse-symbol indented_block_body) [5136 5230])
                    ("__gt__" variable nil (reparse-symbol indented_block_body) [5234 5253])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5270 5274])
                            ("other" variable nil (reparse-symbol function_parameters) [5276 5281]))                          )
                        (reparse-symbol indented_block_body) [5259 5345])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5361 5365])
                            ("other" variable nil (reparse-symbol function_parameters) [5367 5372]))                          )
                        (reparse-symbol indented_block_body) [5350 5520])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5550 5554])
                            ("other" variable nil (reparse-symbol function_parameters) [5556 5561]))                          )
                        (reparse-symbol indented_block_body) [5525 5630])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [5634 5664])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5702 5706])
                            ("other" variable nil (reparse-symbol function_parameters) [5708 5713]))                          )
                        (reparse-symbol indented_block_body) [5670 5936])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5953 5957])
                            ("other" variable nil (reparse-symbol function_parameters) [5959 5964]))                          )
                        (reparse-symbol indented_block_body) [5940 6207])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6222 6226])
                            ("other" variable nil (reparse-symbol function_parameters) [6228 6233]))                          )
                        (reparse-symbol indented_block_body) [6212 6287])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [6291 6305])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6326 6330])
                            ("other" variable nil (reparse-symbol function_parameters) [6332 6337]))                          )
                        (reparse-symbol indented_block_body) [6311 6390]))                  
                :type "class")
                nil [933 6390]))          
      :file "_weakrefset.py"
      :pointmax 6390
      :fsize 6389
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 179])
            ("types" include nil nil [181 222])
            ("__all__" variable nil nil [224 332])
            ("dispatch_table" variable nil nil [334 353])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [366 373])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [375 390])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [392 406]))              ) nil [355 886])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [903 909]))              ) nil [887 1009])
            ("try" code nil nil [1068 1233])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1295 1298])
                ("base" variable nil (reparse-symbol function_parameters) [1300 1304])
                ("state" variable nil (reparse-symbol function_parameters) [1306 1311]))              ) nil [1276 1518])
            ("_HEAPTYPE" code nil nil [1519 1535])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                    ("proto" variable nil (reparse-symbol function_parameters) [1620 1625]))                  )
                nil [1599 2561])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2616 2619])
                ("args" variable nil (reparse-symbol function_parameters) [2621 2626]))              ) nil [2601 2664])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2680 2683]))                  )
                nil [2665 4346])
            ("_extension_registry" variable nil nil [4828 4852])
            ("_inverted_registry" variable nil nil [4882 4905])
            ("_extension_cache" variable nil nil [4936 4957])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5132 5138])
                    ("name" variable nil (reparse-symbol function_parameters) [5140 5144])
                    ("code" variable nil (reparse-symbol function_parameters) [5146 5150]))                  )
                nil [5114 5861])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5883 5889])
                    ("name" variable nil (reparse-symbol function_parameters) [5891 5895])
                    ("code" variable nil (reparse-symbol function_parameters) [5897 5901]))                  )
                nil [5862 6321])
            ("clear_extension_cache" function nil nil [6322 6380]))          
      :file "copy_reg.py"
      :pointmax 6801
      :fsize 6800
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [225 262])
            ("sys" include nil nil [264 280])
            ("_sre" include nil nil [264 280])
            ("sre_parse" include nil nil [281 297])
            ("sre_constants" include nil nil [298 325])
            ("assert" code nil nil [327 376])
            ("if" code nil nil [378 453])
            ("_identityfunction" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [476 477]))              ) nil [454 493])
            ("_LITERAL_CODES" variable nil nil [494 538])
            ("_REPEATING_CODES" variable nil nil [539 595])
            ("_SUCCESS_CODES" variable nil nil [596 636])
            ("_ASSERT_CODES" variable nil nil [637 678])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [693 697])
                ("pattern" variable nil (reparse-symbol function_parameters) [699 706])
                ("flags" variable nil (reparse-symbol function_parameters) [708 713]))              ) nil [680 6012])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6034 6041])
                ("flags" variable nil (reparse-symbol function_parameters) [6043 6048])
                ("code" variable nil (reparse-symbol function_parameters) [6050 6054])
                ("fixup" variable nil (reparse-symbol function_parameters) [6056 6061]))              ) nil [6013 6919])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6942 6949])
                ("fixup" variable nil (reparse-symbol function_parameters) [6951 6956]))              ) nil [6920 8337])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [8353 8357]))              ) nil [8338 8669])
            ("_optimize_unicode" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [10012 10019])
                ("fixup" variable nil (reparse-symbol function_parameters) [10021 10026]))              ) nil [9990 11581])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [11594 11596]))              ) nil [11582 11802])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [11821 11825])
                ("pattern" variable nil (reparse-symbol function_parameters) [11827 11834])
                ("flags" variable nil (reparse-symbol function_parameters) [11836 11841]))              ) nil [11803 15201])
            ("try" code nil nil [15202 15323])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [15337 15340]))              ) nil [15324 15437])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15448 15449])
                ("flags" variable nil (reparse-symbol function_parameters) [15451 15456]))              ) nil [15438 15683])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15696 15697])
                ("flags" variable nil (reparse-symbol function_parameters) [15699 15704]))              ) nil [15684 16428]))          
      :file "sre_compile.py"
      :pointmax 16428
      :fsize 16427
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sys" include nil nil [345 355])
            ("sre_constants" include nil nil [357 384])
            ("SPECIAL_CHARS" variable nil nil [386 417])
            ("REPEAT_CHARS" variable nil nil [418 439])
            ("DIGITS" variable nil nil [441 467])
            ("OCTDIGITS" variable nil nil [469 496])
            ("HEXDIGITS" variable nil nil [497 538])
            ("WHITESPACE" variable nil nil [540 571])
            ("ESCAPES" variable nil nil [573 849])
            ("CATEGORIES" variable nil nil [851 1327])
            ("FLAGS" variable nil nil [1329 1571])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1683 1697])
                            ("self" variable nil (reparse-symbol indented_block_body) [1706 1720])
                            ("self" variable nil (reparse-symbol indented_block_body) [1729 1744])
                            ("self" variable nil (reparse-symbol indented_block_body) [1753 1772]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1668 1672]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1655 1773])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1791 1795])
                            ("name" variable nil (reparse-symbol function_parameters) [1797 1801]))                          )
                        (reparse-symbol indented_block_body) [1777 2214])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2233 2237])
                            ("gid" variable nil (reparse-symbol function_parameters) [2239 2242]))                          )
                        (reparse-symbol indented_block_body) [2218 2275])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2294 2298])
                            ("gid" variable nil (reparse-symbol function_parameters) [2300 2303]))                          )
                        (reparse-symbol indented_block_body) [2279 2364]))                  
                :type "class")
                nil [1573 2364])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2476 2498])
                            ("if" code nil (reparse-symbol indented_block_body) [2507 2546])
                            ("self" variable nil (reparse-symbol indented_block_body) [2554 2570])
                            ("self" variable nil (reparse-symbol indented_block_body) [2579 2596]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2441 2445])
                            ("pattern" variable nil (reparse-symbol function_parameters) [2447 2454])
                            ("data" variable nil (reparse-symbol function_parameters) [2456 2460]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2428 2597])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2610 2614])
                            ("level" variable nil (reparse-symbol function_parameters) [2616 2621]))                          )
                        (reparse-symbol indented_block_body) [2601 3557])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3574 3578]))                          )
                        (reparse-symbol indented_block_body) [3561 3612])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3628 3632]))                          )
                        (reparse-symbol indented_block_body) [3616 3665])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3685 3689])
                            ("index" variable nil (reparse-symbol function_parameters) [3691 3696]))                          )
                        (reparse-symbol indented_block_body) [3669 3728])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3748 3752])
                            ("index" variable nil (reparse-symbol function_parameters) [3754 3759]))                          )
                        (reparse-symbol indented_block_body) [3732 3893])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3913 3917])
                            ("index" variable nil (reparse-symbol function_parameters) [3919 3924])
                            ("code" variable nil (reparse-symbol function_parameters) [3926 3930]))                          )
                        (reparse-symbol indented_block_body) [3897 3965])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3980 3984])
                            ("index" variable nil (reparse-symbol function_parameters) [3986 3991])
                            ("code" variable nil (reparse-symbol function_parameters) [3993 3997]))                          )
                        (reparse-symbol indented_block_body) [3969 4038])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4053 4057])
                            ("code" variable nil (reparse-symbol function_parameters) [4059 4063]))                          )
                        (reparse-symbol indented_block_body) [4042 4097])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4114 4118]))                          )
                        (reparse-symbol indented_block_body) [4101 5340]))                  
                :type "class")
                nil [2365 5340])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5398 5418])
                            ("self" variable nil (reparse-symbol indented_block_body) [5427 5441])
                            ("self" code nil (reparse-symbol indented_block_body) [5450 5463]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5375 5379])
                            ("string" variable nil (reparse-symbol function_parameters) [5381 5387]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5362 5464])
                    ("raise" code nil (reparse-symbol indented_block_body) [7715 7761]))                  
                :type "class")
                nil [5341 7762])
            ("_escape" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [7775 7781])
                ("escape" variable nil (reparse-symbol function_parameters) [7783 7789])
                ("state" variable nil (reparse-symbol function_parameters) [7791 7796]))              ) nil [7763 9455])
            ("_parse_sub" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [9471 9477])
                ("state" variable nil (reparse-symbol function_parameters) [9479 9484])
                ("nested" variable nil (reparse-symbol function_parameters) [9486 9492]))              ) nil [9456 11081])
            ("_parse_sub_cond" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11102 11108])
                ("state" variable nil (reparse-symbol function_parameters) [11110 11115])
                ("condgroup" variable nil (reparse-symbol function_parameters) [11117 11126]))              ) nil [11082 11600])
            ("_PATTERNENDERS" variable nil nil [11601 11627])
            ("_ASSERTCHARS" variable nil nil [11628 11653])
            ("_LOOKBEHINDASSERTCHARS" variable nil nil [11654 11688])
            ("_REPEATCODES" variable nil nil [11689 11733])
            ("_parse" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11746 11752])
                ("state" variable nil (reparse-symbol function_parameters) [11754 11759]))              ) nil [11735 26393])
            ("expand_template" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [26414 26422])
                ("match" variable nil (reparse-symbol function_parameters) [26424 26429]))              ) nil [26394 26799]))          
      :file "sre_parse.py"
      :pointmax 26799
      :fsize 26798
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax '((ASSIGN 26106 . 26107) (INDENT_BLOCK 7698 . 7711) (NEWLINE 7697 . 7698) (COLON 7696 . 7697)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"A more or less complete user-defined wrapper around dictionary objects.\"\"\"" code nil nil [1 78])
            ("UserDict" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [149 163])
                            ("if" code nil (reparse-symbol indented_block_body) [172 223])
                            ("if" code nil (reparse-symbol indented_block_body) [231 279]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113 117])
                            ("dict" variable nil (reparse-symbol function_parameters) [119 123])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [130 138]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [100 279])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [296 300]))                          )
                        (reparse-symbol indented_block_body) [283 326])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [342 346])
                            ("dict" variable nil (reparse-symbol function_parameters) [348 352]))                          )
                        (reparse-symbol indented_block_body) [330 493])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [497 512])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [550 554]))                          )
                        (reparse-symbol indented_block_body) [538 579])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [599 603])
                            ("key" variable nil (reparse-symbol function_parameters) [605 608]))                          )
                        (reparse-symbol indented_block_body) [583 810])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [830 834])
                            ("key" variable nil (reparse-symbol function_parameters) [836 839])
                            ("item" variable nil (reparse-symbol function_parameters) [841 845]))                          )
                        (reparse-symbol indented_block_body) [814 870])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [890 894])
                            ("key" variable nil (reparse-symbol function_parameters) [896 899]))                          )
                        (reparse-symbol indented_block_body) [874 921])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [935 939]))                          )
                        (reparse-symbol indented_block_body) [925 960])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [973 977]))                          )
                        (reparse-symbol indented_block_body) [964 1268])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1281 1285]))                          )
                        (reparse-symbol indented_block_body) [1272 1312])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1326 1330]))                          )
                        (reparse-symbol indented_block_body) [1316 1358])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1376 1380]))                          )
                        (reparse-symbol indented_block_body) [1362 1412])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1429 1433]))                          )
                        (reparse-symbol indented_block_body) [1416 1464])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1483 1487]))                          )
                        (reparse-symbol indented_block_body) [1468 1520])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1535 1539]))                          )
                        (reparse-symbol indented_block_body) [1524 1568])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1584 1588])
                            ("key" variable nil (reparse-symbol function_parameters) [1590 1593]))                          )
                        (reparse-symbol indented_block_body) [1572 1620])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1635 1639])
                            ("dict" variable nil (reparse-symbol function_parameters) [1641 1645])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1652 1660]))                          )
                        (reparse-symbol indented_block_body) [1624 2033])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2045 2049])
                            ("key" variable nil (reparse-symbol function_parameters) [2051 2054])
                            ("failobj" variable nil (reparse-symbol function_parameters) [2056 2063]))                          )
                        (reparse-symbol indented_block_body) [2037 2151])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2170 2174])
                            ("key" variable nil (reparse-symbol function_parameters) [2176 2179])
                            ("failobj" variable nil (reparse-symbol function_parameters) [2181 2188]))                          )
                        (reparse-symbol indented_block_body) [2155 2281])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2293 2297])
                            ("key" variable nil (reparse-symbol function_parameters) [2299 2302])
                            ("args" variable nil (reparse-symbol function_parameters) [2304 2309]))                          )
                        (reparse-symbol indented_block_body) [2285 2353])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2369 2373]))                          )
                        (reparse-symbol indented_block_body) [2357 2411])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2432 2436])
                            ("key" variable nil (reparse-symbol function_parameters) [2438 2441]))                          )
                        (reparse-symbol indented_block_body) [2415 2476])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2510 2513])
                            ("iterable" variable nil (reparse-symbol function_parameters) [2515 2523])
                            ("value" variable nil (reparse-symbol function_parameters) [2525 2530]))                          )
                        (reparse-symbol indented_block_body) [2480 2629]))                  
                :type "class")
                nil [80 2629])
            ("IterableUserDict" type
               (:superclasses ("UserDict")
                :members 
                  ( ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2681 2685]))                          )
                        (reparse-symbol indented_block_body) [2668 2719]))                  
                :type "class")
                nil [2630 2719])
            ("_abcoll" include nil nil [2720 2734])
            ("_abcoll" code nil nil [2735 2784])
            ("DictMixin" type
               (:members 
                  ( ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3286 3290]))                          )
                        (reparse-symbol indented_block_body) [3273 3343])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3359 3363])
                            ("key" variable nil (reparse-symbol function_parameters) [3365 3368]))                          )
                        (reparse-symbol indented_block_body) [3347 3476])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3497 3501])
                            ("key" variable nil (reparse-symbol function_parameters) [3503 3506]))                          )
                        (reparse-symbol indented_block_body) [3480 3542])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3623 3627]))                          )
                        (reparse-symbol indented_block_body) [3609 3684])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3701 3705]))                          )
                        (reparse-symbol indented_block_body) [3688 3739])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3813 3817]))                          )
                        (reparse-symbol indented_block_body) [3798 3878])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3893 3897]))                          )
                        (reparse-symbol indented_block_body) [3882 3948])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3962 3966]))                          )
                        (reparse-symbol indented_block_body) [3952 4007])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4021 4025]))                          )
                        (reparse-symbol indented_block_body) [4011 4086])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4105 4109])
                            ("key" variable nil (reparse-symbol function_parameters) [4111 4114])
                            ("default" variable nil (reparse-symbol function_parameters) [4116 4123]))                          )
                        (reparse-symbol indented_block_body) [4090 4253])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4265 4269])
                            ("key" variable nil (reparse-symbol function_parameters) [4271 4274])
                            ("args" variable nil (reparse-symbol function_parameters) [4276 4281]))                          )
                        (reparse-symbol indented_block_body) [4257 4614])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4630 4634]))                          )
                        (reparse-symbol indented_block_body) [4618 4814])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4829 4833])
                            ("other" variable nil (reparse-symbol function_parameters) [4835 4840])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4847 4855]))                          )
                        (reparse-symbol indented_block_body) [4818 5345])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5357 5361])
                            ("key" variable nil (reparse-symbol function_parameters) [5363 5366])
                            ("default" variable nil (reparse-symbol function_parameters) [5368 5375]))                          )
                        (reparse-symbol indented_block_body) [5349 5477])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5494 5498]))                          )
                        (reparse-symbol indented_block_body) [5481 5545])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5561 5565])
                            ("other" variable nil (reparse-symbol function_parameters) [5567 5572]))                          )
                        (reparse-symbol indented_block_body) [5549 5757])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5773 5777]))                          )
                        (reparse-symbol indented_block_body) [5761 5812]))                  
                :type "class")
                nil [2787 5812]))          
      :file "UserDict.py"
      :pointmax 5812
      :fsize 5811
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__doc__" variable nil nil [122 2057])
            ("__always_supported" variable nil nil [2169 2245])
            ("algorithms" variable nil nil [2247 2278])
            ("__all__" code nil nil [2280 2332])
            ("__get_builtin_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [2365 2369]))              ) nil [2335 3203])
            ("__get_openssl_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [3235 3239]))              ) nil [3205 3612])
            ("__py_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3627 3631])
                    ("string" variable nil (reparse-symbol function_parameters) [3633 3639]))                  )
                nil [3614 3831])
            ("__hash_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3848 3852])
                    ("string" variable nil (reparse-symbol function_parameters) [3854 3860]))                  )
                nil [3833 4393])
            ("try" code nil nil [4395 4566])
            ("for" code nil nil [4567 4894])
            ("del" code nil nil [4914 4961])
            ("del" code nil nil [4962 5013]))          
      :file "hashlib.py"
      :pointmax 5014
      :fsize 5013
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
atexit.py - allow programmer to define multiple exit functions to be executed
upon normal program termination.

One public function, register, is defined.
\"\"\"" code nil nil [1 163])
            ("__all__" variable nil nil [165 187])
            ("sys" include nil nil [189 199])
            ("_exithandlers" variable nil nil [201 219])
            ("_run_exitfuncs" function (:documentation "run any registered exit functions

    _exithandlers is traversed in reverse order so functions are executed
    last in, first out.
    ") nil [220 863])
            ("register" function
               (:documentation "register a function to be executed upon normal program termination

    func - function to be called at exit
    targs - optional arguments to pass to func
    kargs - optional keyword arguments to pass to func

    func is returned to facilitate usage as a decorator.
    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [878 882])
                    ("targs" variable nil (reparse-symbol function_parameters) [884 890])
                    ("kargs" variable nil (reparse-symbol function_parameters) [892 899]))                  )
                nil [865 1249])
            ("if" code nil nil [1250 1381])
            ("sys" variable nil nil [1381 1410])
            ("if" code nil nil [1412 1706]))          
      :file "atexit.py"
      :pointmax 1706
      :fsize 1705
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Open an arbitrary URL.

See the following document for more info on URLs:
\"Names and Addresses, URIs, URLs, URNs, URCs\", at
http://www.w3.org/pub/WWW/Addressing/Overview.html

See also the HTTP spec (from which the error codes are derived):
\"HTTP - Hypertext Transfer Protocol\", at
http://www.w3.org/pub/WWW/Protocols/

Related standards and specs:
- RFC1808: the \"relative URL\" spec. (authoritative status)
- RFC1738 - the \"URL standard\". (authoritative status)
- RFC1630 - the \"URI spec\". (informational status)

The object returned by URLopener().open(file) will differ per
protocol.  All you know is that is has methods read(), readline(),
readlines(), fileno(), close() and info().  The read*(), fileno()
and close() methods work like those of open files.
The info() method returns a mimetools.Message object which can be
used to query various info about the object, if available.
(mimetools.Message objects are queried with the getheader() method.)
\"\"\"" code nil nil [1 962])
            ("string" include nil nil [964 977])
            ("socket" include nil nil [978 991])
            ("os" include nil nil [992 1001])
            ("time" include nil nil [1002 1013])
            ("sys" include nil nil [1014 1024])
            ("base64" include nil nil [1025 1038])
            ("urlparse" include nil nil [1040 1080])
            ("__all__" variable nil nil [1082 1532])
            ("__version__" variable nil nil [1534 1554])
            ("MAXFTPCACHE" variable nil nil [1604 1620])
            ("if" code nil nil [1697 2270])
            ("_urlopener" variable nil nil [2534 2551])
            ("urlopen" function
               (:documentation "Create a file-like object for the specified URL to read from."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [2564 2567])
                    ("data" variable nil (reparse-symbol function_parameters) [2569 2573])
                    ("proxies" variable nil (reparse-symbol function_parameters) [2580 2587]))                  )
                nil [2552 3151])
            ("urlretrieve" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [3167 3170])
                ("filename" variable nil (reparse-symbol function_parameters) [3172 3180])
                ("reporthook" variable nil (reparse-symbol function_parameters) [3187 3197])
                ("data" variable nil (reparse-symbol function_parameters) [3204 3208]))              ) nil [3151 3363])
            ("urlcleanup" function nil nil [3363 3476])
            ("try" code nil nil [3493 3570])
            ("ContentTooShortError" type
               (:superclasses ("IOError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IOError" code nil (reparse-symbol indented_block_body) [3728 3759])
                            ("self" variable nil (reparse-symbol indented_block_body) [3768 3790]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3695 3699])
                            ("message" variable nil (reparse-symbol function_parameters) [3701 3708])
                            ("content" variable nil (reparse-symbol function_parameters) [3710 3717]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3682 3791]))                  
                :type "class")
                nil [3641 3791])
            ("ftpcache" variable nil nil [3792 3805])
            ("URLopener" type
               (:documentation "Class to open URLs.
    This is a class rather than just a subroutine because we may need
    more than one set of global protocol-specific options.
    Note -- this is a base class for those who don't want the
    automatic handling of errors type 302 (relocated) and 401
    (authorization needed)."
                :members 
                  ( ("__tempfiles" variable nil (reparse-symbol indented_block_body) [4139 4157])
                    ("version" code nil (reparse-symbol indented_block_body) [4163 4205])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [4279 4334])
                            ("assert" code nil (reparse-symbol indented_block_body) [4342 4405])
                            ("self" variable nil (reparse-symbol indented_block_body) [4414 4436])
                            ("self" variable nil (reparse-symbol indented_block_body) [4445 4481])
                            ("self" variable nil (reparse-symbol indented_block_body) [4490 4528])
                            ("self" variable nil (reparse-symbol indented_block_body) [4537 4585])
                            ("self" variable nil (reparse-symbol indented_block_body) [4594 4615])
                            ("self" variable nil (reparse-symbol indented_block_body) [4624 4649])
                            ("self" variable nil (reparse-symbol indented_block_body) [4674 4695])
                            ("self" variable nil (reparse-symbol indented_block_body) [5016 5040]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4242 4246])
                            ("proxies" variable nil (reparse-symbol function_parameters) [4248 4255])
                            ("x509" variable nil (reparse-symbol function_parameters) [4262 4268]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4229 5041])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5277 5281]))                          )
                        (reparse-symbol indented_block_body) [5265 5305])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5320 5324]))                          )
                        (reparse-symbol indented_block_body) [5310 5350])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5367 5371]))                          )
                        (reparse-symbol indented_block_body) [5355 5819])
                    ("addheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5838 5842])
                            ("args" variable nil (reparse-symbol function_parameters) [5844 5849]))                          
                        :documentation "Add a header to be used by the HTTP interface only
        e.g. u.addheader('Accept', 'sound/basic')")
                        (reparse-symbol indented_block_body) [5824 6004])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6043 6047])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [6049 6056])
                            ("data" variable nil (reparse-symbol function_parameters) [6058 6062]))                          
                        :documentation "Use URLopener().open(file) instead of open(file, 'r').")
                        (reparse-symbol indented_block_body) [6034 7496])
                    ("open_unknown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7518 7522])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7524 7531])
                            ("data" variable nil (reparse-symbol function_parameters) [7533 7537]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7501 7709])
                    ("open_unknown_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7737 7741])
                            ("proxy" variable nil (reparse-symbol function_parameters) [7743 7748])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7750 7757])
                            ("data" variable nil (reparse-symbol function_parameters) [7759 7763]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7714 7947])
                    ("retrieve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7990 7994])
                            ("url" variable nil (reparse-symbol function_parameters) [7996 7999])
                            ("filename" variable nil (reparse-symbol function_parameters) [8001 8009])
                            ("reporthook" variable nil (reparse-symbol function_parameters) [8016 8026])
                            ("data" variable nil (reparse-symbol function_parameters) [8033 8037]))                          
                        :documentation "retrieve(url) returns (filename, headers) for a local object
        or (tempfilename, headers) for a remote object.")
                        (reparse-symbol indented_block_body) [7977 10414])
                    ("open_http" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10505 10509])
                            ("url" variable nil (reparse-symbol function_parameters) [10511 10514])
                            ("data" variable nil (reparse-symbol function_parameters) [10516 10520]))                          
                        :documentation "Use HTTP protocol.")
                        (reparse-symbol indented_block_body) [10491 13413])
                    ("http_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13433 13437])
                            ("url" variable nil (reparse-symbol function_parameters) [13439 13442])
                            ("fp" variable nil (reparse-symbol function_parameters) [13444 13446])
                            ("errcode" variable nil (reparse-symbol function_parameters) [13448 13455])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [13457 13463])
                            ("headers" variable nil (reparse-symbol function_parameters) [13465 13472])
                            ("data" variable nil (reparse-symbol function_parameters) [13474 13478]))                          
                        :documentation "Handle http errors.
        Derived class can override this, or provide specific handlers
        named http_error_DDD where DDD is the 3-digit error code.")
                        (reparse-symbol indented_block_body) [13418 14135])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14163 14167])
                            ("url" variable nil (reparse-symbol function_parameters) [14169 14172])
                            ("fp" variable nil (reparse-symbol function_parameters) [14174 14176])
                            ("errcode" variable nil (reparse-symbol function_parameters) [14178 14185])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [14187 14193])
                            ("headers" variable nil (reparse-symbol function_parameters) [14195 14202]))                          
                        :documentation "Default error handler: close the connection and raise IOError.")
                        (reparse-symbol indented_block_body) [14140 14365])
                    ("if" code nil (reparse-symbol indented_block_body) [14370 17639])
                    ("open_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17658 17662])
                            ("url" variable nil (reparse-symbol function_parameters) [17664 17667]))                          
                        :documentation "Use local file or FTP depending on form of URL.")
                        (reparse-symbol indented_block_body) [17644 18055])
                    ("open_local_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18080 18084])
                            ("url" variable nil (reparse-symbol function_parameters) [18086 18089]))                          
                        :documentation "Use local file.")
                        (reparse-symbol indented_block_body) [18060 19595])
                    ("open_ftp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19613 19617])
                            ("url" variable nil (reparse-symbol function_parameters) [19619 19622]))                          
                        :documentation "Use FTP protocol.")
                        (reparse-symbol indented_block_body) [19600 22058])
                    ("open_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22077 22081])
                            ("url" variable nil (reparse-symbol function_parameters) [22083 22086])
                            ("data" variable nil (reparse-symbol function_parameters) [22088 22092]))                          
                        :documentation "Use \"data\" URL.")
                        (reparse-symbol indented_block_body) [22063 23724]))                  
                :type "class")
                nil [3806 23724])
            ("FancyURLopener" type
               (:documentation "Derived class with handlers for errors we can handle (perhaps)."
                :superclasses ("URLopener")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("URLopener" code nil (reparse-symbol indented_block_body) [23883 23924])
                            ("self" variable nil (reparse-symbol indented_block_body) [23933 23953])
                            ("self" variable nil (reparse-symbol indented_block_body) [23962 23976])
                            ("self" variable nil (reparse-symbol indented_block_body) [23985 24003]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23851 23855])
                            ("args" variable nil (reparse-symbol function_parameters) [23857 23862])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23864 23872]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23838 24004])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24032 24036])
                            ("url" variable nil (reparse-symbol function_parameters) [24038 24041])
                            ("fp" variable nil (reparse-symbol function_parameters) [24043 24045])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24047 24054])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24056 24062])
                            ("headers" variable nil (reparse-symbol function_parameters) [24064 24071]))                          
                        :documentation "Default error handling -- don't raise an exception.")
                        (reparse-symbol indented_block_body) [24009 24203])
                    ("http_error_302" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24227 24231])
                            ("url" variable nil (reparse-symbol function_parameters) [24233 24236])
                            ("fp" variable nil (reparse-symbol function_parameters) [24238 24240])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24242 24249])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24251 24257])
                            ("headers" variable nil (reparse-symbol function_parameters) [24259 24266])
                            ("data" variable nil (reparse-symbol function_parameters) [24268 24272]))                          
                        :documentation "Error 302 -- relocated (temporarily).")
                        (reparse-symbol indented_block_body) [24208 24879])
                    ("redirect_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24906 24910])
                            ("url" variable nil (reparse-symbol function_parameters) [24912 24915])
                            ("fp" variable nil (reparse-symbol function_parameters) [24917 24919])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24921 24928])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24930 24936])
                            ("headers" variable nil (reparse-symbol function_parameters) [24938 24945])
                            ("data" variable nil (reparse-symbol function_parameters) [24947 24951]))                          )
                        (reparse-symbol indented_block_body) [24884 25823])
                    ("http_error_301" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25847 25851])
                            ("url" variable nil (reparse-symbol function_parameters) [25853 25856])
                            ("fp" variable nil (reparse-symbol function_parameters) [25858 25860])
                            ("errcode" variable nil (reparse-symbol function_parameters) [25862 25869])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [25871 25877])
                            ("headers" variable nil (reparse-symbol function_parameters) [25879 25886])
                            ("data" variable nil (reparse-symbol function_parameters) [25888 25892]))                          
                        :documentation "Error 301 -- also relocated (permanently).")
                        (reparse-symbol indented_block_body) [25828 26033])
                    ("http_error_303" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26057 26061])
                            ("url" variable nil (reparse-symbol function_parameters) [26063 26066])
                            ("fp" variable nil (reparse-symbol function_parameters) [26068 26070])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26072 26079])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26081 26087])
                            ("headers" variable nil (reparse-symbol function_parameters) [26089 26096])
                            ("data" variable nil (reparse-symbol function_parameters) [26098 26102]))                          
                        :documentation "Error 303 -- also relocated (essentially identical to 302).")
                        (reparse-symbol indented_block_body) [26038 26260])
                    ("http_error_307" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26284 26288])
                            ("url" variable nil (reparse-symbol function_parameters) [26290 26293])
                            ("fp" variable nil (reparse-symbol function_parameters) [26295 26297])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26299 26306])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26308 26314])
                            ("headers" variable nil (reparse-symbol function_parameters) [26316 26323])
                            ("data" variable nil (reparse-symbol function_parameters) [26325 26329]))                          
                        :documentation "Error 307 -- relocated, but turn POST into error.")
                        (reparse-symbol indented_block_body) [26265 26598])
                    ("http_error_401" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26622 26626])
                            ("url" variable nil (reparse-symbol function_parameters) [26628 26631])
                            ("fp" variable nil (reparse-symbol function_parameters) [26633 26635])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26637 26644])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26646 26652])
                            ("headers" variable nil (reparse-symbol function_parameters) [26654 26661])
                            ("data" variable nil (reparse-symbol function_parameters) [26663 26667]))                          
                        :documentation "Error 401 -- authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [26603 27630])
                    ("http_error_407" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27654 27658])
                            ("url" variable nil (reparse-symbol function_parameters) [27660 27663])
                            ("fp" variable nil (reparse-symbol function_parameters) [27665 27667])
                            ("errcode" variable nil (reparse-symbol function_parameters) [27669 27676])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [27678 27684])
                            ("headers" variable nil (reparse-symbol function_parameters) [27686 27693])
                            ("data" variable nil (reparse-symbol function_parameters) [27695 27699]))                          
                        :documentation "Error 407 -- proxy authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [27635 28678])
                    ("retry_proxy_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28715 28719])
                            ("url" variable nil (reparse-symbol function_parameters) [28721 28724])
                            ("realm" variable nil (reparse-symbol function_parameters) [28726 28731])
                            ("data" variable nil (reparse-symbol function_parameters) [28733 28737]))                          )
                        (reparse-symbol indented_block_body) [28683 29427])
                    ("retry_proxy_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29465 29469])
                            ("url" variable nil (reparse-symbol function_parameters) [29471 29474])
                            ("realm" variable nil (reparse-symbol function_parameters) [29476 29481])
                            ("data" variable nil (reparse-symbol function_parameters) [29483 29487]))                          )
                        (reparse-symbol indented_block_body) [29432 30181])
                    ("retry_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30212 30216])
                            ("url" variable nil (reparse-symbol function_parameters) [30218 30221])
                            ("realm" variable nil (reparse-symbol function_parameters) [30223 30228])
                            ("data" variable nil (reparse-symbol function_parameters) [30230 30234]))                          )
                        (reparse-symbol indented_block_body) [30186 30686])
                    ("retry_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30718 30722])
                            ("url" variable nil (reparse-symbol function_parameters) [30724 30727])
                            ("realm" variable nil (reparse-symbol function_parameters) [30729 30734])
                            ("data" variable nil (reparse-symbol function_parameters) [30736 30740]))                          )
                        (reparse-symbol indented_block_body) [30691 31193])
                    ("get_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31218 31222])
                            ("host" variable nil (reparse-symbol function_parameters) [31224 31228])
                            ("realm" variable nil (reparse-symbol function_parameters) [31230 31235])
                            ("clear_cache" variable nil (reparse-symbol function_parameters) [31237 31248]))                          )
                        (reparse-symbol indented_block_body) [31198 31613])
                    ("prompt_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31641 31645])
                            ("host" variable nil (reparse-symbol function_parameters) [31647 31651])
                            ("realm" variable nil (reparse-symbol function_parameters) [31653 31658]))                          
                        :documentation "Override this in a GUI environment!")
                        (reparse-symbol indented_block_body) [31618 32117]))                  
                :type "class")
                nil [23726 32117])
            ("_localhost" variable nil nil [32140 32157])
            ("localhost" function (:documentation "Return the IP address of the magic hostname 'localhost'.") nil [32158 32368])
            ("_thishost" variable nil nil [32369 32385])
            ("thishost" function (:documentation "Return the IP address of the current host.") nil [32386 32586])
            ("_ftperrors" variable nil nil [32587 32604])
            ("ftperrors" function (:documentation "Return the set of errors raised by the FTP class.") nil [32605 32814])
            ("_noheaders" variable nil nil [32815 32832])
            ("noheaders" function (:documentation "Return an empty mimetools.Message object.") nil [32833 33236])
            ("ftpwrapper" type
               (:documentation "Class used by open_ftp() for cache of open FTP connections."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [33501 33517])
                            ("self" variable nil (reparse-symbol indented_block_body) [33526 33546])
                            ("self" variable nil (reparse-symbol indented_block_body) [33555 33571])
                            ("self" variable nil (reparse-symbol indented_block_body) [33580 33596])
                            ("self" variable nil (reparse-symbol indented_block_body) [33605 33621])
                            ("self" variable nil (reparse-symbol indented_block_body) [33630 33652])
                            ("self" variable nil (reparse-symbol indented_block_body) [33661 33678])
                            ("self" variable nil (reparse-symbol indented_block_body) [33687 33714])
                            ("self" code nil (reparse-symbol indented_block_body) [33723 33734]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33363 33367])
                            ("user" variable nil (reparse-symbol function_parameters) [33369 33373])
                            ("passwd" variable nil (reparse-symbol function_parameters) [33375 33381])
                            ("host" variable nil (reparse-symbol function_parameters) [33383 33387])
                            ("port" variable nil (reparse-symbol function_parameters) [33389 33393])
                            ("dirs" variable nil (reparse-symbol function_parameters) [33395 33399])
                            ("timeout" variable nil (reparse-symbol function_parameters) [33418 33425])
                            ("persistent" variable nil (reparse-symbol function_parameters) [33475 33485]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33350 33735])
                    ("init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33749 33753]))                          )
                        (reparse-symbol indented_block_body) [33740 34000])
                    ("retrfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34018 34022])
                            ("file" variable nil (reparse-symbol function_parameters) [34024 34028])
                            ("type" variable nil (reparse-symbol function_parameters) [34030 34034]))                          )
                        (reparse-symbol indented_block_body) [34005 35600])
                    ("endtransfer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35621 35625]))                          )
                        (reparse-symbol indented_block_body) [35605 35785])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35800 35804]))                          )
                        (reparse-symbol indented_block_body) [35790 35899])
                    ("file_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35919 35923]))                          )
                        (reparse-symbol indented_block_body) [35904 36064])
                    ("real_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36084 36088]))                          )
                        (reparse-symbol indented_block_body) [36069 36205]))                  
                :type "class")
                nil [33257 36205])
            ("addbase" type
               (:documentation "Base class for addinfo and addclosehook."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [36309 36321])
                            ("self" variable nil (reparse-symbol indented_block_body) [36330 36354])
                            ("self" variable nil (reparse-symbol indented_block_body) [36363 36395])
                            ("if" code nil (reparse-symbol indented_block_body) [36404 36473])
                            ("if" code nil (reparse-symbol indented_block_body) [36481 36606])
                            ("if" code nil (reparse-symbol indented_block_body) [36614 36774]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36290 36294])
                            ("fp" variable nil (reparse-symbol function_parameters) [36296 36298]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36277 36774])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36792 36796]))                          )
                        (reparse-symbol indented_block_body) [36779 36933])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36948 36952]))                          )
                        (reparse-symbol indented_block_body) [36938 37125]))                  
                :type "class")
                nil [36206 37125])
            ("addclosehook" type
               (:documentation "Class to add a close hook to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37267 37293])
                            ("self" variable nil (reparse-symbol indented_block_body) [37302 37328])
                            ("self" variable nil (reparse-symbol indented_block_body) [37337 37361]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37226 37230])
                            ("fp" variable nil (reparse-symbol function_parameters) [37232 37234])
                            ("closehook" variable nil (reparse-symbol function_parameters) [37236 37245])
                            ("hookargs" variable nil (reparse-symbol function_parameters) [37247 37256]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37213 37362])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37377 37381]))                          )
                        (reparse-symbol indented_block_body) [37367 37549]))                  
                :type "class")
                nil [37126 37549])
            ("addinfo" type
               (:documentation "class to add an info() method to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37677 37703])
                            ("self" variable nil (reparse-symbol indented_block_body) [37712 37734]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37649 37653])
                            ("fp" variable nil (reparse-symbol function_parameters) [37655 37657])
                            ("headers" variable nil (reparse-symbol function_parameters) [37659 37666]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37636 37735])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37749 37753]))                          )
                        (reparse-symbol indented_block_body) [37740 37784]))                  
                :type "class")
                nil [37550 37784])
            ("addinfourl" type
               (:documentation "class to add info() and geturl() methods to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37942 37968])
                            ("self" variable nil (reparse-symbol indented_block_body) [37977 37999])
                            ("self" variable nil (reparse-symbol indented_block_body) [38008 38022])
                            ("self" variable nil (reparse-symbol indented_block_body) [38031 38047]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37898 37902])
                            ("fp" variable nil (reparse-symbol function_parameters) [37904 37906])
                            ("headers" variable nil (reparse-symbol function_parameters) [37908 37915])
                            ("url" variable nil (reparse-symbol function_parameters) [37917 37920])
                            ("code" variable nil (reparse-symbol function_parameters) [37922 37926]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37885 38048])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38062 38066]))                          )
                        (reparse-symbol indented_block_body) [38053 38097])
                    ("getcode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38114 38118]))                          )
                        (reparse-symbol indented_block_body) [38102 38146])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38162 38166]))                          )
                        (reparse-symbol indented_block_body) [38151 38193]))                  
                :type "class")
                nil [37785 38193])
            ("try" code nil nil [38932 39076])
            ("toBytes" function
               (:documentation "toBytes(u\"URL\") --> 'URL'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39089 39092]))                  )
                nil [39077 39460])
            ("unwrap" function
               (:documentation "unwrap('<URL:type://host/path>') --> 'type://host/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39472 39475]))                  )
                nil [39461 39705])
            ("_typeprog" variable nil nil [39706 39722])
            ("splittype" function
               (:documentation "splittype('type:opaquestring') --> 'type', 'opaquestring'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39737 39740]))                  )
                nil [39723 40076])
            ("_hostprog" variable nil nil [40077 40093])
            ("splithost" function
               (:documentation "splithost('//host[:port]/path') --> 'host[:port]', '/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [40108 40111]))                  )
                nil [40094 40541])
            ("_userprog" variable nil nil [40542 40558])
            ("splituser" function
               (:documentation "splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [40573 40577]))                  )
                nil [40559 40872])
            ("_passwdprog" variable nil nil [40873 40891])
            ("splitpasswd" function
               (:documentation "splitpasswd('user:passwd') -> 'user', 'passwd'."
                :arguments 
                  ( ("user" variable nil (reparse-symbol function_parameters) [40908 40912]))                  )
                nil [40892 41196])
            ("_portprog" variable nil nil [41240 41256])
            ("splitport" function
               (:documentation "splitport('host:port') --> 'host', 'port'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [41271 41275]))                  )
                nil [41257 41542])
            ("_nportprog" variable nil nil [41543 41560])
            ("splitnport" function
               (:documentation "Split host and port, returning numeric port.
    Return given default port if no ':' found; defaults to -1.
    Return numerical port if a valid number are found after ':'.
    Return None if ':' but not a valid number."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [41576 41580])
                    ("defport" variable nil (reparse-symbol function_parameters) [41582 41589]))                  )
                nil [41561 42230])
            ("_queryprog" variable nil nil [42231 42248])
            ("splitquery" function
               (:documentation "splitquery('/path?query') --> '/path', 'query'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42264 42267]))                  )
                nil [42249 42541])
            ("_tagprog" variable nil nil [42542 42557])
            ("splittag" function
               (:documentation "splittag('/path#tag') --> '/path', 'tag'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42571 42574]))                  )
                nil [42558 42833])
            ("splitattr" function
               (:documentation "splitattr('/path;attr1=value1;attr2=value2;...') ->
        '/path', ['attr1=value1', 'attr2=value2', ...]."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42848 42851]))                  )
                nil [42834 43030])
            ("_valueprog" variable nil nil [43031 43048])
            ("splitvalue" function
               (:documentation "splitvalue('attr=value') --> 'attr', 'value'."
                :arguments 
                  ( ("attr" variable nil (reparse-symbol function_parameters) [43064 43068]))                  )
                nil [43049 43341])
            ("_hexdig" variable nil nil [43534 43568])
            ("_hextochr" variable nil nil [43569 43666])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [43680 43681]))                  )
                nil [43668 44062])
            ("unquote_plus" function
               (:documentation "unquote('%7e/abc+def') -> '~/abc def'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [44080 44081]))                  )
                nil [44063 44182])
            ("always_safe" variable nil nil [44183 44305])
            ("_safe_map" variable nil nil [44306 44320])
            ("for" code nil nil [44321 44460])
            ("_safe_quoters" variable nil nil [44460 44478])
            ("quote" function
               (:documentation "quote('abc def') -> 'abc%20def'

    Each part of a URL, e.g. the path info, the query, etc., has a
    different set of reserved characters that must be quoted.

    RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax lists
    the following reserved characters.

    reserved    = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" |
                  \"$\" | \",\"

    Each of these characters is reserved in some component of a URL,
    but not necessarily in all of them.

    By default, the quote function is intended for quoting the path
    section of a URL.  Thus, it will not encode '/'.  This character
    is reserved, but in typical usage the quote function is being
    called on a path where the existing slash characters are used as
    reserved characters.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [44490 44491])
                    ("safe" variable nil (reparse-symbol function_parameters) [44493 44497]))                  )
                nil [44480 45820])
            ("quote_plus" function
               (:documentation "Quote the query fragment of a URL; replacing ' ' with '+'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [45836 45837])
                    ("safe" variable nil (reparse-symbol function_parameters) [45839 45843]))                  )
                nil [45821 46028])
            ("urlencode" function
               (:documentation "Encode a sequence of two-element tuples or dictionary into a URL query string.

    If any values in the query arg are sequences and doseq is true, each
    sequence element is converted to a separate parameter.

    If the query arg is a sequence of two-element tuples, the order of the
    parameters in the output will match the order of parameters in the
    input.
    "
                :arguments 
                  ( ("query" variable nil (reparse-symbol function_parameters) [46043 46048])
                    ("doseq" variable nil (reparse-symbol function_parameters) [46050 46055]))                  )
                nil [46029 48456])
            ("getproxies_environment" function (:documentation "Return a dictionary of scheme -> proxy server URL mappings.

    Scan the environment for variables named <scheme>_proxy;
    this seems to be the standard convention.  If you need a
    different way, you can pass a proxies dictionary to the
    [Fancy]URLopener constructor.

    ") nil [48474 48987])
            ("proxy_bypass_environment" function
               (:documentation "Test if proxies should not be used for a particular host.

    Checks the environment for a variable named no_proxy, which should
    be a list of DNS suffixes separated by commas, or '*' for all hosts.
    "
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [49017 49021]))                  )
                nil [48988 49762])
            ("if" code nil nil [49764 57175])
            ("test1" function nil nil [57214 57504])
            ("reporthook" function (:arguments 
              ( ("blocknum" variable nil (reparse-symbol function_parameters) [57521 57529])
                ("blocksize" variable nil (reparse-symbol function_parameters) [57531 57540])
                ("totalsize" variable nil (reparse-symbol function_parameters) [57542 57551]))              ) nil [57506 57696]))          
      :file "urllib.py"
      :pointmax 57696
      :fsize 57695
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax '((NAME 44384 . 44393) (IF 44401 . 44403) (ELSE 44435 . 44439)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"subprocess - Subprocesses with accessible I/O streams

This module allows you to spawn processes, connect to their
input/output/error pipes, and obtain their return codes.  This module
intends to replace several other, older modules and functions, like:

os.system
os.spawn*
os.popen*
popen2.*
commands.*

Information about how the subprocess module can be used to replace these
modules and functions can be found below.



Using the subprocess module
===========================
This module defines one class called Popen:

class Popen(args, bufsize=0, executable=None,
            stdin=None, stdout=None, stderr=None,
            preexec_fn=None, close_fds=False, shell=False,
            cwd=None, env=None, universal_newlines=False,
            startupinfo=None, creationflags=0):


Arguments are:

args should be a string, or a sequence of program arguments.  The
program to execute is normally the first item in the args sequence or
string, but can be explicitly set by using the executable argument.

On UNIX, with shell=False (default): In this case, the Popen class
uses os.execvp() to execute the child program.  args should normally
be a sequence.  A string will be treated as a sequence with the string
as the only item (the program to execute).

On UNIX, with shell=True: If args is a string, it specifies the
command string to execute through the shell.  If args is a sequence,
the first item specifies the command string, and any additional items
will be treated as additional shell arguments.

On Windows: the Popen class uses CreateProcess() to execute the child
program, which operates on strings.  If args is a sequence, it will be
converted to a string using the list2cmdline method.  Please note that
not all MS Windows applications interpret the command line the same
way: The list2cmdline is designed for applications using the same
rules as the MS C runtime.

bufsize, if given, has the same meaning as the corresponding argument
to the built-in open() function: 0 means unbuffered, 1 means line
buffered, any other positive value means use a buffer of
(approximately) that size.  A negative bufsize means to use the system
default, which usually means fully buffered.  The default value for
bufsize is 0 (unbuffered).

stdin, stdout and stderr specify the executed programs' standard
input, standard output and standard error file handles, respectively.
Valid values are PIPE, an existing file descriptor (a positive
integer), an existing file object, and None.  PIPE indicates that a
new pipe to the child should be created.  With None, no redirection
will occur; the child's file handles will be inherited from the
parent.  Additionally, stderr can be STDOUT, which indicates that the
stderr data from the applications should be captured into the same
file handle as for stdout.

If preexec_fn is set to a callable object, this object will be called
in the child process just before the child is executed.

If close_fds is true, all file descriptors except 0, 1 and 2 will be
closed before the child process is executed.

if shell is true, the specified command will be executed through the
shell.

If cwd is not None, the current directory will be changed to cwd
before the child is executed.

If env is not None, it defines the environment variables for the new
process.

If universal_newlines is true, the file objects stdout and stderr are
opened as a text files, but lines may be terminated by any of '\\n',
the Unix end-of-line convention, '\\r', the Macintosh convention or
'\\r\\n', the Windows convention.  All of these external representations
are seen as '\\n' by the Python program.  Note: This feature is only
available if Python is built with universal newline support (the
default).  Also, the newlines attribute of the file objects stdout,
stdin and stderr are not updated by the communicate() method.

The startupinfo and creationflags, if given, will be passed to the
underlying CreateProcess() function.  They can specify things such as
appearance of the main window and priority for the new process.
(Windows only)


This module also defines some shortcut functions:

call(*popenargs, **kwargs):
    Run command with arguments.  Wait for command to complete, then
    return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call([\"ls\", \"-l\"])

check_call(*popenargs, **kwargs):
    Run command with arguments.  Wait for command to complete.  If the
    exit code was zero then return, otherwise raise
    CalledProcessError.  The CalledProcessError object will have the
    return code in the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    check_call([\"ls\", \"-l\"])

check_output(*popenargs, **kwargs):
    Run command with arguments and return its output as a byte string.

    If the exit code was non-zero it raises a CalledProcessError.  The
    CalledProcessError object will have the return code in the returncode
    attribute and output in the output attribute.

    The arguments are the same as for the Popen constructor.  Example:

    output = check_output([\"ls\", \"-l\", \"/dev/null\"])


Exceptions
----------
Exceptions raised in the child process, before the new program has
started to execute, will be re-raised in the parent.  Additionally,
the exception object will have one extra attribute called
'child_traceback', which is a string containing traceback information
from the childs point of view.

The most common exception raised is OSError.  This occurs, for
example, when trying to execute a non-existent file.  Applications
should prepare for OSErrors.

A ValueError will be raised if Popen is called with invalid arguments.

check_call() and check_output() will raise CalledProcessError, if the
called process returns a non-zero return code.


Security
--------
Unlike some other popen functions, this implementation will never call
/bin/sh implicitly.  This means that all characters, including shell
metacharacters, can safely be passed to child processes.


Popen objects
=============
Instances of the Popen class have the following methods:

poll()
    Check if child process has terminated.  Returns returncode
    attribute.

wait()
    Wait for child process to terminate.  Returns returncode attribute.

communicate(input=None)
    Interact with process: Send data to stdin.  Read data from stdout
    and stderr, until end-of-file is reached.  Wait for process to
    terminate.  The optional input argument should be a string to be
    sent to the child process, or None, if no data should be sent to
    the child.

    communicate() returns a tuple (stdout, stderr).

    Note: The data read is buffered in memory, so do not use this
    method if the data size is large or unlimited.

The following attributes are also available:

stdin
    If the stdin argument is PIPE, this attribute is a file object
    that provides input to the child process.  Otherwise, it is None.

stdout
    If the stdout argument is PIPE, this attribute is a file object
    that provides output from the child process.  Otherwise, it is
    None.

stderr
    If the stderr argument is PIPE, this attribute is file object that
    provides error output from the child process.  Otherwise, it is
    None.

pid
    The process ID of the child process.

returncode
    The child return code.  A None value indicates that the process
    hasn't terminated yet.  A negative value -N indicates that the
    child was terminated by signal N (UNIX only).


Replacing older functions with the subprocess module
====================================================
In this section, \"a ==> b\" means that b can be used as a replacement
for a.

Note: All functions in this section fail (more or less) silently if
the executed program cannot be found; this module raises an OSError
exception.

In the following examples, we assume that the subprocess module is
imported with \"from subprocess import *\".


Replacing /bin/sh shell backquote
---------------------------------
output=`mycmd myarg`
==>
output = Popen([\"mycmd\", \"myarg\"], stdout=PIPE).communicate()[0]


Replacing shell pipe line
-------------------------
output=`dmesg | grep hda`
==>
p1 = Popen([\"dmesg\"], stdout=PIPE)
p2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]


Replacing os.system()
---------------------
sts = os.system(\"mycmd\" + \" myarg\")
==>
p = Popen(\"mycmd\" + \" myarg\", shell=True)
pid, sts = os.waitpid(p.pid, 0)

Note:

* Calling the program through the shell is usually not required.

* It's easier to look at the returncode attribute than the
  exitstatus.

A more real-world example would look like this:

try:
    retcode = call(\"mycmd\" + \" myarg\", shell=True)
    if retcode < 0:
        print >>sys.stderr, \"Child was terminated by signal\", -retcode
    else:
        print >>sys.stderr, \"Child returned\", retcode
except OSError, e:
    print >>sys.stderr, \"Execution failed:\", e


Replacing os.spawn*
-------------------
P_NOWAIT example:

pid = os.spawnlp(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")
==>
pid = Popen([\"/bin/mycmd\", \"myarg\"]).pid


P_WAIT example:

retcode = os.spawnlp(os.P_WAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")
==>
retcode = call([\"/bin/mycmd\", \"myarg\"])


Vector example:

os.spawnvp(os.P_NOWAIT, path, args)
==>
Popen([path] + args[1:])


Environment example:

os.spawnlpe(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\", env)
==>
Popen([\"/bin/mycmd\", \"myarg\"], env={\"PATH\": \"/usr/bin\"})


Replacing os.popen*
-------------------
pipe = os.popen(\"cmd\", mode='r', bufsize)
==>
pipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdout=PIPE).stdout

pipe = os.popen(\"cmd\", mode='w', bufsize)
==>
pipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdin=PIPE).stdin


(child_stdin, child_stdout) = os.popen2(\"cmd\", mode, bufsize)
==>
p = Popen(\"cmd\", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdin, child_stdout) = (p.stdin, p.stdout)


(child_stdin,
 child_stdout,
 child_stderr) = os.popen3(\"cmd\", mode, bufsize)
==>
p = Popen(\"cmd\", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
(child_stdin,
 child_stdout,
 child_stderr) = (p.stdin, p.stdout, p.stderr)


(child_stdin, child_stdout_and_stderr) = os.popen4(\"cmd\", mode,
                                                   bufsize)
==>
p = Popen(\"cmd\", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)

On Unix, os.popen2, os.popen3 and os.popen4 also accept a sequence as
the command to execute, in which case arguments will be passed
directly to the program without shell intervention.  This usage can be
replaced as follows:

(child_stdin, child_stdout) = os.popen2([\"/bin/ls\", \"-l\"], mode,
                                        bufsize)
==>
p = Popen([\"/bin/ls\", \"-l\"], bufsize=bufsize, stdin=PIPE, stdout=PIPE)
(child_stdin, child_stdout) = (p.stdin, p.stdout)

Return code handling translates as follows:

pipe = os.popen(\"cmd\", 'w')
...
rc = pipe.close()
if rc is not None and rc % 256:
    print \"There were some errors\"
==>
process = Popen(\"cmd\", 'w', shell=True, stdin=PIPE)
...
process.stdin.close()
if process.wait() != 0:
    print \"There were some errors\"


Replacing popen2.*
------------------
(child_stdout, child_stdin) = popen2.popen2(\"somestring\", bufsize, mode)
==>
p = Popen([\"somestring\"], shell=True, bufsize=bufsize
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)

On Unix, popen2 also accepts a sequence as the command to execute, in
which case arguments will be passed directly to the program without
shell intervention.  This usage can be replaced as follows:

(child_stdout, child_stdin) = popen2.popen2([\"mycmd\", \"myarg\"], bufsize,
                                            mode)
==>
p = Popen([\"mycmd\", \"myarg\"], bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)

The popen2.Popen3 and popen2.Popen4 basically works as subprocess.Popen,
except that:

* subprocess.Popen raises an exception if the execution fails
* the capturestderr argument is replaced with the stderr argument.
* stdin=PIPE and stdout=PIPE must be specified.
* popen2 closes all filedescriptors by default, but you have to specify
  close_fds=True with subprocess.Popen.
\"\"\"" code nil nil [370 12819])
            ("sys" include nil nil [12821 12831])
            ("mswindows" variable nil nil [12832 12869])
            ("os" include nil nil [12871 12880])
            ("types" include nil nil [12881 12893])
            ("traceback" include nil nil [12894 12910])
            ("gc" include nil nil [12911 12920])
            ("signal" include nil nil [12921 12934])
            ("errno" include nil nil [12935 12947])
            ("CalledProcessError" type
               (:documentation "This exception is raised when a process run by check_call() or
    check_output() returns a non-zero exit status.
    The exit status will be stored in the returncode attribute;
    check_output() will also store the output in the output attribute.
    "
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [13353 13381])
                            ("self" variable nil (reparse-symbol indented_block_body) [13390 13404])
                            ("self" variable nil (reparse-symbol indented_block_body) [13413 13433]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13308 13312])
                            ("returncode" variable nil (reparse-symbol function_parameters) [13314 13324])
                            ("cmd" variable nil (reparse-symbol function_parameters) [13326 13329])
                            ("output" variable nil (reparse-symbol function_parameters) [13331 13337]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13295 13434])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13450 13454]))                          )
                        (reparse-symbol indented_block_body) [13438 13550]))                  
                :type "class")
                nil [12990 13550])
            ("if" code nil nil [13552 14140])
            ("__all__" variable nil nil [14142 14250])
            ("if" code nil nil [14252 14788])
            ("try" code nil nil [14788 14855])
            ("_active" variable nil nil [14856 14868])
            ("_cleanup" function nil nil [14870 15255])
            ("PIPE" code nil nil [15256 15265])
            ("STDOUT" code nil nil [15266 15277])
            ("_eintr_retry_call" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [15302 15306])
                ("args" variable nil (reparse-symbol function_parameters) [15308 15313]))              ) nil [15280 15498])
            ("call" function
               (:documentation "Run command with arguments.  Wait for command to complete, then
    return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call([\"ls\", \"-l\"])
    "
                :arguments 
                  ( ("popenargs" variable nil (reparse-symbol function_parameters) [15509 15519])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [15521 15529]))                  )
                nil [15500 15800])
            ("check_call" function
               (:documentation "Run command with arguments.  Wait for command to complete.  If
    the exit code was zero then return, otherwise raise
    CalledProcessError.  The CalledProcessError object will have the
    return code in the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    check_call([\"ls\", \"-l\"])
    "
                :arguments 
                  ( ("popenargs" variable nil (reparse-symbol function_parameters) [15817 15827])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [15829 15837]))                  )
                nil [15802 16395])
            ("check_output" function (:arguments 
              ( ("popenargs" variable nil (reparse-symbol function_parameters) [16414 16424])
                ("kwargs" variable nil (reparse-symbol function_parameters) [16426 16434]))              ) nil [16397 17640])
            ("list2cmdline" function
               (:documentation "
    Translate a sequence of arguments into a command line
    string, using the same rules as the MS C runtime:

    1) Arguments are delimited by white space, which is either a
       space or a tab.

    2) A string surrounded by double quotation marks is
       interpreted as a single argument, regardless of white space
       contained within.  A quoted string can be embedded in an
       argument.

    3) A double quotation mark preceded by a backslash is
       interpreted as a literal double quotation mark.

    4) Backslashes are interpreted literally, unless they
       immediately precede a double quotation mark.

    5) If backslashes immediately precede a double quotation mark,
       every pair of backslashes is interpreted as a literal
       backslash.  If the number of backslashes is odd, the last
       backslash escapes the next double quotation mark as
       described in rule 3.
    "
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [17659 17662]))                  )
                nil [17642 55622]))          
      :file "subprocess.py"
      :pointmax 55622
      :fsize 55621
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax '((INDENT_BLOCK 19263 . 55622) (NEWLINE 19224 . 19225) (COLON 19223 . 19224) (ELIF 19210 . 19214) (INDENT_BLOCK 19165 . 19198) (IF 19096 . 19098) (NAME 19132 . 19133) (NAME 19134 . 19138) (IF 19139 . 19141) (NAME 19145 . 19149) (NAME 19150 . 19152) (NAME 19153 . 19159) (NAME 19160 . 19163) (NEWLINE 19164 . 19165) (INDENT_BLOCK 15416 . 15498) (NEWLINE 15415 . 15416) (COLON 15414 . 15415) (TRY 15340 . 15343) (AS 15410 . 15412)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
\"pickle\" for information on these methods.
\"\"\"" code nil nil [1 1748])
            ("types" include nil nil [1750 1762])
            ("weakref" include nil nil [1763 1777])
            ("copy_reg" include nil nil [1778 1813])
            ("Error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1843 1847]))                  
                :type "class")
                nil [1815 1848])
            ("error" variable nil nil [1848 1861])
            ("try" code nil nil [1890 1982])
            ("__all__" variable nil nil [1983 2022])
            ("copy" function
               (:documentation "Shallow copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [2033 2034]))                  )
                nil [2024 2786])
            ("_copy_dispatch" variable nil nil [2788 2811])
            ("_copy_immutable" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [2833 2834]))              ) nil [2813 2850])
            ("for" code nil nil [2850 3084])
            ("for" code nil nil [3084 3228])
            ("_copy_with_constructor" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3256 3257]))              ) nil [3229 3282])
            ("for" code nil nil [3282 3344])
            ("_copy_with_copy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3372 3373]))              ) nil [3345 3396])
            ("if" code nil nil [3396 3468])
            ("_copy_inst" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3484 3485]))              ) nil [3469 3947])
            ("d" variable nil nil [3947 3981])
            ("del" code nil nil [3983 3988])
            ("deepcopy" function
               (:documentation "Deep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [4003 4004])
                    ("memo" variable nil (reparse-symbol function_parameters) [4006 4010])
                    ("_nil" variable nil (reparse-symbol function_parameters) [4017 4021]))                  )
                nil [3990 5472])
            ("_deepcopy_dispatch" variable nil nil [5473 5500])
            ("_deepcopy_atomic" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5523 5524])
                ("memo" variable nil (reparse-symbol function_parameters) [5526 5530]))              ) nil [5502 5546])
            ("d" variable nil nil [5546 5578])
            ("d" variable nil nil [5579 5615])
            ("d" variable nil nil [5616 5641])
            ("d" variable nil nil [5642 5668])
            ("d" variable nil nil [5669 5696])
            ("d" variable nil nil [5697 5723])
            ("try" code nil nil [5724 5790])
            ("d" variable nil nil [5790 5815])
            ("try" code nil nil [5816 5882])
            ("try" code nil nil [5882 5960])
            ("d" variable nil nil [5960 5986])
            ("d" variable nil nil [5987 6015])
            ("d" variable nil nil [6016 6053])
            ("d" variable nil nil [6054 6101])
            ("d" variable nil nil [6102 6142])
            ("d" variable nil nil [6143 6176])
            ("_deepcopy_list" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6197 6198])
                ("memo" variable nil (reparse-symbol function_parameters) [6200 6204]))              ) nil [6178 6303])
            ("d" variable nil nil [6303 6327])
            ("_deepcopy_tuple" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6349 6350])
                ("memo" variable nil (reparse-symbol function_parameters) [6352 6356]))              ) nil [6329 6655])
            ("d" variable nil nil [6655 6681])
            ("_deepcopy_dict" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6702 6703])
                ("memo" variable nil (reparse-symbol function_parameters) [6705 6709]))              ) nil [6683 6848])
            ("d" variable nil nil [6848 6872])
            ("if" code nil nil [6873 6937])
            ("_deepcopy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6959 6960])
                ("memo" variable nil (reparse-symbol function_parameters) [6962 6966]))              ) nil [6938 7062])
            ("_deepcopy_dispatch" variable nil nil [7062 7117])
            ("_keep_alive" function
               (:documentation "Keeps a reference to the object x in the memo.

    Because we remember objects by their id, we have
    to assure that possibly temporary objects are kept
    alive by referencing them.
    We store a reference at the id of the memo, which should
    normally not be used unless someone tries to deepcopy
    the memo itself...
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7135 7136])
                    ("memo" variable nil (reparse-symbol function_parameters) [7138 7142]))                  )
                nil [7119 7620])
            ("_deepcopy_inst" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [7640 7641])
                ("memo" variable nil (reparse-symbol function_parameters) [7643 7647]))              ) nil [7621 8211])
            ("d" variable nil nil [8211 8249])
            ("_reconstruct" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [8268 8269])
                ("info" variable nil (reparse-symbol function_parameters) [8271 8275])
                ("deep" variable nil (reparse-symbol function_parameters) [8277 8281])
                ("memo" variable nil (reparse-symbol function_parameters) [8283 8287]))              ) nil [8251 9696])
            ("del" code nil nil [9697 9702])
            ("del" code nil nil [9704 9713])
            ("_EmptyClass" type
               (:members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [9794 9798]))                  
                :type "class")
                nil [9771 9799])
            ("_test" function nil nil [9800 11480])
            ("if" code nil nil [11481 11520]))          
      :file "copy.py"
      :pointmax 11520
      :fsize 11519
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
csv.py - read/write/investigate CSV files
\"\"\"" code nil nil [2 51])
            ("re" include nil nil [53 62])
            ("functools" include nil nil [63 91])
            ("_csv" include nil nil [92 368])
            ("_csv" include nil nil [369 405])
            ("try" code nil nil [407 501])
            ("__all__" variable nil nil [502 847])
            ("Dialect" type
               (:documentation "Describe an Excel dialect.

    This must be subclassed (see csv.excel).  Valid attributes are:
    delimiter, quotechar, escapechar, doublequote, skipinitialspace,
    lineterminator, quoting.

    "
                :members 
                  ( ("_name" variable nil (reparse-symbol indented_block_body) [1078 1088])
                    ("_valid" variable nil (reparse-symbol indented_block_body) [1093 1107])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [1131 1147])
                    ("quotechar" variable nil (reparse-symbol indented_block_body) [1152 1168])
                    ("escapechar" variable nil (reparse-symbol indented_block_body) [1173 1190])
                    ("doublequote" variable nil (reparse-symbol indented_block_body) [1195 1213])
                    ("skipinitialspace" variable nil (reparse-symbol indented_block_body) [1218 1241])
                    ("lineterminator" variable nil (reparse-symbol indented_block_body) [1246 1267])
                    ("quoting" variable nil (reparse-symbol indented_block_body) [1272 1286])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1320 1381])
                            ("self" code nil (reparse-symbol indented_block_body) [1389 1405]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1305 1309]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1292 1406])
                    ("_validate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1425 1429]))                          )
                        (reparse-symbol indented_block_body) [1411 1587]))                  
                :type "class")
                nil [849 1587])
            ("excel" type
               (:documentation "Describe the usual properties of Excel-generated CSV files."
                :superclasses ("Dialect")
                :members 
                  ( ("delimiter" variable nil (reparse-symbol indented_block_body) [1684 1699])
                    ("quotechar" variable nil (reparse-symbol indented_block_body) [1704 1719])
                    ("doublequote" variable nil (reparse-symbol indented_block_body) [1724 1742])
                    ("skipinitialspace" variable nil (reparse-symbol indented_block_body) [1747 1771])
                    ("lineterminator" variable nil (reparse-symbol indented_block_body) [1776 1799])
                    ("quoting" variable nil (reparse-symbol indented_block_body) [1804 1827]))                  
                :type "class")
                nil [1588 1828])
            ("register_dialect" code nil nil [1828 1860])
            ("excel_tab" type
               (:documentation "Describe the usual properties of Excel-generated TAB-delimited files."
                :superclasses ("excel")
                :members 
                  ( ("delimiter" variable nil (reparse-symbol indented_block_body) [1970 1986]))                  
                :type "class")
                nil [1862 1987])
            ("register_dialect" code nil nil [1987 2027])
            ("DictReader" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2177 2206])
                            ("self" variable nil (reparse-symbol indented_block_body) [2245 2267])
                            ("self" variable nil (reparse-symbol indented_block_body) [2310 2332])
                            ("self" variable nil (reparse-symbol indented_block_body) [2381 2428])
                            ("self" variable nil (reparse-symbol indented_block_body) [2437 2459])
                            ("self" variable nil (reparse-symbol indented_block_body) [2468 2485]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2065 2069])
                            ("f" variable nil (reparse-symbol function_parameters) [2071 2072])
                            ("fieldnames" variable nil (reparse-symbol function_parameters) [2074 2084])
                            ("restkey" variable nil (reparse-symbol function_parameters) [2091 2098])
                            ("restval" variable nil (reparse-symbol function_parameters) [2105 2112])
                            ("dialect" variable nil (reparse-symbol function_parameters) [2136 2143])
                            ("args" variable nil (reparse-symbol function_parameters) [2153 2158])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2160 2166]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2052 2486])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2504 2508]))                          )
                        (reparse-symbol indented_block_body) [2491 2531])
                    ("fieldnames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2565 2569]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2536 2812])
                    ("fieldnames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2855 2859])
                            ("value" variable nil (reparse-symbol function_parameters) [2861 2866]))                          
                        :decorators 
                          ( ("fieldnames.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2817 2902])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2916 2920]))                          )
                        (reparse-symbol indented_block_body) [2907 3602]))                  
                :type "class")
                nil [2030 3602])
            ("DictWriter" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3752 3780])
                            ("self" variable nil (reparse-symbol indented_block_body) [3820 3842])
                            ("if" code nil (reparse-symbol indented_block_body) [3886 4072])
                            ("self" variable nil (reparse-symbol indented_block_body) [4080 4112])
                            ("self" variable nil (reparse-symbol indented_block_body) [4121 4168]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3639 3643])
                            ("f" variable nil (reparse-symbol function_parameters) [3645 3646])
                            ("fieldnames" variable nil (reparse-symbol function_parameters) [3648 3658])
                            ("restval" variable nil (reparse-symbol function_parameters) [3660 3667])
                            ("extrasaction" variable nil (reparse-symbol function_parameters) [3672 3684])
                            ("dialect" variable nil (reparse-symbol function_parameters) [3711 3718])
                            ("args" variable nil (reparse-symbol function_parameters) [3728 3733])
                            ("kwds" variable nil (reparse-symbol function_parameters) [3735 3741]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3626 4169])
                    ("writeheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4190 4194]))                          )
                        (reparse-symbol indented_block_body) [4174 4288])
                    ("_dict_to_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4311 4315])
                            ("rowdict" variable nil (reparse-symbol function_parameters) [4317 4324]))                          )
                        (reparse-symbol indented_block_body) [4293 4684])
                    ("writerow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4702 4706])
                            ("rowdict" variable nil (reparse-symbol function_parameters) [4708 4715]))                          )
                        (reparse-symbol indented_block_body) [4689 4783])
                    ("writerows" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4802 4806])
                            ("rowdicts" variable nil (reparse-symbol function_parameters) [4808 4816]))                          )
                        (reparse-symbol indented_block_body) [4788 4966]))                  
                :type "class")
                nil [3604 4966])
            ("try" code nil nil [5037 5092])
            ("Sniffer" type
               (:members 
                  ( ("'''
    \"Sniffs\" the format of a CSV file (i.e. delimiter, quotechar)
    Returns a Dialect object.
    '''" code nil (reparse-symbol indented_block_body) [5112 5219])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5312 5355]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5237 5241]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5224 5356])
                    ("sniff" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5372 5376])
                            ("sample" variable nil (reparse-symbol function_parameters) [5378 5384])
                            ("delimiters" variable nil (reparse-symbol function_parameters) [5386 5396]))                          
                        :documentation "
        Returns a dialect (or None) corresponding to the sample
        ")
                        (reparse-symbol indented_block_body) [5362 6306])
                    ("_guess_quote_and_delimiter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6343 6347])
                            ("data" variable nil (reparse-symbol function_parameters) [6349 6353])
                            ("delimiters" variable nil (reparse-symbol function_parameters) [6355 6365]))                          
                        :documentation "
        Looks for text enclosed between two identical quotes
        (the probable quotechar) which are preceded and followed
        by the same character (the probable delimiter).
        For example:
                         ,'some text',
        The quote with the most wins, same with the delimiter.
        If there is no quotechar the delimiter can't be determined
        this way.
        ")
                        (reparse-symbol indented_block_body) [6312 9296])
                    ("_guess_delimiter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9323 9327])
                            ("data" variable nil (reparse-symbol function_parameters) [9329 9333])
                            ("delimiters" variable nil (reparse-symbol function_parameters) [9335 9345]))                          
                        :documentation "
        The delimiter /should/ occur the same number of times on
        each row. However, due to malformed data, it may not. We don't want
        an all or nothing approach, so we allow for small variations in this
        number.
          1) build a table of the frequency of each character on every line.
          2) build a table of frequencies of this frequency (meta-frequency?),
             e.g.  'x occurred 5 times in 10 rows, 6 times in 1000 rows,
             7 times in 2 rows'
          3) use the mode of the meta-frequency to determine the /expected/
             frequency for that character
          4) find out how often the character actually meets that goal
          5) the character that best meets its goal is the delimiter
        For performance reasons, the data is evaluated in chunks, so it can
        try and evaluate the smallest portion of the data possible, evaluating
        additional chunks as necessary.
        ")
                        (reparse-symbol indented_block_body) [9302 13684])
                    ("has_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13705 13709])
                            ("sample" variable nil (reparse-symbol function_parameters) [13711 13717]))                          )
                        (reparse-symbol indented_block_body) [13690 16345]))                  
                :type "class")
                nil [5093 16345]))          
      :file "csv.py"
      :pointmax 16345
      :fsize 16344
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"A collection of string operations (most are no longer used).

Warning: most of the code you see here isn't normally used nowadays.
Beginning with Python 1.6, many of these functions are implemented as
methods on the standard string object. They used to be implemented by
a built-in module called strop, but strop is now obsolete itself.

Public module variables:

whitespace -- a string containing all characters considered whitespace
lowercase -- a string containing all characters considered lowercase letters
uppercase -- a string containing all characters considered uppercase letters
letters -- a string containing all characters considered letters
digits -- a string containing all characters considered decimal digits
hexdigits -- a string containing all characters considered hexadecimal digits
octdigits -- a string containing all characters considered octal digits
punctuation -- a string containing all characters considered punctuation
printable -- a string containing all characters considered printable

\"\"\"" code nil nil [1 1025])
            ("whitespace" variable nil nil [1083 1109])
            ("lowercase" variable nil nil [1110 1150])
            ("uppercase" variable nil nil [1151 1191])
            ("letters" code nil nil [1192 1223])
            ("ascii_lowercase" variable nil nil [1224 1251])
            ("ascii_uppercase" variable nil nil [1252 1279])
            ("ascii_letters" code nil nil [1280 1329])
            ("digits" variable nil nil [1330 1351])
            ("hexdigits" code nil nil [1352 1392])
            ("octdigits" variable nil nil [1393 1415])
            ("punctuation" variable nil nil [1416 1468])
            ("printable" code nil nil [1469 1524])
            ("l" variable nil nil [1603 1628])
            ("_idmap" variable nil nil [1629 1653])
            ("del" code nil nil [1654 1659])
            ("capwords" function
               (:documentation "capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1797 1798])
                    ("sep" variable nil (reparse-symbol function_parameters) [1800 1803]))                  )
                nil [1784 2290])
            ("_idmapL" variable nil nil [2325 2339])
            ("maketrans" function
               (:documentation "maketrans(frm, to) -> string

    Return a translation table (a string of 256 bytes long)
    suitable for use in string.translate.  The strings frm and to
    must be of the same length.

    "
                :arguments 
                  ( ("fromstr" variable nil (reparse-symbol function_parameters) [2354 2361])
                    ("tostr" variable nil (reparse-symbol function_parameters) [2363 2368]))                  )
                nil [2340 2890])
            ("re" include nil nil [2962 2978])
            ("_multimap" type
               (:documentation "Helper class for combining multiple mappings.

    Used by .{safe_,}substitute() to combine the mapping and keyword
    arguments.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3195 3218])
                            ("self" variable nil (reparse-symbol indented_block_body) [3227 3254]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3160 3164])
                            ("primary" variable nil (reparse-symbol function_parameters) [3166 3173])
                            ("secondary" variable nil (reparse-symbol function_parameters) [3175 3184]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3147 3255])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3276 3280])
                            ("key" variable nil (reparse-symbol function_parameters) [3282 3285]))                          )
                        (reparse-symbol indented_block_body) [3260 3404]))                  
                :type "class")
                nil [2980 3404])
            ("_TemplateMetaclass" type
               (:superclasses ("type")
                :members 
                  ( ("pattern" variable nil (reparse-symbol indented_block_body) [3442 3762])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3813 3870])
                            ("if" code nil (reparse-symbol indented_block_body) [3879 4113])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4121 4185]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3781 3784])
                            ("name" variable nil (reparse-symbol function_parameters) [3786 3790])
                            ("bases" variable nil (reparse-symbol function_parameters) [3792 3797])
                            ("dct" variable nil (reparse-symbol function_parameters) [3799 3802]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3768 4186]))                  
                :type "class")
                nil [3406 4186])
            ("Template" type
               (:documentation "A string class for supporting $-substitutions."
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [4265 4299])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [4305 4320])
                    ("idpattern" variable nil (reparse-symbol indented_block_body) [4325 4356])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4400 4424]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4375 4379])
                            ("template" variable nil (reparse-symbol function_parameters) [4381 4389]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4362 4425])
                    ("_invalid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4510 4514])
                            ("mo" variable nil (reparse-symbol function_parameters) [4516 4518]))                          )
                        (reparse-symbol indented_block_body) [4497 4884])
                    ("substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4904 4908])
                            ("args" variable nil (reparse-symbol function_parameters) [4910 4915])
                            ("kws" variable nil (reparse-symbol function_parameters) [4917 4922]))                          )
                        (reparse-symbol indented_block_body) [4889 5933])
                    ("safe_substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5958 5962])
                            ("args" variable nil (reparse-symbol function_parameters) [5964 5969])
                            ("kws" variable nil (reparse-symbol function_parameters) [5971 5976]))                          )
                        (reparse-symbol indented_block_body) [5938 7244]))                  
                :type "class")
                nil [4188 7244])
            ("index_error" variable nil nil [7475 7499])
            ("atoi_error" variable nil nil [7500 7523])
            ("atof_error" variable nil nil [7524 7547])
            ("atol_error" variable nil nil [7548 7571])
            ("lower" function
               (:documentation "lower(s) -> string

    Return a copy of the string s converted to lowercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7626 7627]))                  )
                nil [7616 7745])
            ("upper" function
               (:documentation "upper(s) -> string

    Return a copy of the string s converted to uppercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7799 7800]))                  )
                nil [7789 7918])
            ("swapcase" function
               (:documentation "swapcase(s) -> string

    Return a copy of the string s with upper case characters
    converted to lowercase and vice versa.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7973 7974]))                  )
                nil [7960 8144])
            ("strip" function
               (:documentation "strip(s [,chars]) -> string

    Return a copy of the string s with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8200 8201])
                    ("chars" variable nil (reparse-symbol function_parameters) [8203 8208]))                  )
                nil [8190 8517])
            ("lstrip" function
               (:documentation "lstrip(s [,chars]) -> string

    Return a copy of the string s with leading whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8561 8562])
                    ("chars" variable nil (reparse-symbol function_parameters) [8564 8569]))                  )
                nil [8550 8789])
            ("rstrip" function
               (:documentation "rstrip(s [,chars]) -> string

    Return a copy of the string s with trailing whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8834 8835])
                    ("chars" variable nil (reparse-symbol function_parameters) [8837 8842]))                  )
                nil [8823 9063])
            ("split" function
               (:documentation "split(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string.  If maxsplit is given, splits at no more than
    maxsplit places (resulting in at most maxsplit+1 words).  If sep
    is not specified or is None, any whitespace string is a separator.

    (split and splitfields are synonymous)

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9133 9134])
                    ("sep" variable nil (reparse-symbol function_parameters) [9136 9139])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9146 9154]))                  )
                nil [9123 9575])
            ("splitfields" variable nil nil [9575 9594])
            ("rsplit" function
               (:documentation "rsplit(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string, starting at the end of the string and working
    to the front.  If maxsplit is given, at most maxsplit splits are
    done. If sep is not specified or is None, any whitespace string
    is a separator.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9665 9666])
                    ("sep" variable nil (reparse-symbol function_parameters) [9668 9671])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9678 9686]))                  )
                nil [9654 10081])
            ("join" function
               (:documentation "join(list [,sep]) -> string

    Return a string composed of the words in list, with
    intervening occurrences of sep.  The default separator is a
    single space.

    (joinfields and join are synonymous)

    "
                :arguments 
                  ( ("words" variable nil (reparse-symbol function_parameters) [10129 10134])
                    ("sep" variable nil (reparse-symbol function_parameters) [10136 10139]))                  )
                nil [10120 10400])
            ("joinfields" variable nil nil [10400 10417])
            ("index" function
               (:documentation "index(s, sub [,start [,end]]) -> int

    Like find but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10476 10477])
                    ("args" variable nil (reparse-symbol function_parameters) [10479 10484]))                  )
                nil [10466 10636])
            ("rindex" function
               (:documentation "rindex(s, sub [,start [,end]]) -> int

    Like rfind but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10700 10701])
                    ("args" variable nil (reparse-symbol function_parameters) [10703 10708]))                  )
                nil [10689 10863])
            ("count" function
               (:documentation "count(s, sub[, start[,end]]) -> int

    Return the number of occurrences of substring sub in string
    s[start:end].  Optional arguments start and end are
    interpreted as in slice notation.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10923 10924])
                    ("args" variable nil (reparse-symbol function_parameters) [10926 10931]))                  )
                nil [10913 11171])
            ("find" function
               (:documentation "find(s, sub [,start [,end]]) -> in

    Return the lowest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11222 11223])
                    ("args" variable nil (reparse-symbol function_parameters) [11225 11230]))                  )
                nil [11213 11528])
            ("rfind" function
               (:documentation "rfind(s, sub [,start [,end]]) -> int

    Return the highest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11585 11586])
                    ("args" variable nil (reparse-symbol function_parameters) [11588 11593]))                  )
                nil [11575 11895])
            ("_float" variable nil nil [11917 11931])
            ("_int" variable nil nil [11932 11942])
            ("_long" variable nil nil [11943 11955])
            ("atof" function
               (:documentation "atof(s) -> float

    Return the floating point number represented by the string s.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11992 11993]))                  )
                nil [11983 12117])
            ("atoi" function
               (:documentation "atoi(s [,base]) -> int

    Return the integer represented by the string s in the given
    base, which defaults to 10.  The string s must consist of one
    or more digits, possibly preceded by a sign.  If base is 0, it
    is chosen from the leading characters of s, 0 for octal, 0x or
    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
    accepted.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12156 12157])
                    ("base" variable nil (reparse-symbol function_parameters) [12160 12164]))                  )
                nil [12147 12577])
            ("atol" function
               (:documentation "atol(s [,base]) -> long

    Return the long integer represented by the string s in the
    given base, which defaults to 10.  The string s must consist
    of one or more digits, possibly preceded by a sign.  If base
    is 0, it is chosen from the leading characters of s, 0 for
    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
    0x or 0X is accepted.  A trailing L or l is not accepted,
    unless base is 0.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12621 12622])
                    ("base" variable nil (reparse-symbol function_parameters) [12624 12628]))                  )
                nil [12612 13106])
            ("ljust" function
               (:documentation "ljust(s, width[, fillchar]) -> string

    Return a left-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13142 13143])
                    ("width" variable nil (reparse-symbol function_parameters) [13145 13150])
                    ("args" variable nil (reparse-symbol function_parameters) [13152 13157]))                  )
                nil [13132 13449])
            ("rjust" function
               (:documentation "rjust(s, width[, fillchar]) -> string

    Return a right-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13485 13486])
                    ("width" variable nil (reparse-symbol function_parameters) [13488 13493])
                    ("args" variable nil (reparse-symbol function_parameters) [13495 13500]))                  )
                nil [13475 13793])
            ("center" function
               (:documentation "center(s, width[, fillchar]) -> string

    Return a center version of s, in a field of the specified
    width. padded with spaces as needed.  The string is never
    truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13823 13824])
                    ("width" variable nil (reparse-symbol function_parameters) [13826 13831])
                    ("args" variable nil (reparse-symbol function_parameters) [13833 13838]))                  )
                nil [13812 14124])
            ("zfill" function
               (:documentation "zfill(x, width) -> string

    Pad a numeric string x with zeros on the left, to fill a field
    of the specified width.  The string x is never truncated.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [14336 14337])
                    ("width" variable nil (reparse-symbol function_parameters) [14339 14344]))                  )
                nil [14326 14603])
            ("expandtabs" function
               (:documentation "expandtabs(s [,tabsize]) -> string

    Return a copy of the string s with all tab characters replaced
    by the appropriate number of spaces, depending on the current
    column, and the tabsize (default 8).

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14718 14719])
                    ("tabsize" variable nil (reparse-symbol function_parameters) [14721 14728]))                  )
                nil [14703 14992])
            ("translate" function
               (:documentation "translate(s,table [,deletions]) -> string

    Return a copy of the string s, where all characters occurring
    in the optional argument deletions are removed, and the
    remaining characters have been mapped through the given
    translation table, which must be a string of length 256.  The
    deletions argument is not allowed for Unicode strings.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15054 15055])
                    ("table" variable nil (reparse-symbol function_parameters) [15057 15062])
                    ("deletions" variable nil (reparse-symbol function_parameters) [15064 15073]))                  )
                nil [15040 15803])
            ("capitalize" function
               (:documentation "capitalize(s) -> string

    Return a copy of the string s with only its first character
    capitalized.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15873 15874]))                  )
                nil [15858 16025])
            ("replace" function
               (:documentation "replace (str, old, new[, maxreplace]) -> string

    Return a copy of string str with all occurrences of substring
    old replaced by new. If the optional argument maxreplace is
    given, only the first maxreplace occurrences are replaced.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16071 16072])
                    ("old" variable nil (reparse-symbol function_parameters) [16074 16077])
                    ("new" variable nil (reparse-symbol function_parameters) [16079 16082])
                    ("maxreplace" variable nil (reparse-symbol function_parameters) [16084 16094]))                  )
                nil [16059 16401])
            ("try" code nil nil [16643 16848])
            ("Formatter" type
               (:superclasses ("object")
                :members 
                  ( ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17294 17298])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17300 17313])
                            ("args" variable nil (reparse-symbol function_parameters) [17315 17320])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17322 17330]))                          )
                        (reparse-symbol indented_block_body) [17283 17390])
                    ("vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17407 17411])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17413 17426])
                            ("args" variable nil (reparse-symbol function_parameters) [17428 17432])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17434 17440]))                          )
                        (reparse-symbol indented_block_body) [17395 17621])
                    ("_vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17639 17643])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17645 17658])
                            ("args" variable nil (reparse-symbol function_parameters) [17660 17664])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17666 17672])
                            ("used_args" variable nil (reparse-symbol function_parameters) [17674 17683])
                            ("recursion_depth" variable nil (reparse-symbol function_parameters) [17685 17700]))                          )
                        (reparse-symbol indented_block_body) [17626 18930])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18950 18954])
                            ("key" variable nil (reparse-symbol function_parameters) [18956 18959])
                            ("args" variable nil (reparse-symbol function_parameters) [18961 18965])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18967 18973]))                          )
                        (reparse-symbol indented_block_body) [18936 19091])
                    ("check_unused_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19119 19123])
                            ("used_args" variable nil (reparse-symbol function_parameters) [19125 19134])
                            ("args" variable nil (reparse-symbol function_parameters) [19136 19140])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19142 19148]))                          )
                        (reparse-symbol indented_block_body) [19097 19164])
                    ("format_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19187 19191])
                            ("value" variable nil (reparse-symbol function_parameters) [19193 19198])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [19200 19211]))                          )
                        (reparse-symbol indented_block_body) [19170 19256])
                    ("convert_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19280 19284])
                            ("value" variable nil (reparse-symbol function_parameters) [19286 19291])
                            ("conversion" variable nil (reparse-symbol function_parameters) [19293 19303]))                          )
                        (reparse-symbol indented_block_body) [19262 19621])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19996 20000])
                            ("format_string" variable nil (reparse-symbol function_parameters) [20002 20015]))                          )
                        (reparse-symbol indented_block_body) [19986 20067])
                    ("get_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20344 20348])
                            ("field_name" variable nil (reparse-symbol function_parameters) [20350 20360])
                            ("args" variable nil (reparse-symbol function_parameters) [20362 20366])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20368 20374]))                          )
                        (reparse-symbol indented_block_body) [20330 20757]))                  
                :type "class")
                nil [17254 20757]))          
      :file "string.py"
      :pointmax 20757
      :fsize 20756
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("MAXREPEAT" variable nil nil [432 449])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [557 561]))                  
                :type "class")
                nil [529 562])
            ("FAILURE" variable nil nil [576 595])
            ("SUCCESS" variable nil nil [596 615])
            ("ANY" variable nil nil [617 628])
            ("ANY_ALL" variable nil nil [629 648])
            ("ASSERT" variable nil nil [649 666])
            ("ASSERT_NOT" variable nil nil [667 692])
            ("AT" variable nil nil [693 702])
            ("BIGCHARSET" variable nil nil [703 728])
            ("BRANCH" variable nil nil [729 746])
            ("CALL" variable nil nil [747 760])
            ("CATEGORY" variable nil nil [761 782])
            ("CHARSET" variable nil nil [783 802])
            ("GROUPREF" variable nil nil [803 824])
            ("GROUPREF_IGNORE" variable nil nil [825 860])
            ("GROUPREF_EXISTS" variable nil nil [861 896])
            ("IN" variable nil nil [897 906])
            ("IN_IGNORE" variable nil nil [907 930])
            ("INFO" variable nil nil [931 944])
            ("JUMP" variable nil nil [945 958])
            ("LITERAL" variable nil nil [959 978])
            ("LITERAL_IGNORE" variable nil nil [979 1012])
            ("MARK" variable nil nil [1013 1026])
            ("MAX_REPEAT" variable nil nil [1027 1052])
            ("MAX_UNTIL" variable nil nil [1053 1076])
            ("MIN_REPEAT" variable nil nil [1077 1102])
            ("MIN_UNTIL" variable nil nil [1103 1126])
            ("NEGATE" variable nil nil [1127 1144])
            ("NOT_LITERAL" variable nil nil [1145 1172])
            ("NOT_LITERAL_IGNORE" variable nil nil [1173 1214])
            ("RANGE" variable nil nil [1215 1230])
            ("REPEAT" variable nil nil [1231 1248])
            ("REPEAT_ONE" variable nil nil [1249 1274])
            ("SUBPATTERN" variable nil nil [1275 1300])
            ("MIN_REPEAT_ONE" variable nil nil [1301 1334])
            ("AT_BEGINNING" variable nil nil [1348 1377])
            ("AT_BEGINNING_LINE" variable nil nil [1378 1417])
            ("AT_BEGINNING_STRING" variable nil nil [1418 1461])
            ("AT_BOUNDARY" variable nil nil [1462 1489])
            ("AT_NON_BOUNDARY" variable nil nil [1490 1525])
            ("AT_END" variable nil nil [1526 1543])
            ("AT_END_LINE" variable nil nil [1544 1571])
            ("AT_END_STRING" variable nil nil [1572 1603])
            ("AT_LOC_BOUNDARY" variable nil nil [1604 1639])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1640 1683])
            ("AT_UNI_BOUNDARY" variable nil nil [1684 1719])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1720 1763])
            ("CATEGORY_DIGIT" variable nil nil [1778 1811])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1812 1853])
            ("CATEGORY_SPACE" variable nil nil [1854 1887])
            ("CATEGORY_NOT_SPACE" variable nil nil [1888 1929])
            ("CATEGORY_WORD" variable nil nil [1930 1961])
            ("CATEGORY_NOT_WORD" variable nil nil [1962 2001])
            ("CATEGORY_LINEBREAK" variable nil nil [2002 2043])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2044 2093])
            ("CATEGORY_LOC_WORD" variable nil nil [2094 2133])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2134 2181])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2182 2223])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2224 2273])
            ("CATEGORY_UNI_SPACE" variable nil nil [2274 2315])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2316 2365])
            ("CATEGORY_UNI_WORD" variable nil nil [2366 2405])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2406 2453])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2454 2503])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2504 2561])
            ("OPCODES" variable nil nil [2563 3060])
            ("ATCODES" variable nil nil [3062 3286])
            ("CHCODES" variable nil nil [3288 3702])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3717 3721]))              ) nil [3704 3818])
            ("OPCODES" variable nil nil [3819 3846])
            ("ATCODES" variable nil nil [3847 3874])
            ("CHCODES" variable nil nil [3875 3902])
            ("OP_IGNORE" variable nil nil [3952 4082])
            ("AT_MULTILINE" variable nil nil [4084 4163])
            ("AT_LOCALE" variable nil nil [4165 4255])
            ("AT_UNICODE" variable nil nil [4257 4348])
            ("CH_LOCALE" variable nil nil [4350 4704])
            ("CH_UNICODE" variable nil nil [4706 5085])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5095 5116])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5156 5179])
            ("SRE_FLAG_LOCALE" variable nil nil [5199 5218])
            ("SRE_FLAG_MULTILINE" variable nil nil [5242 5264])
            ("SRE_FLAG_DOTALL" variable nil nil [5300 5320])
            ("SRE_FLAG_UNICODE" variable nil nil [5355 5376])
            ("SRE_FLAG_VERBOSE" variable nil nil [5398 5419])
            ("SRE_FLAG_DEBUG" variable nil nil [5453 5473])
            ("SRE_INFO_PREFIX" variable nil nil [5514 5533])
            ("SRE_INFO_LITERAL" variable nil nil [5547 5567])
            ("SRE_INFO_CHARSET" variable nil nil [5614 5634])
            ("if" code nil nil [5683 7138]))          
      :file "sre_constants.py"
      :pointmax 7138
      :fsize 7137
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
via collections; they are defined here only to alleviate certain
bootstrapping issues.  Unit tests are in test_collections.
\"\"\"" code nil nil [102 371])
            ("abc" include nil nil [373 412])
            ("sys" include nil nil [413 423])
            ("__all__" variable nil nil [425 708])
            ("_hasattr" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [749 750])
                ("attr" variable nil (reparse-symbol function_parameters) [752 756]))              ) nil [736 911])
            ("Hashable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [933 956])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [995 999]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [962 1019])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1062 1065])
                            ("C" variable nil (reparse-symbol function_parameters) [1067 1068]))                          )
                        (reparse-symbol indented_block_body) [1024 1502]))                  
                :type "class")
                nil [913 1502])
            ("Iterable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [1524 1547])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1586 1590]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1553 1637])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1680 1683])
                            ("C" variable nil (reparse-symbol function_parameters) [1685 1686]))                          )
                        (reparse-symbol indented_block_body) [1642 1815]))                  
                :type "class")
                nil [1504 1815])
            ("Iterable" code nil nil [1816 1838])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1901 1905]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1872 1936])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1954 1958]))                          )
                        (reparse-symbol indented_block_body) [1941 1981])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2024 2027])
                            ("C" variable nil (reparse-symbol function_parameters) [2029 2030]))                          )
                        (reparse-symbol indented_block_body) [1986 2183]))                  
                :type "class")
                nil [1841 2183])
            ("Sized" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2202 2225])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2263 2267]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2231 2287])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2330 2333])
                            ("C" variable nil (reparse-symbol function_parameters) [2335 2336]))                          )
                        (reparse-symbol indented_block_body) [2292 2461]))                  
                :type "class")
                nil [2185 2461])
            ("Container" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2484 2507])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2550 2554])
                            ("x" variable nil (reparse-symbol function_parameters) [2556 2557]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2513 2581])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2624 2627])
                            ("C" variable nil (reparse-symbol function_parameters) [2629 2630]))                          )
                        (reparse-symbol indented_block_body) [2586 2764]))                  
                :type "class")
                nil [2463 2764])
            ("Callable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2786 2809])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2848 2852])
                            ("args" variable nil (reparse-symbol function_parameters) [2854 2859])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2861 2867]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2815 2891])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2934 2937])
                            ("C" variable nil (reparse-symbol function_parameters) [2939 2940]))                          )
                        (reparse-symbol indented_block_body) [2896 3069]))                  
                :type "class")
                nil [2766 3069])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3512 3516])
                            ("other" variable nil (reparse-symbol function_parameters) [3518 3523]))                          )
                        (reparse-symbol indented_block_body) [3501 3768])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3784 3788])
                            ("other" variable nil (reparse-symbol function_parameters) [3790 3795]))                          )
                        (reparse-symbol indented_block_body) [3773 3932])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3948 3952])
                            ("other" variable nil (reparse-symbol function_parameters) [3954 3959]))                          )
                        (reparse-symbol indented_block_body) [3937 4063])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4079 4083])
                            ("other" variable nil (reparse-symbol function_parameters) [4085 4090]))                          )
                        (reparse-symbol indented_block_body) [4068 4195])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4211 4215])
                            ("other" variable nil (reparse-symbol function_parameters) [4217 4222]))                          )
                        (reparse-symbol indented_block_body) [4200 4360])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4376 4380])
                            ("other" variable nil (reparse-symbol function_parameters) [4382 4387]))                          )
                        (reparse-symbol indented_block_body) [4365 4425])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4466 4469])
                            ("it" variable nil (reparse-symbol function_parameters) [4471 4473]))                          )
                        (reparse-symbol indented_block_body) [4430 4702])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4719 4723])
                            ("other" variable nil (reparse-symbol function_parameters) [4725 4730]))                          )
                        (reparse-symbol indented_block_body) [4707 4889])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4909 4913])
                            ("other" variable nil (reparse-symbol function_parameters) [4915 4920]))                          )
                        (reparse-symbol indented_block_body) [4894 5030])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5046 5050])
                            ("other" variable nil (reparse-symbol function_parameters) [5052 5057]))                          )
                        (reparse-symbol indented_block_body) [5035 5234])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5251 5255])
                            ("other" variable nil (reparse-symbol function_parameters) [5257 5262]))                          )
                        (reparse-symbol indented_block_body) [5239 5554])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5571 5575])
                            ("other" variable nil (reparse-symbol function_parameters) [5577 5582]))                          )
                        (reparse-symbol indented_block_body) [5559 5804])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [5880 5895])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5911 5915]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [5901 6904]))                  
                :type "class")
                nil [3086 6904])
            ("Set" code nil nil [6905 6928])
            ("MutableSet" type
               (:superclasses ("Set")
                :members 
                  ( ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6987 6991])
                            ("value" variable nil (reparse-symbol function_parameters) [6993 6998]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [6959 7065])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7102 7106])
                            ("value" variable nil (reparse-symbol function_parameters) [7108 7113]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [7070 7221])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7237 7241])
                            ("value" variable nil (reparse-symbol function_parameters) [7243 7248]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [7226 7411])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7424 7428]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [7416 7668])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7683 7687]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [7673 7865])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7882 7886])
                            ("it" variable nil (reparse-symbol function_parameters) [7888 7890]))                          )
                        (reparse-symbol indented_block_body) [7870 7966])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7984 7988])
                            ("it" variable nil (reparse-symbol function_parameters) [7990 7992]))                          )
                        (reparse-symbol indented_block_body) [7971 8081])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8099 8103])
                            ("it" variable nil (reparse-symbol function_parameters) [8105 8107]))                          )
                        (reparse-symbol indented_block_body) [8086 8438])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8456 8460])
                            ("it" variable nil (reparse-symbol function_parameters) [8462 8464]))                          )
                        (reparse-symbol indented_block_body) [8443 8614]))                  
                :type "class")
                nil [6931 8614])
            ("MutableSet" code nil nil [8615 8639])
            ("Mapping" type
               (:superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8745 8749])
                            ("key" variable nil (reparse-symbol function_parameters) [8751 8754]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8709 8780])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8793 8797])
                            ("key" variable nil (reparse-symbol function_parameters) [8799 8802])
                            ("default" variable nil (reparse-symbol function_parameters) [8804 8811]))                          )
                        (reparse-symbol indented_block_body) [8785 8913])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8935 8939])
                            ("key" variable nil (reparse-symbol function_parameters) [8941 8944]))                          )
                        (reparse-symbol indented_block_body) [8918 9070])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9088 9092]))                          )
                        (reparse-symbol indented_block_body) [9075 9121])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9141 9145]))                          )
                        (reparse-symbol indented_block_body) [9126 9201])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9220 9224]))                          )
                        (reparse-symbol indented_block_body) [9206 9287])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9301 9305]))                          )
                        (reparse-symbol indented_block_body) [9292 9334])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9349 9353]))                          )
                        (reparse-symbol indented_block_body) [9339 9406])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9422 9426]))                          )
                        (reparse-symbol indented_block_body) [9411 9472])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [9552 9567])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9584 9588])
                            ("other" variable nil (reparse-symbol function_parameters) [9590 9595]))                          )
                        (reparse-symbol indented_block_body) [9573 9732])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9748 9752])
                            ("other" variable nil (reparse-symbol function_parameters) [9754 9759]))                          )
                        (reparse-symbol indented_block_body) [9737 9797]))                  
                :type "class")
                nil [8661 9797])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9866 9889]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9842 9846])
                            ("mapping" variable nil (reparse-symbol function_parameters) [9848 9855]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9829 9890])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9907 9911]))                          )
                        (reparse-symbol indented_block_body) [9895 9948])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9966 9970]))                          )
                        (reparse-symbol indented_block_body) [9953 10042]))                  
                :type "class")
                nil [9798 10042])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10119 10123])
                            ("it" variable nil (reparse-symbol function_parameters) [10125 10127]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10083 10153])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10175 10179])
                            ("key" variable nil (reparse-symbol function_parameters) [10181 10184]))                          )
                        (reparse-symbol indented_block_body) [10158 10223])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10241 10245]))                          )
                        (reparse-symbol indented_block_body) [10228 10304]))                  
                :type "class")
                nil [10044 10304])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10382 10386])
                            ("it" variable nil (reparse-symbol function_parameters) [10388 10390]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10346 10416])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10438 10442])
                            ("item" variable nil (reparse-symbol function_parameters) [10444 10448]))                          )
                        (reparse-symbol indented_block_body) [10421 10619])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10637 10641]))                          )
                        (reparse-symbol indented_block_body) [10624 10722]))                  
                :type "class")
                nil [10306 10722])
            ("ValuesView" type
               (:superclasses ("MappingView")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10777 10781])
                            ("value" variable nil (reparse-symbol function_parameters) [10783 10788]))                          )
                        (reparse-symbol indented_block_body) [10760 10918])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10936 10940]))                          )
                        (reparse-symbol indented_block_body) [10923 11014]))                  
                :type "class")
                nil [10724 11014])
            ("MutableMapping" type
               (:superclasses ("Mapping")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11088 11092])
                            ("key" variable nil (reparse-symbol function_parameters) [11094 11097])
                            ("value" variable nil (reparse-symbol function_parameters) [11099 11104]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11052 11130])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11171 11175])
                            ("key" variable nil (reparse-symbol function_parameters) [11177 11180]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11135 11206])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [11211 11230])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11244 11248])
                            ("key" variable nil (reparse-symbol function_parameters) [11250 11253])
                            ("default" variable nil (reparse-symbol function_parameters) [11255 11262]))                          )
                        (reparse-symbol indented_block_body) [11236 11497])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11514 11518]))                          )
                        (reparse-symbol indented_block_body) [11502 11700])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11715 11719]))                          )
                        (reparse-symbol indented_block_body) [11705 11832])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [11848 11853])
                        ("kwds" variable nil (reparse-symbol function_parameters) [11855 11861]))                      ) (reparse-symbol indented_block_body) [11837 12576])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12596 12600])
                            ("key" variable nil (reparse-symbol function_parameters) [12602 12605])
                            ("default" variable nil (reparse-symbol function_parameters) [12607 12614]))                          )
                        (reparse-symbol indented_block_body) [12581 12744]))                  
                :type "class")
                nil [11016 12744])
            ("MutableMapping" code nil nil [12745 12774])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13031 13035])
                            ("index" variable nil (reparse-symbol function_parameters) [13037 13042]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12995 13070])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13088 13092]))                          )
                        (reparse-symbol indented_block_body) [13075 13267])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13289 13293])
                            ("value" variable nil (reparse-symbol function_parameters) [13295 13300]))                          )
                        (reparse-symbol indented_block_body) [13272 13402])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13424 13428]))                          )
                        (reparse-symbol indented_block_body) [13407 13502])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13517 13521])
                            ("value" variable nil (reparse-symbol function_parameters) [13523 13528]))                          )
                        (reparse-symbol indented_block_body) [13507 13645])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13660 13664])
                            ("value" variable nil (reparse-symbol function_parameters) [13666 13671]))                          )
                        (reparse-symbol indented_block_body) [13650 13724]))                  
                :type "class")
                nil [12797 13724])
            ("Sequence" code nil nil [13725 13749])
            ("Sequence" code nil nil [13750 13779])
            ("Sequence" code nil nil [13780 13805])
            ("Sequence" code nil nil [13806 13831])
            ("MutableSequence" type
               (:superclasses ("Sequence")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13908 13912])
                            ("index" variable nil (reparse-symbol function_parameters) [13914 13919])
                            ("value" variable nil (reparse-symbol function_parameters) [13921 13926]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13872 13954])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13995 13999])
                            ("index" variable nil (reparse-symbol function_parameters) [14001 14006]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13959 14034])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14070 14074])
                            ("index" variable nil (reparse-symbol function_parameters) [14076 14081])
                            ("value" variable nil (reparse-symbol function_parameters) [14083 14088]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [14039 14116])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14132 14136])
                            ("value" variable nil (reparse-symbol function_parameters) [14138 14143]))                          )
                        (reparse-symbol indented_block_body) [14121 14184])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14201 14205]))                          )
                        (reparse-symbol indented_block_body) [14189 14316])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14332 14336])
                            ("values" variable nil (reparse-symbol function_parameters) [14338 14344]))                          )
                        (reparse-symbol indented_block_body) [14321 14399])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14412 14416])
                            ("index" variable nil (reparse-symbol function_parameters) [14418 14423]))                          )
                        (reparse-symbol indented_block_body) [14404 14494])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14510 14514])
                            ("value" variable nil (reparse-symbol function_parameters) [14516 14521]))                          )
                        (reparse-symbol indented_block_body) [14499 14560])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14578 14582])
                            ("values" variable nil (reparse-symbol function_parameters) [14584 14590]))                          )
                        (reparse-symbol indented_block_body) [14565 14641]))                  
                :type "class")
                nil [13834 14641])
            ("MutableSequence" code nil nil [14642 14672]))          
      :file "_abcoll.py"
      :pointmax 14673
      :fsize 14672
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax '((NAME 12157 . 12162) (IF 12173 . 12175) (ELSE 12191 . 12195)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"\\
This module provides socket operations and some related functions.
On Unix, it supports IP (Internet Protocol) and Unix domain sockets.
On other systems, it only supports IP. Functions specific for a
socket are available as methods of the socket object.

Functions:

socket() -- create a new socket object
socketpair() -- create a pair of new socket objects [*]
fromfd() -- create a socket object from an open file descriptor [*]
gethostname() -- return the current hostname
gethostbyname() -- map a hostname to its IP number
gethostbyaddr() -- map an IP number or hostname to DNS info
getservbyname() -- map a service name and a protocol name to a port number
getprotobyname() -- map a protocol name (e.g. 'tcp') to a number
ntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order
htons(), htonl() -- convert 16, 32 bit int from host to network byte order
inet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format
inet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)
ssl() -- secure socket layer support (only available if configured)
socket.getdefaulttimeout() -- get the default timeout value
socket.setdefaulttimeout() -- set the default timeout value
create_connection() -- connects to an address, with an optional timeout and
                       optional source address.

 [*] not available on all platforms!

Special objects:

SocketType -- type object for socket objects
error -- exception raised for I/O errors
has_ipv6 -- boolean value indicating if IPv6 is supported

Integer constants:

AF_INET, AF_UNIX -- socket domains (first argument to socket() call)
SOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)

Many other constants may be defined; these may be used in calls to
the setsockopt() and getsockopt() methods.
\"\"\"" code nil nil [94 1909])
            ("_socket" include nil nil [1911 1925])
            ("_socket" include nil nil [1926 1947])
            ("functools" include nil nil [1948 1977])
            ("types" include nil nil [1978 2006])
            ("try" code nil nil [2008 2950])
            ("warnings" include nil nil [2951 2975])
            ("sys" include nil nil [2951 2975])
            ("os" include nil nil [2951 2975])
            ("try" code nil nil [2977 3071])
            ("try" code nil nil [3072 3131])
            ("EBADF" variable nil nil [3131 3165])
            ("EINTR" variable nil nil [3166 3200])
            ("__all__" variable nil nil [3202 3244])
            ("__all__" code nil nil [3245 3290])
            ("_realsocket" variable nil nil [3293 3313])
            ("if" code nil nil [3333 4229])
            ("getfqdn" function
               (:documentation "Get fully qualified domain name from name.

    An empty argument is interpreted as meaning the local host.

    First the hostname returned by gethostbyaddr() is checked, then
    possibly existing aliases. In case no FQDN is available, hostname
    from gethostname() is returned.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4244 4248]))                  )
                nil [4232 4923])
            ("_socketmethods" variable nil nil [4925 5136])
            ("if" code nil nil [5138 5207])
            ("if" code nil nil [5208 5291])
            ("_delegate_methods" variable nil nil [5402 5511])
            ("_closedsocket" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5546 5560])
                    ("_dummy" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [5576 5581]))                      ) (reparse-symbol indented_block_body) [5565 5634])
                    ("send" variable nil (reparse-symbol indented_block_body) [5697 5765])
                    ("__getattr__" variable nil (reparse-symbol indented_block_body) [5770 5790]))                  
                :type "class")
                nil [5513 5791])
            ("_socketobject" type
               (:superclasses ("object")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [6031 6060])
                    ("__slots__" code nil (reparse-symbol indented_block_body) [6066 6128])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6217 6288])
                            ("self" variable nil (reparse-symbol indented_block_body) [6296 6314])
                            ("for" code nil (reparse-symbol indented_block_body) [6323 6414]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6147 6151])
                            ("family" variable nil (reparse-symbol function_parameters) [6153 6159])
                            ("type" variable nil (reparse-symbol function_parameters) [6169 6173])
                            ("proto" variable nil (reparse-symbol function_parameters) [6187 6192])
                            ("_sock" variable nil (reparse-symbol function_parameters) [6196 6201]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6134 6414])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6429 6433])
                            ("_closedsocket" variable nil (reparse-symbol function_parameters) [6435 6448])
                            ("_delegate_methods" variable nil (reparse-symbol function_parameters) [6478 6495])
                            ("setattr" variable nil (reparse-symbol function_parameters) [6515 6522]))                          )
                        (reparse-symbol indented_block_body) [6419 6763])
                    ("close" variable nil (reparse-symbol indented_block_body) [6767 6808])
                    ("accept" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6825 6829]))                          )
                        (reparse-symbol indented_block_body) [6814 6920])
                    ("accept" variable nil (reparse-symbol indented_block_body) [6924 6967])
                    ("dup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6981 6985]))                          
                        :documentation "dup() -> socket object

        Return a new socket object connected to the same system resource.")
                        (reparse-symbol indented_block_body) [6973 7147])
                    ("makefile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7165 7169])
                            ("mode" variable nil (reparse-symbol function_parameters) [7171 7175])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [7181 7188]))                          
                        :documentation "makefile([mode[, bufsize]]) -> file object

        Return a regular file object corresponding to the socket.  The mode
        and bufsize arguments are as for the built-in open() function.")
                        (reparse-symbol indented_block_body) [7152 7453])
                    ("family" variable nil (reparse-symbol indented_block_body) [7458 7532])
                    ("type" variable nil (reparse-symbol indented_block_body) [7537 7605])
                    ("proto" variable nil (reparse-symbol indented_block_body) [7610 7684]))                  
                :type "class")
                nil [5997 7685])
            ("meth" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [7695 7699])
                ("self" variable nil (reparse-symbol function_parameters) [7700 7704])
                ("args" variable nil (reparse-symbol function_parameters) [7705 7710]))              ) nil [7686 7756])
            ("for" code nil nil [7757 7949])
            ("socket" variable nil nil [7950 7985])
            ("_fileobject" type
               (:documentation "Faux file object attached to a socket object."
                :superclasses ("object")
                :members 
                  ( ("default_bufsize" variable nil (reparse-symbol indented_block_body) [8075 8097])
                    ("name" variable nil (reparse-symbol indented_block_body) [8102 8119])
                    ("__slots__" variable nil (reparse-symbol indented_block_body) [8125 8332])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8408 8425])
                            ("self" variable nil (reparse-symbol indented_block_body) [8434 8450])
                            ("if" code nil (reparse-symbol indented_block_body) [8495 8554])
                            ("self" variable nil (reparse-symbol indented_block_body) [8562 8584])
                            ("self" variable nil (reparse-symbol indented_block_body) [8593 8615])
                            ("if" code nil (reparse-symbol indented_block_body) [8842 9018])
                            ("self" variable nil (reparse-symbol indented_block_body) [9026 9050])
                            ("self" variable nil (reparse-symbol indented_block_body) [9339 9362])
                            ("self" variable nil (reparse-symbol indented_block_body) [9371 9386])
                            ("self" variable nil (reparse-symbol indented_block_body) [9415 9433])
                            ("self" variable nil (reparse-symbol indented_block_body) [9442 9461]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8351 8355])
                            ("sock" variable nil (reparse-symbol function_parameters) [8357 8361])
                            ("mode" variable nil (reparse-symbol function_parameters) [8363 8367])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [8374 8381])
                            ("close" variable nil (reparse-symbol function_parameters) [8386 8391]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8338 9462])
                    ("_getclosed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9482 9486]))                          )
                        (reparse-symbol indented_block_body) [9467 9523])
                    ("closed" variable nil (reparse-symbol indented_block_body) [9527 9590])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9606 9610]))                          )
                        (reparse-symbol indented_block_body) [9596 9792])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9809 9813]))                          )
                        (reparse-symbol indented_block_body) [9797 9946])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9961 9965]))                          )
                        (reparse-symbol indented_block_body) [9951 10724])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10740 10744]))                          )
                        (reparse-symbol indented_block_body) [10729 10782])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10797 10801])
                            ("data" variable nil (reparse-symbol function_parameters) [10803 10807]))                          )
                        (reparse-symbol indented_block_body) [10787 11152])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11172 11176])
                            ("list" variable nil (reparse-symbol function_parameters) [11178 11182]))                          )
                        (reparse-symbol indented_block_body) [11157 11533])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11547 11551])
                            ("size" variable nil (reparse-symbol function_parameters) [11553 11557]))                          )
                        (reparse-symbol indented_block_body) [11538 14505])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14523 14527])
                            ("size" variable nil (reparse-symbol function_parameters) [14529 14533]))                          )
                        (reparse-symbol indented_block_body) [14510 18528])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18547 18551])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [18553 18561]))                          )
                        (reparse-symbol indented_block_body) [18533 18854])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18898 18902]))                          )
                        (reparse-symbol indented_block_body) [18885 18925])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18939 18943]))                          )
                        (reparse-symbol indented_block_body) [18930 19050]))                  
                :type "class")
                nil [7987 19050])
            ("_GLOBAL_DEFAULT_TIMEOUT" variable nil nil [19051 19085])
            ("create_connection" function
               (:documentation "Connect to *address* and return the socket object.

    Convenience function.  Connect to *address* (a 2-tuple ``(host,
    port)``) and return the socket object.  Passing the optional
    *timeout* parameter will set the timeout on the socket instance
    before attempting to connect.  If no *timeout* is supplied, the
    global default timeout setting returned by :func:`getdefaulttimeout`
    is used.  If *source_address* is set it must be a tuple of (host, port)
    for the socket to bind as a source address before making the connection.
    An host of '' or port 0 tells the OS to use the default.
    "
                :arguments 
                  ( ("address" variable nil (reparse-symbol function_parameters) [19109 19116])
                    ("timeout" variable nil (reparse-symbol function_parameters) [19118 19125])
                    ("source_address" variable nil (reparse-symbol function_parameters) [19173 19187]))                  )
                nil [19087 20486]))          
      :file "socket.py"
      :pointmax 20486
      :fsize 20485
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax '((INDENT_BLOCK 20294 . 20376) (NEWLINE 20293 . 20294) (COLON 20292 . 20293) (TRY 19992 . 19995) (AS 20288 . 20290)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"RFC 3548: Base16, Base32, Base64 Data Encodings\"\"\"" code nil nil [24 77])
            ("re" include nil nil [209 218])
            ("struct" include nil nil [219 232])
            ("binascii" include nil nil [233 248])
            ("__all__" variable nil nil [251 825])
            ("_translation" variable nil nil [827 872])
            ("EMPTYSTRING" variable nil nil [873 889])
            ("_translate" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [907 908])
                ("altchars" variable nil (reparse-symbol function_parameters) [910 918]))              ) nil [892 1066])
            ("b64encode" function
               (:documentation "Encode a string using Base64.

    s is the string to encode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies an
    alternative alphabet for the '+' and '/' characters.  This allows an
    application to e.g. generate url or filesystem safe Base64 strings.

    The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1126 1127])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1129 1137]))                  )
                nil [1112 1720])
            ("b64decode" function
               (:documentation "Decode a Base64 encoded string.

    s is the string to decode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies the
    alternative alphabet used instead of the '+' and '/' characters.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1736 1737])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1739 1747]))                  )
                nil [1722 2432])
            ("standard_b64encode" function
               (:documentation "Encode a string using the standard Base64 alphabet.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2457 2458]))                  )
                nil [2434 2617])
            ("standard_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2641 2642]))                  )
                nil [2618 2938])
            ("urlsafe_b64encode" function
               (:documentation "Encode a string using a url-safe Base64 alphabet.

    s is the string to encode.  The encoded string is returned.  The alphabet
    uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2961 2962]))                  )
                nil [2939 3191])
            ("urlsafe_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.

    The alphabet uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [3214 3215]))                  )
                nil [3192 3583])
            ("_b32alphabet" variable nil nil [3637 3974])
            ("_b32tab" variable nil nil [3976 4006])
            ("_b32tab" code nil nil [4007 4021])
            ("_b32tab" variable nil nil [4022 4055])
            ("_b32rev" variable nil nil [4056 4119])
            ("b32encode" function
               (:documentation "Encode a string using Base32.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4136 4137]))                  )
                nil [4122 5899])
            ("b32decode" function
               (:documentation "Decode a Base32 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O
    (oh), and for optional mapping of the digit 1 (one) to either the letter I
    (eye) or letter L (el).  The optional argument map01 when not None,
    specifies which letter the digit 1 should be mapped to (when map01 is not
    None, the digit 0 is always mapped to the letter O).  For security
    purposes the default is None, so that 0 and 1 are not allowed in the
    input.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5915 5916])
                    ("casefold" variable nil (reparse-symbol function_parameters) [5918 5926])
                    ("map01" variable nil (reparse-symbol function_parameters) [5934 5939]))                  )
                nil [5901 8385])
            ("b16encode" function
               (:documentation "Encode a string using Base16.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8559 8560]))                  )
                nil [8545 8712])
            ("b16decode" function
               (:documentation "Decode a Base16 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8728 8729])
                    ("casefold" variable nil (reparse-symbol function_parameters) [8731 8739]))                  )
                nil [8714 9290])
            ("MAXLINESIZE" variable nil nil [9453 9469])
            ("MAXBINSIZE" code nil nil [9491 9522])
            ("encode" function
               (:documentation "Encode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9535 9540])
                    ("output" variable nil (reparse-symbol function_parameters) [9542 9548]))                  )
                nil [9524 9875])
            ("decode" function
               (:documentation "Decode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9888 9893])
                    ("output" variable nil (reparse-symbol function_parameters) [9895 9901]))                  )
                nil [9877 10078])
            ("encodestring" function
               (:documentation "Encode a string into multiple lines of base-64 data."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10097 10098]))                  )
                nil [10080 10338])
            ("decodestring" function
               (:documentation "Decode a string."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10357 10358]))                  )
                nil [10340 10422])
            ("test" function (:documentation "Small test program") nil [10451 11192])
            ("test1" function nil nil [11194 11317])
            ("if" code nil nil [11319 11357]))          
      :file "base64.py"
      :pointmax 11357
      :fsize 11356
      :lastmodtime '(21651 11976 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Parse (absolute and relative) URLs.

urlparse module is based upon the following RFC specifications.

RFC 3986 (STD66): \"Uniform Resource Identifiers\" by T. Berners-Lee, R. Fielding
and L.  Masinter, January 2005.

RFC 2732 : \"Format for Literal IPv6 Addresses in URL's by R.Hinden, B.Carpenter
and L.Masinter, December 1999.

RFC 2396:  \"Uniform Resource Identifiers (URI)\": Generic Syntax by T.
Berners-Lee, R. Fielding, and L. Masinter, August 1998.

RFC 2368: \"The mailto URL scheme\", by P.Hoffman , L Masinter, J. Zwinski, July 1998.

RFC 1808: \"Relative Uniform Resource Locators\", by R. Fielding, UC Irvine, June
1995.

RFC 1738: \"Uniform Resource Locators (URL)\" by T. Berners-Lee, L. Masinter, M.
McCahill, December 1994

RFC 3986 is considered the current standard and any future changes to
urlparse module should conform with it.  The urlparse module is
currently not entirely compliant with this RFC due to defacto
scenarios for parsing, and for backward compatibility purposes, some
parsing quirks from older RFCs are retained. The testcases in
test_urlparse.py provides a good indicator of parsing behavior.

\"\"\"" code nil nil [1 1130])
            ("__all__" variable nil nil [1132 1254])
            ("uses_relative" variable nil nil [1314 1522])
            ("uses_netloc" variable nil nil [1523 1774])
            ("non_hierarchical" variable nil nil [1775 1899])
            ("uses_params" variable nil nil [1900 2055])
            ("uses_query" variable nil nil [2056 2178])
            ("uses_fragment" variable nil nil [2179 2336])
            ("scheme_chars" variable nil nil [2373 2514])
            ("MAX_CACHE_SIZE" variable nil nil [2516 2535])
            ("_parse_cache" variable nil nil [2536 2553])
            ("clear_cache" function (:documentation "Clear the parse cache.") nil [2555 2632])
            ("ResultMixin" type
               (:documentation "Shared methods for the parsed result objects."
                :superclasses ("object")
                :members 
                  ( ("username" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2749 2753]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2722 2992])
                    ("password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3024 3028]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2997 3235])
                    ("hostname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3267 3271]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3240 3589])
                    ("port" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3617 3621]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3594 3820]))                  
                :type "class")
                nil [2634 3820])
            ("collections" include nil nil [3821 3855])
            ("SplitResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [3958 3972])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3989 3993]))                          )
                        (reparse-symbol indented_block_body) [3978 4028]))                  
                :type "class")
                nil [3857 4028])
            ("ParseResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4138 4152])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4169 4173]))                          )
                        (reparse-symbol indented_block_body) [4158 4208]))                  
                :type "class")
                nil [4030 4208])
            ("urlparse" function
               (:documentation "Parse a URL into 6 components:
    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>
    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [4223 4226])
                    ("scheme" variable nil (reparse-symbol function_parameters) [4228 4234])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [4239 4254]))                  )
                nil [4210 4848])
            ("_splitparams" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [4866 4869]))              ) nil [4849 5045])
            ("_splitnetloc" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [5063 5066])
                ("start" variable nil (reparse-symbol function_parameters) [5068 5073]))              ) nil [5046 5494])
            ("urlsplit" function
               (:documentation "Parse a URL into 5 components:
    <scheme>://<netloc>/<path>?<query>#<fragment>
    Return a 5-tuple: (scheme, netloc, path, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [5508 5511])
                    ("scheme" variable nil (reparse-symbol function_parameters) [5513 5519])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [5524 5539]))                  )
                nil [5495 7756])
            ("urlunparse" function
               (:documentation "Put a parsed URL back together again.  This may result in a
    slightly different, but equivalent URL, if the URL that was parsed
    originally had redundant delimiters, e.g. a ? with an empty query
    (the draft states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [7772 7776]))                  )
                nil [7757 8211])
            ("urlunsplit" function
               (:documentation "Combine the elements of a tuple as returned by urlsplit() into a
    complete URL as a string. The data argument can be any five-item iterable.
    This may result in a slightly different, but equivalent URL, if the URL that
    was parsed originally had unnecessary delimiters (for example, a ? with an
    empty query; the RFC states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [8227 8231]))                  )
                nil [8212 8983])
            ("urljoin" function
               (:documentation "Join a base URL and a possibly relative URL to form an absolute
    interpretation of the latter."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [8996 9000])
                    ("url" variable nil (reparse-symbol function_parameters) [9002 9005])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [9007 9022]))                  )
                nil [8984 10786])
            ("urldefrag" function
               (:documentation "Removes any existing fragment from URL.

    Returns a tuple of the defragmented URL and the fragment.  If
    the URL contained no fragments, the second element is the
    empty string.
    "
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [10801 10804]))                  )
                nil [10787 11182])
            ("_hexdig" variable nil nil [11462 11496])
            ("_hextochr" variable nil nil [11497 11589])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11603 11604]))                  )
                nil [11591 11985])
            ("parse_qs" function
               (:documentation "Parse a query given as a string argument.

        Arguments:

        qs: percent-encoded query string to be parsed

        keep_blank_values: flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A true value indicates that blanks should be retained as
            blank strings.  The default false value indicates that
            blank values are to be ignored and treated as if they were
            not included.

        strict_parsing: flag indicating what to do with parsing errors.
            If false (the default), errors are silently ignored.
            If true, errors raise a ValueError exception.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [11999 12001])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [12003 12020])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [12024 12038]))                  )
                nil [11986 12956])
            ("parse_qsl" function
               (:documentation "Parse a query given as a string argument.

    Arguments:

    qs: percent-encoded query string to be parsed

    keep_blank_values: flag indicating whether blank values in
        percent-encoded queries should be treated as blank strings.  A
        true value indicates that blanks should be retained as blank
        strings.  The default false value indicates that blank values
        are to be ignored and treated as if they were  not included.

    strict_parsing: flag indicating what to do with parsing errors. If
        false (the default), errors are silently ignored. If true,
        errors raise a ValueError exception.

    Returns a list, as G-d intended.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [12971 12973])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [12975 12992])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [12996 13010]))                  )
                nil [12957 14415]))          
      :file "urlparse.py"
      :pointmax 14415
      :fsize 14414
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax '((COMMA 4117 . 4118) (NAME 4048 . 4058) (PAREN_BLOCK 4058 . 4117) (COMMA 3937 . 3938) (NAME 3875 . 3885) (PAREN_BLOCK 3885 . 3937)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("_struct" include nil nil [1 22])
            ("_struct" include nil nil [23 54])
            ("_struct" include nil nil [55 82]))          
      :file "struct.py"
      :pointmax 83
      :fsize 82
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Utility functions for copying and archiving files and directory trees.

XXX The functions here don't copy the resource fork or other metadata on Mac.

\"\"\"" code nil nil [1 158])
            ("os" include nil nil [160 169])
            ("sys" include nil nil [170 180])
            ("stat" include nil nil [181 192])
            ("os.path" include nil nil [193 220])
            ("fnmatch" include nil nil [221 235])
            ("collections" include nil nil [236 254])
            ("errno" include nil nil [255 267])
            ("try" code nil nil [269 343])
            ("try" code nil nil [344 418])
            ("__all__" variable nil nil [419 727])
            ("Error" type
               (:superclasses ("EnvironmentError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [764 768]))                  
                :type "class")
                nil [729 769])
            ("SpecialFileError" type
               (:documentation "Raised when trying to do a kind of operation (e.g. copying) which is
    not supported on a special file (e.g. a named pipe)"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [770 947])
            ("ExecError" type
               (:documentation "Raised when a command could not be executed"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [948 1037])
            ("try" code nil nil [1038 1102])
            ("copyfileobj" function
               (:documentation "copy data from file-like object fsrc to file-like object fdst"
                :arguments 
                  ( ("fsrc" variable nil (reparse-symbol function_parameters) [1119 1123])
                    ("fdst" variable nil (reparse-symbol function_parameters) [1125 1129])
                    ("length" variable nil (reparse-symbol function_parameters) [1131 1137]))                  )
                nil [1103 1327])
            ("_samefile" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [1342 1345])
                ("dst" variable nil (reparse-symbol function_parameters) [1347 1350]))              ) nil [1328 1680])
            ("copyfile" function
               (:documentation "Copy data from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [1694 1697])
                    ("dst" variable nil (reparse-symbol function_parameters) [1699 1702]))                  )
                nil [1681 2298])
            ("copymode" function
               (:documentation "Copy mode bits from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2312 2315])
                    ("dst" variable nil (reparse-symbol function_parameters) [2317 2320]))                  )
                nil [2299 2487])
            ("copystat" function
               (:documentation "Copy all stat info (mode bits, atime, mtime, flags) from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2501 2504])
                    ("dst" variable nil (reparse-symbol function_parameters) [2506 2509]))                  )
                nil [2488 3048])
            ("copy" function
               (:documentation "Copy data and mode bits (\"cp src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3058 3061])
                    ("dst" variable nil (reparse-symbol function_parameters) [3063 3066]))                  )
                nil [3049 3294])
            ("copy2" function
               (:documentation "Copy data and all stat info (\"cp -p src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3305 3308])
                    ("dst" variable nil (reparse-symbol function_parameters) [3310 3313]))                  )
                nil [3295 3548])
            ("ignore_patterns" function
               (:documentation "Function that can be used as copytree() ignore parameter.

    Patterns is a sequence of glob-style patterns
    that are used to exclude files"
                :arguments 
                  ( ("patterns" variable nil (reparse-symbol function_parameters) [3569 3578]))                  )
                nil [3549 3961])
            ("copytree" function
               (:documentation "Recursively copy a directory tree using copy2().

    The destination directory must not already exist.
    If exception(s) occur, an Error is raised with a list of reasons.

    If the optional symlinks flag is true, symbolic links in the
    source tree result in symbolic links in the destination tree; if
    it is false, the contents of the files pointed to by symbolic
    links are copied.

    The optional ignore argument is a callable. If given, it
    is called with the `src` parameter, which is the directory
    being visited by copytree(), and `names` which is the list of
    `src` contents, as returned by os.listdir():

        callable(src, names) -> ignored_names

    Since copytree() is called recursively, the callable will be
    called once for each directory that is copied. It returns a
    list of names relative to the `src` directory that should
    not be copied.

    XXX Consider this example code rather than the ultimate tool.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3975 3978])
                    ("dst" variable nil (reparse-symbol function_parameters) [3980 3983])
                    ("symlinks" variable nil (reparse-symbol function_parameters) [3985 3993])
                    ("ignore" variable nil (reparse-symbol function_parameters) [4001 4007]))                  )
                nil [3962 6301])
            ("rmtree" function
               (:documentation "Recursively delete a directory tree.

    If ignore_errors is set, errors are ignored; otherwise, if onerror
    is set, it is called to handle the error with arguments (func,
    path, exc_info) where func is os.listdir, os.remove, or os.rmdir;
    path is the argument to that function that caused it to fail; and
    exc_info is a tuple returned by sys.exc_info().  If ignore_errors
    is false and onerror is None, an exception is raised.

    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [6313 6317])
                    ("ignore_errors" variable nil (reparse-symbol function_parameters) [6319 6332])
                    ("onerror" variable nil (reparse-symbol function_parameters) [6340 6347]))                  )
                nil [6302 7925])
            ("_basename" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [7941 7945]))              ) nil [7927 8159])
            ("move" function
               (:documentation "Recursively move a file or directory to another location. This is
    similar to the Unix \"mv\" command.

    If the destination is a directory or a symlink to a directory, the source
    is moved inside the directory. The destination path must not already
    exist.

    If the destination already exists but is not a directory, it may be
    overwritten depending on os.rename() semantics.

    If the destination is on our current filesystem, then rename() is used.
    Otherwise, src is copied to the destination and then removed.
    A lot more could be done here...  A look at a mv.c shows a lot of
    the issues this implementation glosses over.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [8169 8172])
                    ("dst" variable nil (reparse-symbol function_parameters) [8174 8177]))                  )
                nil [8160 9616])
            ("_destinsrc" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [9632 9635])
                ("dst" variable nil (reparse-symbol function_parameters) [9637 9640]))              ) nil [9617 9850])
            ("_get_gid" function
               (:documentation "Returns a gid, given a group name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [9864 9868]))                  )
                nil [9851 10129])
            ("_get_uid" function
               (:documentation "Returns an uid, given a user name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [10143 10147]))                  )
                nil [10130 10408])
            ("_make_tarball" function
               (:documentation "Create a (possibly compressed) tar file from all the files under
    'base_dir'.

    'compress' must be \"gzip\" (the default), \"bzip2\", or None.

    'owner' and 'group' can be used to define an owner and a group for the
    archive that is being built. If not provided, the current owner and group
    will be used.

    The output tar file will be named 'base_name' +  \".tar\", possibly plus
    the appropriate compression extension (\".gz\", or \".bz2\").

    Returns the output filename.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [10427 10436])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [10438 10446])
                    ("compress" variable nil (reparse-symbol function_parameters) [10448 10456])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10465 10472])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [10476 10483])
                    ("owner" variable nil (reparse-symbol function_parameters) [10505 10510])
                    ("group" variable nil (reparse-symbol function_parameters) [10517 10522])
                    ("logger" variable nil (reparse-symbol function_parameters) [10529 10535]))                  )
                nil [10409 12411])
            ("_call_external_zip" function (:arguments 
              ( ("base_dir" variable nil (reparse-symbol function_parameters) [12435 12443])
                ("zip_filename" variable nil (reparse-symbol function_parameters) [12445 12457])
                ("verbose" variable nil (reparse-symbol function_parameters) [12459 12466])
                ("dry_run" variable nil (reparse-symbol function_parameters) [12474 12481]))              ) nil [12412 13141])
            ("_make_zipfile" function
               (:documentation "Create a zip file from all the files under 'base_dir'.

    The output zip file will be named 'base_name' + \".zip\".  Uses either the
    \"zipfile\" Python module (if available) or the InfoZIP \"zip\" utility
    (if installed and found on the default search path).  If neither tool is
    available, raises ExecError.  Returns the name of the output zip
    file.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [13160 13169])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [13171 13179])
                    ("verbose" variable nil (reparse-symbol function_parameters) [13181 13188])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [13192 13199])
                    ("logger" variable nil (reparse-symbol function_parameters) [13203 13209]))                  )
                nil [13142 14849])
            ("_ARCHIVE_FORMATS" variable nil nil [14850 15147])
            ("get_archive_formats" function (:documentation "Returns a list of supported formats for archiving and unarchiving.

    Each element of the returned sequence is a tuple (name, description)
    ") nil [15149 15468])
            ("register_archive_format" function
               (:documentation "Registers an archive format.

    name is the name of the format. function is the callable that will be
    used to create archives. If provided, extra_args is a sequence of
    (name, value) tuples that will be passed as arguments to the callable.
    description can be provided to describe the format, and will be returned
    by the get_archive_formats() function.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [15497 15501])
                    ("function" variable nil (reparse-symbol function_parameters) [15503 15511])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [15513 15523])
                    ("description" variable nil (reparse-symbol function_parameters) [15530 15541]))                  )
                nil [15469 16460])
            ("unregister_archive_format" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16491 16495]))              ) nil [16461 16529])
            ("make_archive" function
               (:documentation "Create an archive file (eg. zip or tar).

    'base_name' is the name of the file to create, minus any format-specific
    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"bztar\"
    or \"gztar\".

    'root_dir' is a directory that will be the root directory of the
    archive; ie. we typically chdir into 'root_dir' before creating the
    archive.  'base_dir' is the directory where we start archiving from;
    ie. 'base_dir' will be the common prefix of all files and
    directories in the archive.  'root_dir' and 'base_dir' both default
    to the current directory.  Returns the name of the archive file.

    'owner' and 'group' are used when creating a tar archive. By default,
    uses the current owner and group.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [16547 16556])
                    ("format" variable nil (reparse-symbol function_parameters) [16558 16564])
                    ("root_dir" variable nil (reparse-symbol function_parameters) [16566 16574])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [16581 16589])
                    ("verbose" variable nil (reparse-symbol function_parameters) [16596 16603])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [16624 16631])
                    ("owner" variable nil (reparse-symbol function_parameters) [16635 16640])
                    ("group" variable nil (reparse-symbol function_parameters) [16647 16652])
                    ("logger" variable nil (reparse-symbol function_parameters) [16659 16665]))                  )
                nil [16530 18367]))          
      :file "shutil.py"
      :pointmax 18367
      :fsize 18366
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Filename globbing utility.\"\"\"" code nil nil [1 33])
            ("sys" include nil nil [35 45])
            ("os" include nil nil [46 55])
            ("re" include nil nil [56 65])
            ("fnmatch" include nil nil [66 80])
            ("__all__" variable nil nil [82 109])
            ("glob" function
               (:documentation "Return a list of paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la fnmatch.

    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [120 128]))                  )
                nil [111 304])
            ("iglob" function
               (:documentation "Return an iterator which yields the paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la fnmatch.

    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [315 323]))                  )
                nil [305 1060])
            ("glob1" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [1295 1302])
                ("pattern" variable nil (reparse-symbol function_parameters) [1304 1311]))              ) nil [1285 1768])
            ("glob0" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [1779 1786])
                ("basename" variable nil (reparse-symbol function_parameters) [1788 1796]))              ) nil [1769 2150])
            ("magic_check" variable nil nil [2152 2185])
            ("has_magic" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [2201 2202]))              ) nil [2187 2250]))          
      :file "glob.py"
      :pointmax 2250
      :fsize 2249
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Calendar printing functions

Note when comparing these calendars to the ones printed by cal(1): By
default, these calendars have Monday as the first day of the week, and
Sunday as the last (the European convention). Use setfirstweekday() to
set the first day of the week (0=Monday, 6=Sunday).\"\"\"" code nil nil [1 299])
            ("sys" include nil nil [301 311])
            ("datetime" include nil nil [312 327])
            ("locale" include nil nil [328 352])
            ("__all__" variable nil nil [354 643])
            ("error" variable nil nil [714 732])
            ("IllegalMonthError" type
               (:superclasses ("ValueError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [844 862]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [822 826])
                            ("month" variable nil (reparse-symbol function_parameters) [828 833]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [809 863])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [879 883]))                          )
                        (reparse-symbol indented_block_body) [867 950]))                  
                :type "class")
                nil [768 950])
            ("IllegalWeekdayError" type
               (:superclasses ("ValueError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1032 1054]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1008 1012])
                            ("weekday" variable nil (reparse-symbol function_parameters) [1014 1021]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [995 1055])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1071 1075]))                          )
                        (reparse-symbol indented_block_body) [1059 1166]))                  
                :type "class")
                nil [952 1166])
            ("January" variable nil nil [1208 1219])
            ("February" variable nil nil [1220 1232])
            ("mdays" variable nil nil [1297 1356])
            ("_localized_month" type
               (:members 
                  ( ("_months" variable nil (reparse-symbol indented_block_body) [1672 1739])
                    ("_months" code nil (reparse-symbol indented_block_body) [1744 1775])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1817 1837]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1794 1798])
                            ("format" variable nil (reparse-symbol function_parameters) [1800 1806]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1781 1838])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1859 1863])
                            ("i" variable nil (reparse-symbol function_parameters) [1865 1866]))                          )
                        (reparse-symbol indented_block_body) [1843 2037])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2054 2058]))                          )
                        (reparse-symbol indented_block_body) [2042 2079]))                  
                :type "class")
                nil [1643 2079])
            ("_localized_day" type
               (:members 
                  ( ("_days" variable nil (reparse-symbol indented_block_body) [2145 2209])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2251 2271]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2228 2232])
                            ("format" variable nil (reparse-symbol function_parameters) [2234 2240]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2215 2272])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2293 2297])
                            ("i" variable nil (reparse-symbol function_parameters) [2299 2300]))                          )
                        (reparse-symbol indented_block_body) [2277 2469])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2486 2490]))                          )
                        (reparse-symbol indented_block_body) [2474 2510]))                  
                :type "class")
                nil [2081 2510])
            ("day_name" variable nil nil [2553 2584])
            ("day_abbr" variable nil nil [2585 2616])
            ("month_name" variable nil nil [2677 2712])
            ("month_abbr" variable nil nil [2713 2748])
            ("" code nil nil [2775 2850])
            ("isleap" function
               (:documentation "Return True for leap years, False for non-leap years."
                :arguments 
                  ( ("year" variable nil (reparse-symbol function_parameters) [2864 2868]))                  )
                nil [2853 3001])
            ("leapdays" function
               (:documentation "Return number of leap years in range [y1, y2).
       Assume y1 <= y2."
                :arguments 
                  ( ("y1" variable nil (reparse-symbol function_parameters) [3016 3018])
                    ("y2" variable nil (reparse-symbol function_parameters) [3020 3022]))                  )
                nil [3003 3201])
            ("weekday" function
               (:documentation "Return weekday (0-6 ~ Mon-Sun) for year (1970-...), month (1-12),
       day (1-31)."
                :arguments 
                  ( ("year" variable nil (reparse-symbol function_parameters) [3215 3219])
                    ("month" variable nil (reparse-symbol function_parameters) [3221 3226])
                    ("day" variable nil (reparse-symbol function_parameters) [3228 3231]))                  )
                nil [3203 3382])
            ("monthrange" function
               (:documentation "Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for
       year, month."
                :arguments 
                  ( ("year" variable nil (reparse-symbol function_parameters) [3399 3403])
                    ("month" variable nil (reparse-symbol function_parameters) [3405 3410]))                  )
                nil [3384 3695])
            ("Calendar" type
               (:documentation "
    Base calendar class. This class doesn't do any formatting. It simply
    provides data to subclasses.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3892 3924]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3861 3865])
                            ("firstweekday" variable nil (reparse-symbol function_parameters) [3867 3879]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3848 3950])
                    ("getfirstweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3975 3979]))                          )
                        (reparse-symbol indented_block_body) [3955 4020])
                    ("setfirstweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4045 4049])
                            ("firstweekday" variable nil (reparse-symbol function_parameters) [4051 4063]))                          )
                        (reparse-symbol indented_block_body) [4025 4108])
                    ("firstweekday" variable nil (reparse-symbol indented_block_body) [4113 4170])
                    ("iterweekdays" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4193 4197]))                          
                        :documentation "
        Return a iterator for one week of weekday numbers starting with the
        configured first one.
        ")
                        (reparse-symbol indented_block_body) [4176 4418])
                    ("itermonthdates" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4442 4446])
                            ("year" variable nil (reparse-symbol function_parameters) [4448 4452])
                            ("month" variable nil (reparse-symbol function_parameters) [4454 4459]))                          
                        :documentation "
        Return an iterator for one month. The iterator will yield datetime.date
        values and will always iterate through complete weeks, so it will yield
        dates outside the specified month.
        ")
                        (reparse-symbol indented_block_body) [4423 5095])
                    ("itermonthdays2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5119 5123])
                            ("year" variable nil (reparse-symbol function_parameters) [5125 5129])
                            ("month" variable nil (reparse-symbol function_parameters) [5131 5136]))                          
                        :documentation "
        Like itermonthdates(), but will yield (day number, weekday number)
        tuples. For days outside the specified month the day number is 0.
        ")
                        (reparse-symbol indented_block_body) [5100 5511])
                    ("itermonthdays" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5534 5538])
                            ("year" variable nil (reparse-symbol function_parameters) [5540 5544])
                            ("month" variable nil (reparse-symbol function_parameters) [5546 5551]))                          
                        :documentation "
        Like itermonthdates(), but will yield day numbers. For days outside
        the specified month the day number is 0.
        ")
                        (reparse-symbol indented_block_body) [5516 5866])
                    ("monthdatescalendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5894 5898])
                            ("year" variable nil (reparse-symbol function_parameters) [5900 5904])
                            ("month" variable nil (reparse-symbol function_parameters) [5906 5911]))                          
                        :documentation "
        Return a matrix (list of lists) representing a month's calendar.
        Each row represents a week; week entries are datetime.date values.
        ")
                        (reparse-symbol indented_block_body) [5871 6206])
                    ("monthdays2calendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6234 6238])
                            ("year" variable nil (reparse-symbol function_parameters) [6240 6244])
                            ("month" variable nil (reparse-symbol function_parameters) [6246 6251]))                          
                        :documentation "
        Return a matrix representing a month's calendar.
        Each row represents a week; week entries are
        (day number, weekday number) tuples. Day numbers outside this month
        are zero.
        ")
                        (reparse-symbol indented_block_body) [6211 6599])
                    ("monthdayscalendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6626 6630])
                            ("year" variable nil (reparse-symbol function_parameters) [6632 6636])
                            ("month" variable nil (reparse-symbol function_parameters) [6638 6643]))                          
                        :documentation "
        Return a matrix representing a month's calendar.
        Each row represents a week; days outside this month are zero.
        ")
                        (reparse-symbol indented_block_body) [6604 6913])
                    ("yeardatescalendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6940 6944])
                            ("year" variable nil (reparse-symbol function_parameters) [6946 6950])
                            ("width" variable nil (reparse-symbol function_parameters) [6952 6957]))                          
                        :documentation "
        Return the data for the specified year ready for formatting. The return
        value is a list of month rows. Each month row contains upto width months.
        Each month contains between 4 and 6 weeks and each week contains 1-7
        days. Days are datetime.date objects.
        ")
                        (reparse-symbol indented_block_body) [6918 7467])
                    ("yeardays2calendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7494 7498])
                            ("year" variable nil (reparse-symbol function_parameters) [7500 7504])
                            ("width" variable nil (reparse-symbol function_parameters) [7506 7511]))                          
                        :documentation "
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are
        (day number, weekday number) tuples. Day numbers outside this month are
        zero.
        ")
                        (reparse-symbol indented_block_body) [7472 7970])
                    ("yeardayscalendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7996 8000])
                            ("year" variable nil (reparse-symbol function_parameters) [8002 8006])
                            ("width" variable nil (reparse-symbol function_parameters) [8008 8013]))                          
                        :documentation "
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are day numbers.
        Day numbers outside this month are zero.
        ")
                        (reparse-symbol indented_block_body) [7975 8439]))                  
                :type "class")
                nil [3697 8439])
            ("TextCalendar" type
               (:documentation "
    Subclass of Calendar that outputs a calendar as a simple plain text
    similar to the UNIX program cal.
    "
                :superclasses ("Calendar")
                :members 
                  ( ("prweek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8612 8616])
                            ("theweek" variable nil (reparse-symbol function_parameters) [8618 8625])
                            ("width" variable nil (reparse-symbol function_parameters) [8627 8632]))                          
                        :documentation "
        Print a single week (no newline).
        ")
                        (reparse-symbol indented_block_body) [8601 8748])
                    ("formatday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8767 8771])
                            ("day" variable nil (reparse-symbol function_parameters) [8773 8776])
                            ("weekday" variable nil (reparse-symbol function_parameters) [8778 8785])
                            ("width" variable nil (reparse-symbol function_parameters) [8787 8792]))                          
                        :documentation "
        Returns a formatted day.
        ")
                        (reparse-symbol indented_block_body) [8753 9009])
                    ("formatweek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9029 9033])
                            ("theweek" variable nil (reparse-symbol function_parameters) [9035 9042])
                            ("width" variable nil (reparse-symbol function_parameters) [9044 9049]))                          
                        :documentation "
        Returns a single week in a string (no newline).
        ")
                        (reparse-symbol indented_block_body) [9014 9209])
                    ("formatweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9232 9236])
                            ("day" variable nil (reparse-symbol function_parameters) [9238 9241])
                            ("width" variable nil (reparse-symbol function_parameters) [9243 9248]))                          
                        :documentation "
        Returns a formatted week day name.
        ")
                        (reparse-symbol indented_block_body) [9214 9461])
                    ("formatweekheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9487 9491])
                            ("width" variable nil (reparse-symbol function_parameters) [9493 9498]))                          
                        :documentation "
        Return a header for a week.
        ")
                        (reparse-symbol indented_block_body) [9466 9644])
                    ("formatmonthname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9669 9673])
                            ("theyear" variable nil (reparse-symbol function_parameters) [9675 9682])
                            ("themonth" variable nil (reparse-symbol function_parameters) [9684 9692])
                            ("width" variable nil (reparse-symbol function_parameters) [9694 9699])
                            ("withyear" variable nil (reparse-symbol function_parameters) [9701 9709]))                          
                        :documentation "
        Return a formatted month name.
        ")
                        (reparse-symbol indented_block_body) [9649 9904])
                    ("prmonth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9921 9925])
                            ("theyear" variable nil (reparse-symbol function_parameters) [9927 9934])
                            ("themonth" variable nil (reparse-symbol function_parameters) [9936 9944])
                            ("w" variable nil (reparse-symbol function_parameters) [9946 9947])
                            ("l" variable nil (reparse-symbol function_parameters) [9951 9952]))                          
                        :documentation "
        Print a month's calendar.
        ")
                        (reparse-symbol indented_block_body) [9909 10072])
                    ("formatmonth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10093 10097])
                            ("theyear" variable nil (reparse-symbol function_parameters) [10099 10106])
                            ("themonth" variable nil (reparse-symbol function_parameters) [10108 10116])
                            ("w" variable nil (reparse-symbol function_parameters) [10118 10119])
                            ("l" variable nil (reparse-symbol function_parameters) [10123 10124]))                          
                        :documentation "
        Return a month's calendar string (multi-line).
        ")
                        (reparse-symbol indented_block_body) [10077 10593])
                    ("formatyear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10613 10617])
                            ("theyear" variable nil (reparse-symbol function_parameters) [10619 10626])
                            ("w" variable nil (reparse-symbol function_parameters) [10628 10629])
                            ("l" variable nil (reparse-symbol function_parameters) [10633 10634])
                            ("c" variable nil (reparse-symbol function_parameters) [10638 10639])
                            ("m" variable nil (reparse-symbol function_parameters) [10643 10644]))                          
                        :documentation "
        Returns a year's calendar as a multi-line string.
        ")
                        (reparse-symbol indented_block_body) [10598 11962])
                    ("pryear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11978 11982])
                            ("theyear" variable nil (reparse-symbol function_parameters) [11984 11991])
                            ("w" variable nil (reparse-symbol function_parameters) [11993 11994])
                            ("l" variable nil (reparse-symbol function_parameters) [11998 11999])
                            ("c" variable nil (reparse-symbol function_parameters) [12003 12004])
                            ("m" variable nil (reparse-symbol function_parameters) [12008 12009]))                          
                        :documentation "Print a year's calendar.")
                        (reparse-symbol indented_block_body) [11967 12104]))                  
                :type "class")
                nil [8441 12104])
            ("HTMLCalendar" type
               (:documentation "
    This calendar returns complete HTML pages.
    "
                :superclasses ("Calendar")
                :members 
                  ( ("cssclasses" variable nil (reparse-symbol indented_block_body) [12240 12302])
                    ("formatday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12322 12326])
                            ("day" variable nil (reparse-symbol function_parameters) [12328 12331])
                            ("weekday" variable nil (reparse-symbol function_parameters) [12333 12340]))                          
                        :documentation "
        Return a day as a table cell.
        ")
                        (reparse-symbol indented_block_body) [12308 12589])
                    ("formatweek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12609 12613])
                            ("theweek" variable nil (reparse-symbol function_parameters) [12615 12622]))                          
                        :documentation "
        Return a complete week as a table row.
        ")
                        (reparse-symbol indented_block_body) [12594 12795])
                    ("formatweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12818 12822])
                            ("day" variable nil (reparse-symbol function_parameters) [12824 12827]))                          
                        :documentation "
        Return a weekday name as a table header.
        ")
                        (reparse-symbol indented_block_body) [12800 12983])
                    ("formatweekheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13009 13013]))                          
                        :documentation "
        Return a header for a week as a table row.
        ")
                        (reparse-symbol indented_block_body) [12988 13196])
                    ("formatmonthname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13221 13225])
                            ("theyear" variable nil (reparse-symbol function_parameters) [13227 13234])
                            ("themonth" variable nil (reparse-symbol function_parameters) [13236 13244])
                            ("withyear" variable nil (reparse-symbol function_parameters) [13246 13254]))                          
                        :documentation "
        Return a month name as a table row.
        ")
                        (reparse-symbol indented_block_body) [13201 13535])
                    ("formatmonth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13556 13560])
                            ("theyear" variable nil (reparse-symbol function_parameters) [13562 13569])
                            ("themonth" variable nil (reparse-symbol function_parameters) [13571 13579])
                            ("withyear" variable nil (reparse-symbol function_parameters) [13581 13589]))                          
                        :documentation "
        Return a formatted month as a table.
        ")
                        (reparse-symbol indented_block_body) [13540 14118])
                    ("formatyear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14138 14142])
                            ("theyear" variable nil (reparse-symbol function_parameters) [14144 14151])
                            ("width" variable nil (reparse-symbol function_parameters) [14153 14158]))                          
                        :documentation "
        Return a formatted year as a table of tables.
        ")
                        (reparse-symbol indented_block_body) [14123 14851])
                    ("formatyearpage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14875 14879])
                            ("theyear" variable nil (reparse-symbol function_parameters) [14881 14888])
                            ("width" variable nil (reparse-symbol function_parameters) [14890 14895])
                            ("css" variable nil (reparse-symbol function_parameters) [14899 14902])
                            ("encoding" variable nil (reparse-symbol function_parameters) [14919 14927]))                          
                        :documentation "
        Return a formatted year as a complete HTML page.
        ")
                        (reparse-symbol indented_block_body) [14856 15812]))                  
                :type "class")
                nil [12106 15812])
            ("TimeEncoding" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15874 15894]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15851 15855])
                            ("locale" variable nil (reparse-symbol function_parameters) [15857 15863]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15838 15895])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15914 15918]))                          )
                        (reparse-symbol indented_block_body) [15900 16037])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16055 16059])
                            ("args" variable nil (reparse-symbol function_parameters) [16061 16066]))                          )
                        (reparse-symbol indented_block_body) [16042 16128]))                  
                :type "class")
                nil [15814 16128])
            ("LocaleTextCalendar" type
               (:documentation "
    This class can be passed a locale name in the constructor and will return
    month and weekday names in the specified locale. If this locale includes
    an encoding all strings containing month and weekday names will be returned
    as unicode.
    "
                :superclasses ("TextCalendar")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("TextCalendar" code nil (reparse-symbol indented_block_body) [16499 16540])
                            ("if" code nil (reparse-symbol indented_block_body) [16549 16616])
                            ("self" variable nil (reparse-symbol indented_block_body) [16624 16644]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16455 16459])
                            ("firstweekday" variable nil (reparse-symbol function_parameters) [16461 16473])
                            ("locale" variable nil (reparse-symbol function_parameters) [16477 16483]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16442 16645])
                    ("formatweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16668 16672])
                            ("day" variable nil (reparse-symbol function_parameters) [16674 16677])
                            ("width" variable nil (reparse-symbol function_parameters) [16679 16684]))                          )
                        (reparse-symbol indented_block_body) [16650 17008])
                    ("formatmonthname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17033 17037])
                            ("theyear" variable nil (reparse-symbol function_parameters) [17039 17046])
                            ("themonth" variable nil (reparse-symbol function_parameters) [17048 17056])
                            ("width" variable nil (reparse-symbol function_parameters) [17058 17063])
                            ("withyear" variable nil (reparse-symbol function_parameters) [17065 17073]))                          )
                        (reparse-symbol indented_block_body) [17013 17349]))                  
                :type "class")
                nil [16130 17349])
            ("LocaleHTMLCalendar" type
               (:documentation "
    This class can be passed a locale name in the constructor and will return
    month and weekday names in the specified locale. If this locale includes
    an encoding all strings containing month and weekday names will be returned
    as unicode.
    "
                :superclasses ("HTMLCalendar")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HTMLCalendar" code nil (reparse-symbol indented_block_body) [17719 17760])
                            ("if" code nil (reparse-symbol indented_block_body) [17769 17836])
                            ("self" variable nil (reparse-symbol indented_block_body) [17844 17864]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17675 17679])
                            ("firstweekday" variable nil (reparse-symbol function_parameters) [17681 17693])
                            ("locale" variable nil (reparse-symbol function_parameters) [17697 17703]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17662 17865])
                    ("formatweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17888 17892])
                            ("day" variable nil (reparse-symbol function_parameters) [17894 17897]))                          )
                        (reparse-symbol indented_block_body) [17870 18130])
                    ("formatmonthname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18155 18159])
                            ("theyear" variable nil (reparse-symbol function_parameters) [18161 18168])
                            ("themonth" variable nil (reparse-symbol function_parameters) [18170 18178])
                            ("withyear" variable nil (reparse-symbol function_parameters) [18180 18188]))                          )
                        (reparse-symbol indented_block_body) [18135 18501]))                  
                :type "class")
                nil [17351 18501])
            ("c" variable nil nil [18544 18562])
            ("firstweekday" variable nil nil [18564 18596])
            ("setfirstweekday" function (:arguments 
              ( ("firstweekday" variable nil (reparse-symbol function_parameters) [18618 18630]))              ) nil [18598 18875])
            ("monthcalendar" variable nil nil [18876 18911])
            ("prweek" variable nil nil [18912 18929])
            ("week" variable nil nil [18930 18949])
            ("weekheader" variable nil nil [18950 18981])
            ("prmonth" variable nil nil [18982 19001])
            ("month" variable nil nil [19002 19023])
            ("calendar" variable nil nil [19024 19047])
            ("prcal" variable nil nil [19048 19064])
            ("_colwidth" code nil nil [19125 19144])
            ("_spacing" variable nil nil [19182 19194])
            ("format" function
               (:documentation "Prints multi-column formatting for year calendars"
                :arguments 
                  ( ("cols" variable nil (reparse-symbol function_parameters) [19258 19262])
                    ("colwidth" variable nil (reparse-symbol function_parameters) [19264 19272])
                    ("spacing" variable nil (reparse-symbol function_parameters) [19284 19291]))                  )
                nil [19247 19411])
            ("formatstring" function
               (:documentation "Returns a string formatted from n strings, centered within n columns."
                :arguments 
                  ( ("cols" variable nil (reparse-symbol function_parameters) [19430 19434])
                    ("colwidth" variable nil (reparse-symbol function_parameters) [19436 19444])
                    ("spacing" variable nil (reparse-symbol function_parameters) [19456 19463]))                  )
                nil [19413 19632])
            ("EPOCH" variable nil nil [19634 19646])
            ("_EPOCH_ORD" variable nil nil [19647 19698])
            ("timegm" function
               (:documentation "Unrelated but handy function to calculate Unix timestamp from GMT."
                :arguments 
                  ( ("tuple" variable nil (reparse-symbol function_parameters) [19712 19717]))                  )
                nil [19701 20040])
            ("main" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [20051 20055]))              ) nil [20042 23060])
            ("if" code nil nil [23062 23108]))          
      :file "calendar.py"
      :pointmax 23108
      :fsize 23107
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("__all__" variable nil nil [1 75])
            ("_abcoll" include nil nil [224 245])
            ("_abcoll" include nil nil [246 260])
            ("__all__" variable nil nil [261 287])
            ("_collections" include nil nil [289 332])
            ("operator" include nil nil [333 379])
            ("keyword" include nil nil [380 423])
            ("sys" include nil nil [424 442])
            ("heapq" include nil nil [443 465])
            ("itertools" include nil nil [466 543])
            ("try" code nil nil [545 670])
            ("OrderedDict" type
               (:superclasses ("dict")
                :members 
                  ( ("'Dictionary that remembers insertion order'" code nil (reparse-symbol indented_block_body) [880 923])
                    ("__init__" function
                       (:suite 
                          ( ("'''Initialize an ordered dictionary.  The signature is the same as
        regular dictionaries, but keyword arguments are not recommended because
        their insertion order is arbitrary.

        '''" code nil (reparse-symbol indented_block_body) [1532 1735])
                            ("if" code nil (reparse-symbol indented_block_body) [1744 1842])
                            ("try" code nil (reparse-symbol indented_block_body) [1850 2051])
                            ("self" code nil (reparse-symbol indented_block_body) [2059 2087]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1502 1506])
                            ("args" variable nil (reparse-symbol function_parameters) [1508 1513])
                            ("kwds" variable nil (reparse-symbol function_parameters) [1515 1521]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1489 2088])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2109 2113])
                            ("key" variable nil (reparse-symbol function_parameters) [2115 2118])
                            ("value" variable nil (reparse-symbol function_parameters) [2120 2125])
                            ("PREV" variable nil (reparse-symbol function_parameters) [2127 2131])
                            ("NEXT" variable nil (reparse-symbol function_parameters) [2135 2139])
                            ("dict_setitem" variable nil (reparse-symbol function_parameters) [2143 2155]))                          )
                        (reparse-symbol indented_block_body) [2093 2579])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2600 2604])
                            ("key" variable nil (reparse-symbol function_parameters) [2606 2609])
                            ("PREV" variable nil (reparse-symbol function_parameters) [2611 2615])
                            ("NEXT" variable nil (reparse-symbol function_parameters) [2619 2623])
                            ("dict_delitem" variable nil (reparse-symbol function_parameters) [2627 2639]))                          )
                        (reparse-symbol indented_block_body) [2584 3022])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3040 3044]))                          )
                        (reparse-symbol indented_block_body) [3027 3298])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3320 3324]))                          )
                        (reparse-symbol indented_block_body) [3303 3594])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3609 3613]))                          )
                        (reparse-symbol indented_block_body) [3599 3858])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3947 3951]))                          )
                        (reparse-symbol indented_block_body) [3938 4022])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4038 4042]))                          )
                        (reparse-symbol indented_block_body) [4027 4134])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4149 4153]))                          )
                        (reparse-symbol indented_block_body) [4139 4263])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4281 4285]))                          )
                        (reparse-symbol indented_block_body) [4268 4373])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4393 4397]))                          )
                        (reparse-symbol indented_block_body) [4378 4510])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4529 4533]))                          )
                        (reparse-symbol indented_block_body) [4515 4662])
                    ("update" variable nil (reparse-symbol indented_block_body) [4667 4697])
                    ("__update" variable nil (reparse-symbol indented_block_body) [4703 4720])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [4785 4804])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4818 4822])
                            ("key" variable nil (reparse-symbol function_parameters) [4824 4827])
                            ("default" variable nil (reparse-symbol function_parameters) [4829 4836]))                          )
                        (reparse-symbol indented_block_body) [4810 5240])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5260 5264])
                            ("key" variable nil (reparse-symbol function_parameters) [5266 5269])
                            ("default" variable nil (reparse-symbol function_parameters) [5271 5278]))                          )
                        (reparse-symbol indented_block_body) [5245 5469])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5486 5490])
                            ("last" variable nil (reparse-symbol function_parameters) [5492 5496]))                          )
                        (reparse-symbol indented_block_body) [5474 5858])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5876 5880])
                            ("_repr_running" variable nil (reparse-symbol function_parameters) [5882 5895]))                          )
                        (reparse-symbol indented_block_body) [5863 6304])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6324 6328]))                          )
                        (reparse-symbol indented_block_body) [6309 6654])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6668 6672]))                          )
                        (reparse-symbol indented_block_body) [6659 6755])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6790 6793])
                            ("iterable" variable nil (reparse-symbol function_parameters) [6795 6803])
                            ("value" variable nil (reparse-symbol function_parameters) [6805 6810]))                          )
                        (reparse-symbol indented_block_body) [6760 7060])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7076 7080])
                            ("other" variable nil (reparse-symbol function_parameters) [7082 7087]))                          )
                        (reparse-symbol indented_block_body) [7065 7410])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7426 7430])
                            ("other" variable nil (reparse-symbol function_parameters) [7432 7437]))                          )
                        (reparse-symbol indented_block_body) [7415 7507])
                    ("viewkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7602 7606]))                          )
                        (reparse-symbol indented_block_body) [7589 7714])
                    ("viewvalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7734 7738]))                          )
                        (reparse-symbol indented_block_body) [7719 7844])
                    ("viewitems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7863 7867]))                          )
                        (reparse-symbol indented_block_body) [7849 7978]))                  
                :type "class")
                nil [851 7978])
            ("namedtuple" function
               (:documentation "Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', 'x y')
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessable by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    "
                :arguments 
                  ( ("typename" variable nil (reparse-symbol function_parameters) [8173 8181])
                    ("field_names" variable nil (reparse-symbol function_parameters) [8183 8194])
                    ("verbose" variable nil (reparse-symbol function_parameters) [8196 8203])
                    ("rename" variable nil (reparse-symbol function_parameters) [8211 8217]))                  )
                nil [8158 13490])
            ("Counter" type
               (:superclasses ("dict")
                :members 
                  ( ("'''Dict subclass for counting hashable items.  Sometimes called a bag
    or multiset.  Elements are stored as dictionary keys and their counts
    are stored as dictionary values.

    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string

    >>> c.most_common(3)                # three most common elements
    [('a', 5), ('b', 4), ('c', 3)]
    >>> sorted(c)                       # list all unique elements
    ['a', 'b', 'c', 'd', 'e']
    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
    'aaaaabbbbcccdde'
    >>> sum(c.values())                 # total of all counts
    15

    >>> c['a']                          # count of letter 'a'
    5
    >>> for elem in 'shazam':           # update counts from an iterable
    ...     c[elem] += 1                # by adding 1 to each element's count
    >>> c['a']                          # now there are seven 'a'
    7
    >>> del c['b']                      # remove all 'b'
    >>> c['b']                          # now there are zero 'b'
    0

    >>> d = Counter('simsalabim')       # make another counter
    >>> c.update(d)                     # add in the second counter
    >>> c['a']                          # now there are nine 'a'
    9

    >>> c.clear()                       # empty the counter
    >>> c
    Counter()

    Note:  If a count is set to zero or reduced to zero, it will remain
    in the counter until the entry is deleted or the counter is cleared:

    >>> c = Counter('aaabbc')
    >>> c['b'] -= 2                     # reduce the count of 'b' by two
    >>> c.most_common()                 # 'b' is still in, but its count is zero
    [('a', 3), ('c', 1), ('b', 0)]

    '''" code nil (reparse-symbol indented_block_body) [13677 15378])
                    ("__init__" function
                       (:suite 
                          ( ("'''Create a new, empty Counter object.  And if given, count elements
        from an input iterable.  Or, initialize the count from another mapping
        of elements to their counts.

        >>> c = Counter()                           # a new, empty counter
        >>> c = Counter('gallahad')                 # a new counter from an iterable
        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping
        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args

        '''" code nil (reparse-symbol indented_block_body) [15763 16290])
                            ("super" code nil (reparse-symbol indented_block_body) [16299 16330])
                            ("self" code nil (reparse-symbol indented_block_body) [16339 16368]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15725 15729])
                            ("iterable" variable nil (reparse-symbol function_parameters) [15731 15739])
                            ("kwds" variable nil (reparse-symbol function_parameters) [15746 15752]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15712 16369])
                    ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16390 16394])
                            ("key" variable nil (reparse-symbol function_parameters) [16396 16399]))                          )
                        (reparse-symbol indented_block_body) [16374 16547])
                    ("most_common" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16568 16572])
                            ("n" variable nil (reparse-symbol function_parameters) [16574 16575]))                          )
                        (reparse-symbol indented_block_body) [16552 17061])
                    ("elements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17079 17083]))                          )
                        (reparse-symbol indented_block_body) [17066 17884])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [17964 17967])
                            ("iterable" variable nil (reparse-symbol function_parameters) [17969 17977])
                            ("v" variable nil (reparse-symbol function_parameters) [17979 17980]))                          )
                        (reparse-symbol indented_block_body) [17934 18243])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18259 18263])
                            ("iterable" variable nil (reparse-symbol function_parameters) [18265 18273])
                            ("kwds" variable nil (reparse-symbol function_parameters) [18280 18286]))                          )
                        (reparse-symbol indented_block_body) [18248 19789])
                    ("subtract" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19807 19811])
                            ("iterable" variable nil (reparse-symbol function_parameters) [19813 19821])
                            ("kwds" variable nil (reparse-symbol function_parameters) [19828 19834]))                          )
                        (reparse-symbol indented_block_body) [19794 20930])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20944 20948]))                          )
                        (reparse-symbol indented_block_body) [20935 21020])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21040 21044]))                          )
                        (reparse-symbol indented_block_body) [21025 21092])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21113 21117])
                            ("elem" variable nil (reparse-symbol function_parameters) [21119 21123]))                          )
                        (reparse-symbol indented_block_body) [21097 21284])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21302 21306]))                          )
                        (reparse-symbol indented_block_body) [21289 21512])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21869 21873])
                            ("other" variable nil (reparse-symbol function_parameters) [21875 21880]))                          )
                        (reparse-symbol indented_block_body) [21857 22430])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22447 22451])
                            ("other" variable nil (reparse-symbol function_parameters) [22453 22458]))                          )
                        (reparse-symbol indented_block_body) [22435 23037])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23053 23057])
                            ("other" variable nil (reparse-symbol function_parameters) [23059 23064]))                          )
                        (reparse-symbol indented_block_body) [23042 23711])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23728 23732])
                            ("other" variable nil (reparse-symbol function_parameters) [23734 23739]))                          )
                        (reparse-symbol indented_block_body) [23716 24235]))                  
                :type "class")
                nil [13652 24235])
            ("if" code nil nil [24237 25404]))          
      :file "collections.py"
      :pointmax 25404
      :fsize 25403
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax '((NAME 24862 . 24872) (PAREN_BLOCK 24872 . 24888) (NAME 24520 . 24530) (PAREN_BLOCK 24530 . 24546) (NAME 24087 . 24095) (IF 24104 . 24106) (ELSE 24127 . 24131) (NAME 23437 . 23445) (IF 23460 . 23462) (ELSE 23483 . 23487)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
\"\"\"" code nil nil [1 118])
            ("ST_MODE" variable nil nil [190 202])
            ("ST_INO" variable nil nil [203 215])
            ("ST_DEV" variable nil nil [216 228])
            ("ST_NLINK" variable nil nil [229 241])
            ("ST_UID" variable nil nil [242 254])
            ("ST_GID" variable nil nil [255 267])
            ("ST_SIZE" variable nil nil [268 280])
            ("ST_ATIME" variable nil nil [281 293])
            ("ST_MTIME" variable nil nil [294 306])
            ("ST_CTIME" variable nil nil [307 319])
            ("S_IMODE" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [363 367]))              ) nil [351 394])
            ("S_IFMT" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [406 410]))              ) nil [395 439])
            ("S_IFDIR" variable nil nil [536 554])
            ("S_IFCHR" variable nil nil [555 573])
            ("S_IFBLK" variable nil nil [574 592])
            ("S_IFREG" variable nil nil [593 611])
            ("S_IFIFO" variable nil nil [612 630])
            ("S_IFLNK" variable nil nil [631 649])
            ("S_IFSOCK" variable nil nil [650 668])
            ("S_ISDIR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [722 726]))              ) nil [710 764])
            ("S_ISCHR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [777 781]))              ) nil [765 819])
            ("S_ISBLK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [832 836]))              ) nil [820 874])
            ("S_ISREG" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [887 891]))              ) nil [875 929])
            ("S_ISFIFO" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [943 947]))              ) nil [930 985])
            ("S_ISLNK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [998 1002]))              ) nil [986 1040])
            ("S_ISSOCK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [1054 1058]))              ) nil [1041 1097])
            ("S_ISUID" variable nil nil [1127 1142])
            ("S_ISGID" variable nil nil [1143 1158])
            ("S_ENFMT" variable nil nil [1159 1176])
            ("S_ISVTX" variable nil nil [1177 1192])
            ("S_IREAD" variable nil nil [1193 1208])
            ("S_IWRITE" variable nil nil [1209 1225])
            ("S_IEXEC" variable nil nil [1226 1241])
            ("S_IRWXU" variable nil nil [1242 1257])
            ("S_IRUSR" variable nil nil [1258 1273])
            ("S_IWUSR" variable nil nil [1274 1289])
            ("S_IXUSR" variable nil nil [1290 1305])
            ("S_IRWXG" variable nil nil [1306 1321])
            ("S_IRGRP" variable nil nil [1322 1337])
            ("S_IWGRP" variable nil nil [1338 1353])
            ("S_IXGRP" variable nil nil [1354 1369])
            ("S_IRWXO" variable nil nil [1370 1385])
            ("S_IROTH" variable nil nil [1386 1401])
            ("S_IWOTH" variable nil nil [1402 1417])
            ("S_IXOTH" variable nil nil [1418 1433])
            ("UF_NODUMP" variable nil nil [1459 1484])
            ("UF_IMMUTABLE" variable nil nil [1485 1510])
            ("UF_APPEND" variable nil nil [1511 1536])
            ("UF_OPAQUE" variable nil nil [1537 1562])
            ("UF_NOUNLINK" variable nil nil [1563 1588])
            ("UF_COMPRESSED" variable nil nil [1589 1615])
            ("UF_HIDDEN" variable nil nil [1648 1673])
            ("SF_ARCHIVED" variable nil nil [1713 1738])
            ("SF_IMMUTABLE" variable nil nil [1739 1764])
            ("SF_APPEND" variable nil nil [1765 1790])
            ("SF_NOUNLINK" variable nil nil [1791 1816])
            ("SF_SNAPSHOT" variable nil nil [1817 1842]))          
      :file "stat.py"
      :pointmax 1843
      :fsize 1842
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Filename matching with shell patterns.

fnmatch(FILENAME, PATTERN) matches according to the local convention.
fnmatchcase(FILENAME, PATTERN) always takes case in account.

The functions operate by translating the pattern into a regular
expression.  They cache the compiled regular expressions for speed.

The function translate(PATTERN) returns a regular expression
corresponding to PATTERN.  (It does not compile it.)
\"\"\"" code nil nil [1 426])
            ("re" include nil nil [428 437])
            ("__all__" variable nil nil [439 498])
            ("_cache" variable nil nil [500 511])
            ("_MAXCACHE" variable nil nil [512 527])
            ("_purge" function (:documentation "Clear the pattern cache") nil [529 596])
            ("fnmatch" function
               (:documentation "Test whether FILENAME matches PATTERN.

    Patterns are Unix shell style:

    *       matches everything
    ?       matches any single character
    [seq]   matches any character in seq
    [!seq]  matches any char not in seq

    An initial period in FILENAME is not special.
    Both FILENAME and PATTERN are first case-normalized
    if the operating system requires it.
    If you don't want this, use fnmatchcase(FILENAME, PATTERN).
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [609 613])
                    ("pat" variable nil (reparse-symbol function_parameters) [615 618]))                  )
                nil [597 1192])
            ("filter" function
               (:documentation "Return the subset of the list NAMES that match PAT"
                :arguments 
                  ( ("names" variable nil (reparse-symbol function_parameters) [1204 1209])
                    ("pat" variable nil (reparse-symbol function_parameters) [1211 1214]))                  )
                nil [1193 1856])
            ("fnmatchcase" function
               (:documentation "Test whether FILENAME matches PATTERN, including case.

    This is a version of fnmatch() which doesn't case-normalize
    its arguments.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1873 1877])
                    ("pat" variable nil (reparse-symbol function_parameters) [1879 1882]))                  )
                nil [1857 2244])
            ("translate" function
               (:documentation "Translate a shell PATTERN to a regular expression.

    There is no way to quote meta-characters.
    "
                :arguments 
                  ( ("pat" variable nil (reparse-symbol function_parameters) [2259 2262]))                  )
                nil [2245 3240]))          
      :file "fnmatch.py"
      :pointmax 3240
      :fsize 3239
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Keywords (from \"graminit.c\")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    python Lib/keyword.py
\"\"\"" code nil nil [24 279])
            ("__all__" variable nil nil [281 314])
            ("kwlist" variable nil nil [316 879])
            ("iskeyword" variable nil nil [881 923])
            ("main" function nil nil [925 1955])
            ("if" code nil nil [1956 1994]))          
      :file "keyword.py"
      :pointmax 1994
      :fsize 1993
      :lastmodtime '(21651 11976 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
\"\"\"" code nil nil [28 1297])
            ("__about__" variable nil nil [1381 6118])
            ("__all__" variable nil nil [6120 6239])
            ("itertools" include nil nil [6241 6308])
            ("operator" include nil nil [6309 6340])
            ("bisect" include nil nil [6341 6354])
            ("cmp_lt" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6367 6368])
                ("y" variable nil (reparse-symbol function_parameters) [6370 6371]))              ) nil [6356 6533])
            ("heappush" function
               (:documentation "Push item onto heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6547 6551])
                    ("item" variable nil (reparse-symbol function_parameters) [6553 6557]))                  )
                nil [6534 6681])
            ("heappop" function
               (:documentation "Pop the smallest item off the heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6694 6698]))                  )
                nil [6682 7010])
            ("heapreplace" function
               (:documentation "Pop and return the current smallest value, and add the new item.

    This is more efficient than heappop() followed by heappush(), and can be
    more appropriate when using a fixed-size heap.  Note that the value
    returned may be larger than item!  That constrains reasonable uses of
    this routine unless written as part of a conditional replacement:

        if item > heap[0]:
            item = heapreplace(heap, item)
    "
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7027 7031])
                    ("item" variable nil (reparse-symbol function_parameters) [7033 7037]))                  )
                nil [7011 7624])
            ("heappushpop" function
               (:documentation "Fast version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7641 7645])
                    ("item" variable nil (reparse-symbol function_parameters) [7647 7651]))                  )
                nil [7625 7832])
            ("heapify" function
               (:documentation "Transform list into a heap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7845 7846]))                  )
                nil [7833 8361])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [8375 8376])
                    ("iterable" variable nil (reparse-symbol function_parameters) [8378 8386]))                  )
                nil [8362 8786])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [8801 8802])
                    ("iterable" variable nil (reparse-symbol function_parameters) [8804 8812]))                  )
                nil [8787 9992])
            ("_siftdown" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [10176 10180])
                ("startpos" variable nil (reparse-symbol function_parameters) [10182 10190])
                ("pos" variable nil (reparse-symbol function_parameters) [10192 10195]))              ) nil [10162 11026])
            ("_siftup" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12642 12646])
                ("pos" variable nil (reparse-symbol function_parameters) [12648 12651]))              ) nil [12630 13370])
            ("try" code nil nil [13408 13467])
            ("merge" function (:arguments 
              ( ("iterables" variable nil (reparse-symbol function_parameters) [13478 13488]))              ) nil [13468 14663])
            ("_nsmallest" variable nil nil [14742 14764])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [14779 14780])
                    ("iterable" variable nil (reparse-symbol function_parameters) [14782 14790])
                    ("key" variable nil (reparse-symbol function_parameters) [14792 14795]))                  )
                nil [14765 15916])
            ("_nlargest" variable nil nil [15917 15937])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [15951 15952])
                    ("iterable" variable nil (reparse-symbol function_parameters) [15954 15962])
                    ("key" variable nil (reparse-symbol function_parameters) [15964 15967]))                  )
                nil [15938 17114])
            ("if" code nil nil [17115 17396]))          
      :file "heapq.py"
      :pointmax 17396
      :fsize 17395
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax '((RETURN 6476 . 6482) (IF 6491 . 6493) (ELSE 6515 . 6519)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Bisection algorithms.\"\"\"" code nil nil [1 28])
            ("insort_right" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [47 48])
                    ("x" variable nil (reparse-symbol function_parameters) [50 51])
                    ("lo" variable nil (reparse-symbol function_parameters) [53 55])
                    ("hi" variable nil (reparse-symbol function_parameters) [59 61]))                  )
                nil [30 547])
            ("insort" variable nil nil [548 569])
            ("bisect_right" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [615 616])
                    ("x" variable nil (reparse-symbol function_parameters) [618 619])
                    ("lo" variable nil (reparse-symbol function_parameters) [621 623])
                    ("hi" variable nil (reparse-symbol function_parameters) [627 629]))                  )
                nil [598 1254])
            ("bisect" variable nil nil [1255 1276])
            ("insort_left" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1321 1322])
                    ("x" variable nil (reparse-symbol function_parameters) [1324 1325])
                    ("lo" variable nil (reparse-symbol function_parameters) [1327 1329])
                    ("hi" variable nil (reparse-symbol function_parameters) [1333 1335]))                  )
                nil [1305 1819])
            ("bisect_left" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1837 1838])
                    ("x" variable nil (reparse-symbol function_parameters) [1840 1841])
                    ("lo" variable nil (reparse-symbol function_parameters) [1843 1845])
                    ("hi" variable nil (reparse-symbol function_parameters) [1849 1851]))                  )
                nil [1821 2476])
            ("try" code nil nil [2536 2596]))          
      :file "bisect.py"
      :pointmax 2596
      :fsize 2595
      :lastmodtime '(21651 11953 0 0)
      :unmatched-syntax nil))
  :file "!usr!lib!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
