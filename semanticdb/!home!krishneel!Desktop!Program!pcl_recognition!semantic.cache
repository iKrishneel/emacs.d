;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c++-mode
      :tags 
        '( ("pcl/io/pcd_io.h" include (:system-flag t) nil [1 27])
            ("pcl/point_cloud.h" include (:system-flag t) nil [28 56])
            ("pcl/correspondence.h" include (:system-flag t) nil [57 88])
            ("pcl/features/normal_3d_omp.h" include (:system-flag t) nil [89 128])
            ("pcl/features/shot_omp.h" include (:system-flag t) nil [129 163])
            ("pcl/features/board.h" include (:system-flag t) nil [164 195])
            ("pcl/keypoints/uniform_sampling.h" include (:system-flag t) nil [196 239])
            ("pcl/recognition/cg/hough_3d.h" include (:system-flag t) nil [240 280])
            ("pcl/recognition/cg/geometric_consistency.h" include (:system-flag t) nil [281 334])
            ("pcl/visualization/pcl_visualizer.h" include (:system-flag t) nil [335 380])
            ("pcl/kdtree/kdtree_flann.h" include (:system-flag t) nil [381 417])
            ("pcl/kdtree/impl/kdtree_flann.hpp" include (:system-flag t) nil [418 461])
            ("pcl/common/transforms.h" include (:system-flag t) nil [462 496])
            ("pcl/console/parse.h" include (:system-flag t) nil [497 527])
            ("PointType" type
               (:typedef ("pcl::PointXYZRGBA" type (:type "class") nil nil)
                :type "typedef")
                nil [529 565])
            ("NormalType" type
               (:typedef ("pcl::Normal" type (:type "class") nil nil)
                :type "typedef")
                nil [566 597])
            ("RFType" type
               (:typedef ("pcl::ReferenceFrame" type (:type "class") nil nil)
                :type "typedef")
                nil [598 633])
            ("DescriptorType" type
               (:typedef ("pcl::SHOT352" type (:type "class") nil nil)
                :type "typedef")
                nil [634 670])
            ("model_filename_" variable (:type ("std::string" type (:type "class") nil nil)) nil [672 700])
            ("scene_filename_" variable (:type ("std::string" type (:type "class") nil nil)) nil [701 729])
            ("show_keypoints_" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("false" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [772 778]))                  
                :type "bool")
                nil [750 779])
            ("show_correspondences_" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("false" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [808 814]))                  
                :type "bool")
                nil [780 815])
            ("use_cloud_resolution_" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("false" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [844 850]))                  
                :type "bool")
                nil [816 851])
            ("use_hough_" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("true" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [869 874]))                  
                :type "bool")
                nil [852 875])
            ("model_ss_" function
               (:prototype-flag t
                :type "float")
                nil [876 900])
            ("scene_ss_" function
               (:prototype-flag t
                :type "float")
                nil [901 925])
            ("rf_rad_" function
               (:prototype-flag t
                :type "float")
                nil [926 949])
            ("descr_rad_" function
               (:prototype-flag t
                :type "float")
                nil [950 975])
            ("cg_size_" function
               (:prototype-flag t
                :type "float")
                nil [976 999])
            ("cg_thresh_" function
               (:prototype-flag t
                :type "float")
                nil [1000 1024])
            ("showHelp" function
               (:arguments 
                  ( ("filename" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [1041 1056]))                  
                :type "void")
                nil [1026 2936])
            ("parseCommandLine" function
               (:arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [2961 2970])
                    ("argv" variable
                       (:pointer 1
                        :dereference 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [2971 2984]))                  
                :type "void")
                nil [2938 4637])
            ("computeCloudResolution" function
               (:arguments 
                  ( ("cloud" variable
                       (:reference 1
                        :constant-flag t
                        :type ("pcl::PointCloud::ConstPtr" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4670 4720]))                  
                :type "double")
                nil [4639 5329])
            ("main" function
               (:arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [5341 5350])
                    ("argv" variable
                       (:pointer 1
                        :dereference 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [5351 5364]))                  
                :type "int")
                nil [5331 15994]))          
      :file "correspondence_grouping.cpp"
      :pointmax 15995
      :fsize 15994
      :lastmodtime '(21892 65281 415916 228000)
      :unmatched-syntax nil))
  :file "!home!krishneel!Desktop!Program!pcl_recognition!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
