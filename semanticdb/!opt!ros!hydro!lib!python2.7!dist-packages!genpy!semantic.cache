;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Support library for Python autogenerated message files. This defines
the Message base class used by genpy as well as support
libraries for type checking and retrieving message classes by type
name.
\"\"\"" code nil nil [1606 1811])
            ("math" include nil nil [1813 1824])
            ("itertools" include nil nil [1825 1841])
            ("struct" include nil nil [1842 1855])
            ("sys" include nil nil [1856 1866])
            ("genmsg" include nil nil [1868 1881])
            ("is_simple" include nil nil [1894 1910])
            ("TVal" include nil nil [1925 1952])
            ("Duration" include nil nil [1925 1952])
            ("Time" include nil nil [1925 1952])
            ("if" code nil nil [2159 2196])
            ("struct_I" variable nil nil [2197 2227])
            ("isstring" function
               (:documentation "Small helper version to check an object is a string in a way that works
    for both Python 2 and 3
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2242 2243]))                  )
                nil [2229 2467])
            ("MessageException" type
               (:documentation "
    Base exception type for errors in genmsg routines
    "
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2577 2581]))                  
                :type "class")
                nil [2468 2582])
            ("DeserializationError" type
               (:documentation "Message deserialization error"
                :superclasses ("MessageException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2673 2677]))                  
                :type "class")
                nil [2583 2678])
            ("SerializationError" type
               (:documentation "Message serialization error"
                :superclasses ("MessageException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2765 2769]))                  
                :type "class")
                nil [2679 2770])
            ("strify_message" function
               (:documentation "
    Convert value to string representation
    :param val: to convert to string representation. Most likely a Message.  ``Value``
    :param indent: indentation. If indent is set, then the return value will have a leading \\n, ``str``
    :param time_offset: if not None, time fields will be displayed
      as deltas from  time_offset, ``Time``

    :param current_time: currently not used. Only provided for API
      compatibility. current_time passes in the current time with
      respect to the message, ``Time``
    :param field_filter: filter the fields that are strified for Messages, ``fn(Message)->iter(str)``
    :returns: string (YAML) representation of message, ``str``
    "
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [2873 2876])
                    ("indent" variable nil (reparse-symbol function_parameters) [2878 2884])
                    ("time_offset" variable nil (reparse-symbol function_parameters) [2889 2900])
                    ("current_time" variable nil (reparse-symbol function_parameters) [2907 2919])
                    ("field_filter" variable nil (reparse-symbol function_parameters) [2926 2938]))                  )
                nil [2854 5497])
            ("_convert_getattr" function
               (:documentation "
    Convert atttribute types on the fly, if necessary.  This is mainly
    to convert uint8[] fields back to an array type.
    "
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [5519 5522])
                    ("f" variable nil (reparse-symbol function_parameters) [5524 5525])
                    ("t" variable nil (reparse-symbol function_parameters) [5527 5528]))                  )
                nil [5498 5807])
            ("_widths" variable nil nil [6090 6248])
            ("check_type" function
               (:documentation "
    Dynamic type checker that maps ROS .msg types to python types and
    verifies the python value.  check_type() is not designed to be
    fast and is targeted at error diagnosis. This type checker is not
    designed to run fast and is meant only for error diagnosis.
    
    :param field_name: ROS .msg field name, ``str``
    :param field_type: ROS .msg field type, ``str``
    :param field_val: field value, ``Any``
    :raises: :exc:`SerializationError` If typecheck fails
    "
                :arguments 
                  ( ("field_name" variable nil (reparse-symbol function_parameters) [6265 6275])
                    ("field_type" variable nil (reparse-symbol function_parameters) [6277 6287])
                    ("field_val" variable nil (reparse-symbol function_parameters) [6289 6298]))                  )
                nil [6250 10420])
            ("Message" type
               (:documentation "Base class of Message data classes auto-generated from msg files. "
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [10883 10917])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Create a new Message instance. There are multiple ways of
        initializing Message instances, either using a 1-to-1
        correspondence between constructor arguments and message
        fields (*args), or using Python \"keyword\" arguments (**kwds) to initialize named field
        and leave the rest with default values.
        \"\"\"" code nil (reparse-symbol indented_block_body) [10970 11321])
                            ("if" code nil (reparse-symbol indented_block_body) [11330 11439])
                            ("if" code nil (reparse-symbol indented_block_body) [11447 12325]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10940 10944])
                            ("args" variable nil (reparse-symbol function_parameters) [10946 10951])
                            ("kwds" variable nil (reparse-symbol function_parameters) [10953 10959]))                          
                        :documentation "
        Create a new Message instance. There are multiple ways of
        initializing Message instances, either using a 1-to-1
        correspondence between constructor arguments and message
        fields (*args), or using Python \"keyword\" arguments (**kwds) to initialize named field
        and leave the rest with default values.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10927 12325])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12347 12351]))                          
                        :documentation "
        support for Python pickling
        ")
                        (reparse-symbol indented_block_body) [12330 12472])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12494 12498])
                            ("state" variable nil (reparse-symbol function_parameters) [12500 12505]))                          
                        :documentation "
        support for Python pickling
        ")
                        (reparse-symbol indented_block_body) [12477 12652])
                    ("_get_types" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12672 12676]))                          )
                        (reparse-symbol indented_block_body) [12657 12724])
                    ("_check_types" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12745 12749])
                            ("exc" variable nil (reparse-symbol function_parameters) [12751 12754]))                          
                        :documentation "
        Perform dynamic type-checking of Message fields. This is performance intensive
        and is meant for post-error diagnosis
        :param exc: underlying exception that gave cause for type check, ``Exception``
        :raises: exc:`genpy.SerializationError` If typecheck fails
        ")
                        (reparse-symbol indented_block_body) [12728 13314])
                    ("serialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13333 13337])
                            ("buff" variable nil (reparse-symbol function_parameters) [13339 13343]))                          
                        :documentation "
        Serialize data into buffer
        :param buff: buffer, ``StringIO``
        ")
                        (reparse-symbol indented_block_body) [13319 13460])
                    ("deserialize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13480 13484])
                            ("str" variable nil (reparse-symbol function_parameters) [13486 13489]))                          
                        :documentation "
        Deserialize data in str into this instance
        :param str: serialized data, ``str``
        ")
                        (reparse-symbol indented_block_body) [13464 13625])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13642 13646]))                          )
                        (reparse-symbol indented_block_body) [13629 13685])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13701 13705]))                          )
                        (reparse-symbol indented_block_body) [13689 13744])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13781 13785])
                            ("other" variable nil (reparse-symbol function_parameters) [13787 13792]))                          )
                        (reparse-symbol indented_block_body) [13770 14372]))                  
                :type "class")
                nil [10492 14372])
            ("get_printable_message_args" function
               (:documentation "
    Get string representation of msg arguments
    :param msg: msg message to fill, ``Message``
    :param prefix: field name prefix (for verbose printing), ``str``
    :returns: printable representation of  msg args, ``str``
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [14409 14412])
                    ("buff" variable nil (reparse-symbol function_parameters) [14414 14418])
                    ("prefix" variable nil (reparse-symbol function_parameters) [14425 14431]))                  )
                nil [14378 15223])
            ("_fill_val" function
               (:documentation "
    Subroutine of L{_fill_message_args()}. Sets a particular field on a message
    :param f: field name, ``str``
    :param v: field value
    :param keys: keys to use as substitute values for messages and timestamps, ``dict``
    :raises: exc:`MessageException`
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [15238 15241])
                    ("f" variable nil (reparse-symbol function_parameters) [15243 15244])
                    ("v" variable nil (reparse-symbol function_parameters) [15246 15247])
                    ("keys" variable nil (reparse-symbol function_parameters) [15249 15253])
                    ("prefix" variable nil (reparse-symbol function_parameters) [15255 15261]))                  )
                nil [15224 18783])
            ("_fill_message_args" function
               (:documentation "
    Populate message with specified args.
    
    :param msg: message to fill, ``Message``
    :param msg_args: list of arguments to set fields to, ``[args]``
    :param keys: keys to use as substitute values for messages and timestamps.  ``dict``
    :param prefix: field name prefix (for verbose printing), ``str``
    :returns: unused/leftover message arguments.  ``[args]``
    :raise :exc:`MessageException` If not enough message arguments to fill message
    :raises: :exc:`ValueError` If msg or msg_args is not of correct type
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [18816 18819])
                    ("msg_args" variable nil (reparse-symbol function_parameters) [18821 18829])
                    ("keys" variable nil (reparse-symbol function_parameters) [18831 18835])
                    ("prefix" variable nil (reparse-symbol function_parameters) [18837 18843]))                  )
                nil [18793 20488])
            ("fill_message_args" function
               (:documentation "
    Populate message with specified args. Args are assumed to be a
    list of arguments from a command-line YAML parser. See
    http://www.ros.org/wiki/ROS/YAMLCommandLine for specification on
    how messages are filled.

    fill_message_args also takes in an optional 'keys' dictionary
    which contain substitute values for message and time types. These
    values must be of the correct instance type, i.e. a Message, Time,
    or Duration. In a string key is encountered with these types, the
    value from the keys dictionary will be used instead. This is
    mainly used to provide values for the 'now' timestamp.

    :param msg: message to fill, ``Message``
    :param msg_args: list of arguments to set fields to, or 
      If None, msg_args will be made an empty list., ``[args]``
    :param keys: keys to use as substitute values for messages and timestamps, ``dict``
    :raises: :exc:`MessageException` If not enough/too many message arguments to fill message
    "
                :arguments 
                  ( ("msg" variable nil (reparse-symbol function_parameters) [20511 20514])
                    ("msg_args" variable nil (reparse-symbol function_parameters) [20516 20524])
                    ("keys" variable nil (reparse-symbol function_parameters) [20526 20530]))                  )
                nil [20489 22401])
            ("_get_message_or_service_class" function
               (:documentation "
    Utility for retrieving message/service class instances. Used by
    get_message_class and get_service_class. 
    :param type_str: 'msg' or 'srv', ``str``
    :param message_type: type name of message/service, ``str``
    :returns: Message/Service  for message/service type or None, ``class``
    :raises: :exc:`ValueError` If message_type is invalidly specified
    "
                :arguments 
                  ( ("type_str" variable nil (reparse-symbol function_parameters) [22436 22444])
                    ("message_type" variable nil (reparse-symbol function_parameters) [22446 22458])
                    ("reload_on_error" variable nil (reparse-symbol function_parameters) [22460 22475]))                  )
                nil [22402 24398])
            ("_message_class_cache" variable nil nil [24438 24463])
            ("get_message_class" function
               (:documentation "
    Get the message class. NOTE: this function maintains a
    local cache of results to improve performance.
    :param message_type: type name of message, ``str``
    :param reload_on_error: (optional). Attempt to reload the Python
      module if unable to load message the first time. Defaults to
      False. This is necessary if messages are built after the first load.
    :returns: Message class for message/service type, ``Message class``
    :raises :exc:`ValueError`: if  message_type is invalidly specified
    "
                :arguments 
                  ( ("message_type" variable nil (reparse-symbol function_parameters) [24487 24499])
                    ("reload_on_error" variable nil (reparse-symbol function_parameters) [24501 24516]))                  )
                nil [24465 25325])
            ("_service_class_cache" variable nil nil [25357 25382])
            ("get_service_class" function
               (:documentation "
    Get the service class. NOTE: this function maintains a
    local cache of results to improve performance.
    :param service_type: type name of service, ``str``
    :param reload_on_error: (optional). Attempt to reload the Python
      module if unable to load message the first time. Defaults to
      False. This is necessary if messages are built after the first load.
    :returns: Service class for service type, ``Service class``
    :raises :exc:`Exception` If service_type is invalidly specified
    "
                :arguments 
                  ( ("service_type" variable nil (reparse-symbol function_parameters) [25406 25418])
                    ("reload_on_error" variable nil (reparse-symbol function_parameters) [25420 25435]))                  )
                nil [25384 26217]))          
      :file "message.py"
      :pointmax 26218
      :fsize 26217
      :lastmodtime '(21389 8226 0 0)
      :unmatched-syntax '((FROM 1911 . 1915) (PERIOD 1916 . 1917) (FROM 1883 . 1887) (PERIOD 1888 . 1889))))
  :file "!opt!ros!hydro!lib!python2.7!dist-packages!genpy!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
